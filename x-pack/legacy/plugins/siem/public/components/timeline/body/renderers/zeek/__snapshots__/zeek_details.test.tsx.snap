// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ZeekDetails rendering it renders the default ZeekDetails 1`] = `
<ZeekDetails
  browserFields={
    Object {
      "agent": Object {
        "fields": Object {
          "agent.ephemeral_id": Object {
            "aggregatable": true,
            "category": "agent",
            "description": "Ephemeral identifier of this agent (if one exists). This id normally changes across restarts, but \`agent.id\` does not.",
            "example": "8a4f500f",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "agent.ephemeral_id",
            "searchable": true,
            "type": "string",
          },
          "agent.hostname": Object {
            "aggregatable": true,
            "category": "agent",
            "description": null,
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "agent.hostname",
            "searchable": true,
            "type": "string",
          },
          "agent.id": Object {
            "aggregatable": true,
            "category": "agent",
            "description": "Unique identifier of this agent (if one exists). Example: For Beats this would be beat.id.",
            "example": "8a4f500d",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "agent.id",
            "searchable": true,
            "type": "string",
          },
          "agent.name": Object {
            "aggregatable": true,
            "category": "agent",
            "description": "Name of the agent. This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from. If no name is given, the name is often left empty.",
            "example": "foo",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "agent.name",
            "searchable": true,
            "type": "string",
          },
        },
      },
      "auditd": Object {
        "fields": Object {
          "auditd.data.a0": Object {
            "aggregatable": true,
            "category": "auditd",
            "description": null,
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
            ],
            "name": "auditd.data.a0",
            "searchable": true,
            "type": "string",
          },
          "auditd.data.a1": Object {
            "aggregatable": true,
            "category": "auditd",
            "description": null,
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
            ],
            "name": "auditd.data.a1",
            "searchable": true,
            "type": "string",
          },
          "auditd.data.a2": Object {
            "aggregatable": true,
            "category": "auditd",
            "description": null,
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
            ],
            "name": "auditd.data.a2",
            "searchable": true,
            "type": "string",
          },
        },
      },
      "base": Object {
        "fields": Object {
          "@timestamp": Object {
            "aggregatable": true,
            "category": "base",
            "description": "Date/time when the event originated. For log events this is the date/time when the event was generated, and not when it was read. Required field for all events.",
            "example": "2016-05-23T08:05:34.853Z",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "@timestamp",
            "searchable": true,
            "type": "date",
          },
        },
      },
      "client": Object {
        "fields": Object {
          "client.address": Object {
            "aggregatable": true,
            "category": "client",
            "description": "Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the \`.address\` field. Then it should be duplicated to \`.ip\` or \`.domain\`, depending on which one it is.",
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "client.address",
            "searchable": true,
            "type": "string",
          },
          "client.bytes": Object {
            "aggregatable": true,
            "category": "client",
            "description": "Bytes sent from the client to the server.",
            "example": "184",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "client.bytes",
            "searchable": true,
            "type": "number",
          },
          "client.domain": Object {
            "aggregatable": true,
            "category": "client",
            "description": "Client domain.",
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "client.domain",
            "searchable": true,
            "type": "string",
          },
          "client.geo.country_iso_code": Object {
            "aggregatable": true,
            "category": "client",
            "description": "Country ISO code.",
            "example": "CA",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "client.geo.country_iso_code",
            "searchable": true,
            "type": "string",
          },
        },
      },
      "cloud": Object {
        "fields": Object {
          "cloud.account.id": Object {
            "aggregatable": true,
            "category": "cloud",
            "description": "The cloud account or organization id used to identify different entities in a multi-tenant environment. Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.",
            "example": "666777888999",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "cloud.account.id",
            "searchable": true,
            "type": "string",
          },
          "cloud.availability_zone": Object {
            "aggregatable": true,
            "category": "cloud",
            "description": "Availability zone in which this host is running.",
            "example": "us-east-1c",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "cloud.availability_zone",
            "searchable": true,
            "type": "string",
          },
        },
      },
      "container": Object {
        "fields": Object {
          "container.id": Object {
            "aggregatable": true,
            "category": "container",
            "description": "Unique container id.",
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "container.id",
            "searchable": true,
            "type": "string",
          },
          "container.image.name": Object {
            "aggregatable": true,
            "category": "container",
            "description": "Name of the image the container was built on.",
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "container.image.name",
            "searchable": true,
            "type": "string",
          },
          "container.image.tag": Object {
            "aggregatable": true,
            "category": "container",
            "description": "Container image tag.",
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "container.image.tag",
            "searchable": true,
            "type": "string",
          },
        },
      },
      "destination": Object {
        "fields": Object {
          "destination.address": Object {
            "aggregatable": true,
            "category": "destination",
            "description": "Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the \`.address\` field. Then it should be duplicated to \`.ip\` or \`.domain\`, depending on which one it is.",
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "destination.address",
            "searchable": true,
            "type": "string",
          },
          "destination.bytes": Object {
            "aggregatable": true,
            "category": "destination",
            "description": "Bytes sent from the destination to the source.",
            "example": "184",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "destination.bytes",
            "searchable": true,
            "type": "number",
          },
          "destination.domain": Object {
            "aggregatable": true,
            "category": "destination",
            "description": "Destination domain.",
            "example": null,
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "destination.domain",
            "searchable": true,
            "type": "string",
          },
          "destination.ip": Object {
            "aggregatable": true,
            "category": "destination",
            "description": "IP address of the destination. Can be one or multiple IPv4 or IPv6 addresses.",
            "example": "",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "destination.ip",
            "searchable": true,
            "type": "ip",
          },
          "destination.port": Object {
            "aggregatable": true,
            "category": "destination",
            "description": "Port of the destination.",
            "example": "",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "destination.port",
            "searchable": true,
            "type": "long",
          },
        },
      },
      "event": Object {
        "fields": Object {
          "event.end": Object {
            "aggregatable": true,
            "category": "event",
            "description": "event.end contains the date when the event ended or when the activity was last observed.",
            "example": null,
            "format": "",
            "indexes": Array [
              "apm-*-transaction*",
              "auditbeat-*",
              "endgame-*",
              "filebeat-*",
              "packetbeat-*",
              "winlogbeat-*",
            ],
            "name": "event.end",
            "searchable": true,
            "type": "date",
          },
        },
      },
      "source": Object {
        "fields": Object {
          "source.ip": Object {
            "aggregatable": true,
            "category": "source",
            "description": "IP address of the source. Can be one or multiple IPv4 or IPv6 addresses.",
            "example": "",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "source.ip",
            "searchable": true,
            "type": "ip",
          },
          "source.port": Object {
            "aggregatable": true,
            "category": "source",
            "description": "Port of the source.",
            "example": "",
            "format": "",
            "indexes": Array [
              "auditbeat",
              "filebeat",
              "packetbeat",
            ],
            "name": "source.port",
            "searchable": true,
            "type": "long",
          },
        },
      },
    }
  }
  data={
    Object {
      "_id": "4",
      "destination": Object {
        "ip": Array [
          "192.168.0.3",
        ],
        "port": Array [
          6343,
        ],
      },
      "event": Object {
        "category": Array [
          "Attempted Administrator Privilege Gain",
        ],
        "id": Array [
          "4",
        ],
        "module": Array [
          "suricata",
        ],
        "severity": Array [
          1,
        ],
        "type": Array [
          "Alert",
        ],
      },
      "geo": Object {
        "country_iso_code": Array [
          "xx",
        ],
        "region_name": Array [
          "xx",
        ],
      },
      "host": Object {
        "ip": Array [
          "192.168.0.1",
        ],
        "name": Array [
          "suricata",
        ],
      },
      "source": Object {
        "ip": Array [
          "192.168.0.3",
        ],
        "port": Array [
          53,
        ],
      },
      "suricata": Object {
        "eve": Object {
          "alert": Object {
            "signature": Array [
              "ET EXPLOIT NETGEAR WNR2000v5 hidden_lang_avi Stack Overflow (CVE-2016-10174)",
            ],
            "signature_id": Array [
              4,
            ],
          },
          "flow_id": Array [
            4,
          ],
          "proto": Array [
            "",
          ],
        },
      },
      "timestamp": "2018-11-08T19:03:25.937Z",
      "user": Object {
        "id": Array [
          "4",
        ],
        "name": Array [
          "jenny.jones",
        ],
      },
    }
  }
  timelineId="test"
/>
`;

exports[`ZeekDetails rendering it returns zeek.files if the data does contain zeek.files data 1`] = `
.c3,
.c3::before,
.c3::after {
  -webkit-transition: background 150ms ease, color 150ms ease;
  transition: background 150ms ease, color 150ms ease;
}

.c3 {
  border-radius: 2px;
  padding: 0 4px 0 8px;
  position: relative;
  z-index: 0 !important;
}

.c3::before {
  background-image: linear-gradient( 135deg, #535966 25%, transparent 25% ), linear-gradient( -135deg, #535966 25%, transparent 25% ), linear-gradient( 135deg, transparent 75%, #535966 75% ), linear-gradient( -135deg, transparent 75%, #535966 75% );
  background-position: 0 0,1px 0,1px -1px,0px 1px;
  background-size: 2px 2px;
  bottom: 2px;
  content: '';
  display: block;
  left: 2px;
  position: absolute;
  top: 2px;
  width: 4px;
}

.c3:hover,
.c3:hover .euiBadge,
.c3:hover .euiBadge__text {
  cursor: move;
  cursor: -webkit-grab;
  cursor: -moz-grab;
  cursor: grab;
}

.event-column-view:hover .c3,
tr:hover .c3 {
  background-color: #343741;
}

.event-column-view:hover .c3::before,
tr:hover .c3::before {
  background-image: linear-gradient( 135deg, #98a2b3 25%, transparent 25% ), linear-gradient( -135deg, #98a2b3 25%, transparent 25% ), linear-gradient( 135deg, transparent 75%, #98a2b3 75% ), linear-gradient( -135deg, transparent 75%, #98a2b3 75% );
}

.c3:hover,
.c3:focus,
.event-column-view:hover .c3:hover,
.event-column-view:focus .c3:focus,
tr:hover .c3:hover,
tr:hover .c3:focus {
  background-color: #1ba9f5;
}

.c3:hover,
.c3:focus,
.event-column-view:hover .c3:hover,
.event-column-view:focus .c3:focus,
tr:hover .c3:hover,
tr:hover .c3:focus,
.c3:hover a,
.c3:focus a,
.event-column-view:hover .c3:hover a,
.event-column-view:focus .c3:focus a,
tr:hover .c3:hover a,
tr:hover .c3:focus a,
.c3:hover a:hover,
.c3:focus a:hover,
.event-column-view:hover .c3:hover a:hover,
.event-column-view:focus .c3:focus a:hover,
tr:hover .c3:hover a:hover,
tr:hover .c3:focus a:hover {
  color: #1d1e24;
}

.c3:hover::before,
.c3:focus::before,
.event-column-view:hover .c3:hover::before,
.event-column-view:focus .c3:focus::before,
tr:hover .c3:hover::before,
tr:hover .c3:focus::before {
  background-image: linear-gradient( 135deg, #1d1e24 25%, transparent 25% ), linear-gradient( -135deg, #1d1e24 25%, transparent 25% ), linear-gradient( 135deg, transparent 75%, #1d1e24 75% ), linear-gradient( -135deg, transparent 75%, #1d1e24 75% );
}

.c2 {
  display: inline-block;
  max-width: 100%;
}

.c2 [data-rbd-placeholder-context-id] {
  display: none !important;
}

.c4 > span.euiToolTipAnchor {
  display: block;
}

.c8 {
  margin: 0 2px;
}

.c7 {
  margin-top: 3px;
}

.c6 {
  margin-right: 10px;
}

.c1 {
  margin-left: 3px;
}

.c5 {
  margin-left: 6px;
}

.c0 {
  margin: 5px 0;
}

<Memo(TestProvidersComponent)>
  <I18nProvider>
    <IntlProvider
      defaultLocale="en"
      formats={
        Object {
          "date": Object {
            "full": Object {
              "day": "numeric",
              "month": "long",
              "weekday": "long",
              "year": "numeric",
            },
            "long": Object {
              "day": "numeric",
              "month": "long",
              "year": "numeric",
            },
            "medium": Object {
              "day": "numeric",
              "month": "short",
              "year": "numeric",
            },
            "short": Object {
              "day": "numeric",
              "month": "numeric",
              "year": "2-digit",
            },
          },
          "number": Object {
            "currency": Object {
              "style": "currency",
            },
            "percent": Object {
              "style": "percent",
            },
          },
          "relative": Object {
            "days": Object {
              "units": "day",
            },
            "hours": Object {
              "units": "hour",
            },
            "minutes": Object {
              "units": "minute",
            },
            "months": Object {
              "units": "month",
            },
            "seconds": Object {
              "units": "second",
            },
            "years": Object {
              "units": "year",
            },
          },
          "time": Object {
            "full": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "long": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "medium": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
            },
            "short": Object {
              "hour": "numeric",
              "minute": "numeric",
            },
          },
        }
      }
      locale="en"
      messages={Object {}}
      textComponent={Symbol(react.fragment)}
    >
      <PseudoLocaleWrapper>
        <Component>
          <Provider
            services={
              Object {
                "advancedSettings": Object {
                  "component": Object {
                    "componentType": Object {
                      "PAGE_FOOTER_COMPONENT": "advanced_settings_page_footer",
                      "PAGE_SUBTITLE_COMPONENT": "advanced_settings_page_subtitle",
                      "PAGE_TITLE_COMPONENT": "advanced_settings_page_title",
                    },
                    "get": [MockFunction],
                  },
                },
                "application": Object {
                  "capabilities": Object {
                    "catalogue": Object {},
                    "management": Object {},
                    "navLinks": Object {},
                  },
                  "currentAppId$": Observable {
                    "_isScalar": false,
                    "source": Subject {
                      "_isScalar": false,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [],
                      "thrownError": null,
                    },
                  },
                  "getUrlForApp": [MockFunction],
                  "navigateToApp": [MockFunction],
                  "registerMountContext": [MockFunction],
                },
                "charts": Object {
                  "colors": Object {
                    "createColorLookupFunction": [MockFunction],
                  },
                  "theme": Object {
                    "chartsDefaultTheme": Object {
                      "areaSeriesStyle": Object {
                        "area": Object {
                          "opacity": 0.3,
                        },
                        "line": Object {
                          "strokeWidth": 2,
                        },
                        "point": Object {
                          "fill": "rgba(255, 255, 255, 1)",
                          "radius": 3,
                          "strokeWidth": 2,
                          "visible": false,
                        },
                      },
                      "axes": Object {
                        "axisLineStyle": Object {
                          "stroke": "rgba(239, 241, 244, 1)",
                        },
                        "axisTitleStyle": Object {
                          "fill": "rgba(52, 55, 65, 1)",
                          "fontFamily": "'Inter UI', -apple-system, BlinkMacSystemFont,
  'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                          "fontSize": 12,
                          "padding": 10,
                        },
                        "gridLineStyle": Object {
                          "horizontal": Object {
                            "dash": Array [
                              0,
                              0,
                            ],
                            "opacity": 1,
                            "stroke": "rgba(239, 241, 244, 1)",
                            "strokeWidth": 1,
                            "visible": true,
                          },
                          "vertical": Object {
                            "dash": Array [
                              4,
                              4,
                            ],
                            "opacity": 1,
                            "stroke": "rgba(239, 241, 244, 1)",
                            "strokeWidth": 1,
                            "visible": true,
                          },
                        },
                        "tickLabelStyle": Object {
                          "fill": "rgba(105, 112, 125, 1)",
                          "fontFamily": "'Inter UI', -apple-system, BlinkMacSystemFont,
  'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                          "fontSize": 10,
                          "padding": 8,
                        },
                        "tickLineStyle": Object {
                          "stroke": "rgba(239, 241, 244, 1)",
                          "strokeWidth": 1,
                          "visible": false,
                        },
                      },
                      "barSeriesStyle": Object {
                        "displayValue": Object {
                          "fill": "rgba(105, 112, 125, 1)",
                          "fontFamily": "'Inter UI', -apple-system, BlinkMacSystemFont,
  'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                          "fontSize": 8,
                        },
                      },
                      "chartMargins": Object {
                        "bottom": 0,
                        "left": 0,
                        "right": 0,
                        "top": 0,
                      },
                      "colors": Object {
                        "defaultVizColor": "#6092C0",
                        "vizColors": Array [
                          "#54B399",
                          "#6092C0",
                          "#D36086",
                          "#9170B8",
                          "#CA8EAE",
                          "#D6BF57",
                          "#B9A888",
                          "#DA8B45",
                          "#AA6556",
                          "#E7664C",
                        ],
                      },
                      "crosshair": Object {
                        "band": Object {
                          "fill": "rgba(245, 247, 250, 1)",
                        },
                        "line": Object {
                          "dash": Array [
                            4,
                            4,
                          ],
                          "stroke": "rgba(105, 112, 125, 1)",
                          "strokeWidth": 1,
                        },
                      },
                      "lineSeriesStyle": Object {
                        "line": Object {
                          "strokeWidth": 2,
                        },
                        "point": Object {
                          "fill": "rgba(255, 255, 255, 1)",
                          "radius": 3,
                          "strokeWidth": 2,
                        },
                      },
                      "scales": Object {
                        "barsPadding": 0.25,
                        "histogramPadding": 0.05,
                      },
                    },
                    "chartsTheme$": [MockFunction],
                    "useChartsTheme": [MockFunction],
                  },
                },
                "chrome": Object {
                  "addApplicationClass": [MockFunction],
                  "docTitle": Object {
                    "__legacy": Object {
                      "setBaseTitle": [MockFunction],
                    },
                    "change": [MockFunction],
                    "reset": [MockFunction],
                  },
                  "getApplicationClasses$": [MockFunction],
                  "getBadge$": [MockFunction],
                  "getBrand$": [MockFunction],
                  "getBreadcrumbs$": [MockFunction],
                  "getHeaderComponent": [MockFunction],
                  "getHelpExtension$": [MockFunction],
                  "getIsCollapsed$": [MockFunction],
                  "getIsVisible$": [MockFunction],
                  "navControls": Object {
                    "getLeft$": [MockFunction],
                    "getRight$": [MockFunction],
                    "registerLeft": [MockFunction],
                    "registerRight": [MockFunction],
                  },
                  "navLinks": Object {
                    "enableForcedAppSwitcherNavigation": [MockFunction],
                    "get": [MockFunction],
                    "getAll": [MockFunction],
                    "getForceAppSwitcherNavigation$": [MockFunction],
                    "getNavLinks$": [MockFunction],
                    "has": [MockFunction],
                    "showOnly": [MockFunction],
                    "update": [MockFunction],
                  },
                  "recentlyAccessed": Object {
                    "add": [MockFunction],
                    "get": [MockFunction],
                    "get$": [MockFunction],
                  },
                  "removeApplicationClass": [MockFunction],
                  "setAppTitle": [MockFunction],
                  "setBadge": [MockFunction],
                  "setBrand": [MockFunction],
                  "setBreadcrumbs": [MockFunction],
                  "setHelpExtension": [MockFunction],
                  "setHelpSupportUrl": [MockFunction],
                  "setIsCollapsed": [MockFunction],
                  "setIsVisible": [MockFunction],
                },
                "data": Object {
                  "__LEGACY": Object {
                    "esClient": Object {
                      "msearch": [MockFunction],
                      "search": [MockFunction],
                    },
                  },
                  "autocomplete": Object {
                    "getQuerySuggestions": [MockFunction],
                    "getValueSuggestions": [MockFunction],
                    "hasQuerySuggestions": [MockFunction],
                  },
                  "fieldFormats": Object {
                    "deserialize": [MockFunction],
                    "getByFieldType": [MockFunction],
                    "getDefaultConfig": [MockFunction],
                    "getDefaultInstance": [MockFunction],
                    "getDefaultInstanceCacheResolver": [MockFunction],
                    "getDefaultInstancePlain": [MockFunction],
                    "getDefaultType": [MockFunction],
                    "getDefaultTypeName": [MockFunction],
                    "getInstance": [MockFunction],
                    "getType": [MockFunction],
                    "getTypeNameByEsTypes": [MockFunction],
                    "getTypeWithoutMetaParams": [MockFunction],
                    "init": [MockFunction],
                    "parseDefaultTypeMap": [MockFunction],
                    "register": [MockFunction],
                  },
                  "getSuggestions": [MockFunction],
                  "indexPatterns": Object {
                    "get": [MockFunction],
                    "make": [Function],
                  },
                  "query": Object {
                    "filterManager": [MockFunction],
                    "savedQueries": [MockFunction],
                    "timefilter": Object {
                      "history": Object {
                        "add": [MockFunction],
                        "get": [MockFunction],
                      },
                      "timefilter": Object {
                        "calculateBounds": [MockFunction],
                        "createFilter": [MockFunction],
                        "disableAutoRefreshSelector": [MockFunction],
                        "disableTimeRangeSelector": [MockFunction],
                        "enableAutoRefreshSelector": [MockFunction],
                        "enableTimeRangeSelector": [MockFunction],
                        "getActiveBounds": [MockFunction],
                        "getAutoRefreshFetch$": [MockFunction],
                        "getBounds": [MockFunction],
                        "getEnabledUpdated$": [MockFunction],
                        "getFetch$": [MockFunction],
                        "getRefreshInterval": [MockFunction],
                        "getRefreshIntervalUpdate$": [MockFunction],
                        "getTime": [MockFunction],
                        "getTimeUpdate$": [MockFunction],
                        "isAutoRefreshSelectorEnabled": [MockFunction],
                        "isTimeRangeSelectorEnabled": [MockFunction],
                        "setRefreshInterval": [MockFunction],
                        "setTime": [MockFunction],
                      },
                    },
                  },
                  "search": Object {
                    "__LEGACY": Object {
                      "esClient": Object {
                        "msearch": [MockFunction],
                        "search": [MockFunction],
                      },
                    },
                    "search": [MockFunction],
                  },
                  "ui": Object {
                    "IndexPatternSelect": [MockFunction],
                    "SearchBar": [MockFunction],
                  },
                },
                "docLinks": Object {
                  "DOC_LINK_VERSION": "mocked-test-branch",
                  "ELASTIC_WEBSITE_URL": "https://www.elastic.co/",
                  "links": Object {
                    "aggs": Object {
                      "avg": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-avg-aggregation.html",
                      "avg_bucket": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-avg-bucket-aggregation.html",
                      "cardinality": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-cardinality-aggregation.html",
                      "count": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-valuecount-aggregation.html",
                      "cumulative_sum": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-sum-aggregation.html",
                      "date_histogram": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-datehistogram-aggregation.html",
                      "date_range": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-daterange-aggregation.html",
                      "derivative": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-derivative-aggregation.html",
                      "filter": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-filter-aggregation.html",
                      "filters": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-filters-aggregation.html",
                      "geo_bounds": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-geobounds-aggregation.html",
                      "geo_centroid": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-geocentroid-aggregation.html",
                      "geohash_grid": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-geohashgrid-aggregation.html",
                      "histogram": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-histogram-aggregation.html",
                      "ip_range": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-iprange-aggregation.html",
                      "max": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-max-aggregation.html",
                      "max_bucket": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-max-bucket-aggregation.html",
                      "median": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-percentile-aggregation.html",
                      "min": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-min-aggregation.html",
                      "min_bucket": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-min-bucket-aggregation.html",
                      "moving_avg": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-movavg-aggregation.html",
                      "percentile_ranks": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-percentile-rank-aggregation.html",
                      "range": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-range-aggregation.html",
                      "serial_diff": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-serialdiff-aggregation.html",
                      "significant_terms": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-significantterms-aggregation.html",
                      "std_dev": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-extendedstats-aggregation.html",
                      "sum": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-sum-aggregation.html",
                      "sum_bucket": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-sum-bucket-aggregation.html",
                      "terms": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-terms-aggregation.html",
                      "top_hits": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-top-hits-aggregation.html",
                    },
                    "auditbeat": Object {
                      "base": "https://www.elastic.co/guide/en/beats/auditbeat/mocked-test-branch",
                    },
                    "date": Object {
                      "dateMath": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/common-options.html#date-math",
                    },
                    "filebeat": Object {
                      "base": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch",
                      "configuration": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/filebeat-configuration.html",
                      "elasticsearchOutput": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/elasticsearch-output.html",
                      "exportedFields": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/exported-fields.html",
                      "installation": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/filebeat-installation.html",
                      "startup": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/filebeat-starting.html",
                    },
                    "functionbeat": Object {
                      "base": "https://www.elastic.co/guide/en/beats/functionbeat/mocked-test-branch",
                    },
                    "heartbeat": Object {
                      "base": "https://www.elastic.co/guide/en/beats/heartbeat/mocked-test-branch",
                    },
                    "indexPatterns": Object {
                      "introduction": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/index-patterns.html",
                      "loadingData": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/tutorial-load-dataset.html",
                    },
                    "kibana": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/index.html",
                    "logstash": Object {
                      "base": "https://www.elastic.co/guide/en/logstash/mocked-test-branch",
                    },
                    "management": Object {
                      "kibanaSearchSettings": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/advanced-options.html#kibana-search-settings",
                    },
                    "metricbeat": Object {
                      "base": "https://www.elastic.co/guide/en/beats/metricbeat/mocked-test-branch",
                    },
                    "query": Object {
                      "kueryQuerySyntax": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/kuery-query.html",
                      "luceneQuerySyntax": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/query-dsl-query-string-query.html#query-string-syntax",
                      "queryDsl": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/query-dsl.html",
                    },
                    "scriptedFields": Object {
                      "luceneExpressions": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/modules-scripting-expression.html",
                      "painless": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/modules-scripting-painless.html",
                      "painlessApi": "https://www.elastic.co/guide/en/elasticsearch/painless/mocked-test-branch/painless-api-reference.html",
                      "painlessSyntax": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/modules-scripting-painless-syntax.html",
                      "scriptAggs": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations.html#_values_source",
                      "scriptFields": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-request-script-fields.html",
                    },
                    "siem": Object {
                      "gettingStarted": "https://www.elastic.co/guide/en/siem/guide/mocked-test-branch/install-siem.html",
                      "guide": "https://www.elastic.co/guide/en/siem/guide/mocked-test-branch/index.html",
                    },
                    "winlogbeat": Object {
                      "base": "https://www.elastic.co/guide/en/beats/winlogbeat/mocked-test-branch",
                    },
                  },
                },
                "embeddable": Object {
                  "getEmbeddableFactories": [MockFunction],
                  "getEmbeddableFactory": [MockFunction],
                  "registerEmbeddableFactory": [MockFunction],
                },
                "expressions": Object {
                  "ExpressionLoader": [MockFunction],
                  "ExpressionRenderHandler": [MockFunction],
                  "ReactExpressionRenderer": [MockFunction],
                  "execute": [MockFunction],
                  "fork": [MockFunction],
                  "getFunction": [MockFunction],
                  "getFunctions": [MockFunction],
                  "getRenderer": [MockFunction],
                  "getRenderers": [MockFunction],
                  "getType": [MockFunction],
                  "getTypes": [MockFunction],
                  "loader": [MockFunction],
                  "render": [MockFunction],
                  "run": [MockFunction],
                },
                "fatalErrors": Object {
                  "add": [MockFunction],
                  "get$": [MockFunction],
                },
                "http": Object {
                  "addLoadingCountSource": [MockFunction],
                  "anonymousPaths": Object {
                    "isAnonymous": [MockFunction],
                    "register": [MockFunction],
                  },
                  "basePath": BasePath {
                    "basePath": "",
                    "get": [Function],
                    "prepend": [Function],
                    "remove": [Function],
                    "serverBasePath": "",
                  },
                  "delete": [MockFunction],
                  "fetch": [MockFunction],
                  "get": [MockFunction],
                  "getLoadingCount$": [MockFunction],
                  "head": [MockFunction],
                  "intercept": [MockFunction],
                  "options": [MockFunction],
                  "patch": [MockFunction],
                  "post": [MockFunction],
                  "put": [MockFunction],
                },
                "i18n": Object {
                  "Context": [MockFunction],
                },
                "injectedMetadata": Object {
                  "getInjectedVar": [MockFunction],
                },
                "inspector": Object {
                  "isAvailable": [MockFunction],
                  "open": [MockFunction],
                },
                "kibanaLegacy": Object {
                  "config": Object {
                    "defaultAppId": "home",
                  },
                  "dashboardConfig": Object {
                    "getHideWriteControls": [MockFunction],
                    "turnHideWriteControlsOn": [MockFunction],
                  },
                  "getApps": [MockFunction],
                  "getForwards": [MockFunction],
                },
                "management": Object {
                  "legacy": Object {},
                  "sections": Object {
                    "getAllSections": [MockFunction],
                    "getSection": [MockFunction],
                    "navigateToApp": [MockFunction],
                  },
                },
                "navigation": Object {
                  "ui": Object {
                    "TopNavMenu": [MockFunction],
                  },
                },
                "notifications": Object {
                  "toasts": Object {
                    "add": [MockFunction],
                    "addDanger": [MockFunction],
                    "addError": [MockFunction],
                    "addSuccess": [MockFunction],
                    "addWarning": [MockFunction],
                    "get$": [MockFunction],
                    "remove": [MockFunction],
                  },
                },
                "overlays": Object {
                  "banners": Object {
                    "add": [MockFunction],
                    "get$": [MockFunction],
                    "getComponent": [MockFunction],
                    "remove": [MockFunction],
                    "replace": [MockFunction],
                  },
                  "openConfirm": [MockFunction],
                  "openFlyout": [MockFunction],
                  "openModal": [MockFunction],
                },
                "savedObjects": Object {
                  "client": Object {
                    "bulkCreate": [MockFunction],
                    "bulkGet": [MockFunction],
                    "bulkUpdate": [MockFunction],
                    "create": [MockFunction],
                    "delete": [MockFunction],
                    "find": [MockFunction],
                    "get": [MockFunction],
                    "update": [MockFunction],
                  },
                },
                "uiActions": Object {
                  "attachAction": [MockFunction],
                  "clear": [MockFunction],
                  "detachAction": [MockFunction],
                  "executeTriggerActions": [MockFunction],
                  "fork": [MockFunction],
                  "getTrigger": [MockFunction],
                  "getTriggerActions": [MockFunction],
                  "getTriggerCompatibleActions": [MockFunction],
                  "registerAction": [MockFunction],
                  "registerTrigger": [MockFunction],
                },
                "uiSettings": Object {
                  "get": [Function],
                  "get$": [MockFunction] {
                    "calls": Array [
                      Array [
                        "siem:ipReputationLinks",
                        undefined,
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": Subject {
                          "_isScalar": false,
                          "closed": false,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [
                            Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                SubjectSubscription {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "subject": [Circular],
                                  "subscriber": [Circular],
                                },
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                          ],
                          "thrownError": null,
                        },
                      },
                    ],
                  },
                  "getAll": [MockFunction],
                  "getSaved$": [MockFunction],
                  "getUpdate$": [MockFunction],
                  "getUpdateErrors$": [MockFunction],
                  "isCustom": [MockFunction],
                  "isDeclared": [MockFunction],
                  "isDefault": [MockFunction],
                  "isOverridden": [MockFunction],
                  "overrideLocalDefault": [MockFunction],
                  "remove": [MockFunction],
                  "set": [MockFunction],
                },
              }
            }
          >
            <ApolloProvider
              client={
                ApolloClient {
                  "cache": InMemoryCache {
                    "addTypename": true,
                    "config": Object {
                      "addTypename": true,
                      "dataIdFromObject": [Function],
                      "resultCaching": true,
                      "typePolicies": Object {},
                    },
                    "data": Root {
                      "data": Object {},
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": KeyTrie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                      },
                      "policies": Policies {
                        "config": Object {
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": Object {},
                        },
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "storageTrie": KeyTrie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "rootIds": Object {},
                      "sharedLayerGroup": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": KeyTrie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                      },
                      "toReference": [Function],
                    },
                    "getFragmentDoc": [Function],
                    "maybeBroadcastWatch": [Function],
                    "optimisticData": Root {
                      "data": Object {},
                      "getFieldValue": [Function],
                      "group": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": KeyTrie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                      },
                      "policies": Policies {
                        "config": Object {
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": Object {},
                        },
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "storageTrie": KeyTrie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "refs": Object {},
                      "rootIds": Object {},
                      "sharedLayerGroup": CacheGroup {
                        "caching": true,
                        "d": [Function],
                        "keyMaker": KeyTrie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                      },
                      "toReference": [Function],
                    },
                    "policies": Policies {
                      "config": Object {
                        "dataIdFromObject": [Function],
                        "possibleTypes": undefined,
                        "typePolicies": Object {},
                      },
                      "rootIdsByTypename": Object {
                        "Mutation": "ROOT_MUTATION",
                        "Query": "ROOT_QUERY",
                        "Subscription": "ROOT_SUBSCRIPTION",
                      },
                      "rootTypenamesById": Object {
                        "ROOT_MUTATION": "Mutation",
                        "ROOT_QUERY": "Query",
                        "ROOT_SUBSCRIPTION": "Subscription",
                      },
                      "storageTrie": KeyTrie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "typePolicies": Object {},
                      "usingPossibleTypes": false,
                    },
                    "storeReader": StoreReader {
                      "config": Object {
                        "addTypename": true,
                        "policies": Policies {
                          "config": Object {
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "storageTrie": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                      },
                      "executeSelectionSet": [Function],
                      "executeSubSelectedArray": [Function],
                    },
                    "storeWriter": StoreWriter {
                      "policies": Policies {
                        "config": Object {
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": Object {},
                        },
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "storageTrie": KeyTrie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                    },
                    "txCount": 0,
                    "typenameDocumentCache": Map {},
                    "varDep": [Function],
                    "watches": Set {},
                  },
                  "clearStoreCallbacks": Array [],
                  "defaultOptions": Object {},
                  "disableNetworkFetches": false,
                  "link": ApolloLink {
                    "request": [Function],
                  },
                  "localState": LocalState {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "resultCaching": true,
                        "typePolicies": Object {},
                      },
                      "data": Root {
                        "data": Object {},
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "policies": Policies {
                          "config": Object {
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "storageTrie": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "rootIds": Object {},
                        "sharedLayerGroup": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "toReference": [Function],
                      },
                      "getFragmentDoc": [Function],
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": Root {
                        "data": Object {},
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "policies": Policies {
                          "config": Object {
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "storageTrie": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "rootIds": Object {},
                        "sharedLayerGroup": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "toReference": [Function],
                      },
                      "policies": Policies {
                        "config": Object {
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": Object {},
                        },
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "storageTrie": KeyTrie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "storeReader": StoreReader {
                        "config": Object {
                          "addTypename": true,
                          "policies": Policies {
                            "config": Object {
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "storageTrie": KeyTrie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                        },
                        "executeSelectionSet": [Function],
                        "executeSubSelectedArray": [Function],
                      },
                      "storeWriter": StoreWriter {
                        "policies": Policies {
                          "config": Object {
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "storageTrie": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                      },
                      "txCount": 0,
                      "typenameDocumentCache": Map {},
                      "varDep": [Function],
                      "watches": Set {},
                    },
                    "client": [Circular],
                  },
                  "mutate": [Function],
                  "query": [Function],
                  "queryDeduplication": true,
                  "queryManager": QueryManager {
                    "assumeImmutableResults": false,
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "resultCaching": true,
                        "typePolicies": Object {},
                      },
                      "data": Root {
                        "data": Object {},
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "policies": Policies {
                          "config": Object {
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "storageTrie": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "rootIds": Object {},
                        "sharedLayerGroup": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "toReference": [Function],
                      },
                      "getFragmentDoc": [Function],
                      "maybeBroadcastWatch": [Function],
                      "optimisticData": Root {
                        "data": Object {},
                        "getFieldValue": [Function],
                        "group": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "policies": Policies {
                          "config": Object {
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "storageTrie": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "refs": Object {},
                        "rootIds": Object {},
                        "sharedLayerGroup": CacheGroup {
                          "caching": true,
                          "d": [Function],
                          "keyMaker": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                        },
                        "toReference": [Function],
                      },
                      "policies": Policies {
                        "config": Object {
                          "dataIdFromObject": [Function],
                          "possibleTypes": undefined,
                          "typePolicies": Object {},
                        },
                        "rootIdsByTypename": Object {
                          "Mutation": "ROOT_MUTATION",
                          "Query": "ROOT_QUERY",
                          "Subscription": "ROOT_SUBSCRIPTION",
                        },
                        "rootTypenamesById": Object {
                          "ROOT_MUTATION": "Mutation",
                          "ROOT_QUERY": "Query",
                          "ROOT_SUBSCRIPTION": "Subscription",
                        },
                        "storageTrie": KeyTrie {
                          "makeData": [Function],
                          "weakness": true,
                        },
                        "typePolicies": Object {},
                        "usingPossibleTypes": false,
                      },
                      "storeReader": StoreReader {
                        "config": Object {
                          "addTypename": true,
                          "policies": Policies {
                            "config": Object {
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "storageTrie": KeyTrie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                        },
                        "executeSelectionSet": [Function],
                        "executeSubSelectedArray": [Function],
                      },
                      "storeWriter": StoreWriter {
                        "policies": Policies {
                          "config": Object {
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "storageTrie": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                      },
                      "txCount": 0,
                      "typenameDocumentCache": Map {},
                      "varDep": [Function],
                      "watches": Set {},
                    },
                    "clientAwareness": Object {
                      "name": undefined,
                      "version": undefined,
                    },
                    "fetchQueryRejectFns": Map {},
                    "idCounter": 1,
                    "inFlightLinkObservables": Map {},
                    "link": ApolloLink {
                      "request": [Function],
                    },
                    "localState": LocalState {
                      "cache": InMemoryCache {
                        "addTypename": true,
                        "config": Object {
                          "addTypename": true,
                          "dataIdFromObject": [Function],
                          "resultCaching": true,
                          "typePolicies": Object {},
                        },
                        "data": Root {
                          "data": Object {},
                          "getFieldValue": [Function],
                          "group": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": KeyTrie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "policies": Policies {
                            "config": Object {
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "storageTrie": KeyTrie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                          "refs": Object {},
                          "rootIds": Object {},
                          "sharedLayerGroup": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": KeyTrie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "toReference": [Function],
                        },
                        "getFragmentDoc": [Function],
                        "maybeBroadcastWatch": [Function],
                        "optimisticData": Root {
                          "data": Object {},
                          "getFieldValue": [Function],
                          "group": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": KeyTrie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "policies": Policies {
                            "config": Object {
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "storageTrie": KeyTrie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                          "refs": Object {},
                          "rootIds": Object {},
                          "sharedLayerGroup": CacheGroup {
                            "caching": true,
                            "d": [Function],
                            "keyMaker": KeyTrie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                          },
                          "toReference": [Function],
                        },
                        "policies": Policies {
                          "config": Object {
                            "dataIdFromObject": [Function],
                            "possibleTypes": undefined,
                            "typePolicies": Object {},
                          },
                          "rootIdsByTypename": Object {
                            "Mutation": "ROOT_MUTATION",
                            "Query": "ROOT_QUERY",
                            "Subscription": "ROOT_SUBSCRIPTION",
                          },
                          "rootTypenamesById": Object {
                            "ROOT_MUTATION": "Mutation",
                            "ROOT_QUERY": "Query",
                            "ROOT_SUBSCRIPTION": "Subscription",
                          },
                          "storageTrie": KeyTrie {
                            "makeData": [Function],
                            "weakness": true,
                          },
                          "typePolicies": Object {},
                          "usingPossibleTypes": false,
                        },
                        "storeReader": StoreReader {
                          "config": Object {
                            "addTypename": true,
                            "policies": Policies {
                              "config": Object {
                                "dataIdFromObject": [Function],
                                "possibleTypes": undefined,
                                "typePolicies": Object {},
                              },
                              "rootIdsByTypename": Object {
                                "Mutation": "ROOT_MUTATION",
                                "Query": "ROOT_QUERY",
                                "Subscription": "ROOT_SUBSCRIPTION",
                              },
                              "rootTypenamesById": Object {
                                "ROOT_MUTATION": "Mutation",
                                "ROOT_QUERY": "Query",
                                "ROOT_SUBSCRIPTION": "Subscription",
                              },
                              "storageTrie": KeyTrie {
                                "makeData": [Function],
                                "weakness": true,
                              },
                              "typePolicies": Object {},
                              "usingPossibleTypes": false,
                            },
                          },
                          "executeSelectionSet": [Function],
                          "executeSubSelectedArray": [Function],
                        },
                        "storeWriter": StoreWriter {
                          "policies": Policies {
                            "config": Object {
                              "dataIdFromObject": [Function],
                              "possibleTypes": undefined,
                              "typePolicies": Object {},
                            },
                            "rootIdsByTypename": Object {
                              "Mutation": "ROOT_MUTATION",
                              "Query": "ROOT_QUERY",
                              "Subscription": "ROOT_SUBSCRIPTION",
                            },
                            "rootTypenamesById": Object {
                              "ROOT_MUTATION": "Mutation",
                              "ROOT_QUERY": "Query",
                              "ROOT_SUBSCRIPTION": "Subscription",
                            },
                            "storageTrie": KeyTrie {
                              "makeData": [Function],
                              "weakness": true,
                            },
                            "typePolicies": Object {},
                            "usingPossibleTypes": false,
                          },
                        },
                        "txCount": 0,
                        "typenameDocumentCache": Map {},
                        "varDep": [Function],
                        "watches": Set {},
                      },
                      "client": [Circular],
                    },
                    "mutationStore": MutationStore {
                      "store": Object {},
                    },
                    "onBroadcast": [Function],
                    "pollingInfoByQueryId": Map {},
                    "queries": Map {},
                    "queryDeduplication": true,
                    "queryStore": QueryStore {
                      "store": Object {},
                    },
                    "ssrMode": false,
                    "transformCache": WeakMap {},
                  },
                  "reFetchObservableQueries": [Function],
                  "resetStore": [Function],
                  "resetStoreCallbacks": Array [],
                  "typeDefs": undefined,
                  "version": "local",
                  "watchQuery": [Function],
                }
              }
            >
              <Provider
                store={
                  Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(observable): [Function],
                  }
                }
              >
                <ThemeProvider
                  theme={[Function]}
                >
                  <DragDropContext
                    onDragEnd={[MockFunction]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="6"
                        liftInstruction="Draggable item. Ensure your screen reader is not in browse mode and then press space bar to lift."
                        onDragEnd={[MockFunction]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            Object {
                              "$$typeof": Symbol(react.context),
                              "Consumer": Object {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": Object {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": Object {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
                          }
                        >
                          <ZeekDetails
                            browserFields={
                              Object {
                                "agent": Object {
                                  "fields": Object {
                                    "agent.ephemeral_id": Object {
                                      "aggregatable": true,
                                      "category": "agent",
                                      "description": "Ephemeral identifier of this agent (if one exists). This id normally changes across restarts, but \`agent.id\` does not.",
                                      "example": "8a4f500f",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "agent.ephemeral_id",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "agent.hostname": Object {
                                      "aggregatable": true,
                                      "category": "agent",
                                      "description": null,
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "agent.hostname",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "agent.id": Object {
                                      "aggregatable": true,
                                      "category": "agent",
                                      "description": "Unique identifier of this agent (if one exists). Example: For Beats this would be beat.id.",
                                      "example": "8a4f500d",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "agent.id",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "agent.name": Object {
                                      "aggregatable": true,
                                      "category": "agent",
                                      "description": "Name of the agent. This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from. If no name is given, the name is often left empty.",
                                      "example": "foo",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "agent.name",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                  },
                                },
                                "auditd": Object {
                                  "fields": Object {
                                    "auditd.data.a0": Object {
                                      "aggregatable": true,
                                      "category": "auditd",
                                      "description": null,
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                      ],
                                      "name": "auditd.data.a0",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "auditd.data.a1": Object {
                                      "aggregatable": true,
                                      "category": "auditd",
                                      "description": null,
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                      ],
                                      "name": "auditd.data.a1",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "auditd.data.a2": Object {
                                      "aggregatable": true,
                                      "category": "auditd",
                                      "description": null,
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                      ],
                                      "name": "auditd.data.a2",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                  },
                                },
                                "base": Object {
                                  "fields": Object {
                                    "@timestamp": Object {
                                      "aggregatable": true,
                                      "category": "base",
                                      "description": "Date/time when the event originated. For log events this is the date/time when the event was generated, and not when it was read. Required field for all events.",
                                      "example": "2016-05-23T08:05:34.853Z",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "@timestamp",
                                      "searchable": true,
                                      "type": "date",
                                    },
                                  },
                                },
                                "client": Object {
                                  "fields": Object {
                                    "client.address": Object {
                                      "aggregatable": true,
                                      "category": "client",
                                      "description": "Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the \`.address\` field. Then it should be duplicated to \`.ip\` or \`.domain\`, depending on which one it is.",
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "client.address",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "client.bytes": Object {
                                      "aggregatable": true,
                                      "category": "client",
                                      "description": "Bytes sent from the client to the server.",
                                      "example": "184",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "client.bytes",
                                      "searchable": true,
                                      "type": "number",
                                    },
                                    "client.domain": Object {
                                      "aggregatable": true,
                                      "category": "client",
                                      "description": "Client domain.",
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "client.domain",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "client.geo.country_iso_code": Object {
                                      "aggregatable": true,
                                      "category": "client",
                                      "description": "Country ISO code.",
                                      "example": "CA",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "client.geo.country_iso_code",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                  },
                                },
                                "cloud": Object {
                                  "fields": Object {
                                    "cloud.account.id": Object {
                                      "aggregatable": true,
                                      "category": "cloud",
                                      "description": "The cloud account or organization id used to identify different entities in a multi-tenant environment. Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.",
                                      "example": "666777888999",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "cloud.account.id",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "cloud.availability_zone": Object {
                                      "aggregatable": true,
                                      "category": "cloud",
                                      "description": "Availability zone in which this host is running.",
                                      "example": "us-east-1c",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "cloud.availability_zone",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                  },
                                },
                                "container": Object {
                                  "fields": Object {
                                    "container.id": Object {
                                      "aggregatable": true,
                                      "category": "container",
                                      "description": "Unique container id.",
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "container.id",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "container.image.name": Object {
                                      "aggregatable": true,
                                      "category": "container",
                                      "description": "Name of the image the container was built on.",
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "container.image.name",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "container.image.tag": Object {
                                      "aggregatable": true,
                                      "category": "container",
                                      "description": "Container image tag.",
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "container.image.tag",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                  },
                                },
                                "destination": Object {
                                  "fields": Object {
                                    "destination.address": Object {
                                      "aggregatable": true,
                                      "category": "destination",
                                      "description": "Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the \`.address\` field. Then it should be duplicated to \`.ip\` or \`.domain\`, depending on which one it is.",
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "destination.address",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "destination.bytes": Object {
                                      "aggregatable": true,
                                      "category": "destination",
                                      "description": "Bytes sent from the destination to the source.",
                                      "example": "184",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "destination.bytes",
                                      "searchable": true,
                                      "type": "number",
                                    },
                                    "destination.domain": Object {
                                      "aggregatable": true,
                                      "category": "destination",
                                      "description": "Destination domain.",
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "destination.domain",
                                      "searchable": true,
                                      "type": "string",
                                    },
                                    "destination.ip": Object {
                                      "aggregatable": true,
                                      "category": "destination",
                                      "description": "IP address of the destination. Can be one or multiple IPv4 or IPv6 addresses.",
                                      "example": "",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "destination.ip",
                                      "searchable": true,
                                      "type": "ip",
                                    },
                                    "destination.port": Object {
                                      "aggregatable": true,
                                      "category": "destination",
                                      "description": "Port of the destination.",
                                      "example": "",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "destination.port",
                                      "searchable": true,
                                      "type": "long",
                                    },
                                  },
                                },
                                "event": Object {
                                  "fields": Object {
                                    "event.end": Object {
                                      "aggregatable": true,
                                      "category": "event",
                                      "description": "event.end contains the date when the event ended or when the activity was last observed.",
                                      "example": null,
                                      "format": "",
                                      "indexes": Array [
                                        "apm-*-transaction*",
                                        "auditbeat-*",
                                        "endgame-*",
                                        "filebeat-*",
                                        "packetbeat-*",
                                        "winlogbeat-*",
                                      ],
                                      "name": "event.end",
                                      "searchable": true,
                                      "type": "date",
                                    },
                                  },
                                },
                                "source": Object {
                                  "fields": Object {
                                    "source.ip": Object {
                                      "aggregatable": true,
                                      "category": "source",
                                      "description": "IP address of the source. Can be one or multiple IPv4 or IPv6 addresses.",
                                      "example": "",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "source.ip",
                                      "searchable": true,
                                      "type": "ip",
                                    },
                                    "source.port": Object {
                                      "aggregatable": true,
                                      "category": "source",
                                      "description": "Port of the source.",
                                      "example": "",
                                      "format": "",
                                      "indexes": Array [
                                        "auditbeat",
                                        "filebeat",
                                        "packetbeat",
                                      ],
                                      "name": "source.port",
                                      "searchable": true,
                                      "type": "long",
                                    },
                                  },
                                },
                              }
                            }
                            data={
                              Object {
                                "_id": "19",
                                "destination": null,
                                "event": Object {
                                  "action": null,
                                  "category": null,
                                  "dataset": Array [
                                    "zeek.files",
                                  ],
                                  "id": null,
                                  "module": Array [
                                    "zeek",
                                  ],
                                  "severity": null,
                                },
                                "geo": null,
                                "host": Object {
                                  "id": Array [
                                    "af3fddf15f1d47979ce817ba0df10c6e",
                                  ],
                                  "ip": Array [
                                    "206.189.35.240",
                                    "10.15.0.5",
                                    "fe80::98c7:eff:fe29:4455",
                                  ],
                                  "name": Array [
                                    "suricata-zeek-singapore",
                                  ],
                                },
                                "http": null,
                                "network": null,
                                "source": null,
                                "suricata": null,
                                "timestamp": "2019-03-03T04:26:38.000Z",
                                "url": null,
                                "zeek": Object {
                                  "connection": null,
                                  "dns": null,
                                  "files": Object {
                                    "analyzers": Array [
                                      "MD5",
                                      "SHA1",
                                    ],
                                    "depth": Array [
                                      0,
                                    ],
                                    "duration": Array [
                                      0,
                                    ],
                                    "fuid": Array [
                                      "FePz1uVEVCZ3I0FQi",
                                    ],
                                    "is_orig": Array [
                                      false,
                                    ],
                                    "local_orig": Array [
                                      false,
                                    ],
                                    "md5": Array [
                                      "f7653f1951693021daa9e6be61226e32",
                                    ],
                                    "mime_type": Array [
                                      "text/plain",
                                    ],
                                    "missing_bytes": Array [
                                      0,
                                    ],
                                    "overflow_bytes": Array [
                                      0,
                                    ],
                                    "rx_host": Array [
                                      "206.189.35.240",
                                    ],
                                    "seen_bytes": Array [
                                      1198,
                                    ],
                                    "session_ids": Array [
                                      "Cu0n232QMyvNtzb75j",
                                    ],
                                    "sha1": Array [
                                      "fa5195a5dfacc9d1c68d43600f0e0262cad14dde",
                                    ],
                                    "source": Array [
                                      "HTTP",
                                    ],
                                    "timedout": Array [
                                      false,
                                    ],
                                    "total_bytes": Array [
                                      88722,
                                    ],
                                    "tx_host": Array [
                                      "5.101.111.50",
                                    ],
                                  },
                                  "http": null,
                                  "notice": null,
                                  "session_id": Array [
                                    "Cu0n232QMyvNtzb75j",
                                  ],
                                  "ssl": null,
                                },
                              }
                            }
                            timelineId="test"
                          >
                            <Details>
                              <div
                                className="c0"
                              >
                                <ZeekSignature
                                  data={
                                    Object {
                                      "_id": "19",
                                      "destination": null,
                                      "event": Object {
                                        "action": null,
                                        "category": null,
                                        "dataset": Array [
                                          "zeek.files",
                                        ],
                                        "id": null,
                                        "module": Array [
                                          "zeek",
                                        ],
                                        "severity": null,
                                      },
                                      "geo": null,
                                      "host": Object {
                                        "id": Array [
                                          "af3fddf15f1d47979ce817ba0df10c6e",
                                        ],
                                        "ip": Array [
                                          "206.189.35.240",
                                          "10.15.0.5",
                                          "fe80::98c7:eff:fe29:4455",
                                        ],
                                        "name": Array [
                                          "suricata-zeek-singapore",
                                        ],
                                      },
                                      "http": null,
                                      "network": null,
                                      "source": null,
                                      "suricata": null,
                                      "timestamp": "2019-03-03T04:26:38.000Z",
                                      "url": null,
                                      "zeek": Object {
                                        "connection": null,
                                        "dns": null,
                                        "files": Object {
                                          "analyzers": Array [
                                            "MD5",
                                            "SHA1",
                                          ],
                                          "depth": Array [
                                            0,
                                          ],
                                          "duration": Array [
                                            0,
                                          ],
                                          "fuid": Array [
                                            "FePz1uVEVCZ3I0FQi",
                                          ],
                                          "is_orig": Array [
                                            false,
                                          ],
                                          "local_orig": Array [
                                            false,
                                          ],
                                          "md5": Array [
                                            "f7653f1951693021daa9e6be61226e32",
                                          ],
                                          "mime_type": Array [
                                            "text/plain",
                                          ],
                                          "missing_bytes": Array [
                                            0,
                                          ],
                                          "overflow_bytes": Array [
                                            0,
                                          ],
                                          "rx_host": Array [
                                            "206.189.35.240",
                                          ],
                                          "seen_bytes": Array [
                                            1198,
                                          ],
                                          "session_ids": Array [
                                            "Cu0n232QMyvNtzb75j",
                                          ],
                                          "sha1": Array [
                                            "fa5195a5dfacc9d1c68d43600f0e0262cad14dde",
                                          ],
                                          "source": Array [
                                            "HTTP",
                                          ],
                                          "timedout": Array [
                                            false,
                                          ],
                                          "total_bytes": Array [
                                            88722,
                                          ],
                                          "tx_host": Array [
                                            "5.101.111.50",
                                          ],
                                        },
                                        "http": null,
                                        "notice": null,
                                        "session_id": Array [
                                          "Cu0n232QMyvNtzb75j",
                                        ],
                                        "ssl": null,
                                      },
                                    }
                                  }
                                  timelineId="test"
                                >
                                  <EuiFlexGroup
                                    gutterSize="none"
                                    justifyContent="center"
                                    wrap={true}
                                  >
                                    <div
                                      className="euiFlexGroup euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive euiFlexGroup--wrap"
                                    >
                                      <DraggableZeekElement
                                        field="zeek.session_id"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                        value="Cu0n232QMyvNtzb75j"
                                      >
                                        <TokensFlexItem
                                          grow={false}
                                        >
                                          <EuiFlexItem
                                            className="c1"
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero c1"
                                            >
                                              <DraggableWrapper
                                                dataProvider={
                                                  Object {
                                                    "and": Array [],
                                                    "enabled": true,
                                                    "excluded": false,
                                                    "id": "draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j",
                                                    "kqlQuery": "",
                                                    "name": "Cu0n232QMyvNtzb75j",
                                                    "queryMatch": Object {
                                                      "field": "zeek.session_id",
                                                      "operator": ":",
                                                      "value": "Cu0n232QMyvNtzb75j",
                                                    },
                                                  }
                                                }
                                                render={[Function]}
                                              >
                                                <Component
                                                  dataProvider={
                                                    Object {
                                                      "and": Array [],
                                                      "enabled": true,
                                                      "excluded": false,
                                                      "id": "draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j",
                                                      "kqlQuery": "",
                                                      "name": "Cu0n232QMyvNtzb75j",
                                                      "queryMatch": Object {
                                                        "field": "zeek.session_id",
                                                        "operator": ":",
                                                        "value": "Cu0n232QMyvNtzb75j",
                                                      },
                                                    }
                                                  }
                                                  registerProvider={[Function]}
                                                  render={[Function]}
                                                  unRegisterProvider={[Function]}
                                                >
                                                  <Wrapper
                                                    data-test-subj="draggableWrapperDiv"
                                                  >
                                                    <div
                                                      className="c2"
                                                      data-test-subj="draggableWrapperDiv"
                                                    >
                                                      <ConnectFunction
                                                        direction="vertical"
                                                        droppableId="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                        getContainerForClone={[Function]}
                                                        ignoreContainerClipping={false}
                                                        isCombineEnabled={false}
                                                        isDropDisabled={true}
                                                        mode="standard"
                                                        renderClone={null}
                                                        type="DEFAULT"
                                                      >
                                                        <Droppable
                                                          direction="vertical"
                                                          droppableId="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                          getContainerForClone={[Function]}
                                                          ignoreContainerClipping={false}
                                                          isCombineEnabled={false}
                                                          isDropDisabled={true}
                                                          mode="standard"
                                                          placeholder={null}
                                                          renderClone={null}
                                                          shouldAnimatePlaceholder={false}
                                                          snapshot={
                                                            Object {
                                                              "draggingFromThisWith": null,
                                                              "draggingOverWith": null,
                                                              "isDraggingOver": false,
                                                              "isUsingPlaceholder": false,
                                                            }
                                                          }
                                                          type="DEFAULT"
                                                          updateViewportMaxScroll={[Function]}
                                                          useClone={null}
                                                        >
                                                          <div
                                                            data-rbd-droppable-context-id="6"
                                                            data-rbd-droppable-id="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                          >
                                                            <PublicDraggable
                                                              draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                              index={0}
                                                              key="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <ConditionalPortal
                                                                      usePortal={false}
                                                                    >
                                                                      <ProviderContainerComponent
                                                                        aria-labelledby="rbd-lift-instruction-6"
                                                                        data-rbd-drag-handle-context-id="6"
                                                                        data-rbd-drag-handle-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                                        data-rbd-draggable-context-id="6"
                                                                        data-rbd-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                                        data-test-subj="providerContainer"
                                                                        draggable={false}
                                                                        isDragging={false}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-6"
                                                                          className="c3"
                                                                          data-rbd-drag-handle-context-id="6"
                                                                          data-rbd-drag-handle-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                                          data-rbd-draggable-context-id="6"
                                                                          data-rbd-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_session_id-Cu0n232QMyvNtzb75j"
                                                                          data-test-subj="providerContainer"
                                                                          draggable={false}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          <styled.span
                                                                            data-test-subj="draggable-content-zeek.session_id"
                                                                          >
                                                                            <span
                                                                              className="c4"
                                                                              data-test-subj="draggable-content-zeek.session_id"
                                                                            >
                                                                              <EuiToolTip
                                                                                content="zeek.session_id"
                                                                                data-test-subj="badge-tooltip"
                                                                                delay="regular"
                                                                                position="top"
                                                                              >
                                                                                <span
                                                                                  className="euiToolTipAnchor"
                                                                                  onMouseOut={[Function]}
                                                                                  onMouseOver={[Function]}
                                                                                >
                                                                                  <Badge
                                                                                    color="hollow"
                                                                                    iconType="tag"
                                                                                    onBlur={[Function]}
                                                                                    onFocus={[Function]}
                                                                                  >
                                                                                    <EuiBadge
                                                                                      color="hollow"
                                                                                      iconType="tag"
                                                                                      onBlur={[Function]}
                                                                                      onFocus={[Function]}
                                                                                      style={
                                                                                        Object {
                                                                                          "verticalAlign": "top",
                                                                                        }
                                                                                      }
                                                                                    >
                                                                                      <EuiInnerText>
                                                                                        <span
                                                                                          className="euiBadge euiBadge--hollow euiBadge--iconLeft"
                                                                                          onBlur={[Function]}
                                                                                          onFocus={[Function]}
                                                                                          style={
                                                                                            Object {
                                                                                              "verticalAlign": "top",
                                                                                            }
                                                                                          }
                                                                                          title="Cu0n232QMyvNtzb75j"
                                                                                        >
                                                                                          <span
                                                                                            className="euiBadge__content"
                                                                                          >
                                                                                            <span
                                                                                              className="euiBadge__text"
                                                                                            >
                                                                                              Cu0n232QMyvNtzb75j
                                                                                            </span>
                                                                                            <EuiIcon
                                                                                              className="euiBadge__icon"
                                                                                              size="s"
                                                                                              type="tag"
                                                                                            >
                                                                                              <EuiIconEmpty
                                                                                                aria-hidden={true}
                                                                                                className="euiIcon euiIcon--small euiIcon-isLoading euiBadge__icon"
                                                                                                focusable="false"
                                                                                                role="img"
                                                                                                style={null}
                                                                                              >
                                                                                                <svg
                                                                                                  aria-hidden={true}
                                                                                                  className="euiIcon euiIcon--small euiIcon-isLoading euiBadge__icon"
                                                                                                  focusable="false"
                                                                                                  height={16}
                                                                                                  role="img"
                                                                                                  style={null}
                                                                                                  viewBox="0 0 16 16"
                                                                                                  width={16}
                                                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                                                />
                                                                                              </EuiIconEmpty>
                                                                                            </EuiIcon>
                                                                                          </span>
                                                                                        </span>
                                                                                      </EuiInnerText>
                                                                                    </EuiBadge>
                                                                                  </Badge>
                                                                                </span>
                                                                              </EuiToolTip>
                                                                            </span>
                                                                          </styled.span>
                                                                        </div>
                                                                      </ProviderContainerComponent>
                                                                    </ConditionalPortal>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <AnimateInOut
                                                              on={null}
                                                              shouldAnimate={false}
                                                            />
                                                          </div>
                                                        </Droppable>
                                                      </ConnectFunction>
                                                    </div>
                                                  </Wrapper>
                                                </Component>
                                              </DraggableWrapper>
                                            </div>
                                          </EuiFlexItem>
                                        </TokensFlexItem>
                                      </DraggableZeekElement>
                                      <DraggableZeekElement
                                        field="event.dataset"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                        stringRenderer={[Function]}
                                        value="zeek.files"
                                      >
                                        <TokensFlexItem
                                          grow={false}
                                        >
                                          <EuiFlexItem
                                            className="c1"
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero c1"
                                            >
                                              <DraggableWrapper
                                                dataProvider={
                                                  Object {
                                                    "and": Array [],
                                                    "enabled": true,
                                                    "excluded": false,
                                                    "id": "draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files",
                                                    "kqlQuery": "",
                                                    "name": "zeek.files",
                                                    "queryMatch": Object {
                                                      "field": "event.dataset",
                                                      "operator": ":",
                                                      "value": "zeek.files",
                                                    },
                                                  }
                                                }
                                                render={[Function]}
                                              >
                                                <Component
                                                  dataProvider={
                                                    Object {
                                                      "and": Array [],
                                                      "enabled": true,
                                                      "excluded": false,
                                                      "id": "draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files",
                                                      "kqlQuery": "",
                                                      "name": "zeek.files",
                                                      "queryMatch": Object {
                                                        "field": "event.dataset",
                                                        "operator": ":",
                                                        "value": "zeek.files",
                                                      },
                                                    }
                                                  }
                                                  registerProvider={[Function]}
                                                  render={[Function]}
                                                  unRegisterProvider={[Function]}
                                                >
                                                  <Wrapper
                                                    data-test-subj="draggableWrapperDiv"
                                                  >
                                                    <div
                                                      className="c2"
                                                      data-test-subj="draggableWrapperDiv"
                                                    >
                                                      <ConnectFunction
                                                        direction="vertical"
                                                        droppableId="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                        getContainerForClone={[Function]}
                                                        ignoreContainerClipping={false}
                                                        isCombineEnabled={false}
                                                        isDropDisabled={true}
                                                        mode="standard"
                                                        renderClone={null}
                                                        type="DEFAULT"
                                                      >
                                                        <Droppable
                                                          direction="vertical"
                                                          droppableId="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                          getContainerForClone={[Function]}
                                                          ignoreContainerClipping={false}
                                                          isCombineEnabled={false}
                                                          isDropDisabled={true}
                                                          mode="standard"
                                                          placeholder={null}
                                                          renderClone={null}
                                                          shouldAnimatePlaceholder={false}
                                                          snapshot={
                                                            Object {
                                                              "draggingFromThisWith": null,
                                                              "draggingOverWith": null,
                                                              "isDraggingOver": false,
                                                              "isUsingPlaceholder": false,
                                                            }
                                                          }
                                                          type="DEFAULT"
                                                          updateViewportMaxScroll={[Function]}
                                                          useClone={null}
                                                        >
                                                          <div
                                                            data-rbd-droppable-context-id="6"
                                                            data-rbd-droppable-id="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                          >
                                                            <PublicDraggable
                                                              draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                              index={0}
                                                              key="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <ConditionalPortal
                                                                      usePortal={false}
                                                                    >
                                                                      <ProviderContainerComponent
                                                                        aria-labelledby="rbd-lift-instruction-6"
                                                                        data-rbd-drag-handle-context-id="6"
                                                                        data-rbd-drag-handle-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                                        data-rbd-draggable-context-id="6"
                                                                        data-rbd-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                                        data-test-subj="providerContainer"
                                                                        draggable={false}
                                                                        isDragging={false}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-6"
                                                                          className="c3"
                                                                          data-rbd-drag-handle-context-id="6"
                                                                          data-rbd-drag-handle-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                                          data-rbd-draggable-context-id="6"
                                                                          data-rbd-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-event_dataset-zeek_files"
                                                                          data-test-subj="providerContainer"
                                                                          draggable={false}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          <styled.span
                                                                            data-test-subj="draggable-content-event.dataset"
                                                                          >
                                                                            <span
                                                                              className="c4"
                                                                              data-test-subj="draggable-content-event.dataset"
                                                                            >
                                                                              <EuiToolTip
                                                                                content="event.dataset"
                                                                                data-test-subj="badge-tooltip"
                                                                                delay="regular"
                                                                                position="top"
                                                                              >
                                                                                <span
                                                                                  className="euiToolTipAnchor"
                                                                                  onMouseOut={[Function]}
                                                                                  onMouseOver={[Function]}
                                                                                >
                                                                                  <Badge
                                                                                    color="hollow"
                                                                                    iconType="tag"
                                                                                    onBlur={[Function]}
                                                                                    onFocus={[Function]}
                                                                                  >
                                                                                    <EuiBadge
                                                                                      color="hollow"
                                                                                      iconType="tag"
                                                                                      onBlur={[Function]}
                                                                                      onFocus={[Function]}
                                                                                      style={
                                                                                        Object {
                                                                                          "verticalAlign": "top",
                                                                                        }
                                                                                      }
                                                                                    >
                                                                                      <EuiInnerText>
                                                                                        <span
                                                                                          className="euiBadge euiBadge--hollow euiBadge--iconLeft"
                                                                                          onBlur={[Function]}
                                                                                          onFocus={[Function]}
                                                                                          style={
                                                                                            Object {
                                                                                              "verticalAlign": "top",
                                                                                            }
                                                                                          }
                                                                                          title="files"
                                                                                        >
                                                                                          <span
                                                                                            className="euiBadge__content"
                                                                                          >
                                                                                            <span
                                                                                              className="euiBadge__text"
                                                                                            >
                                                                                              files
                                                                                            </span>
                                                                                            <EuiIcon
                                                                                              className="euiBadge__icon"
                                                                                              size="s"
                                                                                              type="tag"
                                                                                            >
                                                                                              <EuiIconEmpty
                                                                                                aria-hidden={true}
                                                                                                className="euiIcon euiIcon--small euiIcon-isLoading euiBadge__icon"
                                                                                                focusable="false"
                                                                                                role="img"
                                                                                                style={null}
                                                                                              >
                                                                                                <svg
                                                                                                  aria-hidden={true}
                                                                                                  className="euiIcon euiIcon--small euiIcon-isLoading euiBadge__icon"
                                                                                                  focusable="false"
                                                                                                  height={16}
                                                                                                  role="img"
                                                                                                  style={null}
                                                                                                  viewBox="0 0 16 16"
                                                                                                  width={16}
                                                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                                                />
                                                                                              </EuiIconEmpty>
                                                                                            </EuiIcon>
                                                                                          </span>
                                                                                        </span>
                                                                                      </EuiInnerText>
                                                                                    </EuiBadge>
                                                                                  </Badge>
                                                                                </span>
                                                                              </EuiToolTip>
                                                                            </span>
                                                                          </styled.span>
                                                                        </div>
                                                                      </ProviderContainerComponent>
                                                                    </ConditionalPortal>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <AnimateInOut
                                                              on={null}
                                                              shouldAnimate={false}
                                                            />
                                                          </div>
                                                        </Droppable>
                                                      </ConnectFunction>
                                                    </div>
                                                  </Wrapper>
                                                </Component>
                                              </DraggableWrapper>
                                            </div>
                                          </EuiFlexItem>
                                        </TokensFlexItem>
                                      </DraggableZeekElement>
                                      <DraggableZeekElement
                                        field="zeek.files.sha1"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                        stringRenderer={[Function]}
                                        value="fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                      >
                                        <TokensFlexItem
                                          grow={false}
                                        >
                                          <EuiFlexItem
                                            className="c1"
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero c1"
                                            >
                                              <DraggableWrapper
                                                dataProvider={
                                                  Object {
                                                    "and": Array [],
                                                    "enabled": true,
                                                    "excluded": false,
                                                    "id": "draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde",
                                                    "kqlQuery": "",
                                                    "name": "fa5195a5dfacc9d1c68d43600f0e0262cad14dde",
                                                    "queryMatch": Object {
                                                      "field": "zeek.files.sha1",
                                                      "operator": ":",
                                                      "value": "fa5195a5dfacc9d1c68d43600f0e0262cad14dde",
                                                    },
                                                  }
                                                }
                                                render={[Function]}
                                              >
                                                <Component
                                                  dataProvider={
                                                    Object {
                                                      "and": Array [],
                                                      "enabled": true,
                                                      "excluded": false,
                                                      "id": "draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde",
                                                      "kqlQuery": "",
                                                      "name": "fa5195a5dfacc9d1c68d43600f0e0262cad14dde",
                                                      "queryMatch": Object {
                                                        "field": "zeek.files.sha1",
                                                        "operator": ":",
                                                        "value": "fa5195a5dfacc9d1c68d43600f0e0262cad14dde",
                                                      },
                                                    }
                                                  }
                                                  registerProvider={[Function]}
                                                  render={[Function]}
                                                  unRegisterProvider={[Function]}
                                                >
                                                  <Wrapper
                                                    data-test-subj="draggableWrapperDiv"
                                                  >
                                                    <div
                                                      className="c2"
                                                      data-test-subj="draggableWrapperDiv"
                                                    >
                                                      <ConnectFunction
                                                        direction="vertical"
                                                        droppableId="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                        getContainerForClone={[Function]}
                                                        ignoreContainerClipping={false}
                                                        isCombineEnabled={false}
                                                        isDropDisabled={true}
                                                        mode="standard"
                                                        renderClone={null}
                                                        type="DEFAULT"
                                                      >
                                                        <Droppable
                                                          direction="vertical"
                                                          droppableId="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                          getContainerForClone={[Function]}
                                                          ignoreContainerClipping={false}
                                                          isCombineEnabled={false}
                                                          isDropDisabled={true}
                                                          mode="standard"
                                                          placeholder={null}
                                                          renderClone={null}
                                                          shouldAnimatePlaceholder={false}
                                                          snapshot={
                                                            Object {
                                                              "draggingFromThisWith": null,
                                                              "draggingOverWith": null,
                                                              "isDraggingOver": false,
                                                              "isUsingPlaceholder": false,
                                                            }
                                                          }
                                                          type="DEFAULT"
                                                          updateViewportMaxScroll={[Function]}
                                                          useClone={null}
                                                        >
                                                          <div
                                                            data-rbd-droppable-context-id="6"
                                                            data-rbd-droppable-id="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                          >
                                                            <PublicDraggable
                                                              draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                              index={0}
                                                              key="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <ConditionalPortal
                                                                      usePortal={false}
                                                                    >
                                                                      <ProviderContainerComponent
                                                                        aria-labelledby="rbd-lift-instruction-6"
                                                                        data-rbd-drag-handle-context-id="6"
                                                                        data-rbd-drag-handle-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                                        data-rbd-draggable-context-id="6"
                                                                        data-rbd-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                                        data-test-subj="providerContainer"
                                                                        draggable={false}
                                                                        isDragging={false}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-6"
                                                                          className="c3"
                                                                          data-rbd-drag-handle-context-id="6"
                                                                          data-rbd-drag-handle-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                                          data-rbd-draggable-context-id="6"
                                                                          data-rbd-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_sha1-fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                                          data-test-subj="providerContainer"
                                                                          draggable={false}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          <styled.span
                                                                            data-test-subj="draggable-content-zeek.files.sha1"
                                                                          >
                                                                            <span
                                                                              className="c4"
                                                                              data-test-subj="draggable-content-zeek.files.sha1"
                                                                            >
                                                                              <EuiToolTip
                                                                                content="zeek.files.sha1"
                                                                                data-test-subj="badge-tooltip"
                                                                                delay="regular"
                                                                                position="top"
                                                                              >
                                                                                <span
                                                                                  className="euiToolTipAnchor"
                                                                                  onMouseOut={[Function]}
                                                                                  onMouseOver={[Function]}
                                                                                >
                                                                                  <Badge
                                                                                    color="hollow"
                                                                                    iconType="tag"
                                                                                    onBlur={[Function]}
                                                                                    onFocus={[Function]}
                                                                                  >
                                                                                    <EuiBadge
                                                                                      color="hollow"
                                                                                      iconType="tag"
                                                                                      onBlur={[Function]}
                                                                                      onFocus={[Function]}
                                                                                      style={
                                                                                        Object {
                                                                                          "verticalAlign": "top",
                                                                                        }
                                                                                      }
                                                                                    >
                                                                                      <EuiInnerText>
                                                                                        <span
                                                                                          className="euiBadge euiBadge--hollow euiBadge--iconLeft"
                                                                                          onBlur={[Function]}
                                                                                          onFocus={[Function]}
                                                                                          style={
                                                                                            Object {
                                                                                              "verticalAlign": "top",
                                                                                            }
                                                                                          }
                                                                                          title="sha1: fa5195a..."
                                                                                        >
                                                                                          <span
                                                                                            className="euiBadge__content"
                                                                                          >
                                                                                            <span
                                                                                              className="euiBadge__text"
                                                                                            >
                                                                                              sha1: fa5195a...
                                                                                            </span>
                                                                                            <EuiIcon
                                                                                              className="euiBadge__icon"
                                                                                              size="s"
                                                                                              type="tag"
                                                                                            >
                                                                                              <EuiIconEmpty
                                                                                                aria-hidden={true}
                                                                                                className="euiIcon euiIcon--small euiIcon-isLoading euiBadge__icon"
                                                                                                focusable="false"
                                                                                                role="img"
                                                                                                style={null}
                                                                                              >
                                                                                                <svg
                                                                                                  aria-hidden={true}
                                                                                                  className="euiIcon euiIcon--small euiIcon-isLoading euiBadge__icon"
                                                                                                  focusable="false"
                                                                                                  height={16}
                                                                                                  role="img"
                                                                                                  style={null}
                                                                                                  viewBox="0 0 16 16"
                                                                                                  width={16}
                                                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                                                />
                                                                                              </EuiIconEmpty>
                                                                                            </EuiIcon>
                                                                                          </span>
                                                                                        </span>
                                                                                      </EuiInnerText>
                                                                                    </EuiBadge>
                                                                                  </Badge>
                                                                                </span>
                                                                              </EuiToolTip>
                                                                            </span>
                                                                          </styled.span>
                                                                        </div>
                                                                      </ProviderContainerComponent>
                                                                    </ConditionalPortal>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <AnimateInOut
                                                              on={null}
                                                              shouldAnimate={false}
                                                            />
                                                          </div>
                                                        </Droppable>
                                                      </ConnectFunction>
                                                    </div>
                                                  </Wrapper>
                                                </Component>
                                              </DraggableWrapper>
                                            </div>
                                          </EuiFlexItem>
                                        </TokensFlexItem>
                                      </DraggableZeekElement>
                                      <DraggableZeekElement
                                        field="zeek.files.md5"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                        stringRenderer={[Function]}
                                        value="f7653f1951693021daa9e6be61226e32"
                                      >
                                        <TokensFlexItem
                                          grow={false}
                                        >
                                          <EuiFlexItem
                                            className="c1"
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero c1"
                                            >
                                              <DraggableWrapper
                                                dataProvider={
                                                  Object {
                                                    "and": Array [],
                                                    "enabled": true,
                                                    "excluded": false,
                                                    "id": "draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32",
                                                    "kqlQuery": "",
                                                    "name": "f7653f1951693021daa9e6be61226e32",
                                                    "queryMatch": Object {
                                                      "field": "zeek.files.md5",
                                                      "operator": ":",
                                                      "value": "f7653f1951693021daa9e6be61226e32",
                                                    },
                                                  }
                                                }
                                                render={[Function]}
                                              >
                                                <Component
                                                  dataProvider={
                                                    Object {
                                                      "and": Array [],
                                                      "enabled": true,
                                                      "excluded": false,
                                                      "id": "draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32",
                                                      "kqlQuery": "",
                                                      "name": "f7653f1951693021daa9e6be61226e32",
                                                      "queryMatch": Object {
                                                        "field": "zeek.files.md5",
                                                        "operator": ":",
                                                        "value": "f7653f1951693021daa9e6be61226e32",
                                                      },
                                                    }
                                                  }
                                                  registerProvider={[Function]}
                                                  render={[Function]}
                                                  unRegisterProvider={[Function]}
                                                >
                                                  <Wrapper
                                                    data-test-subj="draggableWrapperDiv"
                                                  >
                                                    <div
                                                      className="c2"
                                                      data-test-subj="draggableWrapperDiv"
                                                    >
                                                      <ConnectFunction
                                                        direction="vertical"
                                                        droppableId="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                        getContainerForClone={[Function]}
                                                        ignoreContainerClipping={false}
                                                        isCombineEnabled={false}
                                                        isDropDisabled={true}
                                                        mode="standard"
                                                        renderClone={null}
                                                        type="DEFAULT"
                                                      >
                                                        <Droppable
                                                          direction="vertical"
                                                          droppableId="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                          getContainerForClone={[Function]}
                                                          ignoreContainerClipping={false}
                                                          isCombineEnabled={false}
                                                          isDropDisabled={true}
                                                          mode="standard"
                                                          placeholder={null}
                                                          renderClone={null}
                                                          shouldAnimatePlaceholder={false}
                                                          snapshot={
                                                            Object {
                                                              "draggingFromThisWith": null,
                                                              "draggingOverWith": null,
                                                              "isDraggingOver": false,
                                                              "isUsingPlaceholder": false,
                                                            }
                                                          }
                                                          type="DEFAULT"
                                                          updateViewportMaxScroll={[Function]}
                                                          useClone={null}
                                                        >
                                                          <div
                                                            data-rbd-droppable-context-id="6"
                                                            data-rbd-droppable-id="droppableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                          >
                                                            <PublicDraggable
                                                              draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                              index={0}
                                                              key="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <ConditionalPortal
                                                                      usePortal={false}
                                                                    >
                                                                      <ProviderContainerComponent
                                                                        aria-labelledby="rbd-lift-instruction-6"
                                                                        data-rbd-drag-handle-context-id="6"
                                                                        data-rbd-drag-handle-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                                        data-rbd-draggable-context-id="6"
                                                                        data-rbd-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                                        data-test-subj="providerContainer"
                                                                        draggable={false}
                                                                        isDragging={false}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-6"
                                                                          className="c3"
                                                                          data-rbd-drag-handle-context-id="6"
                                                                          data-rbd-drag-handle-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                                          data-rbd-draggable-context-id="6"
                                                                          data-rbd-draggable-id="draggableId.content.draggable-zeek-element-draggable-wrapper-zeek-signature-draggable-zeek-element-test-19-zeek_files_md5-f7653f1951693021daa9e6be61226e32"
                                                                          data-test-subj="providerContainer"
                                                                          draggable={false}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          <styled.span
                                                                            data-test-subj="draggable-content-zeek.files.md5"
                                                                          >
                                                                            <span
                                                                              className="c4"
                                                                              data-test-subj="draggable-content-zeek.files.md5"
                                                                            >
                                                                              <EuiToolTip
                                                                                content="zeek.files.md5"
                                                                                data-test-subj="badge-tooltip"
                                                                                delay="regular"
                                                                                position="top"
                                                                              >
                                                                                <span
                                                                                  className="euiToolTipAnchor"
                                                                                  onMouseOut={[Function]}
                                                                                  onMouseOver={[Function]}
                                                                                >
                                                                                  <Badge
                                                                                    color="hollow"
                                                                                    iconType="tag"
                                                                                    onBlur={[Function]}
                                                                                    onFocus={[Function]}
                                                                                  >
                                                                                    <EuiBadge
                                                                                      color="hollow"
                                                                                      iconType="tag"
                                                                                      onBlur={[Function]}
                                                                                      onFocus={[Function]}
                                                                                      style={
                                                                                        Object {
                                                                                          "verticalAlign": "top",
                                                                                        }
                                                                                      }
                                                                                    >
                                                                                      <EuiInnerText>
                                                                                        <span
                                                                                          className="euiBadge euiBadge--hollow euiBadge--iconLeft"
                                                                                          onBlur={[Function]}
                                                                                          onFocus={[Function]}
                                                                                          style={
                                                                                            Object {
                                                                                              "verticalAlign": "top",
                                                                                            }
                                                                                          }
                                                                                          title="md5: f7653f1..."
                                                                                        >
                                                                                          <span
                                                                                            className="euiBadge__content"
                                                                                          >
                                                                                            <span
                                                                                              className="euiBadge__text"
                                                                                            >
                                                                                              md5: f7653f1...
                                                                                            </span>
                                                                                            <EuiIcon
                                                                                              className="euiBadge__icon"
                                                                                              size="s"
                                                                                              type="tag"
                                                                                            >
                                                                                              <EuiIconEmpty
                                                                                                aria-hidden={true}
                                                                                                className="euiIcon euiIcon--small euiIcon-isLoading euiBadge__icon"
                                                                                                focusable="false"
                                                                                                role="img"
                                                                                                style={null}
                                                                                              >
                                                                                                <svg
                                                                                                  aria-hidden={true}
                                                                                                  className="euiIcon euiIcon--small euiIcon-isLoading euiBadge__icon"
                                                                                                  focusable="false"
                                                                                                  height={16}
                                                                                                  role="img"
                                                                                                  style={null}
                                                                                                  viewBox="0 0 16 16"
                                                                                                  width={16}
                                                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                                                />
                                                                                              </EuiIconEmpty>
                                                                                            </EuiIcon>
                                                                                          </span>
                                                                                        </span>
                                                                                      </EuiInnerText>
                                                                                    </EuiBadge>
                                                                                  </Badge>
                                                                                </span>
                                                                              </EuiToolTip>
                                                                            </span>
                                                                          </styled.span>
                                                                        </div>
                                                                      </ProviderContainerComponent>
                                                                    </ConditionalPortal>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <AnimateInOut
                                                              on={null}
                                                              shouldAnimate={false}
                                                            />
                                                          </div>
                                                        </Droppable>
                                                      </ConnectFunction>
                                                    </div>
                                                  </Wrapper>
                                                </Component>
                                              </DraggableWrapper>
                                            </div>
                                          </EuiFlexItem>
                                        </TokensFlexItem>
                                      </DraggableZeekElement>
                                      <DraggableZeekElement
                                        field="zeek.notice.dropped"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                        stringRenderer={[Function]}
                                        value={null}
                                      />
                                      <DraggableZeekElement
                                        field="zeek.ssl.version"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                      />
                                      <DraggableZeekElement
                                        field="zeek.ssl.cipher"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                      />
                                      <DraggableZeekElement
                                        field="zeek.connection.state"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                      />
                                      <DraggableZeekElement
                                        field="http.request.method"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                      />
                                      <DraggableZeekElement
                                        field="zeek.connection.history"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                      />
                                      <DraggableZeekElement
                                        field="zeek.notice.note"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                      />
                                      <DraggableZeekElement
                                        field="zeek.dns.query"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                      />
                                      <DraggableZeekElement
                                        field="zeek.dns.qclass_name"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                      />
                                      <DraggableZeekElement
                                        field="http.response.status_code"
                                        id="zeek-signature-draggable-zeek-element-test-19"
                                      />
                                    </div>
                                  </EuiFlexGroup>
                                  <EuiFlexGroup
                                    gutterSize="none"
                                    justifyContent="center"
                                  >
                                    <div
                                      className="euiFlexGroup euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                                    >
                                      <Link
                                        link={null}
                                        value={null}
                                      />
                                      <Link />
                                      <Link />
                                      <Link />
                                      <Link />
                                      <TotalVirusLinkSha
                                        value="fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                      >
                                        <LinkFlexItem
                                          grow={false}
                                        >
                                          <EuiFlexItem
                                            className="c5"
                                            grow={false}
                                          >
                                            <div
                                              className="euiFlexItem euiFlexItem--flexGrowZero c5"
                                            >
                                              <div>
                                                <Memo(ReputationLinkComponent)
                                                  data-test-subj="reputationLinkSha"
                                                  domain="fa5195a5dfacc9d1c68d43600f0e0262cad14dde"
                                                  overflowIndexStart={1}
                                                  showDomain={true}
                                                />
                                              </div>
                                            </div>
                                          </EuiFlexItem>
                                        </LinkFlexItem>
                                      </TotalVirusLinkSha>
                                    </div>
                                  </EuiFlexGroup>
                                </ZeekSignature>
                                <EuiSpacer
                                  size="s"
                                >
                                  <div
                                    className="euiSpacer euiSpacer--s"
                                  />
                                </EuiSpacer>
                                <NetflowRenderer
                                  data={
                                    Object {
                                      "_id": "19",
                                      "destination": null,
                                      "event": Object {
                                        "action": null,
                                        "category": null,
                                        "dataset": Array [
                                          "zeek.files",
                                        ],
                                        "id": null,
                                        "module": Array [
                                          "zeek",
                                        ],
                                        "severity": null,
                                      },
                                      "geo": null,
                                      "host": Object {
                                        "id": Array [
                                          "af3fddf15f1d47979ce817ba0df10c6e",
                                        ],
                                        "ip": Array [
                                          "206.189.35.240",
                                          "10.15.0.5",
                                          "fe80::98c7:eff:fe29:4455",
                                        ],
                                        "name": Array [
                                          "suricata-zeek-singapore",
                                        ],
                                      },
                                      "http": null,
                                      "network": null,
                                      "source": null,
                                      "suricata": null,
                                      "timestamp": "2019-03-03T04:26:38.000Z",
                                      "url": null,
                                      "zeek": Object {
                                        "connection": null,
                                        "dns": null,
                                        "files": Object {
                                          "analyzers": Array [
                                            "MD5",
                                            "SHA1",
                                          ],
                                          "depth": Array [
                                            0,
                                          ],
                                          "duration": Array [
                                            0,
                                          ],
                                          "fuid": Array [
                                            "FePz1uVEVCZ3I0FQi",
                                          ],
                                          "is_orig": Array [
                                            false,
                                          ],
                                          "local_orig": Array [
                                            false,
                                          ],
                                          "md5": Array [
                                            "f7653f1951693021daa9e6be61226e32",
                                          ],
                                          "mime_type": Array [
                                            "text/plain",
                                          ],
                                          "missing_bytes": Array [
                                            0,
                                          ],
                                          "overflow_bytes": Array [
                                            0,
                                          ],
                                          "rx_host": Array [
                                            "206.189.35.240",
                                          ],
                                          "seen_bytes": Array [
                                            1198,
                                          ],
                                          "session_ids": Array [
                                            "Cu0n232QMyvNtzb75j",
                                          ],
                                          "sha1": Array [
                                            "fa5195a5dfacc9d1c68d43600f0e0262cad14dde",
                                          ],
                                          "source": Array [
                                            "HTTP",
                                          ],
                                          "timedout": Array [
                                            false,
                                          ],
                                          "total_bytes": Array [
                                            88722,
                                          ],
                                          "tx_host": Array [
                                            "5.101.111.50",
                                          ],
                                        },
                                        "http": null,
                                        "notice": null,
                                        "session_id": Array [
                                          "Cu0n232QMyvNtzb75j",
                                        ],
                                        "ssl": null,
                                      },
                                    }
                                  }
                                  timelineId="test"
                                >
                                  <Netflow
                                    contextId="netflow-renderer-test-19"
                                    eventId="19"
                                  >
                                    <EuiFlexGroup
                                      alignItems="center"
                                      data-test-subj="netflow-rows"
                                      direction="column"
                                      gutterSize="none"
                                      justifyContent="center"
                                      wrap={true}
                                    >
                                      <div
                                        className="euiFlexGroup euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionColumn euiFlexGroup--responsive euiFlexGroup--wrap"
                                        data-test-subj="netflow-rows"
                                      >
                                        <EuiFlexItem
                                          grow={false}
                                        >
                                          <div
                                            className="euiFlexItem euiFlexItem--flexGrowZero"
                                          >
                                            <NetflowColumns
                                              contextId="netflow-renderer-test-19"
                                              eventId="19"
                                            >
                                              <EuiFlexGroup
                                                data-test-subj="netflow-columns"
                                                gutterSize="none"
                                                justifyContent="center"
                                                wrap={true}
                                              >
                                                <div
                                                  className="euiFlexGroup euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive euiFlexGroup--wrap"
                                                  data-test-subj="netflow-columns"
                                                >
                                                  <EuiFlexItemMarginRight
                                                    grow={false}
                                                  >
                                                    <EuiFlexItem
                                                      className="c6"
                                                      grow={false}
                                                    >
                                                      <div
                                                        className="euiFlexItem euiFlexItem--flexGrowZero c6"
                                                      >
                                                        <UserProcess
                                                          contextId="netflow-renderer-test-19"
                                                          eventId="19"
                                                        >
                                                          <EuiFlexGroup
                                                            alignItems="flexStart"
                                                            data-test-subj="user-process"
                                                            direction="column"
                                                            gutterSize="none"
                                                            justifyContent="center"
                                                          >
                                                            <div
                                                              className="euiFlexGroup euiFlexGroup--alignItemsFlexStart euiFlexGroup--justifyContentCenter euiFlexGroup--directionColumn euiFlexGroup--responsive"
                                                              data-test-subj="user-process"
                                                            />
                                                          </EuiFlexGroup>
                                                        </UserProcess>
                                                      </div>
                                                    </EuiFlexItem>
                                                  </EuiFlexItemMarginRight>
                                                  <EuiFlexItemMarginRight
                                                    grow={false}
                                                  >
                                                    <EuiFlexItem
                                                      className="c6"
                                                      grow={false}
                                                    >
                                                      <div
                                                        className="euiFlexItem euiFlexItem--flexGrowZero c6"
                                                      >
                                                        <DurationEventStartEnd
                                                          contextId="netflow-renderer-test-19"
                                                          eventId="19"
                                                        >
                                                          <EuiFlexGroup
                                                            alignItems="flexStart"
                                                            data-test-subj="duration-and-start-group"
                                                            direction="column"
                                                            gutterSize="none"
                                                            justifyContent="center"
                                                          >
                                                            <div
                                                              className="euiFlexGroup euiFlexGroup--alignItemsFlexStart euiFlexGroup--justifyContentCenter euiFlexGroup--directionColumn euiFlexGroup--responsive"
                                                              data-test-subj="duration-and-start-group"
                                                            />
                                                          </EuiFlexGroup>
                                                        </DurationEventStartEnd>
                                                      </div>
                                                    </EuiFlexItem>
                                                  </EuiFlexItemMarginRight>
                                                  <EuiFlexItem
                                                    grow={false}
                                                  >
                                                    <div
                                                      className="euiFlexItem euiFlexItem--flexGrowZero"
                                                    >
                                                      <SourceDestination
                                                        contextId="netflow-renderer-test-19"
                                                        eventId="19"
                                                      >
                                                        <EuiFlexGroup
                                                          alignItems="center"
                                                          direction="column"
                                                          gutterSize="none"
                                                          justifyContent="center"
                                                        >
                                                          <div
                                                            className="euiFlexGroup euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionColumn euiFlexGroup--responsive"
                                                          >
                                                            <EuiFlexItem
                                                              grow={false}
                                                            >
                                                              <div
                                                                className="euiFlexItem euiFlexItem--flexGrowZero"
                                                              >
                                                                <Network
                                                                  contextId="netflow-renderer-test-19"
                                                                  eventId="19"
                                                                >
                                                                  <EuiFlexGroup
                                                                    alignItems="center"
                                                                    gutterSize="none"
                                                                    justifyContent="center"
                                                                  >
                                                                    <div
                                                                      className="euiFlexGroup euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                                                                    />
                                                                  </EuiFlexGroup>
                                                                </Network>
                                                              </div>
                                                            </EuiFlexItem>
                                                            <EuiFlexItemMarginTop
                                                              grow={false}
                                                            >
                                                              <EuiFlexItem
                                                                className="c7"
                                                                grow={false}
                                                              >
                                                                <div
                                                                  className="euiFlexItem euiFlexItem--flexGrowZero c7"
                                                                >
                                                                  <SourceDestinationWithArrows
                                                                    contextId="netflow-renderer-test-19"
                                                                    eventId="19"
                                                                  >
                                                                    <EuiFlexGroup
                                                                      gutterSize="none"
                                                                      justifyContent="center"
                                                                    >
                                                                      <div
                                                                        className="euiFlexGroup euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
                                                                      >
                                                                        <EuiFlexItem
                                                                          grow={false}
                                                                        >
                                                                          <div
                                                                            className="euiFlexItem euiFlexItem--flexGrowZero"
                                                                          >
                                                                            <SourceDestinationIp
                                                                              contextId="netflow-renderer-test-19"
                                                                              eventId="19"
                                                                              type="source"
                                                                            />
                                                                          </div>
                                                                        </EuiFlexItem>
                                                                        <SourceDestinationArrows
                                                                          contextId="netflow-renderer-test-19"
                                                                          eventId="19"
                                                                        >
                                                                          <SourceDestinationArrowsContainer
                                                                            alignItems="center"
                                                                            data-test-subj="source-destination-arrows-container"
                                                                            direction="column"
                                                                            gutterSize="none"
                                                                            justifyContent="center"
                                                                          >
                                                                            <EuiFlexGroup
                                                                              alignItems="center"
                                                                              className="c8"
                                                                              data-test-subj="source-destination-arrows-container"
                                                                              direction="column"
                                                                              gutterSize="none"
                                                                              justifyContent="center"
                                                                            >
                                                                              <div
                                                                                className="euiFlexGroup euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionColumn euiFlexGroup--responsive c8"
                                                                                data-test-subj="source-destination-arrows-container"
                                                                              />
                                                                            </EuiFlexGroup>
                                                                          </SourceDestinationArrowsContainer>
                                                                        </SourceDestinationArrows>
                                                                        <EuiFlexItem
                                                                          grow={false}
                                                                        >
                                                                          <div
                                                                            className="euiFlexItem euiFlexItem--flexGrowZero"
                                                                          >
                                                                            <SourceDestinationIp
                                                                              contextId="netflow-renderer-test-19"
                                                                              eventId="19"
                                                                              type="destination"
                                                                            />
                                                                          </div>
                                                                        </EuiFlexItem>
                                                                      </div>
                                                                    </EuiFlexGroup>
                                                                  </SourceDestinationWithArrows>
                                                                </div>
                                                              </EuiFlexItem>
                                                            </EuiFlexItemMarginTop>
                                                          </div>
                                                        </EuiFlexGroup>
                                                      </SourceDestination>
                                                    </div>
                                                  </EuiFlexItem>
                                                </div>
                                              </EuiFlexGroup>
                                            </NetflowColumns>
                                          </div>
                                        </EuiFlexItem>
                                        <EuiFlexItem
                                          grow={false}
                                        >
                                          <div
                                            className="euiFlexItem euiFlexItem--flexGrowZero"
                                          >
                                            <Fingerprints
                                              contextId="netflow-renderer-test-19"
                                              eventId="19"
                                            >
                                              <EuiFlexGroup
                                                alignItems="center"
                                                data-test-subj="fingerprints-group"
                                                direction="column"
                                                gutterSize="none"
                                                justifyContent="center"
                                              >
                                                <div
                                                  className="euiFlexGroup euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentCenter euiFlexGroup--directionColumn euiFlexGroup--responsive"
                                                  data-test-subj="fingerprints-group"
                                                />
                                              </EuiFlexGroup>
                                            </Fingerprints>
                                          </div>
                                        </EuiFlexItem>
                                      </div>
                                    </EuiFlexGroup>
                                  </Netflow>
                                </NetflowRenderer>
                              </div>
                            </Details>
                          </ZeekDetails>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                </ThemeProvider>
              </Provider>
            </ApolloProvider>
          </Provider>
        </Component>
      </PseudoLocaleWrapper>
    </IntlProvider>
  </I18nProvider>
</Memo(TestProvidersComponent)>
`;
