// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Table Helpers #getRowItemDraggable it returns correctly against snapshot 1`] = `
<Component>
  <Connect(DraggableWrapperComponent)
    dataProvider={
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "idPrefix-attrName-item1",
        "kqlQuery": "",
        "name": "item1",
        "queryMatch": Object {
          "displayValue": "item1",
          "field": "attrName",
          "operator": ":",
          "value": "item1",
        },
      }
    }
    key="idPrefix-attrName-item1"
    render={[Function]}
  />
</Component>
`;

exports[`Table Helpers #getRowItemDraggables it returns correctly against snapshot 1`] = `
<Component>
  <Connect(DraggableWrapperComponent)
    dataProvider={
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "idPrefix-attrName-item1",
        "kqlQuery": "",
        "name": "item1",
        "queryMatch": Object {
          "displayValue": "item1",
          "field": "attrName",
          "operator": ":",
          "value": "item1",
        },
      }
    }
    key="idPrefix-attrName-item1"
    render={[Function]}
  />
  ,
  <Spacer />
  <Connect(DraggableWrapperComponent)
    dataProvider={
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "idPrefix-attrName-item2",
        "kqlQuery": "",
        "name": "item2",
        "queryMatch": Object {
          "displayValue": "item2",
          "field": "attrName",
          "operator": ":",
          "value": "item2",
        },
      }
    }
    key="idPrefix-attrName-item2"
    render={[Function]}
  />
  ,
  <Spacer />
  <Connect(DraggableWrapperComponent)
    dataProvider={
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "idPrefix-attrName-item3",
        "kqlQuery": "",
        "name": "item3",
        "queryMatch": Object {
          "displayValue": "item3",
          "field": "attrName",
          "operator": ":",
          "value": "item3",
        },
      }
    }
    key="idPrefix-attrName-item3"
    render={[Function]}
  />
   
</Component>
`;

exports[`Table Helpers #getRowItemOverflow it returns correctly against snapshot 1`] = `
<div>
  <EuiToolTip
    content={
      <React.Fragment>
        <span>
          <React.Fragment>
            item2
          </React.Fragment>
          <br />
        </span>
        <b>
          <br />
          <FormattedMessage
            defaultMessage="More..."
            id="xpack.siem.tables.rowItemHelper.moreDescription"
            values={Object {}}
          />
        </b>
      </React.Fragment>
    }
    delay="regular"
    position="top"
  >
    <MoreRowItems
      type="boxesHorizontal"
    />
  </EuiToolTip>
</div>
`;

exports[`Table Helpers OverflowField it returns correctly against snapshot 1`] = `
<span>
  This string is exactly fifty-one chars in length!!
  <EuiToolTip
    content="This string is exactly fifty-one chars in length!!!"
    delay="regular"
    position="top"
  >
    <MoreRowItems
      type="boxesHorizontal"
    />
  </EuiToolTip>
</span>
`;
