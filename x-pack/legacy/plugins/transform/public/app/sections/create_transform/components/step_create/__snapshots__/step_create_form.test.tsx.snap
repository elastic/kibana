// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transform: <StepCreateForm /> Minimal initialization 1`] = `
<AuthorizationProvider
  privilegesEndpoint="/api/transform/privileges"
>
  <mockConstructor>
    <HashRouter>
      <ContextProvider
        value={
          Object {
            "core": Object {
              "application": Object {
                "capabilities": Object {
                  "catalogue": Object {},
                  "management": Object {},
                  "navLinks": Object {},
                },
                "currentAppId$": Observable {
                  "_isScalar": false,
                  "source": Subject {
                    "_isScalar": false,
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [],
                    "thrownError": null,
                  },
                },
                "getUrlForApp": [MockFunction],
                "navigateToApp": [MockFunction],
                "registerMountContext": [MockFunction],
              },
              "chrome": Object {
                "addApplicationClass": [MockFunction],
                "docTitle": Object {
                  "__legacy": Object {
                    "setBaseTitle": [MockFunction],
                  },
                  "change": [MockFunction],
                  "reset": [MockFunction],
                },
                "getApplicationClasses$": [MockFunction],
                "getBadge$": [MockFunction],
                "getBrand$": [MockFunction],
                "getBreadcrumbs$": [MockFunction],
                "getHeaderComponent": [MockFunction],
                "getHelpExtension$": [MockFunction],
                "getIsCollapsed$": [MockFunction],
                "getIsVisible$": [MockFunction],
                "navControls": Object {
                  "getLeft$": [MockFunction],
                  "getRight$": [MockFunction],
                  "registerLeft": [MockFunction],
                  "registerRight": [MockFunction],
                },
                "navLinks": Object {
                  "enableForcedAppSwitcherNavigation": [MockFunction],
                  "get": [MockFunction],
                  "getAll": [MockFunction],
                  "getForceAppSwitcherNavigation$": [MockFunction],
                  "getNavLinks$": [MockFunction],
                  "has": [MockFunction],
                  "showOnly": [MockFunction],
                  "update": [MockFunction],
                },
                "recentlyAccessed": Object {
                  "add": [MockFunction],
                  "get": [MockFunction],
                  "get$": [MockFunction],
                },
                "removeApplicationClass": [MockFunction],
                "setAppTitle": [MockFunction],
                "setBadge": [MockFunction],
                "setBrand": [MockFunction],
                "setBreadcrumbs": [MockFunction],
                "setHelpExtension": [MockFunction],
                "setHelpSupportUrl": [MockFunction],
                "setIsCollapsed": [MockFunction],
                "setIsVisible": [MockFunction],
              },
              "docLinks": Object {
                "DOC_LINK_VERSION": "mocked-test-branch",
                "ELASTIC_WEBSITE_URL": "https://www.elastic.co/",
                "links": Object {
                  "aggs": Object {
                    "avg": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-avg-aggregation.html",
                    "avg_bucket": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-avg-bucket-aggregation.html",
                    "cardinality": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-cardinality-aggregation.html",
                    "count": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-valuecount-aggregation.html",
                    "cumulative_sum": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-sum-aggregation.html",
                    "date_histogram": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-datehistogram-aggregation.html",
                    "date_range": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-daterange-aggregation.html",
                    "derivative": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-derivative-aggregation.html",
                    "filter": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-filter-aggregation.html",
                    "filters": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-filters-aggregation.html",
                    "geo_bounds": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-geobounds-aggregation.html",
                    "geo_centroid": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-geocentroid-aggregation.html",
                    "geohash_grid": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-geohashgrid-aggregation.html",
                    "histogram": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-histogram-aggregation.html",
                    "ip_range": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-iprange-aggregation.html",
                    "max": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-max-aggregation.html",
                    "max_bucket": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-max-bucket-aggregation.html",
                    "median": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-percentile-aggregation.html",
                    "min": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-min-aggregation.html",
                    "min_bucket": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-min-bucket-aggregation.html",
                    "moving_avg": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-movavg-aggregation.html",
                    "percentile_ranks": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-percentile-rank-aggregation.html",
                    "range": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-range-aggregation.html",
                    "serial_diff": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-serialdiff-aggregation.html",
                    "significant_terms": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-significantterms-aggregation.html",
                    "std_dev": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-extendedstats-aggregation.html",
                    "sum": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-sum-aggregation.html",
                    "sum_bucket": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-pipeline-sum-bucket-aggregation.html",
                    "terms": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-bucket-terms-aggregation.html",
                    "top_hits": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations-metrics-top-hits-aggregation.html",
                  },
                  "auditbeat": Object {
                    "base": "https://www.elastic.co/guide/en/beats/auditbeat/mocked-test-branch",
                  },
                  "date": Object {
                    "dateMath": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/common-options.html#date-math",
                  },
                  "filebeat": Object {
                    "base": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch",
                    "configuration": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/filebeat-configuration.html",
                    "elasticsearchOutput": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/elasticsearch-output.html",
                    "exportedFields": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/exported-fields.html",
                    "installation": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/filebeat-installation.html",
                    "startup": "https://www.elastic.co/guide/en/beats/filebeat/mocked-test-branch/filebeat-starting.html",
                  },
                  "functionbeat": Object {
                    "base": "https://www.elastic.co/guide/en/beats/functionbeat/mocked-test-branch",
                  },
                  "heartbeat": Object {
                    "base": "https://www.elastic.co/guide/en/beats/heartbeat/mocked-test-branch",
                  },
                  "indexPatterns": Object {
                    "introduction": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/index-patterns.html",
                    "loadingData": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/tutorial-load-dataset.html",
                  },
                  "kibana": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/index.html",
                  "logstash": Object {
                    "base": "https://www.elastic.co/guide/en/logstash/mocked-test-branch",
                  },
                  "management": Object {
                    "dashboardSettings": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/advanced-options.html#kibana-dashboard-settings",
                    "kibanaSearchSettings": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/advanced-options.html#kibana-search-settings",
                  },
                  "metricbeat": Object {
                    "base": "https://www.elastic.co/guide/en/beats/metricbeat/mocked-test-branch",
                  },
                  "query": Object {
                    "kueryQuerySyntax": "https://www.elastic.co/guide/en/kibana/mocked-test-branch/kuery-query.html",
                    "luceneQuerySyntax": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/query-dsl-query-string-query.html#query-string-syntax",
                    "queryDsl": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/query-dsl.html",
                  },
                  "scriptedFields": Object {
                    "luceneExpressions": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/modules-scripting-expression.html",
                    "painless": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/modules-scripting-painless.html",
                    "painlessApi": "https://www.elastic.co/guide/en/elasticsearch/painless/mocked-test-branch/painless-api-reference.html",
                    "painlessSyntax": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/modules-scripting-painless-syntax.html",
                    "scriptAggs": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-aggregations.html#_values_source",
                    "scriptFields": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/search-request-script-fields.html",
                  },
                  "siem": Object {
                    "gettingStarted": "https://www.elastic.co/guide/en/siem/guide/mocked-test-branch/install-siem.html",
                    "guide": "https://www.elastic.co/guide/en/siem/guide/mocked-test-branch/index.html",
                  },
                  "winlogbeat": Object {
                    "base": "https://www.elastic.co/guide/en/beats/winlogbeat/mocked-test-branch",
                  },
                },
              },
              "docTitle": Object {
                "change": [Function],
              },
              "documentation": Object {
                "esDocBasePath": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/",
                "esIndicesCreateIndex": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/indices-create-index.html#indices-create-index",
                "esPluginDocBasePath": "https://www.elastic.co/guide/en/elasticsearch/plugins/mocked-test-branch/",
                "esQueryDsl": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/query-dsl.html",
                "esStackOverviewDocBasePath": "https://www.elastic.co/guide/en/elastic-stack-overview/mocked-test-branch/",
                "esTransform": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/transforms.html",
                "esTransformPivot": "https://www.elastic.co/guide/en/elasticsearch/reference/mocked-test-branch/put-transform.html#put-transform-request-body",
                "mlDocBasePath": "https://www.elastic.co/guide/en/machine-learning/mocked-test-branch/",
              },
              "fatalErrors": Object {
                "add": [MockFunction],
                "get$": [MockFunction],
              },
              "http": Object {
                "addLoadingCountSource": [MockFunction],
                "anonymousPaths": Object {
                  "isAnonymous": [MockFunction],
                  "register": [MockFunction],
                },
                "basePath": BasePath {
                  "basePath": "",
                  "get": [Function],
                  "prepend": [Function],
                  "remove": [Function],
                  "serverBasePath": "",
                },
                "delete": [MockFunction],
                "fetch": [MockFunction],
                "get": [MockFunction],
                "getLoadingCount$": [MockFunction],
                "head": [MockFunction],
                "intercept": [MockFunction],
                "options": [MockFunction],
                "patch": [MockFunction],
                "post": [MockFunction],
                "put": [MockFunction],
              },
              "i18n": Object {
                "Context": [MockFunction],
              },
              "injectedMetadata": Object {
                "getInjectedVar": [MockFunction],
              },
              "notifications": Object {
                "toasts": Object {
                  "add": [MockFunction],
                  "addDanger": [MockFunction],
                  "addError": [MockFunction],
                  "addSuccess": [MockFunction],
                  "addWarning": [MockFunction],
                  "get$": [MockFunction],
                  "remove": [MockFunction],
                },
              },
              "overlays": Object {
                "banners": Object {
                  "add": [MockFunction],
                  "get$": [MockFunction],
                  "getComponent": [MockFunction],
                  "remove": [MockFunction],
                  "replace": [MockFunction],
                },
                "openConfirm": [MockFunction],
                "openFlyout": [MockFunction],
                "openModal": [MockFunction],
              },
              "savedObjects": Object {
                "client": Object {
                  "bulkCreate": [MockFunction],
                  "bulkGet": [MockFunction],
                  "bulkUpdate": [MockFunction],
                  "create": [MockFunction],
                  "delete": [MockFunction],
                  "find": [MockFunction],
                  "get": [MockFunction],
                  "update": [MockFunction],
                },
              },
              "uiSettings": Object {
                "get": [MockFunction],
                "get$": [MockFunction],
                "getAll": [MockFunction],
                "getSaved$": [MockFunction],
                "getUpdate$": [MockFunction],
                "getUpdateErrors$": [MockFunction],
                "isCustom": [MockFunction],
                "isDeclared": [MockFunction],
                "isDefault": [MockFunction],
                "isOverridden": [MockFunction],
                "overrideLocalDefault": [MockFunction],
                "remove": [MockFunction],
                "set": [MockFunction],
              },
            },
            "plugins": Object {
              "advancedSettings": Object {
                "component": Object {
                  "componentType": Object {
                    "PAGE_FOOTER_COMPONENT": "advanced_settings_page_footer",
                    "PAGE_SUBTITLE_COMPONENT": "advanced_settings_page_subtitle",
                    "PAGE_TITLE_COMPONENT": "advanced_settings_page_title",
                  },
                  "get": [MockFunction],
                },
              },
              "charts": Object {
                "colors": Object {
                  "createColorLookupFunction": [MockFunction],
                },
                "theme": Object {
                  "chartsDefaultTheme": Object {
                    "areaSeriesStyle": Object {
                      "area": Object {
                        "opacity": 0.3,
                      },
                      "line": Object {
                        "strokeWidth": 2,
                      },
                      "point": Object {
                        "fill": "rgba(255, 255, 255, 1)",
                        "radius": 3,
                        "strokeWidth": 2,
                        "visible": false,
                      },
                    },
                    "axes": Object {
                      "axisLineStyle": Object {
                        "stroke": "rgba(239, 241, 244, 1)",
                      },
                      "axisTitleStyle": Object {
                        "fill": "rgba(52, 55, 65, 1)",
                        "fontFamily": "'Inter UI', -apple-system, BlinkMacSystemFont,
  'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                        "fontSize": 12,
                        "padding": 10,
                      },
                      "gridLineStyle": Object {
                        "horizontal": Object {
                          "dash": Array [
                            0,
                            0,
                          ],
                          "opacity": 1,
                          "stroke": "rgba(239, 241, 244, 1)",
                          "strokeWidth": 1,
                          "visible": true,
                        },
                        "vertical": Object {
                          "dash": Array [
                            4,
                            4,
                          ],
                          "opacity": 1,
                          "stroke": "rgba(239, 241, 244, 1)",
                          "strokeWidth": 1,
                          "visible": true,
                        },
                      },
                      "tickLabelStyle": Object {
                        "fill": "rgba(105, 112, 125, 1)",
                        "fontFamily": "'Inter UI', -apple-system, BlinkMacSystemFont,
  'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                        "fontSize": 10,
                        "padding": 8,
                      },
                      "tickLineStyle": Object {
                        "stroke": "rgba(239, 241, 244, 1)",
                        "strokeWidth": 1,
                        "visible": false,
                      },
                    },
                    "barSeriesStyle": Object {
                      "displayValue": Object {
                        "fill": "rgba(105, 112, 125, 1)",
                        "fontFamily": "'Inter UI', -apple-system, BlinkMacSystemFont,
  'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                        "fontSize": 8,
                      },
                    },
                    "chartMargins": Object {
                      "bottom": 0,
                      "left": 0,
                      "right": 0,
                      "top": 0,
                    },
                    "colors": Object {
                      "defaultVizColor": "#6092C0",
                      "vizColors": Array [
                        "#54B399",
                        "#6092C0",
                        "#D36086",
                        "#9170B8",
                        "#CA8EAE",
                        "#D6BF57",
                        "#B9A888",
                        "#DA8B45",
                        "#AA6556",
                        "#E7664C",
                      ],
                    },
                    "crosshair": Object {
                      "band": Object {
                        "fill": "rgba(245, 247, 250, 1)",
                      },
                      "line": Object {
                        "dash": Array [
                          4,
                          4,
                        ],
                        "stroke": "rgba(105, 112, 125, 1)",
                        "strokeWidth": 1,
                      },
                    },
                    "lineSeriesStyle": Object {
                      "line": Object {
                        "strokeWidth": 2,
                      },
                      "point": Object {
                        "fill": "rgba(255, 255, 255, 1)",
                        "radius": 3,
                        "strokeWidth": 2,
                      },
                    },
                    "scales": Object {
                      "barsPadding": 0.25,
                      "histogramPadding": 0.05,
                    },
                  },
                  "chartsTheme$": [MockFunction],
                  "useChartsTheme": [MockFunction],
                },
              },
              "data": Object {
                "__LEGACY": Object {
                  "esClient": Object {
                    "msearch": [MockFunction],
                    "search": [MockFunction],
                  },
                },
                "autocomplete": Object {
                  "getQuerySuggestions": [MockFunction],
                  "getValueSuggestions": [MockFunction],
                  "hasQuerySuggestions": [MockFunction],
                },
                "fieldFormats": Object {
                  "deserialize": [MockFunction],
                  "getByFieldType": [MockFunction],
                  "getDefaultConfig": [MockFunction],
                  "getDefaultInstance": [MockFunction],
                  "getDefaultInstanceCacheResolver": [MockFunction],
                  "getDefaultInstancePlain": [MockFunction],
                  "getDefaultType": [MockFunction],
                  "getDefaultTypeName": [MockFunction],
                  "getInstance": [MockFunction],
                  "getType": [MockFunction],
                  "getTypeNameByEsTypes": [MockFunction],
                  "getTypeWithoutMetaParams": [MockFunction],
                  "init": [MockFunction],
                  "parseDefaultTypeMap": [MockFunction],
                  "register": [MockFunction],
                },
                "getSuggestions": [MockFunction],
                "indexPatterns": Object {
                  "get": [MockFunction],
                  "make": [Function],
                },
                "query": Object {
                  "filterManager": [MockFunction],
                  "savedQueries": [MockFunction],
                  "state$": Observable {
                    "_isScalar": false,
                  },
                  "timefilter": Object {
                    "history": Object {
                      "add": [MockFunction],
                      "get": [MockFunction],
                    },
                    "timefilter": Object {
                      "calculateBounds": [MockFunction],
                      "createFilter": [MockFunction],
                      "disableAutoRefreshSelector": [MockFunction],
                      "disableTimeRangeSelector": [MockFunction],
                      "enableAutoRefreshSelector": [MockFunction],
                      "enableTimeRangeSelector": [MockFunction],
                      "getActiveBounds": [MockFunction],
                      "getAutoRefreshFetch$": [MockFunction],
                      "getBounds": [MockFunction],
                      "getEnabledUpdated$": [MockFunction],
                      "getFetch$": [MockFunction],
                      "getRefreshInterval": [MockFunction],
                      "getRefreshIntervalDefaults": [MockFunction],
                      "getRefreshIntervalUpdate$": [MockFunction],
                      "getTime": [MockFunction],
                      "getTimeDefaults": [MockFunction],
                      "getTimeUpdate$": [MockFunction],
                      "isAutoRefreshSelectorEnabled": [MockFunction],
                      "isTimeRangeSelectorEnabled": [MockFunction],
                      "setRefreshInterval": [MockFunction],
                      "setTime": [MockFunction],
                    },
                  },
                },
                "search": Object {
                  "__LEGACY": Object {
                    "esClient": Object {
                      "msearch": [MockFunction],
                      "search": [MockFunction],
                    },
                  },
                  "search": [MockFunction],
                },
                "ui": Object {
                  "IndexPatternSelect": [MockFunction],
                  "SearchBar": [MockFunction],
                },
              },
              "embeddable": Object {
                "getEmbeddableFactories": [MockFunction],
                "getEmbeddableFactory": [MockFunction],
                "registerEmbeddableFactory": [MockFunction],
              },
              "expressions": Object {
                "ExpressionLoader": [MockFunction],
                "ExpressionRenderHandler": [MockFunction],
                "ReactExpressionRenderer": [MockFunction],
                "execute": [MockFunction],
                "fork": [MockFunction],
                "getFunction": [MockFunction],
                "getFunctions": [MockFunction],
                "getRenderer": [MockFunction],
                "getRenderers": [MockFunction],
                "getType": [MockFunction],
                "getTypes": [MockFunction],
                "loader": [MockFunction],
                "render": [MockFunction],
                "run": [MockFunction],
              },
              "inspector": Object {
                "isAvailable": [MockFunction],
                "open": [MockFunction],
              },
              "kibanaLegacy": Object {
                "config": Object {
                  "defaultAppId": "home",
                },
                "dashboardConfig": Object {
                  "getHideWriteControls": [MockFunction],
                  "turnHideWriteControlsOn": [MockFunction],
                },
                "getApps": [MockFunction],
                "getForwards": [MockFunction],
              },
              "management": Object {
                "legacy": Object {},
                "sections": Object {
                  "getAllSections": [MockFunction],
                  "getSection": [MockFunction],
                  "navigateToApp": [MockFunction],
                },
              },
              "navigation": Object {
                "ui": Object {
                  "TopNavMenu": [MockFunction],
                },
              },
              "uiActions": Object {
                "attachAction": [MockFunction],
                "clear": [MockFunction],
                "detachAction": [MockFunction],
                "executeTriggerActions": [MockFunction],
                "fork": [MockFunction],
                "getTrigger": [MockFunction],
                "getTriggerActions": [MockFunction],
                "getTriggerCompatibleActions": [MockFunction],
                "registerAction": [MockFunction],
                "registerTrigger": [MockFunction],
              },
              "uiMetric": Object {
                "createUiStatsReporter": [Function],
              },
              "xsrfToken": "kbn-xsrf-token",
            },
          }
        }
      >
        <Component
          createIndexPattern={false}
          onChange={[Function]}
          overrides={
            Object {
              "created": false,
              "indexPatternId": undefined,
              "started": false,
            }
          }
          transformConfig={Object {}}
          transformId="the-transform-id"
        />
      </ContextProvider>
    </HashRouter>
  </mockConstructor>
</AuthorizationProvider>
`;
