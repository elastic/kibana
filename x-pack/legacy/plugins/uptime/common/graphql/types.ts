/* tslint:disable */

// ====================================================
// START: Typescript template
// ====================================================

// ====================================================
// Scalars
// ====================================================

export type UnsignedInteger = any;

// ====================================================
// Types
// ====================================================

export interface Query {
  /** Fetches the current state of Uptime monitors for the given parameters. */
  getMonitorStates?: MonitorSummaryResult | null;
}

/** The monitor's status for a ping */
export interface Duration {
  us?: UnsignedInteger | null;
}

export interface Rtt {
  connect?: Duration | null;

  handshake?: Duration | null;

  validate?: Duration | null;
}

export interface Summary {
  up?: number | null;

  down?: number | null;

  geo?: CheckGeo | null;
}

export interface CheckGeo {
  name?: string | null;

  location?: Location | null;
}

export interface Location {
  lat?: number | null;

  lon?: number | null;
}

export interface DocCount {
  count: UnsignedInteger;
}

/** The primary object returned for monitor states. */
export interface MonitorSummaryResult {
  /** Used to go to the next page of results */
  prevPagePagination?: string | null;
  /** Used to go to the previous page of results */
  nextPagePagination?: string | null;
  /** The objects representing the state of a series of heartbeat monitors. */
  summaries?: MonitorSummary[] | null;
  /** The number of summaries. */
  totalSummaryCount: number;
}
/** Represents the current state and associated data for an Uptime monitor. */
export interface MonitorSummary {
  /** The ID assigned by the config or generated by the user. */
  monitor_id: string;
  /** The state of the monitor and its associated details. */
  state: State;

  histogram?: SummaryHistogram | null;
}
/** Unifies the subsequent data for an uptime monitor. */
export interface State {
  /** The agent processing the monitor. */
  agent?: Agent | null;
  /** There is a check object for each instance of the monitoring agent. */
  checks?: Check[] | null;

  geo?: StateGeo | null;

  observer?: StateObserver | null;

  monitor?: MonitorState | null;

  summary: Summary;

  timestamp: UnsignedInteger;
  /** Transport encryption information. */
  tls?: (StateTls | null)[] | null;

  url?: StateUrl | null;
}

export interface Agent {
  id: string;
}

export interface Check {
  agent?: Agent | null;

  container?: StateContainer | null;

  kubernetes?: StateKubernetes | null;

  monitor: CheckMonitor;

  observer?: CheckObserver | null;

  timestamp: string;
}

export interface StateContainer {
  id?: string | null;
}

export interface StateKubernetes {
  pod?: StatePod | null;
}

export interface StatePod {
  uid?: string | null;
}

export interface CheckMonitor {
  ip?: string | null;

  name?: string | null;

  status: string;
}

export interface CheckObserver {
  geo?: CheckGeo | null;
}

export interface StateGeo {
  name?: (string | null)[] | null;

  location?: Location | null;
}

export interface StateObserver {
  geo?: StateGeo | null;
}

export interface MonitorState {
  status?: string | null;

  name?: string | null;

  id?: string | null;

  type?: string | null;
}
/** Contains monitor transmission encryption information. */
export interface StateTls {
  /** The date and time after which the certificate is invalid. */
  certificate_not_valid_after?: string | null;

  certificate_not_valid_before?: string | null;

  certificates?: string | null;

  rtt?: Rtt | null;
}

export interface StateUrl {
  domain?: string | null;

  full?: string | null;

  path?: string | null;

  port?: number | null;

  scheme?: string | null;
}
/** Monitor status data over time. */
export interface SummaryHistogram {
  /** The number of documents used to assemble the histogram. */
  count: number;
  /** The individual histogram data points. */
  points: SummaryHistogramPoint[];
}
/** Represents a monitor's statuses for a period of time. */
export interface SummaryHistogramPoint {
  /** The time at which these data were collected. */
  timestamp: UnsignedInteger;
  /** The number of _up_ documents. */
  up: number;
  /** The number of _down_ documents. */
  down: number;
}

export interface GetMonitorStatesQueryArgs {
  dateRangeStart: string;

  dateRangeEnd: string;

  pagination?: string | null;

  filters?: string | null;

  statusFilter?: string | null;

  pageSize: number;
}

// ====================================================
// Enums
// ====================================================

export enum CursorDirection {
  AFTER = 'AFTER',
  BEFORE = 'BEFORE',
}

export enum SortOrder {
  ASC = 'ASC',
  DESC = 'DESC',
}

// ====================================================
// END: Typescript template
// ====================================================
