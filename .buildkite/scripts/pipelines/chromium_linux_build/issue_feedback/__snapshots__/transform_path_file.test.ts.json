{
  "updated_paths_file": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\n\nimport path from 'path';\n\nexport interface PackageInfo {\n  platform: 'linux' | 'darwin' | 'win32';\n  architecture: 'x64' | 'arm64';\n  archiveFilename: string;\n  archiveChecksum: string;\n  binaryChecksum: string;\n  binaryRelativePath: string;\n  isPreInstalled: boolean;\n  location: 'custom' | 'chromeForTesting';\n}\n\nenum BaseUrl {\n  // A GCS bucket under the Kibana team\n  custom = 'https://storage.googleapis.com/headless_shell',\n  // GCS bucket for headless chrome provided by the chrome team, see\n  // https://github.com/GoogleChromeLabs/chrome-for-testing#json-api-endpoints\n  chromeForTesting = 'https://storage.googleapis.com/chrome-for-testing-public',\n}\n\ninterface CustomPackageInfo extends PackageInfo {\n  location: 'custom';\n}\n\ninterface ChromeForTestingPackageInfo extends PackageInfo {\n  version: string;\n  location: 'chromeForTesting';\n  archivePath: string;\n}\n\nfunction isChromeForTestingPackage(p: PackageInfo): p is ChromeForTestingPackageInfo {\n  return p.location === 'chromeForTesting';\n}\n\nexport class ChromiumArchivePaths {\n  public readonly packages: Array<CustomPackageInfo | ChromeForTestingPackageInfo> = [\n    {\n      platform: 'darwin',\n      architecture: 'x64',\n      archiveFilename: 'chrome-headless-shell-mac-x64.zip',\n      archiveChecksum: \"2e64a158419165ceee5db0b57703777bf21470f2d9656bbf100f54ebe059f695\",\n      binaryChecksum: \"53dbb5e3d4327c980d7bb6dbcb6bd6f73b1de573925a2d4dab010d6cafcc3bbc\",\n      binaryRelativePath: 'chrome-headless-shell-mac-x64/chrome-headless-shell',\n      version: \"130.6943.126\",\n      location: 'chromeForTesting',\n      archivePath: 'mac-x64',\n      isPreInstalled: false,\n    },\n    {\n      platform: 'darwin',\n      architecture: 'arm64',\n      archiveFilename: 'chrome-headless-shell-mac-arm64.zip',\n      archiveChecksum: \"51645431ecc1d843d4fdc34f3817ca2a4ac7c3b4450eb9f3117f806ebaa78487\",\n      binaryChecksum: \"35f42c93856df90bd01bc809e8a32bffb25a48c83d7cc2feb9af6e2376f7fc65\",\n      binaryRelativePath: 'chrome-headless-shell-mac-arm64/chrome-headless-shell',\n      version: \"130.6943.126\",\n      location: 'chromeForTesting',\n      archivePath: 'mac-arm64',\n      isPreInstalled: false,\n    },\n    {\n      platform: 'linux',\n      architecture: 'x64',\n      archiveFilename: \"chromium-cffa127-locales-linux_x64.zip\",\n      archiveChecksum: \"082d3bcabe0a04c4ec7f90d8e425f9c63147015964aa0d3b59a1cccd66571939\",\n      binaryChecksum: \"a22ecc374131998d7ed05b2f433a1a8a819e3ae3b9c4dfa92311cf11ac9e34e1\",\n      binaryRelativePath: 'headless_shell-linux_x64/headless_shell',\n      location: 'custom',\n      isPreInstalled: true,\n    },\n    {\n      platform: 'linux',\n      architecture: 'arm64',\n      archiveFilename: \"chromium-cffa127-locales-linux_arm64.zip\",\n      archiveChecksum: \"571437335b3b867207650390ca8827ea71a58a842f7bb22bbb497a1266324431\",\n      binaryChecksum: \"68dafc4ae03cc4c2812e94f61f62db72a7dcde95754d817594bf25e3862647be\",\n      binaryRelativePath: 'headless_shell-linux_arm64/headless_shell',\n      location: 'custom',\n      isPreInstalled: true,\n    },\n    {\n      platform: 'win32',\n      architecture: 'x64',\n      archiveFilename: 'chrome-headless-shell-win64.zip',\n      archiveChecksum: \"4fd9484cf67790b5bbff39be62d5835f6848a326a68b4be1b83dc22a4336efa1\",\n      binaryChecksum: \"46054cfc2be47f7822008e29674baefd82912cdae107fbe07027cbe84622c0b9\",\n      binaryRelativePath: path.join('chrome-headless-shell-win64', 'chrome-headless-shell.exe'),\n      version: \"130.6943.126\",\n      location: 'chromeForTesting',\n      archivePath: 'win64',\n      isPreInstalled: true,\n    },\n  ];\n\n  // zip files get downloaded to a .chromium directory in the kibana root\n  public readonly archivesPath = path.resolve(__dirname, '../../../../../../.chromium');\n\n  public find(platform: string, architecture: string, packages: PackageInfo[] = this.packages) {\n    return packages.find((p) => p.platform === platform && p.architecture === architecture);\n  }\n\n  public resolvePath(p: PackageInfo) {\n    // adding architecture to the path allows it to download two binaries that have the same name, but are different architecture\n    return path.resolve(this.archivesPath, p.architecture, p.archiveFilename);\n  }\n\n  public getAllArchiveFilenames(): string[] {\n    return this.packages.map((p) => this.resolvePath(p));\n  }\n\n  public getDownloadUrl(p: PackageInfo) {\n    if (isChromeForTestingPackage(p)) {\n      const { chromeForTesting } = BaseUrl;\n      const { archivePath, version, archiveFilename } = p;\n      // returned string matches download value found at the following endpoint;\n      // https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json\n      return `${chromeForTesting}/${version}/${archivePath}/${archiveFilename}`;\n    }\n\n    return BaseUrl.custom + '/' + p.archiveFilename; // revision is not used for URL if package is a custom build\n  }\n\n  public getBinaryPath(p: PackageInfo, chromiumPath: string) {\n    return path.join(chromiumPath, p.binaryRelativePath);\n  }\n}"
}