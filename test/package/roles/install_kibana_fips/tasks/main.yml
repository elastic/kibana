- name: gather ansible processor facts
  setup:
    gather_subset:
      - "!all"
      - "!min"
      - "processor_cores"
  when: ansible_processor_vcpus is not defined

- name: setup env variables
  blockinfile:
    path: "/home/vagrant/.profile"
    block: |
      export OPENSSL_MODULES=/usr/share/kibana/openssl/lib/ossl-modules
      export TEST_BROWSER_HEADLESS=1
      export FTR_DISABLE_ES_TMPDIR=true
    owner: vagrant
    group: vagrant
    mode: '0644'

- name: add chrome apt signing key
  become: yes
  apt_key:
    url: https://dl.google.com/linux/linux_signing_key.pub
    state: present

- name: add chrome apt repository
  become: yes
  apt_repository:
    repo: deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main
    state: present

- name: install apt packages
  become: yes
  apt:
    pkg:
      - build-essential
      - google-chrome-stable
      - unzip
    state: latest

- name: slurp kibana node version
  slurp:
    src: "{{ kibana_src_path }}/.node-version"
  register: node_ver_file

- name: set kibana node version
  set_fact:
    node_version: "{{ node_ver_file['content'] | b64decode | trim }}"

- name: install nvm
  shell:
    chdir: "$HOME"
    cmd: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_ver }}/install.sh | PROFILE=/home/vagrant/.profile bash

- name: install kibana node version
  shell:
    chdir: "$HOME/.nvm"
    cmd: "source nvm.sh && nvm install {{ node_version }}"
  args:
    executable: /bin/bash

- name: "ensure {{ openssl_path }} dir exists"
  become: yes
  file:
    path: "{{ openssl_path }}"
    state: directory

- name: find kibana distribution
  find:
    paths: /packages/
    patterns: kibana-default.tar.gz
  register: kibana_tar

- name: extract kibana distribution
  become: yes
  unarchive:
    src: "{{ kibana_tar.files[0].path }}"
    dest: "{{ kibana_dist_path }}"
    remote_src: yes
    extra_opts: ["--strip-components=1"]

- name: find kibana plugins distribution
  find:
    paths: /packages/
    patterns: kibana-default-plugins.tar.gz
  register: kibana_plugins_tar

- name: extract kibana plugins distribution
  become: yes
  unarchive:
    src: "{{ kibana_plugins_tar.files[0].path }}"
    dest: "{{ kibana_dist_path }}"
    remote_src: yes

- name: copy kibana yml configuration
  become: yes
  template:
    src: templates/fips/kibana.yml
    dest: "{{ kibana_dist_path }}/config/kibana.yml"
  register: config

- name: copy FIPS node.options
  become: yes
  template:
    src: templates/fips/node.options
    dest: "{{ kibana_dist_path }}/config/node.options"

- name: copy FIPS openssl config
  become: yes
  template:
    src: templates/fips/nodejs.cnf
    dest: "{{ kibana_dist_path }}/config/nodejs.cnf"

- name: download FIPS certified OpenSSL
  become: yes
  retries: 5
  delay: 10
  get_url:
    url: "https://www.openssl.org/source/openssl-{{ openssl_ver }}.tar.gz"
    dest: "{{ openssl_src_path }}.tar.gz"
    checksum: "{{ openssl_sha }}"

- name: extract OpenSSL
  become: yes
  unarchive:
    src: "{{ openssl_src_path }}.tar.gz"
    dest: "{{ kibana_dist_path }}"
    remote_src: yes

- name: configure OpenSSL for FIPS
  become: yes
  shell:
    chdir: "{{ openssl_src_path }}"
    cmd: "./Configure --prefix={{ openssl_path }} --openssldir={{ openssl_path }}/ssl --libdir={{ openssl_path }}/lib enable-fips"

- name: compile OpenSSL with FIPS
  become: yes
  make:
    chdir: "{{ openssl_src_path }}"
    jobs: "{{ ansible_facts['processor_vcpus'] }}"

- name: install OpenSSL with FIPS
  become: yes
  make:
    chdir: "{{ openssl_src_path }}"
    target: install

- name: "change owner of {{ kibana_dist_path }} to vagrant"
  become: yes
  file:
    path: "{{ kibana_dist_path }}"
    owner: vagrant
    group: vagrant
    recurse: yes

- name: fix /var/log permissions for kibana
  become: yes
  file:
    path: /var/log
    state: directory
    recurse: true
    mode: "0777"

- name: increase vm.max_map_count for ES
  become: yes
  sysctl:
    name: vm.max_map_count
    value: '262144'
    state: present
    reload: yes