- name: gather ansible processor facts
  setup:
    gather_subset:
      - "!all"
      - "!min"
      - "processor_cores"
  when: ansible_processor_vcpus is not defined

- name: fix /var/log permissions for kibana
  become: yes
  file:
    path: /var/log
    state: directory
    recurse: true
    mode: "0777"

- name: create tmp dir for ES
  file:
    path: "{{ kibana_src_path }}/.es/tmp"
    state: directory

- name: slurp kibana node version
  slurp:
    src: "{{ kibana_src_path }}/.node-version"
  register: node_ver_file

- name: set kibana node version
  set_fact:
    node_version: "{{ node_ver_file['content'] | b64decode | trim }}"

- name: install nvm
  shell:
    chdir: "$HOME"
    cmd: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_ver }}/install.sh | bash

- name: install kibana node version
  shell:
    chdir: "$HOME/.nvm"
    cmd: "source nvm.sh && nvm install {{ node_version }}"
  args:
    executable: /bin/bash

- name: "ensure {{ kibana_dist_path }} dir exists"
  become: yes
  file:
    path: "{{ kibana_dist_path }}"
    state: directory
    mode: "0777"

- name: find kibana distribution
  find:
    paths: /packages/
    patterns: kibana-default.tar.gz
  register: kibana_tar

- name: extract kibana distribution
  become: yes
  unarchive:
    src: "{{ kibana_tar.files[0].path }}"
    dest: "{{ kibana_dist_path }}"
    remote_src: yes
    extra_opts: ["--strip-components=1"]

- name: find kibana plugins distribution
  find:
    paths: /packages/
    patterns: kibana-default-plugins.tar.gz
  register: kibana_plugins_tar

- name: extract kibana plugins distribution
  become: yes
  unarchive:
    src: "{{ kibana_plugins_tar.files[0].path }}"
    dest: "{{ kibana_dist_path }}"
    remote_src: yes

- name: copy kibana yml configuration
  become: yes
  template:
    src: templates/fips/kibana.yml
    dest: "{{ kibana_dist_path }}/config/kibana.yml"
  register: config

- name: copy FIPS node.options
  become: yes
  template:
    src: templates/fips/node.options
    dest: "{{ kibana_dist_path }}/config/node.options"

- name: copy FIPS openssl config
  become: yes
  template:
    src: templates/fips/nodejs.cnf
    dest: "{{ kibana_dist_path }}/config/nodejs.cnf"

- name: download FIPS certified OpenSSL
  become: yes
  retries: 5
  delay: 10
  get_url:
    url: "https://www.openssl.org/source/openssl-{{ openssl_ver }}.tar.gz"
    dest: "{{ kibana_dist_path }}/openssl-{{ openssl_ver }}.tar.gz"
    checksum: "{{ openssl_sha }}"

- name: extract OpenSSL
  become: yes
  unarchive:
    src: "{{ kibana_dist_path }}/openssl-{{ openssl_ver }}.tar.gz"
    dest: "{{ kibana_dist_path }}"
    remote_src: yes

- name: configure OpenSSL for FIPS
  become: yes
  shell:
    chdir: "{{ kibana_dist_path }}/openssl-{{ openssl_ver }}"
    cmd: ./Configure enable-fips

- name: compile OpenSSL with FIPS
  become: yes
  make:
    chdir: "{{ kibana_dist_path }}/openssl-{{ openssl_ver }}"
    jobs: "{{ ansible_facts['processor_vcpus'] }}"

- name: install OpenSSL with FIPS
  become: yes
  make:
    chdir: "{{ kibana_dist_path }}/openssl-{{ openssl_ver }}"
    target: install

- name: link OpenSSL package
  become: yes
  shell:
    cmd: ldconfig /usr/local/lib64/
