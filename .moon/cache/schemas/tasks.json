{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Configures tasks and task related settings that'll be inherited by all matching projects. Docs: https://moonrepo.dev/docs/config/tasks",
  "type": "object",
  "properties": {
    "$schema": {
      "title": "$schema",
      "default": "https://moonrepo.dev/schemas/tasks.json",
      "type": "string"
    },
    "extends": {
      "title": "extends",
      "description": "Extends one or many task configuration files. Supports a relative file path or a secure URL.",
      "anyOf": [
        {
          "$ref": "#/definitions/ExtendsFrom"
        },
        {
          "type": "null"
        }
      ]
    },
    "fileGroups": {
      "title": "fileGroups",
      "description": "A mapping of group IDs to a list of file paths, globs, and environment variables, that can be referenced from tasks.",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "propertyNames": {
        "type": "string"
      }
    },
    "implicitDeps": {
      "title": "implicitDeps",
      "description": "Task dependencies that'll automatically be injected into every task that inherits this configuration.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TaskDependency"
      }
    },
    "implicitInputs": {
      "title": "implicitInputs",
      "description": "Task inputs that'll automatically be injected into every task that inherits this configuration.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "taskOptions": {
      "title": "taskOptions",
      "description": "Default task options for all inherited tasks.",
      "anyOf": [
        {
          "$ref": "#/definitions/TaskOptionsConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "tasks": {
      "title": "tasks",
      "description": "A mapping of tasks by ID to parameters required for running the task.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/TaskConfig"
      },
      "propertyNames": {
        "type": "string"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "ExtendsFrom": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "PlatformType": {
      "description": "Platforms that each programming language can belong to.",
      "type": "string",
      "enum": [
        "bun",
        "deno",
        "node",
        "python",
        "rust",
        "system",
        "unknown"
      ]
    },
    "TaskArgs": {
      "description": "Configures a command to execute, and its arguments.",
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "TaskConfig": {
      "description": "Configures a task to be ran within the action pipeline.",
      "type": "object",
      "properties": {
        "args": {
          "title": "args",
          "description": "Arguments to pass to the command when it's ran. Can be defined as a string, or a list of individual arguments.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskArgs"
            }
          ]
        },
        "command": {
          "title": "command",
          "description": "The command or command line to execute when the task is ran. Supports the command name, with or without arguments. Can be defined as a string, or a list of individual arguments.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskArgs"
            }
          ]
        },
        "deps": {
          "title": "deps",
          "description": "Other tasks that this task depends on, and must run to completion before this task is ran. Can depend on sibling tasks, or tasks in other projects, using targets.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskDependency"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "title": "description",
          "description": "A human-readable description about the task.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "env": {
          "title": "env",
          "description": "A mapping of environment variables that will be set when the task is ran.",
          "anyOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "propertyNames": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "extends": {
          "title": "extends",
          "description": "Extends settings from a sibling task by ID.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "inputs": {
          "title": "inputs",
          "description": "Inputs and sources that will mark the task as affected when comparing against touched files. When not provided, all files within the project are considered an input. When an empty list, no files are considered. Otherwise, an explicit list of inputs are considered.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "local": {
          "title": "local",
          "description": "Marks the task as local only. Local tasks do not run in CI, do not have options.cache enabled, and are marked as options.persistent.",
          "deprecated": true,
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Marks the task as local only. Local tasks do not run in CI, do not have `options.cache` enabled, and are marked as `options.persistent`."
        },
        "options": {
          "title": "options",
          "description": "Options to control task inheritance and execution.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskOptionsConfig"
            }
          ]
        },
        "outputs": {
          "title": "outputs",
          "description": "Outputs that will be created when the task has successfully ran. When cache is enabled, the outputs will be persisted for subsequent runs.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Outputs that will be created when the task has successfully ran. When `cache` is enabled, the outputs will be persisted for subsequent runs."
        },
        "platform": {
          "title": "platform",
          "description": "The platform in which the task will be ran in. The platform determines available binaries, lookup paths, and more. When not provided, will be automatically detected.",
          "default": "unknown",
          "allOf": [
            {
              "$ref": "#/definitions/PlatformType"
            }
          ]
        },
        "preset": {
          "title": "preset",
          "description": "The preset to apply for the task. Will inherit default options.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskPreset"
            },
            {
              "type": "null"
            }
          ]
        },
        "script": {
          "title": "script",
          "description": "A script to run within a shell. A script is anything from a single command, to multiple commands (&&, etc), or shell specific syntax. Does not support arguments, merging, or inheritance.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "toolchain": {
          "title": "toolchain",
          "description": "The toolchain(s) in which the task will be ran in. The toolchain determines available binaries, lookup paths, and more. When not provided, will be automatically detected.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "type": {
          "title": "type",
          "description": "The type of task, primarily used for categorical reasons. When not provided, will be automatically determined.",
          "default": "test",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskType"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TaskDependency": {
      "description": "Configures another task that a task depends on.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/TaskDependencyConfig"
        }
      ]
    },
    "TaskDependencyConfig": {
      "description": "Expanded information about a task dependency.",
      "type": "object",
      "properties": {
        "args": {
          "title": "args",
          "description": "Additional arguments to pass to this dependency when it's ran.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskArgs"
            }
          ]
        },
        "env": {
          "title": "env",
          "description": "A mapping of environment variables specific to this dependency.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "optional": {
          "title": "optional",
          "description": "Marks the dependency is optional when being inherited from the top-level.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Marks the dependency is optional when being inherited from the top-level."
        },
        "target": {
          "title": "target",
          "description": "The target of the depended on task.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "TaskMergeStrategy": {
      "description": "The strategy in which to merge a specific task option.",
      "type": "string",
      "enum": [
        "append",
        "prepend",
        "preserve",
        "replace"
      ]
    },
    "TaskOperatingSystem": {
      "description": "The operating system in which to only run this task on.",
      "type": "string",
      "enum": [
        "linux",
        "macos",
        "windows"
      ]
    },
    "TaskOptionEnvFile": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "TaskOptionsConfig": {
      "description": "Options to control task inheritance and execution.",
      "type": "object",
      "properties": {
        "affectedFiles": {
          "title": "affectedFiles",
          "description": "The pattern in which affected files will be passed to the task.",
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "args",
                    "env"
                  ]
                }
              ]
            },
            {
              "type": "null"
            }
          ]
        },
        "affectedPassInputs": {
          "title": "affectedPassInputs",
          "description": "When affected and no files are matching, pass the task inputs as arguments to the command, instead of ..",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "When affected and no files are matching, pass the task inputs as arguments to the command, instead of `.`."
        },
        "allowFailure": {
          "title": "allowFailure",
          "description": "Allows the task to fail without failing the entire pipeline.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "cache": {
          "title": "cache",
          "description": "Caches the outputs of the task",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Caches the `outputs` of the task"
        },
        "cacheLifetime": {
          "title": "cacheLifetime",
          "description": "Lifetime to cache the task itself, in the format of \"1h\", \"30m\", etc. If not defined, caches live forever, or until inputs change.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "envFile": {
          "title": "envFile",
          "description": "Loads and sets environment variables from the .env file when running the task.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskOptionEnvFile"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Loads and sets environment variables from the `.env` file when running the task."
        },
        "inferInputs": {
          "title": "inferInputs",
          "description": "Automatically infer inputs from file groups or environment variables that were utilized within command, script, args, and env.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Automatically infer inputs from file groups or environment variables that were utilized within `command`, `script`, `args`, and `env`."
        },
        "interactive": {
          "title": "interactive",
          "description": "Marks the task as interactive, so that it will run in isolation, and have direct access to stdin.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "internal": {
          "title": "internal",
          "description": "Marks the task as internal, which disables it from begin ran from the command line, but can be depended on.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "merge": {
          "title": "merge",
          "description": "The default strategy to use when merging args, deps, env, inputs, or outputs with an inherited task. Can be overridden with the other field-specific merge options.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The default strategy to use when merging `args`, `deps`, `env`, `inputs`, or `outputs` with an inherited task. Can be overridden with the other field-specific merge options."
        },
        "mergeArgs": {
          "title": "mergeArgs",
          "description": "The strategy to use when merging args with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `args` with an inherited task."
        },
        "mergeDeps": {
          "title": "mergeDeps",
          "description": "The strategy to use when merging deps with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `deps` with an inherited task."
        },
        "mergeEnv": {
          "title": "mergeEnv",
          "description": "The strategy to use when merging env with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `env` with an inherited task."
        },
        "mergeInputs": {
          "title": "mergeInputs",
          "description": "The strategy to use when merging inputs with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `inputs` with an inherited task."
        },
        "mergeOutputs": {
          "title": "mergeOutputs",
          "description": "The strategy to use when merging outputs with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `outputs` with an inherited task."
        },
        "mutex": {
          "title": "mutex",
          "description": "Creates an exclusive lock on a virtual resource, preventing other tasks using the same resource from running concurrently.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "os": {
          "title": "os",
          "description": "The operating system in which to only run this task on.",
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TaskOperatingSystem"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskOperatingSystem"
                  }
                }
              ]
            },
            {
              "type": "null"
            }
          ]
        },
        "outputStyle": {
          "title": "outputStyle",
          "description": "The style in which task output will be printed to the console.",
          "default": "buffer",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskOutputStyle"
            },
            {
              "type": "null"
            }
          ]
        },
        "persistent": {
          "title": "persistent",
          "description": "Marks the task as persistent (continuously running). This is ideal for watchers, servers, or never-ending processes.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Marks the task as persistent (continuously running). This is ideal for watchers, servers, or never-ending processes."
        },
        "retryCount": {
          "title": "retryCount",
          "description": "The number of times a failing task will be retried to succeed.",
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "runDepsInParallel": {
          "title": "runDepsInParallel",
          "description": "Runs direct task dependencies (via deps) in sequential order. This does not apply to indirect or transient dependencies.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Runs direct task dependencies (via `deps`) in sequential order. This _does not_ apply to indirect or transient dependencies."
        },
        "runFromWorkspaceRoot": {
          "title": "runFromWorkspaceRoot",
          "description": "Runs the task from the workspace root, instead of the project root.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "runInCI": {
          "title": "runInCI",
          "description": "Whether to run the task in CI or not, when executing moon ci or moon run.",
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "affected"
                  ]
                }
              ]
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Whether to run the task in CI or not, when executing `moon ci` or `moon run`."
        },
        "shell": {
          "title": "shell",
          "description": "Runs the task within a shell. When not defined, runs the task directly while relying on PATH resolution.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Runs the task within a shell. When not defined, runs the task directly while relying on `PATH` resolution."
        },
        "timeout": {
          "title": "timeout",
          "description": "The maximum time in seconds that a task can run before being cancelled.",
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "unixShell": {
          "title": "unixShell",
          "description": "The shell to run the task in when on a Unix-based machine.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskUnixShell"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The shell to run the task in when on a Unix-based machine."
        },
        "windowsShell": {
          "title": "windowsShell",
          "description": "The shell to run the task in when on a Windows machine.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskWindowsShell"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TaskOutputStyle": {
      "description": "The style in which task output will be printed to the console.",
      "type": "string",
      "enum": [
        "buffer",
        "buffer-only-failure",
        "hash",
        "none",
        "stream"
      ]
    },
    "TaskPreset": {
      "description": "Preset options to inherit.",
      "type": "string",
      "enum": [
        "server",
        "watcher"
      ]
    },
    "TaskType": {
      "description": "The type of task.",
      "type": "string",
      "enum": [
        "build",
        "run",
        "test"
      ]
    },
    "TaskUnixShell": {
      "description": "A list of available shells on Unix.",
      "type": "string",
      "enum": [
        "bash",
        "elvish",
        "fish",
        "ion",
        "murex",
        "nu",
        "pwsh",
        "xonsh",
        "zsh"
      ]
    },
    "TaskWindowsShell": {
      "description": "A list of available shells on Windows.",
      "type": "string",
      "enum": [
        "bash",
        "elvish",
        "fish",
        "murex",
        "nu",
        "pwsh",
        "xonsh"
      ]
    }
  }
}
