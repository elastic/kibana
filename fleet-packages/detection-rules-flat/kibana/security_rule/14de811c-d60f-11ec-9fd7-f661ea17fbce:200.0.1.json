{"attributes":{"name":"Kubernetes User Exec into Pod v200.0.1","rule_id":"14de811c-d60f-11ec-9fd7-f661ea17fbce:200.0.1","rule_version":"200.0.1","stack_version_min":"8.5.0","stack_version_max":"8.7.0","description":"This rule detects a user attempt to establish a shell session into a pod using the 'exec' command. Using the 'exec' command in a pod allows a user to establish a temporary shell session and execute any process/commands in the pod. An adversary may call bash to gain a persistent interactive shell which will allow access to any data the pod has permissions to, including secrets.","risk_score":47,"severity":"medium","license":"Elastic License v2","note":"","timestamp_override":"event.ingested","author":["Elastic"],"false_positives":["An administrator may need to exec into a pod for a legitimate reason like debugging purposes. Containers built from Linux and Windows OS images, tend to include debugging utilities. In this case, an admin may choose to run commands inside a specific container with kubectl exec ${POD_NAME} -c ${CONTAINER_NAME} -- ${CMD} ${ARG1} ${ARG2} ... ${ARGN}. For example, the following command can be used to look at logs from a running Cassandra pod: kubectl exec cassandra --cat /var/log/cassandra/system.log . Additionally, the -i and -t arguments might be used to run a shell connected to the terminal: kubectl exec -i -t cassandra -- sh"],"references":["https://kubernetes.io/docs/tasks/debug/debug-application/debug-running-pod/","https://kubernetes.io/docs/tasks/debug/debug-application/get-shell-running-container/"],"tags":["Elastic","Kubernetes","Continuous Monitoring","Execution"],"threat":[{"framework":"MITRE ATT&CK","tactic":{"id":"TA0002","name":"Execution","reference":"https://attack.mitre.org/tactics/TA0002/"},"technique":[{"id":"T1609","name":"Container Administration Command","reference":"https://attack.mitre.org/techniques/T1609/"}]}],"type":"query","index":["logs-kubernetes.*"],"language":"kuery","query":"event.dataset : \"kubernetes.audit_logs\" \n  and kubernetes.audit.annotations.authorization_k8s_io/decision:\"allow\" \n  and kubernetes.audit.verb:\"create\" \n  and kubernetes.audit.objectRef.resource:\"pods\"\n  and kubernetes.audit.objectRef.subresource:\"exec\"\n","related_integrations":[{"package":"kubernetes","version":"^1.4.1"}],"required_fields":[{"ecs":true,"name":"event.dataset","type":"keyword"},{"ecs":false,"name":"kubernetes.audit.annotations.authorization_k8s_io/decision","type":"unknown"},{"ecs":false,"name":"kubernetes.audit.objectRef.resource","type":"unknown"},{"ecs":false,"name":"kubernetes.audit.objectRef.subresource","type":"unknown"},{"ecs":false,"name":"kubernetes.audit.verb","type":"unknown"}],"setup":"The Kubernetes Fleet integration with Audit Logs enabled or similarly structured data is required to be compatible with this rule."},"id":"14de811c-d60f-11ec-9fd7-f661ea17fbce:200.0.1","type":"security-rule"}