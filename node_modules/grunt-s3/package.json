{
  "name": "grunt-s3",
  "description": "A grunt task to automate moving files to/from Amazon S3.",
  "version": "0.2.0-alpha.3",
  "author": {
    "name": "Aaron Forsander",
    "url": "https://github.com/pifantastic"
  },
  "homepage": "https://github.com/pifantastic/grunt-s3",
  "repository": {
    "type": "git",
    "url": "git://github.com/pifantastic/grunt-s3.git"
  },
  "bugs": {
    "url": "https://github.com/pifantastic/grunt-s3/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/pifantastic/grunt-s3/blob/master/LICENSE"
    }
  ],
  "main": "tasks/s3",
  "bin": {
    "grunt-s3": "bin/grunt-s3"
  },
  "scripts": {
    "test": "grunt test",
    "fakes3": "fakes3 -r s3 -p 1337"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "keywords": [
    "gruntplugin",
    "amazon",
    "s3"
  ],
  "dependencies": {
    "grunt": "0.4.x",
    "underscore.deferred": "~0.1.4",
    "knox": "0.8.x",
    "mime": "~1.2.5",
    "temporary": "0.0.5"
  },
  "devDependencies": {
    "nodeunit": "~0.7.4",
    "grunt-contrib-jshint": "~0.1.0",
    "grunt-contrib-nodeunit": "~0.1.1",
    "libyaml": "~0.2.1",
    "grunt-contrib-clean": "~0.5.0",
    "rimraf": "~2.2.2"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/pifantastic/grunt-s3.png?branch=master)](https://travis-ci.org/pifantastic/grunt-s3)\n\n*NOTE*: This is the README for `grunt-s3` `v0.2.0-alpha`. For `v0.1.0`, [go here](https://github.com/pifantastic/grunt-s3/blob/0.1.X/README.md).\n\n# Grunt 0.4.x + Amazon S3\n\n## About\n\nAmazon S3 is a great tool for storing/serving data. Thus, there is a chance it is part of your build\nprocess. This task can help you automate uploading/downloading files to/from Amazon S3. All file\ntransfers are verified and will produce errors if incomplete.\n\n## Dependencies\n\n* knox\n* mime\n* async\n* underscore\n* underscore.deferred\n\n## Installation\n\n```sh\nnpm install grunt-s3 --save-dev\n```\n\nThen add this line to your project's `Gruntfile.js`:\n\n```javascript\ngrunt.loadNpmTasks('grunt-s3');\n```\n\n## Options\n\nThe grunt-s3 task is now a [multi-task](https://github.com/gruntjs/grunt/wiki/Creating-tasks); meaning you can specify different targets for this task to run as.\n\nA quick reference of options\n\n* **key** - (*string*) An Amazon S3 credentials key\n* **secret** - (*string*) An Amazon S3 credentials secret\n* **bucket** - (*string*) An Amazon S3 bucket\n* **region** - (*string*) An Amazon AWS region (see http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region)\n* **maxOperations** - (*number*) max number of concurrent transfers - if not specified or set to 0, will be unlimited.\n* **encodePaths** - (*boolean*) if set to true, will encode the uris of destinations to prevent 505 errors. Default: false\n* **headers** - (*object*) An object containing any headers you would like to send along with the\ntransfers i.e. `{ 'X-Awesomeness': 'Out-Of-This-World', 'X-Stuff': 'And Things!' }`\n* **access** - (*string*) A specific Amazon S3 ACL. Available values: `private`, `public-read`, `\npublic-read-write`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`\n* **gzip** - (*boolean*) If true, uploads will be gzip-encoded.\n* **gzipExclude** - (*array*) Define extensions of files you don't want to run gzip on, an array of strings ie: `['.jpg', '.jpeg', '.png']`.\n* **upload** - (*array*) An array of objects, each object representing a file upload and containing a `src`\nand a `dest`. Any of the above values may also be overriden. Passing `rel:DIR` will cause the filesnames to be\nexpanded so that wild cards are not passed to the source name.\n* **download** - (*array*) An array of objects, each object representing a file download and containing a\n`src` and a `dest`. Any of the above values may also be overriden.\n* **del** - (*array*) An array of objects, each object containing a `src` to delete from s3. Any of\nthe above values may also be overriden.\n* **sync** - (*array*) An array of ojects, each oject containing a `src` and `dest`. Default behavior is to\nonly upload new files (that don't exist). Adding `verify:true` forces an MD5 hash and Modified time check prior\nto overwriting the server files.\n* **debug** - (*boolean*) If true, no transfers with S3 will occur, will print all actions for review by user\n\n### Example\n\nTemplate strings in grunt will allow you to easily include values from other files. The below example\ndemonstrates loading aws settings from another file, Where grunt-aws.json is just a json key:value file like package.json. (Special thanks to @nanek)\n\nThis is **important because you should never check in your S3 credentials to github! Load them from an external file that is outside of the repo.**\n\n```javascript\ngrunt.initConfig({\n  aws: grunt.file.readJSON('~/grunt-aws.json'),\n  s3: {\n    options: {\n      key: '<%= aws.key %>',\n      secret: '<%= aws.secret %>',\n      bucket: '<%= aws.bucket %>',\n      access: 'public-read',\n      headers: {\n        // Two Year cache policy (1000 * 60 * 60 * 24 * 730)\n        \"Cache-Control\": \"max-age=630720000, public\",\n        \"Expires\": new Date(Date.now() + 63072000000).toUTCString()\n      }\n    },\n    dev: {\n      // These options override the defaults\n      options: {\n        encodePaths: true,\n        maxOperations: 20\n      },\n      // Files to be uploaded.\n      upload: [\n        {\n          src: 'important_document.txt',\n          dest: 'documents/important.txt',\n          options: { gzip: true }\n        },\n        {\n          src: 'passwords.txt',\n          dest: 'documents/ignore.txt',\n\n          // These values will override the above settings.\n          bucket: 'some-specific-bucket',\n          access: 'authenticated-read'\n        },\n        {\n          // Wildcards are valid *for uploads only* until I figure out a good implementation\n          // for downloads.\n          src: 'documents/*.txt',\n\n          // But if you use wildcards, make sure your destination is a directory.\n          dest: 'documents/'\n        }\n      ],\n\n      // Files to be downloaded.\n      download: [\n        {\n          src: 'documents/important.txt',\n          dest: 'important_document_download.txt'\n        },\n        {\n          src: 'garbage/IGNORE.txt',\n          dest: 'passwords_download.txt'\n        }\n      ],\n\n      del: [\n        {\n          src: 'documents/launch_codes.txt'\n        },\n        {\n          src: 'documents/backup_plan.txt'\n        }\n      ],\n\n      sync: [\n        {\n          // only upload this document if it does not exist already\n          src: 'important_document.txt',\n          dest: 'documents/important.txt',\n          options: { gzip: true }\n        },\n        {\n          // make sure this document is newer than the one on S3 and replace it\n          verify: true,\n          src: 'passwords.txt',\n          dest: 'documents/ignore.txt'\n        },\n        {\n          src: path.join(variable.to.release, \"build/cdn/js/**/*.js\"),\n          dest: \"jsgz\",\n          // make sure the wildcard paths are fully expanded in the dest\n          rel: path.join(variable.to.release, \"build/cdn/js\"),\n          options: { gzip: true }\n        }\n      ]\n    }\n\n  }\n\n});\n```\n\nRunning `grunt s3` using the above config produces the following output:\n\n    $ grunt s3\n    Running \"s3\" task\n    >> ↙ Downloaded: documents/important.txt (e704f1f4bec2d17f09a0e08fecc6cada)\n    >> ↙ Downloaded: garbage/IGNORE.txt (04f7cb4c893b2700e4fa8787769508e8)\n    >> ↗ Uploaded: documents/document1.txt (04f7cb4c893b2700e4fa8787769508e8)\n    >> ↗ Uploaded: passwords.txt (04f7cb4c893b2700e4fa8787769508e8)\n    >> ↗ Uploaded: important_document.txt (e704f1f4bec2d17f09a0e08fecc6cada)\n    >> ↗ Uploaded: documents/document2.txt (04f7cb4c893b2700e4fa8787769508e8)\n    >> ✗ Deleted: documents/launch_codes.txt\n    >> ✗ Deleted: documents/backup_plan.txt\n    Done, without errors.\n\n### Alternative ways of including your s3 configuration\n\n#### Environment variables\n\nIf you do not pass in a **key** and **secret** with your config, `grunt-s3` will fallback to the following\nenvironment variables:\n\n* `AWS_ACCESS_KEY_ID`\n* `AWS_SECRET_ACCESS_KEY`\n\n## Helpers\n\nHelpers have been removed from Grunt 0.4 to access these methods directly. You can now require the s3 library files directly like so:\n\n`var s3 = require('grunt-s3').helpers;`\n\nMake sure you explicitly pass the options into the method. If you've used `grunt.initConfig()` you can use `grunt.config.get('s3')` to access them.\n\n### s3.upload(src, dest, options)\n\nUpload a file to s3. Returns a Promises/J-style Deferred object.\n\n**src** (required) - The path to the file to be uploaded. Accepts wildcards, i.e. `files/*.txt`\n\n**dest** (required) - The path on s3 where the file will be uploaded, relative to the bucket. If you use a\nwildcard for **src**, this should be a directory.\n\n**options** (optional) - An object containing any of the following values. These values override\nany values specified in the main config.\n\n* **key** - An Amazon S3 credentials key\n* **secret** - An Amazon S3 credentials secret\n* **bucket** - An Amazon S3 bucket\n* **headers** - An object containing any headers you would like to send along with the upload.\n* **access** - A specific Amazon S3 ACL. Available values: `private`, `public-read`, `public-read-write`,\n`authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`\n* **gzip** - (*boolean*) If true, uploads will be gzip-encoded.\n\n### s3.download(src, dest, options)\nDownload a file from s3. Returns a Promises/J-style Deferred object.\n\n**src** (required) - The path on S3 from which the file will be downloaded, relative to the bucket. **Does not accept wildcards**\n\n**dest** (required) - The local path where the file will be saved.\n\n**options** (optional) - An object containing any of the following values. These values override\nany values specified in the main config.\n\n* **key** - An Amazon S3 credentials key\n* **secret** - An Amazon S3 credentials secret\n* **bucket** - An Amazon S3 bucket\n* **headers** - An object containing any headers you would like to send along with the upload.\n\n### s3.delete(src, options)\n\nDelete a file from s3. Returns a Promises/J-style Deferred object.\n\n**src** (required) - The path on S3 of the file to delete, relative to the bucket. **Does not accept wildcards**\n\n**options** (optional) - An object containing any of the following values. These values override\nany values specified in the main config.\n\n* **key** - An Amazon S3 credentials key\n* **secret** - An Amazon S3 credentials secret\n* **bucket** - An Amazon S3 bucket\n* **headers** - An object containing any headers you would like to send along with the upload.\n\n### Examples\n\n```javascript\nvar upload = s3.upload('dist/my-app-1.0.0.tar.gz', 'archive/my-app-1.0.0.tar.gz');\n\nupload\n  .done(function(msg) {\n    console.log(msg);\n  })\n  .fail(function(err) {\n    console.log(err);\n  })\n  .always(function() {\n    console.log('dance!');\n  });\n\nvar download = s3.download('dist/my-app-0.9.9.tar.gz', 'local/my-app-0.9.9.tar.gz');\n\ndownload.done(function() {\n  s3.delete('dist/my-app-0.9.9.tar.gz');\n});\n\n```\n\n## Changelog\n\n#### v0.1.0\n\n* Update to be compatible with `grunt` version `0.4.x`.\n\n#### v0.0.9\n\n* Bump version of `knox` to `0.4.1`.\n\n#### v0.0.6\n\n* Bump version of `underscore.deferred` to `0.1.4`. Version `0.1.3` would fail to install sometimes\ndue to there being two versions of the module with different capitalizations in npm.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-s3@0.2.0-alpha.3",
  "dist": {
    "shasum": "e3329d2caa6ed93c4dbc0397e257caa68ae9ee7c",
    "tarball": "http://registry.npmjs.org/grunt-s3/-/grunt-s3-0.2.0-alpha.3.tgz"
  },
  "_from": "grunt-s3@0.2.0-alpha.3",
  "_npmVersion": "1.2.30",
  "_npmUser": {
    "name": "pifantastic",
    "email": "aaron.forsander@gmail.com"
  },
  "maintainers": [
    {
      "name": "pifantastic",
      "email": "aaron.forsander@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "e3329d2caa6ed93c4dbc0397e257caa68ae9ee7c",
  "_resolved": "http://registry.npmjs.org/grunt-s3/-/grunt-s3-0.2.0-alpha.3.tgz"
}
