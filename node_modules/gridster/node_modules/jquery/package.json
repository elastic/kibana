{
  "name": "jquery",
  "title": "jQuery",
  "description": "JavaScript library for DOM operations",
  "version": "2.0.3",
  "homepage": "http://jquery.com",
  "author": {
    "name": "jQuery Foundation and other contributors",
    "url": "https://github.com/jquery/jquery/blob/master/AUTHORS.txt"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jquery/jquery.git"
  },
  "bugs": {
    "url": "http://bugs.jquery.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jquery/jquery/blob/master/MIT-LICENSE.txt"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "grunt-compare-size": "~0.4.0",
    "grunt-git-authors": "1.2.0",
    "grunt-update-submodules": "0.2.0",
    "grunt-contrib-watch": "0.3.1",
    "grunt-contrib-jshint": "0.3.0",
    "grunt-contrib-uglify": "0.2.0",
    "grunt": "0.4.1",
    "gzip-js": "0.3.1",
    "testswarm": "~1.1.0",
    "archiver": "~0.4.2"
  },
  "keywords": [],
  "gitHead": "f852e631ba85af7da4ad7594785e122504e7b233",
  "readme": "[jQuery](http://jquery.com/) - New Wave JavaScript\n==================================================\n\nContribution Guides\n--------------------------------------\n\nIn the spirit of open source software development, jQuery always encourages community code contribution. To help you get started and before you jump into writing code, be sure to read these important contribution guidelines thoroughly:\n\n1. [Getting Involved](http://docs.jquery.com/Getting_Involved)\n2. [Core Style Guide](http://docs.jquery.com/JQuery_Core_Style_Guidelines)\n3. [Tips For Bug Patching](http://docs.jquery.com/Tips_for_jQuery_Bug_Patching)\n\n\nWhat you need to build your own jQuery\n--------------------------------------\n\nIn order to build jQuery, you need to have Node.js/npm latest and git 1.7 or later.\n(Earlier versions might work OK, but are not tested.)\n\nWindows users have two options:\n\n1. Install [msysgit](https://code.google.com/p/msysgit/) (Full installer for official Git) and a\n   [binary version of Node.js](http://nodejs.org). Make sure all two packages are installed to the same\n   location (by default, this is C:\\Program Files\\Git).\n2. Install [Cygwin](http://cygwin.com/) (make sure you install the git and which packages), and\n   a [binary version of Node.js](http://nodejs.org/).\n\nMac OS users should install Xcode (comes on your Mac OS install DVD, or downloadable from\n[Apple's Xcode site](http://developer.apple.com/technologies/xcode.html)) and\n[Homebrew](http://mxcl.github.com/homebrew/). Once Homebrew is installed, run `brew install git` to install git,\nand `brew install node` to install Node.js.\n\nLinux/BSD users should use their appropriate package managers to install git and Node.js, or build from source\nif you swing that way. Easy-peasy.\n\n\nHow to build your own jQuery\n----------------------------\n\nFirst, clone a copy of the main jQuery git repo by running:\n\n```bash\ngit clone git://github.com/jquery/jquery.git\n```\n\nInstall the grunt-cli package so that you will have the correct version of grunt available from any project that needs it. This should be done as a global install:\n\n```bash\nnpm install -g grunt-cli\n```\n\nEnter the jquery directory and install the Node dependencies, this time *without* specifying a global install:\n\n```bash\ncd jquery && npm install\n```\n\nMake sure you have `grunt` installed by testing:\n\n```bash\ngrunt -version\n```\n\nThen, to get a complete, minified (w/ Uglify.js), linted (w/ JSHint) version of jQuery, type the following:\n\n```bash\ngrunt\n```\n\nThe built version of jQuery will be put in the `dist/` subdirectory, along with the minified copy and associated map file.\n\n\n### Modules\n\nSpecial builds can be created that exclude subsets of jQuery functionality.\nThis allows for smaller custom builds when the builder is certain that those parts of jQuery are not being used.\nFor example, an app that only used JSONP for `$.ajax()` and did not need to calculate offsets or positions of elements could exclude the offset and ajax/xhr modules. The current modules that can be excluded are:\n\n- **ajax**: All AJAX functionality: `$.ajax()`, `$.get()`, `$.post()`, `$.ajaxSetup()`, `.load()`, transports, and ajax event shorthands such as `.ajaxStart()`.\n- **ajax/xhr**: The XMLHTTPRequest AJAX transport only.\n- **ajax/script**: The `<script>` AJAX transport only; used to retrieve scripts.\n- **ajax/jsonp**: The JSONP AJAX transport only; depends on the ajax/script transport.\n- **css**: The `.css()` method plus non-animated `.show()`, `.hide()` and `.toggle()`.\n- **deprecated**: Methods documented as deprecated but not yet removed; currently only `.andSelf()`.\n- **dimensions**: The `.width()` and `.height()` methods, including `inner-` and `outer-` variations.\n- **effects**: The `.animate()` method and its shorthands such as `.slideUp()` or `.hide(\"slow\")`. \n- **event-alias**: All event attaching/triggering shorthands like `.click()` or `.mouseover()`.\n- **offset**: The `.offset()`, `.position()`, `.offsetParent()`, `.scrollLeft()`, and `.scrollTop()` methods.\n- **wrap**: The `.wrap()`, `.wrapAll()`, `.wrapInner()`, and `.unwrap()` methods.\n- **sizzle**: The Sizzle selector engine. When this module is excluded, it is replaced by a rudimentary selector engine based on the browser's `querySelectorAll` method that does not support jQuery selector extensions or enhanced semantics. See the selector-native.js file for details.\n\nThe grunt build process is aware of dependencies across modules. If you explicitly remove a module, its dependent modules will be removed as well. For example, excluding the css module also excludes effects, since the effects module uses `.css()` to animate CSS properties. These dependencies are listed in Gruntfile.js and the build process shows a message for each dependent module it excludes.\n\nTo create a custom build of the latest stable version, first check out the version:\n\n```bash\ngit pull; git checkout $(git describe --abbrev=0 --tags)\n```\n\nThen, make sure all Node dependencies are installed and all Git submodules are checked out:\n\n```bash\nnpm install && grunt\n```\n\nCreate the custom build, use the `grunt custom` option, listing the modules to be excluded. Examples:\n\nExclude all **ajax** functionality:\n\n```bash\ngrunt custom:-ajax\n```\n\nExclude **css**, **effects**, **offset**, **dimensions**, and **position**. Excluding **css** automatically excludes its dependent modules:\n\n```bash\ngrunt custom:-css,-position\n```\n\nExclude **all** optional modules and use the `querySelectorAll`-based selector engine:\n\n```bash\ngrunt custom:-ajax,-css,-deprecated,-dimensions,-effects,-event-alias,-offset,-wrap,-sizzle\n```\n\nFor questions or requests regarding custom builds, please start a thread on the [Developing jQuery Core](https://forum.jquery.com/developing-jquery-core) section of the forum. Due to the combinatorics and custom nature of these builds, they are not regularly tested in jQuery's unit test process. The non-Sizzle selector engine currently does not pass unit tests because it is missing too much essential functionality.\n\nRunning the Unit Tests\n--------------------------------------\n\nStart grunt to auto-build jQuery as you work:\n\n```bash\ncd jquery && grunt watch\n```\n\n\nRun the unit tests with a local server that supports PHP. Ensure that you run the site from the root directory, not the \"test\" directory. No database is required. Pre-configured php local servers are available for Windows and Mac. Here are some options:\n\n- Windows: [WAMP download](http://www.wampserver.com/en/)\n- Mac: [MAMP download](http://www.mamp.info/en/index.html)\n- Linux: [Setting up LAMP](https://www.linux.com/learn/tutorials/288158-easy-lamp-server-installation)\n- [Mongoose (most platforms)](http://code.google.com/p/mongoose/)\n\n\n\n\nBuilding to a different directory\n---------------------------------\n\nTo copy the built jQuery files from `/dist` to another directory:\n\n```bash\ngrunt && grunt dist:/path/to/special/location/\n```\nWith this example, the output files would be:\n\n```bash\n/path/to/special/location/jquery.js\n/path/to/special/location/jquery.min.js\n```\n\nTo add a permanent copy destination, create a file in `dist/` called \".destination.json\". Inside the file, paste and customize the following:\n\n```json\n\n{\n  \"/Absolute/path/to/other/destination\": true\n}\n```\n\nAdditionally, both methods can be combined.\n\n\n\nUpdating Submodules\n-------------------\n\nUpdate the submodules to what is probably the latest upstream code.\n\n```bash\ngrunt update_submodules\n```\n\nNote: This task will also be run any time the default `grunt` command is used.\n\n\n\nEssential Git\n-------------\n\nAs the source code is handled by the version control system Git, it's useful to know some features used.\n\n### Submodules ###\n\nThe repository uses submodules, which normally are handled directly by the `grunt update_submodules` command, but sometimes you want to\nbe able to work with them manually.\n\nFollowing are the steps to manually get the submodules:\n\n```bash\ngit clone https://github.com/jquery/jquery.git\ncd jquery\ngit submodule init\ngit submodule update\n```\n\nOr:\n\n```bash\ngit clone https://github.com/jquery/jquery.git\ncd jquery\ngit submodule update --init\n```\n\nOr:\n\n```bash\ngit clone --recursive https://github.com/jquery/jquery.git\ncd jquery\n```\n\nIf you want to work inside a submodule, it is possible, but first you need to checkout a branch:\n\n```bash\ncd src/sizzle\ngit checkout master\n```\n\nAfter you've committed your changes to the submodule, you'll update the jquery project to point to the new commit,\nbut remember to push the submodule changes before pushing the new jquery commit:\n\n```bash\ncd src/sizzle\ngit push origin master\ncd ..\ngit add src/sizzle\ngit commit\n```\n\n\n### cleaning ###\n\nIf you want to purge your working directory back to the status of upstream, following commands can be used (remember everything you've worked on is gone after these):\n\n```bash\ngit reset --hard upstream/master\ngit clean -fdx\n```\n\n### rebasing ###\n\nFor feature/topic branches, you should always used the `--rebase` flag to `git pull`, or if you are usually handling many temporary \"to be in a github pull request\" branches, run following to automate this:\n\n```bash\ngit config branch.autosetuprebase local\n```\n(see `man git-config` for more information)\n\n### handling merge conflicts ###\n\nIf you're getting merge conflicts when merging, instead of editing the conflicted files manually, you can use the feature\n`git mergetool`. Even though the default tool `xxdiff` looks awful/old, it's rather useful.\n\nFollowing are some commands that can be used there:\n\n* `Ctrl + Alt + M` - automerge as much as possible\n* `b` - jump to next merge conflict\n* `s` - change the order of the conflicted lines\n* `u` - undo an merge\n* `left mouse button` - mark a block to be the winner\n* `middle mouse button` - mark a line to be the winner\n* `Ctrl + S` - save\n* `Ctrl + Q` - quit\n\n[QUnit](http://docs.jquery.com/QUnit) Reference\n-----------------\n\n### Test methods ###\n\n```js\nexpect( numAssertions );\nstop();\nstart();\n```\n\n\nnote: QUnit's eventual addition of an argument to stop/start is ignored in this test suite so that start and stop can be passed as callbacks without worrying about their parameters\n\n### Test assertions ###\n\n\n```js\nok( value, [message] );\nequal( actual, expected, [message] );\nnotEqual( actual, expected, [message] );\ndeepEqual( actual, expected, [message] );\nnotDeepEqual( actual, expected, [message] );\nstrictEqual( actual, expected, [message] );\nnotStrictEqual( actual, expected, [message] );\nraises( block, [expected], [message] );\n```\n\n\nTest Suite Convenience Methods Reference (See [test/data/testinit.js](https://github.com/jquery/jquery/blob/master/test/data/testinit.js))\n------------------------------\n\n### Returns an array of elements with the given IDs ###\n\n```js\nq( ... );\n```\n\nExample:\n\n```js\nq(\"main\", \"foo\", \"bar\");\n\n=> [ div#main, span#foo, input#bar ]\n```\n\n### Asserts that a selection matches the given IDs ###\n\n```js\nt( testName, selector, [ \"array\", \"of\", \"ids\" ] );\n```\n\nExample:\n\n```js\nt(\"Check for something\", \"//[a]\", [\"foo\", \"baar\"]);\n```\n\n\n\n### Fires a native DOM event without going through jQuery ###\n\n```js\nfireNative( node, eventType )\n```\n\nExample:\n\n```js\nfireNative( jQuery(\"#elem\")[0], \"click\" );\n```\n\n### Add random number to url to stop caching ###\n\n```js\nurl( \"some/url.php\" );\n```\n\nExample:\n\n```js\nurl(\"data/test.html\");\n\n=> \"data/test.html?10538358428943\"\n\n\nurl(\"data/test.php?foo=bar\");\n\n=> \"data/test.php?foo=bar&10538358345554\"\n```\n\n\n### Load tests in an iframe ###\n\nLoads a given page constructing a url with fileName: `\"./data/\" + fileName + \".html\"`\nand fires the given callback on jQuery ready (using the jQuery loading from that page)\nand passes the iFrame's jQuery to the callback.\n\n```js\ntestIframe( fileName, testName, callback );\n```\n\nCallback arguments:\n\n```js\ncallback( jQueryFromIFrame, iFrameWindow, iFrameDocument );\n```\n\n### Load tests in an iframe (window.iframeCallback) ###\n\nLoads a given page constructing a url with fileName: `\"./data/\" + fileName + \".html\"`\nThe given callback is fired when window.iframeCallback is called by the page\nThe arguments passed to the callback are the same as the\narguments passed to window.iframeCallback, whatever that may be\n\n```js\ntestIframeWithCallback( testName, fileName, callback );\n```\n\nQuestions?\n----------\n\nIf you have any questions, please feel free to ask on the\n[Developing jQuery Core forum](http://forum.jquery.com/developing-jquery-core) or in #jquery on irc.freenode.net.\n",
  "readmeFilename": "README.md",
  "_id": "jquery@2.0.3",
  "_shasum": "520473d9f69ca1bdc12d51f991a7f7d580c0ccd9",
  "_from": "git+https://github.com/jquery/jquery.git#f852e631ba85af7da4ad7594785e122504e7b233",
  "_resolved": "git+https://github.com/jquery/jquery.git#f852e631ba85af7da4ad7594785e122504e7b233"
}
