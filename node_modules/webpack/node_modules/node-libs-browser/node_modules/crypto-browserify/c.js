(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (Buffer){
var createHash = require('sha.js')

var md5 = toConstructor(require('./md5'))
var rmd160 = toConstructor(require('ripemd160'))

function toConstructor (fn) {
  return function () {
    var buffers = []
    var m= {
      update: function (data, enc) {
        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
        buffers.push(data)
        return this
      },
      digest: function (enc) {
        var buf = Buffer.concat(buffers)
        var r = fn(buf)
        buffers = null
        return enc ? r.toString(enc) : r
      }
    }
    return m
  }
}

module.exports = function (alg) {
  if('md5' === alg) return new md5()
  if('rmd160' === alg) return new rmd160()
  return createHash(alg)
}

}).call(this,require("buffer").Buffer)
},{"./md5":5,"buffer":37,"ripemd160":12,"sha.js":14}],2:[function(require,module,exports){
(function (Buffer){
var createHash = require('./create-hash')

var zeroBuffer = new Buffer(128)
zeroBuffer.fill(0)

module.exports = Hmac

function Hmac (alg, key) {
  if(!(this instanceof Hmac)) return new Hmac(alg, key)
  this._opad = opad
  this._alg = alg

  var blocksize = (alg === 'sha512') ? 128 : 64

  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

  if(key.length > blocksize) {
    key = createHash(alg).update(key).digest()
  } else if(key.length < blocksize) {
    key = Buffer.concat([key, zeroBuffer], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for(var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)
  return this
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()
  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}


}).call(this,require("buffer").Buffer)
},{"./create-hash":1,"buffer":37}],3:[function(require,module,exports){
(function (Buffer){
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}

module.exports = { hash: hash };

}).call(this,require("buffer").Buffer)
},{"buffer":37}],4:[function(require,module,exports){
(function (Buffer){
var rng = require('./rng')

function error () {
  var m = [].slice.call(arguments).join(' ')
  throw new Error([
    m,
    'we accept pull requests',
    'http://github.com/dominictarr/crypto-browserify'
    ].join('\n'))
}

exports.createHash = require('./create-hash')

exports.createHmac = require('./create-hmac')

exports.randomBytes = function(size, callback) {
  if (callback && callback.call) {
    try {
      callback.call(this, undefined, new Buffer(rng(size)))
    } catch (err) { callback(err) }
  } else {
    return new Buffer(rng(size))
  }
}

function each(a, f) {
  for(var i in a)
    f(a[i], i)
}

exports.getHashes = function () {
  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
}

var p = require('./pbkdf2')(exports)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync


// the least I can do is make error messages for the rest of the node.js/crypto api.
each(['createCredentials'
, 'createCipher'
, 'createCipheriv'
, 'createDecipher'
, 'createDecipheriv'
, 'createSign'
, 'createVerify'
, 'createDiffieHellman'
], function (name) {
  exports[name] = function () {
    error('sorry,', name, 'is not implemented yet')
  }
})

}).call(this,require("buffer").Buffer)
},{"./create-hash":1,"./create-hmac":2,"./pbkdf2":32,"./rng":33,"buffer":37}],5:[function(require,module,exports){
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};

},{"./helpers":3}],6:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  if (encoding === 'base64' && type === 'string') {
    subject = base64clean(subject)
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str.toString()
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.compare = function (a, b) {
  assert(Buffer.isBuffer(a) && Buffer.isBuffer(b), 'Arguments must be Buffers')
  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) {
    return -1
  }
  if (y < x) {
    return 1
  }
  return 0
}

// BUFFER INSTANCE METHODS
// =======================

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end === undefined) ? self.length : Number(end)

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = asciiSlice(self, start, end)
      break
    case 'binary':
      ret = binarySlice(self, start, end)
      break
    case 'base64':
      ret = base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

Buffer.prototype.equals = function (b) {
  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.compare = function (b) {
  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return readUInt16(this, offset, false, noAssert)
}

function readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return readInt16(this, offset, false, noAssert)
}

function readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return readInt32(this, offset, false, noAssert)
}

function readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return readFloat(this, offset, false, noAssert)
}

function readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
  return offset + 1
}

function writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
  return offset + 2
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  return writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  return writeUInt16(this, value, offset, false, noAssert)
}

function writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
  return offset + 4
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  return writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  return writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
  return offset + 1
}

function writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
  return offset + 2
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  return writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  return writeInt16(this, value, offset, false, noAssert)
}

function writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
  return offset + 4
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  return writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  return writeInt32(this, value, offset, false, noAssert)
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

},{"base64-js":7,"ieee754":8}],7:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],8:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],9:[function(require,module,exports){
module.exports=[
  {
    "input": "",
    "DSA": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "DSA-SHA": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "DSA-SHA1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "DSA-SHA1-old": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "RSA-MD4": "31d6cfe0d16ae931b73c59d7e0c089c0",
    "RSA-MD5": "d41d8cd98f00b204e9800998ecf8427e",
    "RSA-MDC2": "52525252525252522525252525252525",
    "RSA-RIPEMD160": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "RSA-SHA": "f96cea198ad1dd5617ac084a3d92c6107708c0ef",
    "RSA-SHA1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "RSA-SHA1-2": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "RSA-SHA224": "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
    "RSA-SHA256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
    "RSA-SHA384": "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b",
    "RSA-SHA512": "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
    "dsaEncryption": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "dsaWithSHA": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "dsaWithSHA1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "dss1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "ecdsa-with-SHA1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "md4": "31d6cfe0d16ae931b73c59d7e0c089c0",
    "md4WithRSAEncryption": "31d6cfe0d16ae931b73c59d7e0c089c0",
    "md5": "d41d8cd98f00b204e9800998ecf8427e",
    "md5WithRSAEncryption": "d41d8cd98f00b204e9800998ecf8427e",
    "mdc2": "52525252525252522525252525252525",
    "mdc2WithRSA": "52525252525252522525252525252525",
    "ripemd": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "ripemd160": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "ripemd160WithRSA": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "rmd160": "9c1185a5c5e9fc54612808977ee8f548b2258d31",
    "sha": "f96cea198ad1dd5617ac084a3d92c6107708c0ef",
    "sha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "sha1WithRSAEncryption": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "sha224": "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
    "sha224WithRSAEncryption": "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f",
    "sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
    "sha256WithRSAEncryption": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
    "sha384": "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b",
    "sha384WithRSAEncryption": "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b",
    "sha512": "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
    "sha512WithRSAEncryption": "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
    "shaWithRSAEncryption": "f96cea198ad1dd5617ac084a3d92c6107708c0ef",
    "ssl2-md5": "d41d8cd98f00b204e9800998ecf8427e",
    "ssl3-md5": "d41d8cd98f00b204e9800998ecf8427e",
    "ssl3-sha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "whirlpool": "19fa61d75522a4669b44e39c1d2e1726c530232130d407f89afee0964997f7a73e83be698b288febcf88e3e03c4f0757ea8964e59b63d93708b138cc42a66eb3"
  },
  {
    "input": "JA==",
    "DSA": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "DSA-SHA": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "DSA-SHA1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "DSA-SHA1-old": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "RSA-MD4": "c7215e7d305abfa7f00f9909db8d6770",
    "RSA-MD5": "c3e97dd6e97fb5125688c97f36720cbe",
    "RSA-MDC2": "c2e2433873daab0be4ab43f5991d3f4f",
    "RSA-RIPEMD160": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "RSA-SHA": "7c12402b104c3b87e91f90c8451c871b019160ae",
    "RSA-SHA1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "RSA-SHA1-2": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "RSA-SHA224": "23fa1e672a6c2acdc4d7bfae713e0c9337ba057b5d5ace2685b59321",
    "RSA-SHA256": "09fc96082d34c2dfc1295d92073b5ea1dc8ef8da95f14dfded011ffb96d3e54b",
    "RSA-SHA384": "b1583f4b2e1bf53fc31e9dfb8e8d945a62955da709f280a9066aa8f31ef688d65e0e9816a5f1f11363b3898820bd1576",
    "RSA-SHA512": "840cfc6285878464c36c9aa819d8373729eda14c3e701fd37afec1d5baa2893944c696fc4017a520abfbb1347b62e6b858211d3ea7c7dd26319601fde119c3b4",
    "dsaEncryption": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "dsaWithSHA": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "dsaWithSHA1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "dss1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "ecdsa-with-SHA1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "md4": "c7215e7d305abfa7f00f9909db8d6770",
    "md4WithRSAEncryption": "c7215e7d305abfa7f00f9909db8d6770",
    "md5": "c3e97dd6e97fb5125688c97f36720cbe",
    "md5WithRSAEncryption": "c3e97dd6e97fb5125688c97f36720cbe",
    "mdc2": "c2e2433873daab0be4ab43f5991d3f4f",
    "mdc2WithRSA": "c2e2433873daab0be4ab43f5991d3f4f",
    "ripemd": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "ripemd160": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "ripemd160WithRSA": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "rmd160": "857b2f94d0b47a0a61bbee5993fd6ff34c0fe4a1",
    "sha": "7c12402b104c3b87e91f90c8451c871b019160ae",
    "sha1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "sha1WithRSAEncryption": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "sha224": "23fa1e672a6c2acdc4d7bfae713e0c9337ba057b5d5ace2685b59321",
    "sha224WithRSAEncryption": "23fa1e672a6c2acdc4d7bfae713e0c9337ba057b5d5ace2685b59321",
    "sha256": "09fc96082d34c2dfc1295d92073b5ea1dc8ef8da95f14dfded011ffb96d3e54b",
    "sha256WithRSAEncryption": "09fc96082d34c2dfc1295d92073b5ea1dc8ef8da95f14dfded011ffb96d3e54b",
    "sha384": "b1583f4b2e1bf53fc31e9dfb8e8d945a62955da709f280a9066aa8f31ef688d65e0e9816a5f1f11363b3898820bd1576",
    "sha384WithRSAEncryption": "b1583f4b2e1bf53fc31e9dfb8e8d945a62955da709f280a9066aa8f31ef688d65e0e9816a5f1f11363b3898820bd1576",
    "sha512": "840cfc6285878464c36c9aa819d8373729eda14c3e701fd37afec1d5baa2893944c696fc4017a520abfbb1347b62e6b858211d3ea7c7dd26319601fde119c3b4",
    "sha512WithRSAEncryption": "840cfc6285878464c36c9aa819d8373729eda14c3e701fd37afec1d5baa2893944c696fc4017a520abfbb1347b62e6b858211d3ea7c7dd26319601fde119c3b4",
    "shaWithRSAEncryption": "7c12402b104c3b87e91f90c8451c871b019160ae",
    "ssl2-md5": "c3e97dd6e97fb5125688c97f36720cbe",
    "ssl3-md5": "c3e97dd6e97fb5125688c97f36720cbe",
    "ssl3-sha1": "3cdf2936da2fc556bfa533ab1eb59ce710ac80e5",
    "whirlpool": "42858987414fe0c406d287f84292e90ad2c4458f9d5493be95780c4bc405dc506b9db976ddbde235d969bfdff2a6abf7c55d5bcf8a4138aab828409096d079fa"
  },
  {
    "input": "cPA=",
    "DSA": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "DSA-SHA": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "DSA-SHA1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "DSA-SHA1-old": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "RSA-MD4": "8cec4677514fdd9f83865fb501581401",
    "RSA-MD5": "038701ca277a9d4de87bff428dd30a12",
    "RSA-MDC2": "d51917bf740514d2513f53e005e51d52",
    "RSA-RIPEMD160": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "RSA-SHA": "f21ff66e7c31a44988ad6b38fd930d4e45087b9c",
    "RSA-SHA1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "RSA-SHA1-2": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "RSA-SHA224": "e0a4d9e862c2ed21309902bff1a9fb79f5869052714d6539c5aea631",
    "RSA-SHA256": "33a633841666a5c291a82bfae65deac5c537d05f9fe926cbb5b7281bf90ad150",
    "RSA-SHA384": "ba3ee00e0d80afcecaf0adeb2161838a4b1ea6a4c9f0aced178ebc7dbb1ab4c51f7032b7086a804c69f864d257b7f480",
    "RSA-SHA512": "94d5407efa06aa877c84b998abde44caf6948cf6b6475e519baadb41790e3fbbbecf518288d57f5a84a54892482aa76f5d17adc5be176a476b712e9b5d30bb2c",
    "dsaEncryption": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "dsaWithSHA": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "dsaWithSHA1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "dss1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "ecdsa-with-SHA1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "md4": "8cec4677514fdd9f83865fb501581401",
    "md4WithRSAEncryption": "8cec4677514fdd9f83865fb501581401",
    "md5": "038701ca277a9d4de87bff428dd30a12",
    "md5WithRSAEncryption": "038701ca277a9d4de87bff428dd30a12",
    "mdc2": "d51917bf740514d2513f53e005e51d52",
    "mdc2WithRSA": "d51917bf740514d2513f53e005e51d52",
    "ripemd": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "ripemd160": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "ripemd160WithRSA": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "rmd160": "c45bf1cfc102c6607c115ba88ad7ab701a8e1d90",
    "sha": "f21ff66e7c31a44988ad6b38fd930d4e45087b9c",
    "sha1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "sha1WithRSAEncryption": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "sha224": "e0a4d9e862c2ed21309902bff1a9fb79f5869052714d6539c5aea631",
    "sha224WithRSAEncryption": "e0a4d9e862c2ed21309902bff1a9fb79f5869052714d6539c5aea631",
    "sha256": "33a633841666a5c291a82bfae65deac5c537d05f9fe926cbb5b7281bf90ad150",
    "sha256WithRSAEncryption": "33a633841666a5c291a82bfae65deac5c537d05f9fe926cbb5b7281bf90ad150",
    "sha384": "ba3ee00e0d80afcecaf0adeb2161838a4b1ea6a4c9f0aced178ebc7dbb1ab4c51f7032b7086a804c69f864d257b7f480",
    "sha384WithRSAEncryption": "ba3ee00e0d80afcecaf0adeb2161838a4b1ea6a4c9f0aced178ebc7dbb1ab4c51f7032b7086a804c69f864d257b7f480",
    "sha512": "94d5407efa06aa877c84b998abde44caf6948cf6b6475e519baadb41790e3fbbbecf518288d57f5a84a54892482aa76f5d17adc5be176a476b712e9b5d30bb2c",
    "sha512WithRSAEncryption": "94d5407efa06aa877c84b998abde44caf6948cf6b6475e519baadb41790e3fbbbecf518288d57f5a84a54892482aa76f5d17adc5be176a476b712e9b5d30bb2c",
    "shaWithRSAEncryption": "f21ff66e7c31a44988ad6b38fd930d4e45087b9c",
    "ssl2-md5": "038701ca277a9d4de87bff428dd30a12",
    "ssl3-md5": "038701ca277a9d4de87bff428dd30a12",
    "ssl3-sha1": "19c1e2048fa7393cfbf2d310ad8209ec11d996e5",
    "whirlpool": "5380824259b0aeccc5617ba3fbf9cdf931c7053e114bec944af7e3371076ac1570a0d774135ae43c958defd06f27aa9d8576106b00b2d9ecbba0a2c88c6d6e6d"
  },
  {
    "input": "Dh7w",
    "DSA": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "DSA-SHA": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "DSA-SHA1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "DSA-SHA1-old": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "RSA-MD4": "fe6f223ef7e24708a7a4419114aa8879",
    "RSA-MD5": "bc60c6192e361d99b59d47250668a852",
    "RSA-MDC2": "11a97b562c33212f0d47473dbc43313e",
    "RSA-RIPEMD160": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "RSA-SHA": "e03d5e997e65b6b7b8c96826fd28e36a59f2a26c",
    "RSA-SHA1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "RSA-SHA1-2": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "RSA-SHA224": "9896a021c402d700800fbc74f9bbf44740349cff83e7763e576cfc51",
    "RSA-SHA256": "8e2cc699f7e677265069f172d4cba15c146e954d7e4f2a8c176576035275b7a0",
    "RSA-SHA384": "4f779d096abf21d57803369791631552128e67e70cb0d40f56b4e7f0b4b484e794d81aba38a838c95b2d3548c2a0ef40",
    "RSA-SHA512": "41e7f289effb46f2ca50b65f9702acc92a4c238a55ce2451a8fa6ccd46e589323ae9ff6dcec415aa42f238749ce9c43f3a7e6d1eaebc27fc7715895afcb16d8f",
    "dsaEncryption": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "dsaWithSHA": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "dsaWithSHA1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "dss1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "ecdsa-with-SHA1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "md4": "fe6f223ef7e24708a7a4419114aa8879",
    "md4WithRSAEncryption": "fe6f223ef7e24708a7a4419114aa8879",
    "md5": "bc60c6192e361d99b59d47250668a852",
    "md5WithRSAEncryption": "bc60c6192e361d99b59d47250668a852",
    "mdc2": "11a97b562c33212f0d47473dbc43313e",
    "mdc2WithRSA": "11a97b562c33212f0d47473dbc43313e",
    "ripemd": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "ripemd160": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "ripemd160WithRSA": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "rmd160": "bb76cf98ffe1e37d0c10f15706f73c463dc71053",
    "sha": "e03d5e997e65b6b7b8c96826fd28e36a59f2a26c",
    "sha1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "sha1WithRSAEncryption": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "sha224": "9896a021c402d700800fbc74f9bbf44740349cff83e7763e576cfc51",
    "sha224WithRSAEncryption": "9896a021c402d700800fbc74f9bbf44740349cff83e7763e576cfc51",
    "sha256": "8e2cc699f7e677265069f172d4cba15c146e954d7e4f2a8c176576035275b7a0",
    "sha256WithRSAEncryption": "8e2cc699f7e677265069f172d4cba15c146e954d7e4f2a8c176576035275b7a0",
    "sha384": "4f779d096abf21d57803369791631552128e67e70cb0d40f56b4e7f0b4b484e794d81aba38a838c95b2d3548c2a0ef40",
    "sha384WithRSAEncryption": "4f779d096abf21d57803369791631552128e67e70cb0d40f56b4e7f0b4b484e794d81aba38a838c95b2d3548c2a0ef40",
    "sha512": "41e7f289effb46f2ca50b65f9702acc92a4c238a55ce2451a8fa6ccd46e589323ae9ff6dcec415aa42f238749ce9c43f3a7e6d1eaebc27fc7715895afcb16d8f",
    "sha512WithRSAEncryption": "41e7f289effb46f2ca50b65f9702acc92a4c238a55ce2451a8fa6ccd46e589323ae9ff6dcec415aa42f238749ce9c43f3a7e6d1eaebc27fc7715895afcb16d8f",
    "shaWithRSAEncryption": "e03d5e997e65b6b7b8c96826fd28e36a59f2a26c",
    "ssl2-md5": "bc60c6192e361d99b59d47250668a852",
    "ssl3-md5": "bc60c6192e361d99b59d47250668a852",
    "ssl3-sha1": "ca775d8c80faa6f87fa62beca6ca6089d63b56e5",
    "whirlpool": "620675595fcfcbe8486c3eb819075c4aa54b3a022289407a4d68f851278ecba71c83b58e8b9de7a28cff4a45da99e8fc9633f9e9f05bdc01bc0ed5007ec4bc11"
  },
  {
    "input": "CDh4jw==",
    "DSA": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "DSA-SHA": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "DSA-SHA1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "DSA-SHA1-old": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "RSA-MD4": "70b7b5c5509efe254425736c8eeddca7",
    "RSA-MD5": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "RSA-MDC2": "0a010c91851876665dab9f9ad6fcfa77",
    "RSA-RIPEMD160": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "RSA-SHA": "3eaee2d3221c01fcf5f5626b01642fc69806b5c9",
    "RSA-SHA1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "RSA-SHA1-2": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "RSA-SHA224": "65e4b1ec58c705d04782f44c6d6c5b67ad7469cc3dddd165f08fdc39",
    "RSA-SHA256": "8096d72b968a2dbb7ceee163c1981f7f1ec11ee10051b2dc2a8d7601d4e56971",
    "RSA-SHA384": "4b2ea7a3e1142ed72ba0e2503a024299d47580928eaa1de8fdc2b2df399e9ddda0654cbc0006ea776bc4a21c8a28b49a",
    "RSA-SHA512": "9115ace4a1fb9ad2e367f24cd73a68347db6103e4429f3ef989643563f1eeb74cb279561c461eb67cf47bdc764c107e4371415dab3f089f0f189edf9cc09a84a",
    "dsaEncryption": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "dsaWithSHA": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "dsaWithSHA1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "dss1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "ecdsa-with-SHA1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "md4": "70b7b5c5509efe254425736c8eeddca7",
    "md4WithRSAEncryption": "70b7b5c5509efe254425736c8eeddca7",
    "md5": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "md5WithRSAEncryption": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "mdc2": "0a010c91851876665dab9f9ad6fcfa77",
    "mdc2WithRSA": "0a010c91851876665dab9f9ad6fcfa77",
    "ripemd": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "ripemd160": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "ripemd160WithRSA": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "rmd160": "744a76f9ad4b9b264e834fae665dc5c9be024b1e",
    "sha": "3eaee2d3221c01fcf5f5626b01642fc69806b5c9",
    "sha1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "sha1WithRSAEncryption": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "sha224": "65e4b1ec58c705d04782f44c6d6c5b67ad7469cc3dddd165f08fdc39",
    "sha224WithRSAEncryption": "65e4b1ec58c705d04782f44c6d6c5b67ad7469cc3dddd165f08fdc39",
    "sha256": "8096d72b968a2dbb7ceee163c1981f7f1ec11ee10051b2dc2a8d7601d4e56971",
    "sha256WithRSAEncryption": "8096d72b968a2dbb7ceee163c1981f7f1ec11ee10051b2dc2a8d7601d4e56971",
    "sha384": "4b2ea7a3e1142ed72ba0e2503a024299d47580928eaa1de8fdc2b2df399e9ddda0654cbc0006ea776bc4a21c8a28b49a",
    "sha384WithRSAEncryption": "4b2ea7a3e1142ed72ba0e2503a024299d47580928eaa1de8fdc2b2df399e9ddda0654cbc0006ea776bc4a21c8a28b49a",
    "sha512": "9115ace4a1fb9ad2e367f24cd73a68347db6103e4429f3ef989643563f1eeb74cb279561c461eb67cf47bdc764c107e4371415dab3f089f0f189edf9cc09a84a",
    "sha512WithRSAEncryption": "9115ace4a1fb9ad2e367f24cd73a68347db6103e4429f3ef989643563f1eeb74cb279561c461eb67cf47bdc764c107e4371415dab3f089f0f189edf9cc09a84a",
    "shaWithRSAEncryption": "3eaee2d3221c01fcf5f5626b01642fc69806b5c9",
    "ssl2-md5": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "ssl3-md5": "542c3a0ab6b51bc6a88fa7bb567bca3e",
    "ssl3-sha1": "71ac973d0e4b50ae9e5043ff4d615381120a25a0",
    "whirlpool": "b4e340da8cf3791c06be2cdf2b116d25af9afd79aa16d7561f0ebc86d2d958366b3aaa4d24bc9fb94fdb018c34d4942c86051c869c3c483fb65c5d8a55874635"
  },
  {
    "input": "ED4I/A8=",
    "DSA": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "DSA-SHA": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "DSA-SHA1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "DSA-SHA1-old": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "RSA-MD4": "6a393bac79c17ac4b4c807c7e4308246",
    "RSA-MD5": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "RSA-MDC2": "425c968bf0c99f4b0bb1d652a014427f",
    "RSA-RIPEMD160": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "RSA-SHA": "b6ad4ccb91e7f2979f66b20adca98cab8df1b57b",
    "RSA-SHA1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "RSA-SHA1-2": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "RSA-SHA224": "561c8bf49dc2d996ef5e48c90f33bf020b8e5cf6cbab12910e212593",
    "RSA-SHA256": "2cc06402328f034d1909fa7b95f34cdb5585ce7f9096bc4082c97904921f6304",
    "RSA-SHA384": "4bec36fa178f30484c4f03764fd8978b204960104d766503be6253ef89ce83d804983c703562f6fb172f954495b80999",
    "RSA-SHA512": "f4b4cf07e964c53fcefb0f7d48596beab1722e1d9a70ab74ec73140f0f4b7cd9bce6d7ed8e873639f2c32f2e4828294c6af04267d68c3f27ae065a781d66d9fe",
    "dsaEncryption": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "dsaWithSHA": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "dsaWithSHA1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "dss1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "ecdsa-with-SHA1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "md4": "6a393bac79c17ac4b4c807c7e4308246",
    "md4WithRSAEncryption": "6a393bac79c17ac4b4c807c7e4308246",
    "md5": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "md5WithRSAEncryption": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "mdc2": "425c968bf0c99f4b0bb1d652a014427f",
    "mdc2WithRSA": "425c968bf0c99f4b0bb1d652a014427f",
    "ripemd": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "ripemd160": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "ripemd160WithRSA": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "rmd160": "9ea1db9ff405c3ea4961afe11f91ac671a8700c9",
    "sha": "b6ad4ccb91e7f2979f66b20adca98cab8df1b57b",
    "sha1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "sha1WithRSAEncryption": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "sha224": "561c8bf49dc2d996ef5e48c90f33bf020b8e5cf6cbab12910e212593",
    "sha224WithRSAEncryption": "561c8bf49dc2d996ef5e48c90f33bf020b8e5cf6cbab12910e212593",
    "sha256": "2cc06402328f034d1909fa7b95f34cdb5585ce7f9096bc4082c97904921f6304",
    "sha256WithRSAEncryption": "2cc06402328f034d1909fa7b95f34cdb5585ce7f9096bc4082c97904921f6304",
    "sha384": "4bec36fa178f30484c4f03764fd8978b204960104d766503be6253ef89ce83d804983c703562f6fb172f954495b80999",
    "sha384WithRSAEncryption": "4bec36fa178f30484c4f03764fd8978b204960104d766503be6253ef89ce83d804983c703562f6fb172f954495b80999",
    "sha512": "f4b4cf07e964c53fcefb0f7d48596beab1722e1d9a70ab74ec73140f0f4b7cd9bce6d7ed8e873639f2c32f2e4828294c6af04267d68c3f27ae065a781d66d9fe",
    "sha512WithRSAEncryption": "f4b4cf07e964c53fcefb0f7d48596beab1722e1d9a70ab74ec73140f0f4b7cd9bce6d7ed8e873639f2c32f2e4828294c6af04267d68c3f27ae065a781d66d9fe",
    "shaWithRSAEncryption": "b6ad4ccb91e7f2979f66b20adca98cab8df1b57b",
    "ssl2-md5": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "ssl3-md5": "e035f9e748a2a09a4fbdcf18c4f58bf1",
    "ssl3-sha1": "a6b5b9f854cfb76701c3bddbf374b3094ea49cba",
    "whirlpool": "38b2050d729bda334f9416cc738a45e00f809b63e785ed5b6e2b4be42a42681027b64f99eb856d85233d63aa8c52f879ab021b62a060ceffe830b7ed8aa1052f"
  },
  {
    "input": "58ceB+8D",
    "DSA": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "DSA-SHA": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "DSA-SHA1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "DSA-SHA1-old": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "RSA-MD4": "14226bf662b757c985968b1a3cc86b80",
    "RSA-MD5": "3b4cc9226a236742d72578c5915b6c3c",
    "RSA-MDC2": "e201f3d4d35c67817d9ab7c0ab2b5d26",
    "RSA-RIPEMD160": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "RSA-SHA": "300e8646d5d0ed06c5d7344798d710a115e93888",
    "RSA-SHA1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "RSA-SHA1-2": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "RSA-SHA224": "fc062b6f3c2b5f3fbdcda1bbd6601e8b5b48748dd210634416b254e3",
    "RSA-SHA256": "99a8d6823b803a8d41ed7c26322b4ac8fdc86ce4457ffaaf8600e99595f1577a",
    "RSA-SHA384": "ae3099ae9838e3e363f365040fa186de3b7d6f134f6018ae763b831afc0cfbde03e17c7b5d5bec3089a26f274fe2b297",
    "RSA-SHA512": "eb2276d498230c11404628a8dab7a851b1e9b1e529dc92241e8b99b2d11cea4668be552d40af999af815c9c3994da790de94386b955fa762e9913d288ca33937",
    "dsaEncryption": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "dsaWithSHA": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "dsaWithSHA1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "dss1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "ecdsa-with-SHA1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "md4": "14226bf662b757c985968b1a3cc86b80",
    "md4WithRSAEncryption": "14226bf662b757c985968b1a3cc86b80",
    "md5": "3b4cc9226a236742d72578c5915b6c3c",
    "md5WithRSAEncryption": "3b4cc9226a236742d72578c5915b6c3c",
    "mdc2": "e201f3d4d35c67817d9ab7c0ab2b5d26",
    "mdc2WithRSA": "e201f3d4d35c67817d9ab7c0ab2b5d26",
    "ripemd": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "ripemd160": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "ripemd160WithRSA": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "rmd160": "eee22b636281b5c125e9fe38f9ab754afa648fd1",
    "sha": "300e8646d5d0ed06c5d7344798d710a115e93888",
    "sha1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "sha1WithRSAEncryption": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "sha224": "fc062b6f3c2b5f3fbdcda1bbd6601e8b5b48748dd210634416b254e3",
    "sha224WithRSAEncryption": "fc062b6f3c2b5f3fbdcda1bbd6601e8b5b48748dd210634416b254e3",
    "sha256": "99a8d6823b803a8d41ed7c26322b4ac8fdc86ce4457ffaaf8600e99595f1577a",
    "sha256WithRSAEncryption": "99a8d6823b803a8d41ed7c26322b4ac8fdc86ce4457ffaaf8600e99595f1577a",
    "sha384": "ae3099ae9838e3e363f365040fa186de3b7d6f134f6018ae763b831afc0cfbde03e17c7b5d5bec3089a26f274fe2b297",
    "sha384WithRSAEncryption": "ae3099ae9838e3e363f365040fa186de3b7d6f134f6018ae763b831afc0cfbde03e17c7b5d5bec3089a26f274fe2b297",
    "sha512": "eb2276d498230c11404628a8dab7a851b1e9b1e529dc92241e8b99b2d11cea4668be552d40af999af815c9c3994da790de94386b955fa762e9913d288ca33937",
    "sha512WithRSAEncryption": "eb2276d498230c11404628a8dab7a851b1e9b1e529dc92241e8b99b2d11cea4668be552d40af999af815c9c3994da790de94386b955fa762e9913d288ca33937",
    "shaWithRSAEncryption": "300e8646d5d0ed06c5d7344798d710a115e93888",
    "ssl2-md5": "3b4cc9226a236742d72578c5915b6c3c",
    "ssl3-md5": "3b4cc9226a236742d72578c5915b6c3c",
    "ssl3-sha1": "d87a0ee74e4b9ad72e6847c87bdeeb3d07844380",
    "whirlpool": "242fc9f0ae29562dea0b04e7b6e5396ea07672aea450a6ab60332c98a332754941a9a8059d7ce8e8e8fd54f5030f4e279a6561928c030e37a7810880e619cd30"
  },
  {
    "input": "4Ptx+PnB/A==",
    "DSA": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "DSA-SHA": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "DSA-SHA1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "DSA-SHA1-old": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "RSA-MD4": "7f9a8534234f6dfde5a2475ed993347c",
    "RSA-MD5": "35950208a022baac90056636827158ce",
    "RSA-MDC2": "48117e9635d7cc41320ee331d6e93e54",
    "RSA-RIPEMD160": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "RSA-SHA": "2e4b6da9ae9a464f6afe00b5f85c18c09e1e2a62",
    "RSA-SHA1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "RSA-SHA1-2": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "RSA-SHA224": "ba682c86eea9dc3569ecf80f94ed0893ae686d0a34a6bf2ac11dc69b",
    "RSA-SHA256": "5d73704556bd458af1b90383d98591c1d01894d99b394fb7647d3d0cbd45f9a0",
    "RSA-SHA384": "b9094601f510c4ef26dd4e35c54bd6f456479acdad713ca8bda12bda2f55af0af8adb511b40f880cae655f49f7cde6f5",
    "RSA-SHA512": "0d1c37c810abe448b113e196e2afad16dd3dc095a8c28d0c47c023fbd2c5cb032b8b1116efebad9a60a209fc099b8a03c0fe6eb1d7444c2cf01fce4da9ecefad",
    "dsaEncryption": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "dsaWithSHA": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "dsaWithSHA1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "dss1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "ecdsa-with-SHA1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "md4": "7f9a8534234f6dfde5a2475ed993347c",
    "md4WithRSAEncryption": "7f9a8534234f6dfde5a2475ed993347c",
    "md5": "35950208a022baac90056636827158ce",
    "md5WithRSAEncryption": "35950208a022baac90056636827158ce",
    "mdc2": "48117e9635d7cc41320ee331d6e93e54",
    "mdc2WithRSA": "48117e9635d7cc41320ee331d6e93e54",
    "ripemd": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "ripemd160": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "ripemd160WithRSA": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "rmd160": "39eb7ee3be32c69e6ea1055ae7aefd75674c9722",
    "sha": "2e4b6da9ae9a464f6afe00b5f85c18c09e1e2a62",
    "sha1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "sha1WithRSAEncryption": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "sha224": "ba682c86eea9dc3569ecf80f94ed0893ae686d0a34a6bf2ac11dc69b",
    "sha224WithRSAEncryption": "ba682c86eea9dc3569ecf80f94ed0893ae686d0a34a6bf2ac11dc69b",
    "sha256": "5d73704556bd458af1b90383d98591c1d01894d99b394fb7647d3d0cbd45f9a0",
    "sha256WithRSAEncryption": "5d73704556bd458af1b90383d98591c1d01894d99b394fb7647d3d0cbd45f9a0",
    "sha384": "b9094601f510c4ef26dd4e35c54bd6f456479acdad713ca8bda12bda2f55af0af8adb511b40f880cae655f49f7cde6f5",
    "sha384WithRSAEncryption": "b9094601f510c4ef26dd4e35c54bd6f456479acdad713ca8bda12bda2f55af0af8adb511b40f880cae655f49f7cde6f5",
    "sha512": "0d1c37c810abe448b113e196e2afad16dd3dc095a8c28d0c47c023fbd2c5cb032b8b1116efebad9a60a209fc099b8a03c0fe6eb1d7444c2cf01fce4da9ecefad",
    "sha512WithRSAEncryption": "0d1c37c810abe448b113e196e2afad16dd3dc095a8c28d0c47c023fbd2c5cb032b8b1116efebad9a60a209fc099b8a03c0fe6eb1d7444c2cf01fce4da9ecefad",
    "shaWithRSAEncryption": "2e4b6da9ae9a464f6afe00b5f85c18c09e1e2a62",
    "ssl2-md5": "35950208a022baac90056636827158ce",
    "ssl3-md5": "35950208a022baac90056636827158ce",
    "ssl3-sha1": "1976b8dd509fe66bf09c9a8d33534d4ef4f63bfd",
    "whirlpool": "2c2f7c9be97d4c644ba3945896b7100dafebc814e1a555b8ee77405527ec0af0e778a9314609901da4d944305e47dee6f6055f43b50ede637c303291b83fdb08"
  },
  {
    "input": "/3xgPB+A4gc=",
    "DSA": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "DSA-SHA": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "DSA-SHA1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "DSA-SHA1-old": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "RSA-MD4": "523af852dca564c3471ebaa3aad7963a",
    "RSA-MD5": "84cedff2ed1b78b395cc8651094f4ce3",
    "RSA-MDC2": "b177c20a33bb6f7fcd767809a821bcb8",
    "RSA-RIPEMD160": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "RSA-SHA": "7c58e8c28c0209ba93caba1976860799832c0068",
    "RSA-SHA1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "RSA-SHA1-2": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "RSA-SHA224": "b9948b9a8a8242a6549d0f6da4efb80284b1415955f9dab30f0167a6",
    "RSA-SHA256": "3b9606c772ea20bf2889732b034f9fd476ceddefe8ec4e3704c5993e38dace1b",
    "RSA-SHA384": "0425688027c940ff1dd6a940dd56c2fd206724e08759bdeaaa919f36b15dc883dc7d3b9d2258ebbd193031ab56fa9719",
    "RSA-SHA512": "7f3acc0c6821e17e47346b363aec4f45be96963a45253fd6972b7736c45ad8d6bcbe6ffac0a6b919dc3136895c5365e1467add1fee9531f641ec60d5da96489e",
    "dsaEncryption": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "dsaWithSHA": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "dsaWithSHA1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "dss1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "ecdsa-with-SHA1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "md4": "523af852dca564c3471ebaa3aad7963a",
    "md4WithRSAEncryption": "523af852dca564c3471ebaa3aad7963a",
    "md5": "84cedff2ed1b78b395cc8651094f4ce3",
    "md5WithRSAEncryption": "84cedff2ed1b78b395cc8651094f4ce3",
    "mdc2": "b177c20a33bb6f7fcd767809a821bcb8",
    "mdc2WithRSA": "b177c20a33bb6f7fcd767809a821bcb8",
    "ripemd": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "ripemd160": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "ripemd160WithRSA": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "rmd160": "a2c3be6b9be577b2e81b492400ce2e767e689dac",
    "sha": "7c58e8c28c0209ba93caba1976860799832c0068",
    "sha1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "sha1WithRSAEncryption": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "sha224": "b9948b9a8a8242a6549d0f6da4efb80284b1415955f9dab30f0167a6",
    "sha224WithRSAEncryption": "b9948b9a8a8242a6549d0f6da4efb80284b1415955f9dab30f0167a6",
    "sha256": "3b9606c772ea20bf2889732b034f9fd476ceddefe8ec4e3704c5993e38dace1b",
    "sha256WithRSAEncryption": "3b9606c772ea20bf2889732b034f9fd476ceddefe8ec4e3704c5993e38dace1b",
    "sha384": "0425688027c940ff1dd6a940dd56c2fd206724e08759bdeaaa919f36b15dc883dc7d3b9d2258ebbd193031ab56fa9719",
    "sha384WithRSAEncryption": "0425688027c940ff1dd6a940dd56c2fd206724e08759bdeaaa919f36b15dc883dc7d3b9d2258ebbd193031ab56fa9719",
    "sha512": "7f3acc0c6821e17e47346b363aec4f45be96963a45253fd6972b7736c45ad8d6bcbe6ffac0a6b919dc3136895c5365e1467add1fee9531f641ec60d5da96489e",
    "sha512WithRSAEncryption": "7f3acc0c6821e17e47346b363aec4f45be96963a45253fd6972b7736c45ad8d6bcbe6ffac0a6b919dc3136895c5365e1467add1fee9531f641ec60d5da96489e",
    "shaWithRSAEncryption": "7c58e8c28c0209ba93caba1976860799832c0068",
    "ssl2-md5": "84cedff2ed1b78b395cc8651094f4ce3",
    "ssl3-md5": "84cedff2ed1b78b395cc8651094f4ce3",
    "ssl3-sha1": "5a78f439b6db845bb8a558e4ceb106cd7b7ff783",
    "whirlpool": "997a2b1cbcd048fdb95eba258a108134f64372063c47f5aae204ab24461fc641a9f12b7a818f731e1b14c3e11be5a42b9407774e8767abed403432ebce9b088f"
  },
  {
    "input": "8D/IYIH+Afh/",
    "DSA": "f871bce62436c1e280357416695ee2ef9b83695c",
    "DSA-SHA": "f871bce62436c1e280357416695ee2ef9b83695c",
    "DSA-SHA1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "DSA-SHA1-old": "f871bce62436c1e280357416695ee2ef9b83695c",
    "RSA-MD4": "75ee621c4a7e7a34c33ea7e743426793",
    "RSA-MD5": "7badf748f4cb700272a72edfea22e9bf",
    "RSA-MDC2": "803c503e04447d8e53208b4915e0585b",
    "RSA-RIPEMD160": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "RSA-SHA": "52c6e6f1f97ff4289aadb7ea1c74673ac309e31a",
    "RSA-SHA1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "RSA-SHA1-2": "f871bce62436c1e280357416695ee2ef9b83695c",
    "RSA-SHA224": "47f5053b04c3bd37dd93faad62b393a0677e3670aa61d769612980f7",
    "RSA-SHA256": "b858d7c61b67e1688c267ca83b57dd0947c4e5acc4eb3d130fbd92222b66a9ab",
    "RSA-SHA384": "109ae778f4545968ebf5d0f10d7673d2450007e8649accbd7f432008394ff642f56c0952e94f770fe4f29f8d4c54aac1",
    "RSA-SHA512": "64e87ebf5229971b7ba773eb8f9d221a3ade057a293afd1e4ddb20735ea4e5fc908b71e28400afacf3aa58c70f6f72f81173f3990f3f97c9e6f469910fe48ea9",
    "dsaEncryption": "f871bce62436c1e280357416695ee2ef9b83695c",
    "dsaWithSHA": "f871bce62436c1e280357416695ee2ef9b83695c",
    "dsaWithSHA1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "dss1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "ecdsa-with-SHA1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "md4": "75ee621c4a7e7a34c33ea7e743426793",
    "md4WithRSAEncryption": "75ee621c4a7e7a34c33ea7e743426793",
    "md5": "7badf748f4cb700272a72edfea22e9bf",
    "md5WithRSAEncryption": "7badf748f4cb700272a72edfea22e9bf",
    "mdc2": "803c503e04447d8e53208b4915e0585b",
    "mdc2WithRSA": "803c503e04447d8e53208b4915e0585b",
    "ripemd": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "ripemd160": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "ripemd160WithRSA": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "rmd160": "d3a758579dd2b3ce274d05b850e9a494c616393b",
    "sha": "52c6e6f1f97ff4289aadb7ea1c74673ac309e31a",
    "sha1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "sha1WithRSAEncryption": "f871bce62436c1e280357416695ee2ef9b83695c",
    "sha224": "47f5053b04c3bd37dd93faad62b393a0677e3670aa61d769612980f7",
    "sha224WithRSAEncryption": "47f5053b04c3bd37dd93faad62b393a0677e3670aa61d769612980f7",
    "sha256": "b858d7c61b67e1688c267ca83b57dd0947c4e5acc4eb3d130fbd92222b66a9ab",
    "sha256WithRSAEncryption": "b858d7c61b67e1688c267ca83b57dd0947c4e5acc4eb3d130fbd92222b66a9ab",
    "sha384": "109ae778f4545968ebf5d0f10d7673d2450007e8649accbd7f432008394ff642f56c0952e94f770fe4f29f8d4c54aac1",
    "sha384WithRSAEncryption": "109ae778f4545968ebf5d0f10d7673d2450007e8649accbd7f432008394ff642f56c0952e94f770fe4f29f8d4c54aac1",
    "sha512": "64e87ebf5229971b7ba773eb8f9d221a3ade057a293afd1e4ddb20735ea4e5fc908b71e28400afacf3aa58c70f6f72f81173f3990f3f97c9e6f469910fe48ea9",
    "sha512WithRSAEncryption": "64e87ebf5229971b7ba773eb8f9d221a3ade057a293afd1e4ddb20735ea4e5fc908b71e28400afacf3aa58c70f6f72f81173f3990f3f97c9e6f469910fe48ea9",
    "shaWithRSAEncryption": "52c6e6f1f97ff4289aadb7ea1c74673ac309e31a",
    "ssl2-md5": "7badf748f4cb700272a72edfea22e9bf",
    "ssl3-md5": "7badf748f4cb700272a72edfea22e9bf",
    "ssl3-sha1": "f871bce62436c1e280357416695ee2ef9b83695c",
    "whirlpool": "b8f2a69be4d9b9c522fc7f9360d6dcc5e1b5564a2d0db6c928ae578c519be0e624430d6b884731eb66f0bb575ccf2cf8e467fb434e1d2a225a44ea49460f9184"
  },
  {
    "input": "n8f4H8Hjx8c/AA==",
    "DSA": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "DSA-SHA": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "DSA-SHA1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "DSA-SHA1-old": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "RSA-MD4": "dd61fd9c2fa93d506b70c04de9bcf7be",
    "RSA-MD5": "a1bb6e142739dbdb0925747d95e0a1ad",
    "RSA-MDC2": "1372739810e10d55d30ed565fde5b18d",
    "RSA-RIPEMD160": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "RSA-SHA": "8467ac592943a4451b4a4af3e26339f5765ec7f9",
    "RSA-SHA1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "RSA-SHA1-2": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "RSA-SHA224": "65f1f550b227b0b66c2cc2ce1df63ea7195abe174b753f1f8da264e0",
    "RSA-SHA256": "87574390294ef6d212b6d8c44ebd5c88e932036dadd0b827c6cb25cd120bfdf6",
    "RSA-SHA384": "f7f658a8e47d52cd8870c19a4f6769b667373f8af474451b3cf4032ba43eee167b77970281feb7e2e6f2d0ffaaae750e",
    "RSA-SHA512": "ddd79f12cecc64f1936c92a7ab03db23d2c9edf0109187c5687918da836379af37268321c488b0912f734303c77c05296fceb1b35abf2ad651502393211f3ea3",
    "dsaEncryption": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "dsaWithSHA": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "dsaWithSHA1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "dss1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "ecdsa-with-SHA1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "md4": "dd61fd9c2fa93d506b70c04de9bcf7be",
    "md4WithRSAEncryption": "dd61fd9c2fa93d506b70c04de9bcf7be",
    "md5": "a1bb6e142739dbdb0925747d95e0a1ad",
    "md5WithRSAEncryption": "a1bb6e142739dbdb0925747d95e0a1ad",
    "mdc2": "1372739810e10d55d30ed565fde5b18d",
    "mdc2WithRSA": "1372739810e10d55d30ed565fde5b18d",
    "ripemd": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "ripemd160": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "ripemd160WithRSA": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "rmd160": "bda4177d206675cfffeb3ba2b3792c85a37ba3a9",
    "sha": "8467ac592943a4451b4a4af3e26339f5765ec7f9",
    "sha1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "sha1WithRSAEncryption": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "sha224": "65f1f550b227b0b66c2cc2ce1df63ea7195abe174b753f1f8da264e0",
    "sha224WithRSAEncryption": "65f1f550b227b0b66c2cc2ce1df63ea7195abe174b753f1f8da264e0",
    "sha256": "87574390294ef6d212b6d8c44ebd5c88e932036dadd0b827c6cb25cd120bfdf6",
    "sha256WithRSAEncryption": "87574390294ef6d212b6d8c44ebd5c88e932036dadd0b827c6cb25cd120bfdf6",
    "sha384": "f7f658a8e47d52cd8870c19a4f6769b667373f8af474451b3cf4032ba43eee167b77970281feb7e2e6f2d0ffaaae750e",
    "sha384WithRSAEncryption": "f7f658a8e47d52cd8870c19a4f6769b667373f8af474451b3cf4032ba43eee167b77970281feb7e2e6f2d0ffaaae750e",
    "sha512": "ddd79f12cecc64f1936c92a7ab03db23d2c9edf0109187c5687918da836379af37268321c488b0912f734303c77c05296fceb1b35abf2ad651502393211f3ea3",
    "sha512WithRSAEncryption": "ddd79f12cecc64f1936c92a7ab03db23d2c9edf0109187c5687918da836379af37268321c488b0912f734303c77c05296fceb1b35abf2ad651502393211f3ea3",
    "shaWithRSAEncryption": "8467ac592943a4451b4a4af3e26339f5765ec7f9",
    "ssl2-md5": "a1bb6e142739dbdb0925747d95e0a1ad",
    "ssl3-md5": "a1bb6e142739dbdb0925747d95e0a1ad",
    "ssl3-sha1": "62b243d1b780e1d31cf1ba2de3f01c72aeea0e47",
    "whirlpool": "b2e2282ed1a82c9d0d45f1c44b311250fcfed26470c8ef425ab1ca4a7177da0065469ab5deb239e4ecfc36ab769048c310e21c8f6c43a26abc2518357ce46c9f"
  },
  {
    "input": "AH+/38D+An4A+H8=",
    "DSA": "1698994a273404848e56e7fda4457b5900de1342",
    "DSA-SHA": "1698994a273404848e56e7fda4457b5900de1342",
    "DSA-SHA1": "1698994a273404848e56e7fda4457b5900de1342",
    "DSA-SHA1-old": "1698994a273404848e56e7fda4457b5900de1342",
    "RSA-MD4": "96dcf1c7c35807d18fb8c4bc1af8a375",
    "RSA-MD5": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "RSA-MDC2": "8e84789dfd4bfd091437ba0ee6cf6fb8",
    "RSA-RIPEMD160": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "RSA-SHA": "603e9b391863947fd4f300a96c9f930fbe3c20c6",
    "RSA-SHA1": "1698994a273404848e56e7fda4457b5900de1342",
    "RSA-SHA1-2": "1698994a273404848e56e7fda4457b5900de1342",
    "RSA-SHA224": "2f703f38b49bd96bb80b5f4826843954a1b54ccbf4b39c1281782e60",
    "RSA-SHA256": "afe90242f095e967523c12333b0093d4e532a0db0f27dcc25d44d23ffb62094b",
    "RSA-SHA384": "60790ccc54be76d4249b5e90e7551d3787135d74f1d1911f1af1973e5b936860bb9ac2d92c4c885776e1f68810008109",
    "RSA-SHA512": "f780834bda7d752773f106df8f99464ffd55dfed8e4df11247e9af8661e62724966a7077af60c1d19d1777e2e83d22ebf357dbafd40b4376dc267a04413c2a35",
    "dsaEncryption": "1698994a273404848e56e7fda4457b5900de1342",
    "dsaWithSHA": "1698994a273404848e56e7fda4457b5900de1342",
    "dsaWithSHA1": "1698994a273404848e56e7fda4457b5900de1342",
    "dss1": "1698994a273404848e56e7fda4457b5900de1342",
    "ecdsa-with-SHA1": "1698994a273404848e56e7fda4457b5900de1342",
    "md4": "96dcf1c7c35807d18fb8c4bc1af8a375",
    "md4WithRSAEncryption": "96dcf1c7c35807d18fb8c4bc1af8a375",
    "md5": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "md5WithRSAEncryption": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "mdc2": "8e84789dfd4bfd091437ba0ee6cf6fb8",
    "mdc2WithRSA": "8e84789dfd4bfd091437ba0ee6cf6fb8",
    "ripemd": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "ripemd160": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "ripemd160WithRSA": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "rmd160": "fcd08345499eb0083c990873e4dc7173f6cdb5e1",
    "sha": "603e9b391863947fd4f300a96c9f930fbe3c20c6",
    "sha1": "1698994a273404848e56e7fda4457b5900de1342",
    "sha1WithRSAEncryption": "1698994a273404848e56e7fda4457b5900de1342",
    "sha224": "2f703f38b49bd96bb80b5f4826843954a1b54ccbf4b39c1281782e60",
    "sha224WithRSAEncryption": "2f703f38b49bd96bb80b5f4826843954a1b54ccbf4b39c1281782e60",
    "sha256": "afe90242f095e967523c12333b0093d4e532a0db0f27dcc25d44d23ffb62094b",
    "sha256WithRSAEncryption": "afe90242f095e967523c12333b0093d4e532a0db0f27dcc25d44d23ffb62094b",
    "sha384": "60790ccc54be76d4249b5e90e7551d3787135d74f1d1911f1af1973e5b936860bb9ac2d92c4c885776e1f68810008109",
    "sha384WithRSAEncryption": "60790ccc54be76d4249b5e90e7551d3787135d74f1d1911f1af1973e5b936860bb9ac2d92c4c885776e1f68810008109",
    "sha512": "f780834bda7d752773f106df8f99464ffd55dfed8e4df11247e9af8661e62724966a7077af60c1d19d1777e2e83d22ebf357dbafd40b4376dc267a04413c2a35",
    "sha512WithRSAEncryption": "f780834bda7d752773f106df8f99464ffd55dfed8e4df11247e9af8661e62724966a7077af60c1d19d1777e2e83d22ebf357dbafd40b4376dc267a04413c2a35",
    "shaWithRSAEncryption": "603e9b391863947fd4f300a96c9f930fbe3c20c6",
    "ssl2-md5": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "ssl3-md5": "0cd9b72dfdee8efd2e1515f4c5a62284",
    "ssl3-sha1": "1698994a273404848e56e7fda4457b5900de1342",
    "whirlpool": "266b794a411e41c000af3f75ddb088bdb5f7c290dd287cef6575f7ca1e3b79b401ab0f2bf142e9043aebc64a9d973f85929859ad6b2617c673b49f76b7400929"
  },
  {
    "input": "AQHAHgP4MAgP8/n/",
    "DSA": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "DSA-SHA": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "DSA-SHA1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "DSA-SHA1-old": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "RSA-MD4": "25d0698fca539aa83eccaad6f51cf263",
    "RSA-MD5": "ef07c13e75d50578d09052aa21a7cffb",
    "RSA-MDC2": "8bda07914a0ac0a16815e96cf63e5e2a",
    "RSA-RIPEMD160": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "RSA-SHA": "edc32861fd7332014ee45c8321834934accd276e",
    "RSA-SHA1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "RSA-SHA1-2": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "RSA-SHA224": "5eee9f26dfb6344a86947fb0a3e4920c6d7e40f4d57e9a4edf55f5d7",
    "RSA-SHA256": "55731252db2418c49f15d7f0f146c6506589f016a82c72cf8a6276ac6bd123c7",
    "RSA-SHA384": "6e6bef8ce8a247a04d42cf16db19ce8c63710da54dcd4b5a31c906e39e4a391576a0165a95b66657c7c9a403b56f3650",
    "RSA-SHA512": "5a3a2555f8affd5dad71dbae0571f47cda35089ff232f43f6f7615bd20353203793177d8bbfdc9ef336406811680a88dd6d46f44a1ff46e99a5631bc34eb5e15",
    "dsaEncryption": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "dsaWithSHA": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "dsaWithSHA1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "dss1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "ecdsa-with-SHA1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "md4": "25d0698fca539aa83eccaad6f51cf263",
    "md4WithRSAEncryption": "25d0698fca539aa83eccaad6f51cf263",
    "md5": "ef07c13e75d50578d09052aa21a7cffb",
    "md5WithRSAEncryption": "ef07c13e75d50578d09052aa21a7cffb",
    "mdc2": "8bda07914a0ac0a16815e96cf63e5e2a",
    "mdc2WithRSA": "8bda07914a0ac0a16815e96cf63e5e2a",
    "ripemd": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "ripemd160": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "ripemd160WithRSA": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "rmd160": "6a303508c5d5a24030ec4dfb545743994a81c145",
    "sha": "edc32861fd7332014ee45c8321834934accd276e",
    "sha1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "sha1WithRSAEncryption": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "sha224": "5eee9f26dfb6344a86947fb0a3e4920c6d7e40f4d57e9a4edf55f5d7",
    "sha224WithRSAEncryption": "5eee9f26dfb6344a86947fb0a3e4920c6d7e40f4d57e9a4edf55f5d7",
    "sha256": "55731252db2418c49f15d7f0f146c6506589f016a82c72cf8a6276ac6bd123c7",
    "sha256WithRSAEncryption": "55731252db2418c49f15d7f0f146c6506589f016a82c72cf8a6276ac6bd123c7",
    "sha384": "6e6bef8ce8a247a04d42cf16db19ce8c63710da54dcd4b5a31c906e39e4a391576a0165a95b66657c7c9a403b56f3650",
    "sha384WithRSAEncryption": "6e6bef8ce8a247a04d42cf16db19ce8c63710da54dcd4b5a31c906e39e4a391576a0165a95b66657c7c9a403b56f3650",
    "sha512": "5a3a2555f8affd5dad71dbae0571f47cda35089ff232f43f6f7615bd20353203793177d8bbfdc9ef336406811680a88dd6d46f44a1ff46e99a5631bc34eb5e15",
    "sha512WithRSAEncryption": "5a3a2555f8affd5dad71dbae0571f47cda35089ff232f43f6f7615bd20353203793177d8bbfdc9ef336406811680a88dd6d46f44a1ff46e99a5631bc34eb5e15",
    "shaWithRSAEncryption": "edc32861fd7332014ee45c8321834934accd276e",
    "ssl2-md5": "ef07c13e75d50578d09052aa21a7cffb",
    "ssl3-md5": "ef07c13e75d50578d09052aa21a7cffb",
    "ssl3-sha1": "056f4cdc02791da7ed1eb2303314f7667518deef",
    "whirlpool": "a11324d782bff5cd7da3085c5b5089ea6238def4ea42e4c128d0db56db87c2327a6139239bd3d73d8afef30c43545cb094492f02fef2030760dea4a29b9e9760"
  },
  {
    "input": "xAP8D/gBwA/wBhBB/w==",
    "DSA": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "DSA-SHA": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "DSA-SHA1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "DSA-SHA1-old": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "RSA-MD4": "475f6dc314219f77abf6b74cc0a48da7",
    "RSA-MD5": "cf3b261af9344bf83b4dd82b30242c78",
    "RSA-MDC2": "5be443d0163a7f47de9c95d5689f500d",
    "RSA-RIPEMD160": "dd658909ab7a733c92284c31570c80efd1f04411",
    "RSA-SHA": "9535fc46f8dc06a2a3b4a9c840bb4795d5703bc4",
    "RSA-SHA1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "RSA-SHA1-2": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "RSA-SHA224": "0a2135c560f4fc781223299075897355c7bcd368a64d5ba9d719bd78",
    "RSA-SHA256": "c2e0ed603bfa67292b78a29264e409a2e0c98482cdb59cf4fe7cafff69853d11",
    "RSA-SHA384": "b49a8a4c87a2b45628f362b424a97a0315f7d0c811ae650e5fef1f2161f8db595405bbb34a125b60b400d68f972c11ae",
    "RSA-SHA512": "5737cddc5cd9cb9aca517a4efea88ed34206a1427b1a15323d79d2a731d1981d6eee0d02e9f22dcf44e2ca9c6aab1942d07bcb3a9ca03af388e422175ee476f6",
    "dsaEncryption": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "dsaWithSHA": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "dsaWithSHA1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "dss1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "ecdsa-with-SHA1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "md4": "475f6dc314219f77abf6b74cc0a48da7",
    "md4WithRSAEncryption": "475f6dc314219f77abf6b74cc0a48da7",
    "md5": "cf3b261af9344bf83b4dd82b30242c78",
    "md5WithRSAEncryption": "cf3b261af9344bf83b4dd82b30242c78",
    "mdc2": "5be443d0163a7f47de9c95d5689f500d",
    "mdc2WithRSA": "5be443d0163a7f47de9c95d5689f500d",
    "ripemd": "dd658909ab7a733c92284c31570c80efd1f04411",
    "ripemd160": "dd658909ab7a733c92284c31570c80efd1f04411",
    "ripemd160WithRSA": "dd658909ab7a733c92284c31570c80efd1f04411",
    "rmd160": "dd658909ab7a733c92284c31570c80efd1f04411",
    "sha": "9535fc46f8dc06a2a3b4a9c840bb4795d5703bc4",
    "sha1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "sha1WithRSAEncryption": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "sha224": "0a2135c560f4fc781223299075897355c7bcd368a64d5ba9d719bd78",
    "sha224WithRSAEncryption": "0a2135c560f4fc781223299075897355c7bcd368a64d5ba9d719bd78",
    "sha256": "c2e0ed603bfa67292b78a29264e409a2e0c98482cdb59cf4fe7cafff69853d11",
    "sha256WithRSAEncryption": "c2e0ed603bfa67292b78a29264e409a2e0c98482cdb59cf4fe7cafff69853d11",
    "sha384": "b49a8a4c87a2b45628f362b424a97a0315f7d0c811ae650e5fef1f2161f8db595405bbb34a125b60b400d68f972c11ae",
    "sha384WithRSAEncryption": "b49a8a4c87a2b45628f362b424a97a0315f7d0c811ae650e5fef1f2161f8db595405bbb34a125b60b400d68f972c11ae",
    "sha512": "5737cddc5cd9cb9aca517a4efea88ed34206a1427b1a15323d79d2a731d1981d6eee0d02e9f22dcf44e2ca9c6aab1942d07bcb3a9ca03af388e422175ee476f6",
    "sha512WithRSAEncryption": "5737cddc5cd9cb9aca517a4efea88ed34206a1427b1a15323d79d2a731d1981d6eee0d02e9f22dcf44e2ca9c6aab1942d07bcb3a9ca03af388e422175ee476f6",
    "shaWithRSAEncryption": "9535fc46f8dc06a2a3b4a9c840bb4795d5703bc4",
    "ssl2-md5": "cf3b261af9344bf83b4dd82b30242c78",
    "ssl3-md5": "cf3b261af9344bf83b4dd82b30242c78",
    "ssl3-sha1": "9fe2da967bd8441eea1c32df68ddaa9dc1fc8e4b",
    "whirlpool": "0f7d01cc3840eab1b9c1e1f96228b8c54d0527ddc30f4981e8ccd0df573ad186f7fc9d70bcf403b82a0165ffd90899dacbb0a7f04b4c627ceca4e62bb9ee46dc"
  },
  {
    "input": "/weAR/wfwGAwH+A8A/8=",
    "DSA": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "DSA-SHA": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "DSA-SHA1": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "DSA-SHA1-old": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "RSA-MD4": "7037c65edc5a13164374364cd53b90aa",
    "RSA-MD5": "530710f65fb98fff8eb927e2938cb8c5",
    "RSA-MDC2": "d0b5dddeb3adc8c8acd15e5901886132",
    "RSA-RIPEMD160": "51b22f7981a95edf3f1839c58d1b0bb9e4ba18f6",
    "RSA-SHA": "9a9faccb7dc396c15830b6a81c0e8ae286e122b4",
    "RSA-SHA1": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "RSA-SHA1-2": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "RSA-SHA224": "d4621ad17acdbf2dd43cd1b10703d961ff8548cef038d1262292b11a",
    "RSA-SHA256": "517f007a8b65d4197411c35b14edb1340490a9be7a6c66b8c827b1e101a05b5c",
    "RSA-SHA384": "aebee8f5bae86db3e0735c97cfa6f3bb91cabe8b3508861f95512ef7aeae97cc04476237a51a9ce973ef2e50ab9efb73",
    "RSA-SHA512": "046e506b845967cbdead62c325be7dbb01f69057c65670a31f07ca520bdf12a44696bfa85af1614b41a2c60fb5182518ae4bab01fd459f343bed8223b3999415",
    "dsaEncryption": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "dsaWithSHA": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "dsaWithSHA1": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "dss1": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "ecdsa-with-SHA1": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "md4": "7037c65edc5a13164374364cd53b90aa",
    "md4WithRSAEncryption": "7037c65edc5a13164374364cd53b90aa",
    "md5": "530710f65fb98fff8eb927e2938cb8c5",
    "md5WithRSAEncryption": "530710f65fb98fff8eb927e2938cb8c5",
    "mdc2": "d0b5dddeb3adc8c8acd15e5901886132",
    "mdc2WithRSA": "d0b5dddeb3adc8c8acd15e5901886132",
    "ripemd": "51b22f7981a95edf3f1839c58d1b0bb9e4ba18f6",
    "ripemd160": "51b22f7981a95edf3f1839c58d1b0bb9e4ba18f6",
    "ripemd160WithRSA": "51b22f7981a95edf3f1839c58d1b0bb9e4ba18f6",
    "rmd160": "51b22f7981a95edf3f1839c58d1b0bb9e4ba18f6",
    "sha": "9a9faccb7dc396c15830b6a81c0e8ae286e122b4",
    "sha1": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "sha1WithRSAEncryption": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "sha224": "d4621ad17acdbf2dd43cd1b10703d961ff8548cef038d1262292b11a",
    "sha224WithRSAEncryption": "d4621ad17acdbf2dd43cd1b10703d961ff8548cef038d1262292b11a",
    "sha256": "517f007a8b65d4197411c35b14edb1340490a9be7a6c66b8c827b1e101a05b5c",
    "sha256WithRSAEncryption": "517f007a8b65d4197411c35b14edb1340490a9be7a6c66b8c827b1e101a05b5c",
    "sha384": "aebee8f5bae86db3e0735c97cfa6f3bb91cabe8b3508861f95512ef7aeae97cc04476237a51a9ce973ef2e50ab9efb73",
    "sha384WithRSAEncryption": "aebee8f5bae86db3e0735c97cfa6f3bb91cabe8b3508861f95512ef7aeae97cc04476237a51a9ce973ef2e50ab9efb73",
    "sha512": "046e506b845967cbdead62c325be7dbb01f69057c65670a31f07ca520bdf12a44696bfa85af1614b41a2c60fb5182518ae4bab01fd459f343bed8223b3999415",
    "sha512WithRSAEncryption": "046e506b845967cbdead62c325be7dbb01f69057c65670a31f07ca520bdf12a44696bfa85af1614b41a2c60fb5182518ae4bab01fd459f343bed8223b3999415",
    "shaWithRSAEncryption": "9a9faccb7dc396c15830b6a81c0e8ae286e122b4",
    "ssl2-md5": "530710f65fb98fff8eb927e2938cb8c5",
    "ssl3-md5": "530710f65fb98fff8eb927e2938cb8c5",
    "ssl3-sha1": "73a31777b4ace9384efa8bbead45c51a71aba6dd",
    "whirlpool": "e649ad3f0495678465c5cc735eccb8f3e8f007648c21d78ef1d247fa7bb897cc628f842fa74255e25a31dd8216f3c80f5f4eb42ed233a6f172d66b9dfa1f79e2"
  },
  {
    "input": "gD+EPv/APw8Af8Af5/wA",
    "DSA": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "DSA-SHA": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "DSA-SHA1": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "DSA-SHA1-old": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "RSA-MD4": "8f9651724bb7df93718bb3b133ec9489",
    "RSA-MD5": "4e6d73658b27e19d4bb4500625001e39",
    "RSA-MDC2": "69b6006201efa764d62280188b14f788",
    "RSA-RIPEMD160": "ec4a5209cdc592a90517f3e458168dde55733a1e",
    "RSA-SHA": "14bb9eadc6f1d5f020c721a92a1e51cd6cba40a3",
    "RSA-SHA1": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "RSA-SHA1-2": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "RSA-SHA224": "3032ed74d4d3a71c0d51ebf8bed8dfcced10787f01bcbbc590a15bd4",
    "RSA-SHA256": "76c977fdc97261cd0956ce1319476d314bc57d8691c7884cd0a7ff3cf825c31f",
    "RSA-SHA384": "e14618fe8eed6f16cf863062f8cec9ef612dd7d6d282faa8336c6382ac85301458b21ac93d9fe03e87904c01233909d4",
    "RSA-SHA512": "0f950ae30c7601a170ba2d86025d0f89d9f24ab8ae13db9c1d3345142c7427eda8a997f66533b44176b431e43164b05338b0fe9568a69b85dfde21a28b3c6e6e",
    "dsaEncryption": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "dsaWithSHA": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "dsaWithSHA1": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "dss1": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "ecdsa-with-SHA1": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "md4": "8f9651724bb7df93718bb3b133ec9489",
    "md4WithRSAEncryption": "8f9651724bb7df93718bb3b133ec9489",
    "md5": "4e6d73658b27e19d4bb4500625001e39",
    "md5WithRSAEncryption": "4e6d73658b27e19d4bb4500625001e39",
    "mdc2": "69b6006201efa764d62280188b14f788",
    "mdc2WithRSA": "69b6006201efa764d62280188b14f788",
    "ripemd": "ec4a5209cdc592a90517f3e458168dde55733a1e",
    "ripemd160": "ec4a5209cdc592a90517f3e458168dde55733a1e",
    "ripemd160WithRSA": "ec4a5209cdc592a90517f3e458168dde55733a1e",
    "rmd160": "ec4a5209cdc592a90517f3e458168dde55733a1e",
    "sha": "14bb9eadc6f1d5f020c721a92a1e51cd6cba40a3",
    "sha1": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "sha1WithRSAEncryption": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "sha224": "3032ed74d4d3a71c0d51ebf8bed8dfcced10787f01bcbbc590a15bd4",
    "sha224WithRSAEncryption": "3032ed74d4d3a71c0d51ebf8bed8dfcced10787f01bcbbc590a15bd4",
    "sha256": "76c977fdc97261cd0956ce1319476d314bc57d8691c7884cd0a7ff3cf825c31f",
    "sha256WithRSAEncryption": "76c977fdc97261cd0956ce1319476d314bc57d8691c7884cd0a7ff3cf825c31f",
    "sha384": "e14618fe8eed6f16cf863062f8cec9ef612dd7d6d282faa8336c6382ac85301458b21ac93d9fe03e87904c01233909d4",
    "sha384WithRSAEncryption": "e14618fe8eed6f16cf863062f8cec9ef612dd7d6d282faa8336c6382ac85301458b21ac93d9fe03e87904c01233909d4",
    "sha512": "0f950ae30c7601a170ba2d86025d0f89d9f24ab8ae13db9c1d3345142c7427eda8a997f66533b44176b431e43164b05338b0fe9568a69b85dfde21a28b3c6e6e",
    "sha512WithRSAEncryption": "0f950ae30c7601a170ba2d86025d0f89d9f24ab8ae13db9c1d3345142c7427eda8a997f66533b44176b431e43164b05338b0fe9568a69b85dfde21a28b3c6e6e",
    "shaWithRSAEncryption": "14bb9eadc6f1d5f020c721a92a1e51cd6cba40a3",
    "ssl2-md5": "4e6d73658b27e19d4bb4500625001e39",
    "ssl3-md5": "4e6d73658b27e19d4bb4500625001e39",
    "ssl3-sha1": "3f9d7c4e2384eddabff5dd8a31e23de3d03f42ac",
    "whirlpool": "73391168c2e18436fd130f2e0cba0ca370bdefad62441d07eca7428820dc634a4e67c26ee6740d29b043bfb0a479f28a3bffb5d7e8c3104a1f5f4d9746a0d72e"
  },
  {
    "input": "/+B/AYGB/4H/AD4AIH+ADw==",
    "DSA": "4814908f72b93ffd011135bee347de9a08da838f",
    "DSA-SHA": "4814908f72b93ffd011135bee347de9a08da838f",
    "DSA-SHA1": "4814908f72b93ffd011135bee347de9a08da838f",
    "DSA-SHA1-old": "4814908f72b93ffd011135bee347de9a08da838f",
    "RSA-MD4": "3fcce47c5dc1a1e00d093bdbcd02d6a3",
    "RSA-MD5": "c8e5f2f272b1ef88ec62dd0d9d54e902",
    "RSA-MDC2": "6f668f89c9c0a067e0b49c4fc6740d98",
    "RSA-RIPEMD160": "793bd9c7f07ef85a9240349365c64042b683cfc8",
    "RSA-SHA": "2e46c65463f972c22baeda0a4a468116d4acd237",
    "RSA-SHA1": "4814908f72b93ffd011135bee347de9a08da838f",
    "RSA-SHA1-2": "4814908f72b93ffd011135bee347de9a08da838f",
    "RSA-SHA224": "acbc312acc42e98a5b3b24460ea6d5644251856a73208dd29dbc5967",
    "RSA-SHA256": "f10c26637ea8ca2d0898fa661f087f13f174fe0ca1c91862ce3b6127c3430f51",
    "RSA-SHA384": "4e716c348a08a570cbc60b24df1f0fa4e4b2317156bc3e908aea3792f91813abc4fc77c0f1490a11d42ed8e0ceda0738",
    "RSA-SHA512": "1d13256c10f5ba75b3ed783c023071805c5cacb622807143d03c41621d883e29573538cabea4c83a277a3a8ff552390ff0f44ffffa6d8a2a51179b03671e7b81",
    "dsaEncryption": "4814908f72b93ffd011135bee347de9a08da838f",
    "dsaWithSHA": "4814908f72b93ffd011135bee347de9a08da838f",
    "dsaWithSHA1": "4814908f72b93ffd011135bee347de9a08da838f",
    "dss1": "4814908f72b93ffd011135bee347de9a08da838f",
    "ecdsa-with-SHA1": "4814908f72b93ffd011135bee347de9a08da838f",
    "md4": "3fcce47c5dc1a1e00d093bdbcd02d6a3",
    "md4WithRSAEncryption": "3fcce47c5dc1a1e00d093bdbcd02d6a3",
    "md5": "c8e5f2f272b1ef88ec62dd0d9d54e902",
    "md5WithRSAEncryption": "c8e5f2f272b1ef88ec62dd0d9d54e902",
    "mdc2": "6f668f89c9c0a067e0b49c4fc6740d98",
    "mdc2WithRSA": "6f668f89c9c0a067e0b49c4fc6740d98",
    "ripemd": "793bd9c7f07ef85a9240349365c64042b683cfc8",
    "ripemd160": "793bd9c7f07ef85a9240349365c64042b683cfc8",
    "ripemd160WithRSA": "793bd9c7f07ef85a9240349365c64042b683cfc8",
    "rmd160": "793bd9c7f07ef85a9240349365c64042b683cfc8",
    "sha": "2e46c65463f972c22baeda0a4a468116d4acd237",
    "sha1": "4814908f72b93ffd011135bee347de9a08da838f",
    "sha1WithRSAEncryption": "4814908f72b93ffd011135bee347de9a08da838f",
    "sha224": "acbc312acc42e98a5b3b24460ea6d5644251856a73208dd29dbc5967",
    "sha224WithRSAEncryption": "acbc312acc42e98a5b3b24460ea6d5644251856a73208dd29dbc5967",
    "sha256": "f10c26637ea8ca2d0898fa661f087f13f174fe0ca1c91862ce3b6127c3430f51",
    "sha256WithRSAEncryption": "f10c26637ea8ca2d0898fa661f087f13f174fe0ca1c91862ce3b6127c3430f51",
    "sha384": "4e716c348a08a570cbc60b24df1f0fa4e4b2317156bc3e908aea3792f91813abc4fc77c0f1490a11d42ed8e0ceda0738",
    "sha384WithRSAEncryption": "4e716c348a08a570cbc60b24df1f0fa4e4b2317156bc3e908aea3792f91813abc4fc77c0f1490a11d42ed8e0ceda0738",
    "sha512": "1d13256c10f5ba75b3ed783c023071805c5cacb622807143d03c41621d883e29573538cabea4c83a277a3a8ff552390ff0f44ffffa6d8a2a51179b03671e7b81",
    "sha512WithRSAEncryption": "1d13256c10f5ba75b3ed783c023071805c5cacb622807143d03c41621d883e29573538cabea4c83a277a3a8ff552390ff0f44ffffa6d8a2a51179b03671e7b81",
    "shaWithRSAEncryption": "2e46c65463f972c22baeda0a4a468116d4acd237",
    "ssl2-md5": "c8e5f2f272b1ef88ec62dd0d9d54e902",
    "ssl3-md5": "c8e5f2f272b1ef88ec62dd0d9d54e902",
    "ssl3-sha1": "4814908f72b93ffd011135bee347de9a08da838f",
    "whirlpool": "16b0ee4b2c7438fce376c5cf3ca987abf9ea2034e842ff8501d5adb43274335a81a7685e23d417d36bbecabdd757788577c67a6d22f67f650695808ab4d9f3e7"
  },
  {
    "input": "AD4AcB/gD/r/yD/z/gD/gP8=",
    "DSA": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "DSA-SHA": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "DSA-SHA1": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "DSA-SHA1-old": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "RSA-MD4": "b07f931a5b8bb9e1c26601f43ba4817d",
    "RSA-MD5": "031cbf1fb05b4ec09f3c93235d0f49ac",
    "RSA-MDC2": "100bb33e33cecc35636c1b30da17d658",
    "RSA-RIPEMD160": "6f2cabab4b45a7e69fff5a271d9c166da5920779",
    "RSA-SHA": "1bd7b61decc9cd805d492961db64ad95b9cc6784",
    "RSA-SHA1": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "RSA-SHA1-2": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "RSA-SHA224": "da2d49346d934ab211aa097f4db2a75aa1d98ee4368aa8e21eb509dd",
    "RSA-SHA256": "679b95521601c0ba63ce882046abd7a8cdb8e78d5c0ee9f38c21dc47ca846195",
    "RSA-SHA384": "30ffb6ba18b92154d8b83ed8b0f66ae2fc17209d8e6652d141df196fdd0801bedaaea9810c90bcb7a1c9527340213f6d",
    "RSA-SHA512": "799809967e08bbc8ab729a12558d8847f6903bcee6f7689229c7080a8c8088d5b5785ecb14e50487068e7bc21bab9575651ea29b614b51cda348129e106e5be5",
    "dsaEncryption": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "dsaWithSHA": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "dsaWithSHA1": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "dss1": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "ecdsa-with-SHA1": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "md4": "b07f931a5b8bb9e1c26601f43ba4817d",
    "md4WithRSAEncryption": "b07f931a5b8bb9e1c26601f43ba4817d",
    "md5": "031cbf1fb05b4ec09f3c93235d0f49ac",
    "md5WithRSAEncryption": "031cbf1fb05b4ec09f3c93235d0f49ac",
    "mdc2": "100bb33e33cecc35636c1b30da17d658",
    "mdc2WithRSA": "100bb33e33cecc35636c1b30da17d658",
    "ripemd": "6f2cabab4b45a7e69fff5a271d9c166da5920779",
    "ripemd160": "6f2cabab4b45a7e69fff5a271d9c166da5920779",
    "ripemd160WithRSA": "6f2cabab4b45a7e69fff5a271d9c166da5920779",
    "rmd160": "6f2cabab4b45a7e69fff5a271d9c166da5920779",
    "sha": "1bd7b61decc9cd805d492961db64ad95b9cc6784",
    "sha1": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "sha1WithRSAEncryption": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "sha224": "da2d49346d934ab211aa097f4db2a75aa1d98ee4368aa8e21eb509dd",
    "sha224WithRSAEncryption": "da2d49346d934ab211aa097f4db2a75aa1d98ee4368aa8e21eb509dd",
    "sha256": "679b95521601c0ba63ce882046abd7a8cdb8e78d5c0ee9f38c21dc47ca846195",
    "sha256WithRSAEncryption": "679b95521601c0ba63ce882046abd7a8cdb8e78d5c0ee9f38c21dc47ca846195",
    "sha384": "30ffb6ba18b92154d8b83ed8b0f66ae2fc17209d8e6652d141df196fdd0801bedaaea9810c90bcb7a1c9527340213f6d",
    "sha384WithRSAEncryption": "30ffb6ba18b92154d8b83ed8b0f66ae2fc17209d8e6652d141df196fdd0801bedaaea9810c90bcb7a1c9527340213f6d",
    "sha512": "799809967e08bbc8ab729a12558d8847f6903bcee6f7689229c7080a8c8088d5b5785ecb14e50487068e7bc21bab9575651ea29b614b51cda348129e106e5be5",
    "sha512WithRSAEncryption": "799809967e08bbc8ab729a12558d8847f6903bcee6f7689229c7080a8c8088d5b5785ecb14e50487068e7bc21bab9575651ea29b614b51cda348129e106e5be5",
    "shaWithRSAEncryption": "1bd7b61decc9cd805d492961db64ad95b9cc6784",
    "ssl2-md5": "031cbf1fb05b4ec09f3c93235d0f49ac",
    "ssl3-md5": "031cbf1fb05b4ec09f3c93235d0f49ac",
    "ssl3-sha1": "0978374b67a412a3102c5aa0b10e1a6596fc68eb",
    "whirlpool": "e501681785c4907cc10e2c769247c30be7432fb4bf4e004ef319f4ea7c7aeba3ba29bac223f526b1eb26487b5d6f547d89eac24970f44d94d77d29dd8f896c6b"
  },
  {
    "input": "f+/AHnz/4B/+AB/wCP/Af/AA",
    "DSA": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "DSA-SHA": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "DSA-SHA1": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "DSA-SHA1-old": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "RSA-MD4": "1322f6c9735d6cae9ad3e42d65a99fc6",
    "RSA-MD5": "8c0e1400df02ba8c4809b705e5f5e114",
    "RSA-MDC2": "948293d2b5f62efdefbb66140bce003a",
    "RSA-RIPEMD160": "90d1d1d90fc703f47a194867e3283a840697069c",
    "RSA-SHA": "1b485b6b729795b0b8ed9a10bd479362b3a77c71",
    "RSA-SHA1": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "RSA-SHA1-2": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "RSA-SHA224": "184e85945f9019210c141c169e1e3e118526ff83a2ee5ddcf89cf04a",
    "RSA-SHA256": "af369f2162152e43847b4d0c595dcf2d27059563909425f37928bc01090f2f34",
    "RSA-SHA384": "bbedb2a83dfe945e7a412649269bec28ed9b93bb450eb9595eae005fb324cc4afb9182e7a4f24185bc6e7155cbc28fec",
    "RSA-SHA512": "700e168b4a5f1d88788078791580cab12177c12b3d74aabeca82c61c0915cd3396628291bed600c364b41b20350118520c971318b089e26b41f70e1b4db15fc5",
    "dsaEncryption": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "dsaWithSHA": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "dsaWithSHA1": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "dss1": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "ecdsa-with-SHA1": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "md4": "1322f6c9735d6cae9ad3e42d65a99fc6",
    "md4WithRSAEncryption": "1322f6c9735d6cae9ad3e42d65a99fc6",
    "md5": "8c0e1400df02ba8c4809b705e5f5e114",
    "md5WithRSAEncryption": "8c0e1400df02ba8c4809b705e5f5e114",
    "mdc2": "948293d2b5f62efdefbb66140bce003a",
    "mdc2WithRSA": "948293d2b5f62efdefbb66140bce003a",
    "ripemd": "90d1d1d90fc703f47a194867e3283a840697069c",
    "ripemd160": "90d1d1d90fc703f47a194867e3283a840697069c",
    "ripemd160WithRSA": "90d1d1d90fc703f47a194867e3283a840697069c",
    "rmd160": "90d1d1d90fc703f47a194867e3283a840697069c",
    "sha": "1b485b6b729795b0b8ed9a10bd479362b3a77c71",
    "sha1": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "sha1WithRSAEncryption": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "sha224": "184e85945f9019210c141c169e1e3e118526ff83a2ee5ddcf89cf04a",
    "sha224WithRSAEncryption": "184e85945f9019210c141c169e1e3e118526ff83a2ee5ddcf89cf04a",
    "sha256": "af369f2162152e43847b4d0c595dcf2d27059563909425f37928bc01090f2f34",
    "sha256WithRSAEncryption": "af369f2162152e43847b4d0c595dcf2d27059563909425f37928bc01090f2f34",
    "sha384": "bbedb2a83dfe945e7a412649269bec28ed9b93bb450eb9595eae005fb324cc4afb9182e7a4f24185bc6e7155cbc28fec",
    "sha384WithRSAEncryption": "bbedb2a83dfe945e7a412649269bec28ed9b93bb450eb9595eae005fb324cc4afb9182e7a4f24185bc6e7155cbc28fec",
    "sha512": "700e168b4a5f1d88788078791580cab12177c12b3d74aabeca82c61c0915cd3396628291bed600c364b41b20350118520c971318b089e26b41f70e1b4db15fc5",
    "sha512WithRSAEncryption": "700e168b4a5f1d88788078791580cab12177c12b3d74aabeca82c61c0915cd3396628291bed600c364b41b20350118520c971318b089e26b41f70e1b4db15fc5",
    "shaWithRSAEncryption": "1b485b6b729795b0b8ed9a10bd479362b3a77c71",
    "ssl2-md5": "8c0e1400df02ba8c4809b705e5f5e114",
    "ssl3-md5": "8c0e1400df02ba8c4809b705e5f5e114",
    "ssl3-sha1": "44ad6cb618bd935460d46d3f921d87b99ab91c1e",
    "whirlpool": "7adb47d286fb5bcf59308242f66290a179f56b39f148f6e113c9b2d3c70bafc09a33624d90e8c21facf58ebe692e9430812986458700c116e552bc7a6075febe"
  },
  {
    "input": "4A+ABwwB/+AD8C/4P+8AeAH+AA==",
    "DSA": "02dc989af265b09cf8485640842128dcf95e9f39",
    "DSA-SHA": "02dc989af265b09cf8485640842128dcf95e9f39",
    "DSA-SHA1": "02dc989af265b09cf8485640842128dcf95e9f39",
    "DSA-SHA1-old": "02dc989af265b09cf8485640842128dcf95e9f39",
    "RSA-MD4": "1158e62cafe5eff6debedbb9f5ebbd81",
    "RSA-MD5": "57ec48278e19f71f54c570a5ab306df7",
    "RSA-MDC2": "ee55c45e0513f1cc4b058e8186fa26b2",
    "RSA-RIPEMD160": "df44259e461b0ce79a9242b7475247c74e048f8b",
    "RSA-SHA": "4da754ed2ba59839828c15a6d784470be46c0315",
    "RSA-SHA1": "02dc989af265b09cf8485640842128dcf95e9f39",
    "RSA-SHA1-2": "02dc989af265b09cf8485640842128dcf95e9f39",
    "RSA-SHA224": "77b7518a2eaed8c1a7b2bddeeb6b0525295d6438ad8e0c2f47895893",
    "RSA-SHA256": "7e1f6f080a60c402bb9c39578f75afc148a0746c656ca243f75038b82304bdf5",
    "RSA-SHA384": "62555c18ed24cac43297aaf9b81b0df3980ae35486745b6c17eb4248dc0560e33e15dbc2d5b62fef889a22b321420557",
    "RSA-SHA512": "5c85cf188894d27f376dbcce5d8479c79d77d0bf4bc1c591dbc19bf53edf60f22d2999a537c5322430f85dab971f9ddd19f53a32e56199c56f66b427ffa2cf29",
    "dsaEncryption": "02dc989af265b09cf8485640842128dcf95e9f39",
    "dsaWithSHA": "02dc989af265b09cf8485640842128dcf95e9f39",
    "dsaWithSHA1": "02dc989af265b09cf8485640842128dcf95e9f39",
    "dss1": "02dc989af265b09cf8485640842128dcf95e9f39",
    "ecdsa-with-SHA1": "02dc989af265b09cf8485640842128dcf95e9f39",
    "md4": "1158e62cafe5eff6debedbb9f5ebbd81",
    "md4WithRSAEncryption": "1158e62cafe5eff6debedbb9f5ebbd81",
    "md5": "57ec48278e19f71f54c570a5ab306df7",
    "md5WithRSAEncryption": "57ec48278e19f71f54c570a5ab306df7",
    "mdc2": "ee55c45e0513f1cc4b058e8186fa26b2",
    "mdc2WithRSA": "ee55c45e0513f1cc4b058e8186fa26b2",
    "ripemd": "df44259e461b0ce79a9242b7475247c74e048f8b",
    "ripemd160": "df44259e461b0ce79a9242b7475247c74e048f8b",
    "ripemd160WithRSA": "df44259e461b0ce79a9242b7475247c74e048f8b",
    "rmd160": "df44259e461b0ce79a9242b7475247c74e048f8b",
    "sha": "4da754ed2ba59839828c15a6d784470be46c0315",
    "sha1": "02dc989af265b09cf8485640842128dcf95e9f39",
    "sha1WithRSAEncryption": "02dc989af265b09cf8485640842128dcf95e9f39",
    "sha224": "77b7518a2eaed8c1a7b2bddeeb6b0525295d6438ad8e0c2f47895893",
    "sha224WithRSAEncryption": "77b7518a2eaed8c1a7b2bddeeb6b0525295d6438ad8e0c2f47895893",
    "sha256": "7e1f6f080a60c402bb9c39578f75afc148a0746c656ca243f75038b82304bdf5",
    "sha256WithRSAEncryption": "7e1f6f080a60c402bb9c39578f75afc148a0746c656ca243f75038b82304bdf5",
    "sha384": "62555c18ed24cac43297aaf9b81b0df3980ae35486745b6c17eb4248dc0560e33e15dbc2d5b62fef889a22b321420557",
    "sha384WithRSAEncryption": "62555c18ed24cac43297aaf9b81b0df3980ae35486745b6c17eb4248dc0560e33e15dbc2d5b62fef889a22b321420557",
    "sha512": "5c85cf188894d27f376dbcce5d8479c79d77d0bf4bc1c591dbc19bf53edf60f22d2999a537c5322430f85dab971f9ddd19f53a32e56199c56f66b427ffa2cf29",
    "sha512WithRSAEncryption": "5c85cf188894d27f376dbcce5d8479c79d77d0bf4bc1c591dbc19bf53edf60f22d2999a537c5322430f85dab971f9ddd19f53a32e56199c56f66b427ffa2cf29",
    "shaWithRSAEncryption": "4da754ed2ba59839828c15a6d784470be46c0315",
    "ssl2-md5": "57ec48278e19f71f54c570a5ab306df7",
    "ssl3-md5": "57ec48278e19f71f54c570a5ab306df7",
    "ssl3-sha1": "02dc989af265b09cf8485640842128dcf95e9f39",
    "whirlpool": "c25d4c8525263270ff8bc3b60edb62f2ae09897dd3079c8bfc6757c5d8411d93d89baee5281183a39598b8e8ca9690306caa5c6f39f49af86a0d14e1aecaa3a4"
  },
  {
    "input": "5wAQAPgYD/D/AP+AP8P+8A/8Af8=",
    "DSA": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "DSA-SHA": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "DSA-SHA1": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "DSA-SHA1-old": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "RSA-MD4": "3a73a53c24054007a9837b344dd530c3",
    "RSA-MD5": "ecd3dc346a2337b95389a094a031610f",
    "RSA-MDC2": "93393e249360c5f21e45526d7ece5dc2",
    "RSA-RIPEMD160": "b9074cd7c9b51ff209274c4373f7e5322fcaa01f",
    "RSA-SHA": "7ad6a3489f5d570a77fb4f3b0f0f96b7af3ee281",
    "RSA-SHA1": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "RSA-SHA1-2": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "RSA-SHA224": "d72e80062a87a543145b12626e434cf709d853217f484f23bbdcc2aa",
    "RSA-SHA256": "8d6df02738597d95e2eb9e870d4177339728d9ab8b8d61aa96f0b6d1b5ad6efd",
    "RSA-SHA384": "fbd393c3bef5cfc77fa20d2fc9e74f586fa6f33d214dad58fb38a6a29820f17dd459aebfed18b2bc3cadb2072d1a66ab",
    "RSA-SHA512": "191f9b5cfed52a1dfe219be6c8c25458570e79927cfbf1940855204ec19da84f0df92219c4ecbce93fea970fb6cf74e091265ae7e5ad69ba62331cdb4388d7e3",
    "dsaEncryption": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "dsaWithSHA": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "dsaWithSHA1": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "dss1": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "ecdsa-with-SHA1": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "md4": "3a73a53c24054007a9837b344dd530c3",
    "md4WithRSAEncryption": "3a73a53c24054007a9837b344dd530c3",
    "md5": "ecd3dc346a2337b95389a094a031610f",
    "md5WithRSAEncryption": "ecd3dc346a2337b95389a094a031610f",
    "mdc2": "93393e249360c5f21e45526d7ece5dc2",
    "mdc2WithRSA": "93393e249360c5f21e45526d7ece5dc2",
    "ripemd": "b9074cd7c9b51ff209274c4373f7e5322fcaa01f",
    "ripemd160": "b9074cd7c9b51ff209274c4373f7e5322fcaa01f",
    "ripemd160WithRSA": "b9074cd7c9b51ff209274c4373f7e5322fcaa01f",
    "rmd160": "b9074cd7c9b51ff209274c4373f7e5322fcaa01f",
    "sha": "7ad6a3489f5d570a77fb4f3b0f0f96b7af3ee281",
    "sha1": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "sha1WithRSAEncryption": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "sha224": "d72e80062a87a543145b12626e434cf709d853217f484f23bbdcc2aa",
    "sha224WithRSAEncryption": "d72e80062a87a543145b12626e434cf709d853217f484f23bbdcc2aa",
    "sha256": "8d6df02738597d95e2eb9e870d4177339728d9ab8b8d61aa96f0b6d1b5ad6efd",
    "sha256WithRSAEncryption": "8d6df02738597d95e2eb9e870d4177339728d9ab8b8d61aa96f0b6d1b5ad6efd",
    "sha384": "fbd393c3bef5cfc77fa20d2fc9e74f586fa6f33d214dad58fb38a6a29820f17dd459aebfed18b2bc3cadb2072d1a66ab",
    "sha384WithRSAEncryption": "fbd393c3bef5cfc77fa20d2fc9e74f586fa6f33d214dad58fb38a6a29820f17dd459aebfed18b2bc3cadb2072d1a66ab",
    "sha512": "191f9b5cfed52a1dfe219be6c8c25458570e79927cfbf1940855204ec19da84f0df92219c4ecbce93fea970fb6cf74e091265ae7e5ad69ba62331cdb4388d7e3",
    "sha512WithRSAEncryption": "191f9b5cfed52a1dfe219be6c8c25458570e79927cfbf1940855204ec19da84f0df92219c4ecbce93fea970fb6cf74e091265ae7e5ad69ba62331cdb4388d7e3",
    "shaWithRSAEncryption": "7ad6a3489f5d570a77fb4f3b0f0f96b7af3ee281",
    "ssl2-md5": "ecd3dc346a2337b95389a094a031610f",
    "ssl3-md5": "ecd3dc346a2337b95389a094a031610f",
    "ssl3-sha1": "67507b8d497b35d6e99fc01976d73f54aeca75cf",
    "whirlpool": "a01070bc4d7d369bc2cb1e6f7da9feabdf552bf6922fcb3e9de9d34287bf838d39418434dd0fb0796a484aba36ccb2b59e26ea0f0009ee0c707bb89e01eb7feb"
  },
  {
    "input": "AB/4D/wA/AD/h8APgHv/AA8CAf/A",
    "DSA": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "DSA-SHA": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "DSA-SHA1": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "DSA-SHA1-old": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "RSA-MD4": "25946b59fea157e7e04148eb3f8828b0",
    "RSA-MD5": "f11d91eae492225cbd82ef356aa96f9f",
    "RSA-MDC2": "2fa6894e6b6904a7386ee2e0b51b0b94",
    "RSA-RIPEMD160": "d749b4dde2e9de3b5c18ee133922b36d488f2118",
    "RSA-SHA": "6af79920d26341031ddcf986048998eec8257d21",
    "RSA-SHA1": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "RSA-SHA1-2": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "RSA-SHA224": "f38e9a3deb3062d122088a6cb8c8335332f7f3d6b57c8eb8b9808ebc",
    "RSA-SHA256": "d0a9699291dead3f6fba3b648c28537a04caea4b96b145802c06125a17c3faba",
    "RSA-SHA384": "46837113e3e4a9ed405eb07ac7707e104bf0d2976d95cd3aca2eca825fb57e89c60031d5bac3bae57474058ff7efcf84",
    "RSA-SHA512": "9fe65bd1a9b8776c4f99059864f73b6f1c9e54904bf9118cba1d06bb40a961de59eaa8294a67406d5310c40b8ca7285a1d726f24f80df7dcef48e5ba32d9a80f",
    "dsaEncryption": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "dsaWithSHA": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "dsaWithSHA1": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "dss1": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "ecdsa-with-SHA1": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "md4": "25946b59fea157e7e04148eb3f8828b0",
    "md4WithRSAEncryption": "25946b59fea157e7e04148eb3f8828b0",
    "md5": "f11d91eae492225cbd82ef356aa96f9f",
    "md5WithRSAEncryption": "f11d91eae492225cbd82ef356aa96f9f",
    "mdc2": "2fa6894e6b6904a7386ee2e0b51b0b94",
    "mdc2WithRSA": "2fa6894e6b6904a7386ee2e0b51b0b94",
    "ripemd": "d749b4dde2e9de3b5c18ee133922b36d488f2118",
    "ripemd160": "d749b4dde2e9de3b5c18ee133922b36d488f2118",
    "ripemd160WithRSA": "d749b4dde2e9de3b5c18ee133922b36d488f2118",
    "rmd160": "d749b4dde2e9de3b5c18ee133922b36d488f2118",
    "sha": "6af79920d26341031ddcf986048998eec8257d21",
    "sha1": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "sha1WithRSAEncryption": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "sha224": "f38e9a3deb3062d122088a6cb8c8335332f7f3d6b57c8eb8b9808ebc",
    "sha224WithRSAEncryption": "f38e9a3deb3062d122088a6cb8c8335332f7f3d6b57c8eb8b9808ebc",
    "sha256": "d0a9699291dead3f6fba3b648c28537a04caea4b96b145802c06125a17c3faba",
    "sha256WithRSAEncryption": "d0a9699291dead3f6fba3b648c28537a04caea4b96b145802c06125a17c3faba",
    "sha384": "46837113e3e4a9ed405eb07ac7707e104bf0d2976d95cd3aca2eca825fb57e89c60031d5bac3bae57474058ff7efcf84",
    "sha384WithRSAEncryption": "46837113e3e4a9ed405eb07ac7707e104bf0d2976d95cd3aca2eca825fb57e89c60031d5bac3bae57474058ff7efcf84",
    "sha512": "9fe65bd1a9b8776c4f99059864f73b6f1c9e54904bf9118cba1d06bb40a961de59eaa8294a67406d5310c40b8ca7285a1d726f24f80df7dcef48e5ba32d9a80f",
    "sha512WithRSAEncryption": "9fe65bd1a9b8776c4f99059864f73b6f1c9e54904bf9118cba1d06bb40a961de59eaa8294a67406d5310c40b8ca7285a1d726f24f80df7dcef48e5ba32d9a80f",
    "shaWithRSAEncryption": "6af79920d26341031ddcf986048998eec8257d21",
    "ssl2-md5": "f11d91eae492225cbd82ef356aa96f9f",
    "ssl3-md5": "f11d91eae492225cbd82ef356aa96f9f",
    "ssl3-sha1": "1eae0373c1317cb60c36a42a867b716039d441f5",
    "whirlpool": "b295804620702a5588ca49d0291b0f042710451f8f262b589f12efe905da1940ec3be07a7330df4ad8a534398c3870dfa8bb873de07346a92a143ca36144fa4e"
  },
  {
    "input": "AA/wA8f4PgP/gAP/gAf/D/8fg/+AHw==",
    "DSA": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "DSA-SHA": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "DSA-SHA1": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "DSA-SHA1-old": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "RSA-MD4": "d0cc134b0a58e236dadd480dd0dfb574",
    "RSA-MD5": "26bd8b480216c723ce75da98b9bd430c",
    "RSA-MDC2": "29e196f6fca87a1f48b990743a8c33f7",
    "RSA-RIPEMD160": "460930956b44df8885325750594f72d8a25190bb",
    "RSA-SHA": "f182160a952b4a86fda310d7f0bc90b9f85776f4",
    "RSA-SHA1": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "RSA-SHA1-2": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "RSA-SHA224": "83e31ded8ac3d5fc2ca9c8d3bf1e0117e08fddf5c8f679e89d1b6687",
    "RSA-SHA256": "d504026213b322cbcb0dbadd6a1fc6c708825019da9bac7aec973f750cbf2d3d",
    "RSA-SHA384": "dad603ffa318e1d3e91b5afd1438b485bded043713771184bd38b04296f4f77d0a95ee06e5eadeed69ddf6a82d3cff49",
    "RSA-SHA512": "0ecef99b7db364703f3a13f19861c0b211b2c450d6ac290136c1a4c2805cf51bd328e456342f44d7be2dc8f2eca657ade47c180d11543b33e615057d12d7b083",
    "dsaEncryption": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "dsaWithSHA": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "dsaWithSHA1": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "dss1": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "ecdsa-with-SHA1": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "md4": "d0cc134b0a58e236dadd480dd0dfb574",
    "md4WithRSAEncryption": "d0cc134b0a58e236dadd480dd0dfb574",
    "md5": "26bd8b480216c723ce75da98b9bd430c",
    "md5WithRSAEncryption": "26bd8b480216c723ce75da98b9bd430c",
    "mdc2": "29e196f6fca87a1f48b990743a8c33f7",
    "mdc2WithRSA": "29e196f6fca87a1f48b990743a8c33f7",
    "ripemd": "460930956b44df8885325750594f72d8a25190bb",
    "ripemd160": "460930956b44df8885325750594f72d8a25190bb",
    "ripemd160WithRSA": "460930956b44df8885325750594f72d8a25190bb",
    "rmd160": "460930956b44df8885325750594f72d8a25190bb",
    "sha": "f182160a952b4a86fda310d7f0bc90b9f85776f4",
    "sha1": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "sha1WithRSAEncryption": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "sha224": "83e31ded8ac3d5fc2ca9c8d3bf1e0117e08fddf5c8f679e89d1b6687",
    "sha224WithRSAEncryption": "83e31ded8ac3d5fc2ca9c8d3bf1e0117e08fddf5c8f679e89d1b6687",
    "sha256": "d504026213b322cbcb0dbadd6a1fc6c708825019da9bac7aec973f750cbf2d3d",
    "sha256WithRSAEncryption": "d504026213b322cbcb0dbadd6a1fc6c708825019da9bac7aec973f750cbf2d3d",
    "sha384": "dad603ffa318e1d3e91b5afd1438b485bded043713771184bd38b04296f4f77d0a95ee06e5eadeed69ddf6a82d3cff49",
    "sha384WithRSAEncryption": "dad603ffa318e1d3e91b5afd1438b485bded043713771184bd38b04296f4f77d0a95ee06e5eadeed69ddf6a82d3cff49",
    "sha512": "0ecef99b7db364703f3a13f19861c0b211b2c450d6ac290136c1a4c2805cf51bd328e456342f44d7be2dc8f2eca657ade47c180d11543b33e615057d12d7b083",
    "sha512WithRSAEncryption": "0ecef99b7db364703f3a13f19861c0b211b2c450d6ac290136c1a4c2805cf51bd328e456342f44d7be2dc8f2eca657ade47c180d11543b33e615057d12d7b083",
    "shaWithRSAEncryption": "f182160a952b4a86fda310d7f0bc90b9f85776f4",
    "ssl2-md5": "26bd8b480216c723ce75da98b9bd430c",
    "ssl3-md5": "26bd8b480216c723ce75da98b9bd430c",
    "ssl3-sha1": "9c3834589e5bffac9f50950e0199b3ec2620bec8",
    "whirlpool": "7065cc0f5dc0bd0dfcdc73039459de45e95859fe37558363061502abfc79d8265726929829b272be725e91661641e8ccb4da5e063f87e160ccd10e9c20696640"
  },
  {
    "input": "/8AfgD+f+Hg+f/gAPiAEP4B//AAf/gA=",
    "DSA": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "DSA-SHA": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "DSA-SHA1": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "DSA-SHA1-old": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "RSA-MD4": "b4d66a7b6f20d13ca81fd827a4993379",
    "RSA-MD5": "80999c2d12f623e4f87e0550a8e3523a",
    "RSA-MDC2": "168f2168ed2699fcb559209863de5219",
    "RSA-RIPEMD160": "25eff1cf234d8daac089385aed80acba697e252d",
    "RSA-SHA": "b359a73d59b6728d1f22f77829dc4c26ef703e39",
    "RSA-SHA1": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "RSA-SHA1-2": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "RSA-SHA224": "7d78116694ee97b8374da2753adb8b878722249c7e7bd8d0cfc46fbf",
    "RSA-SHA256": "66c1a2578b41c3a200296e85d4d30a1876f8ca5cb941ffb1420e04d8e37149a5",
    "RSA-SHA384": "1181da8920629b5be02b4f1e9567702503cd05be97e8ed89736f7d5ad809c7ce48c4d5c927b62f4f3b1990b55d0edde7",
    "RSA-SHA512": "9faa741aaadd8800590fb24964a541da6913de2e7b9b86c27380b21fb2bec8462b5d4f01df914a646549adface74e979482c41dc43868ceb3ab038fb06331faf",
    "dsaEncryption": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "dsaWithSHA": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "dsaWithSHA1": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "dss1": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "ecdsa-with-SHA1": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "md4": "b4d66a7b6f20d13ca81fd827a4993379",
    "md4WithRSAEncryption": "b4d66a7b6f20d13ca81fd827a4993379",
    "md5": "80999c2d12f623e4f87e0550a8e3523a",
    "md5WithRSAEncryption": "80999c2d12f623e4f87e0550a8e3523a",
    "mdc2": "168f2168ed2699fcb559209863de5219",
    "mdc2WithRSA": "168f2168ed2699fcb559209863de5219",
    "ripemd": "25eff1cf234d8daac089385aed80acba697e252d",
    "ripemd160": "25eff1cf234d8daac089385aed80acba697e252d",
    "ripemd160WithRSA": "25eff1cf234d8daac089385aed80acba697e252d",
    "rmd160": "25eff1cf234d8daac089385aed80acba697e252d",
    "sha": "b359a73d59b6728d1f22f77829dc4c26ef703e39",
    "sha1": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "sha1WithRSAEncryption": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "sha224": "7d78116694ee97b8374da2753adb8b878722249c7e7bd8d0cfc46fbf",
    "sha224WithRSAEncryption": "7d78116694ee97b8374da2753adb8b878722249c7e7bd8d0cfc46fbf",
    "sha256": "66c1a2578b41c3a200296e85d4d30a1876f8ca5cb941ffb1420e04d8e37149a5",
    "sha256WithRSAEncryption": "66c1a2578b41c3a200296e85d4d30a1876f8ca5cb941ffb1420e04d8e37149a5",
    "sha384": "1181da8920629b5be02b4f1e9567702503cd05be97e8ed89736f7d5ad809c7ce48c4d5c927b62f4f3b1990b55d0edde7",
    "sha384WithRSAEncryption": "1181da8920629b5be02b4f1e9567702503cd05be97e8ed89736f7d5ad809c7ce48c4d5c927b62f4f3b1990b55d0edde7",
    "sha512": "9faa741aaadd8800590fb24964a541da6913de2e7b9b86c27380b21fb2bec8462b5d4f01df914a646549adface74e979482c41dc43868ceb3ab038fb06331faf",
    "sha512WithRSAEncryption": "9faa741aaadd8800590fb24964a541da6913de2e7b9b86c27380b21fb2bec8462b5d4f01df914a646549adface74e979482c41dc43868ceb3ab038fb06331faf",
    "shaWithRSAEncryption": "b359a73d59b6728d1f22f77829dc4c26ef703e39",
    "ssl2-md5": "80999c2d12f623e4f87e0550a8e3523a",
    "ssl3-md5": "80999c2d12f623e4f87e0550a8e3523a",
    "ssl3-sha1": "209f7abc7f3b878ee46cdf3a1fbb9c21c3474f32",
    "whirlpool": "a8cb71650a2490e88fee2e679823135dbadc1450c3d2e7879fba1e6a6e85bb882031e0ba7c80d04a5b6719f813fe4971f944c67db50a806a89ebf7f16e2fa10b"
  },
  {
    "input": "PweA4AfgAPx/wMAPj/CADg4D/7/8Af/g",
    "DSA": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "DSA-SHA": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "DSA-SHA1": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "DSA-SHA1-old": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "RSA-MD4": "e5186641d83b2dd9c73ec37eebc88c26",
    "RSA-MD5": "00945c1bd739ce389ac24bb93f6f9a85",
    "RSA-MDC2": "c0ec81f710f90e1d876fabd4765914cf",
    "RSA-RIPEMD160": "32f113cede7edcb10d2723dbfad08cad429d14da",
    "RSA-SHA": "5e93d7df63a5c00a602172214f35cf2db61320fb",
    "RSA-SHA1": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "RSA-SHA1-2": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "RSA-SHA224": "885646866beadb2cf8430fa74c16a1909102133c44dbdafc1aa3f6b9",
    "RSA-SHA256": "b8a87b047350912e4861e4aab7d1046d5372797ecea81d187f8e2c117db535dd",
    "RSA-SHA384": "c25c6902e20cd4e57795f0197b5eebade7c12dd8b01bbf06c4e5a9c6b1cd5f7d01894a119092dea696dddb7abed9bae7",
    "RSA-SHA512": "25401e50121bec22ecd77147c28afeb3aed0012eac5ce5319cdedafe50552c3dc41fb1375eb1d26d0c7219ba53e8bff8df7bac099c50e19220f9b13c04e9c139",
    "dsaEncryption": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "dsaWithSHA": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "dsaWithSHA1": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "dss1": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "ecdsa-with-SHA1": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "md4": "e5186641d83b2dd9c73ec37eebc88c26",
    "md4WithRSAEncryption": "e5186641d83b2dd9c73ec37eebc88c26",
    "md5": "00945c1bd739ce389ac24bb93f6f9a85",
    "md5WithRSAEncryption": "00945c1bd739ce389ac24bb93f6f9a85",
    "mdc2": "c0ec81f710f90e1d876fabd4765914cf",
    "mdc2WithRSA": "c0ec81f710f90e1d876fabd4765914cf",
    "ripemd": "32f113cede7edcb10d2723dbfad08cad429d14da",
    "ripemd160": "32f113cede7edcb10d2723dbfad08cad429d14da",
    "ripemd160WithRSA": "32f113cede7edcb10d2723dbfad08cad429d14da",
    "rmd160": "32f113cede7edcb10d2723dbfad08cad429d14da",
    "sha": "5e93d7df63a5c00a602172214f35cf2db61320fb",
    "sha1": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "sha1WithRSAEncryption": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "sha224": "885646866beadb2cf8430fa74c16a1909102133c44dbdafc1aa3f6b9",
    "sha224WithRSAEncryption": "885646866beadb2cf8430fa74c16a1909102133c44dbdafc1aa3f6b9",
    "sha256": "b8a87b047350912e4861e4aab7d1046d5372797ecea81d187f8e2c117db535dd",
    "sha256WithRSAEncryption": "b8a87b047350912e4861e4aab7d1046d5372797ecea81d187f8e2c117db535dd",
    "sha384": "c25c6902e20cd4e57795f0197b5eebade7c12dd8b01bbf06c4e5a9c6b1cd5f7d01894a119092dea696dddb7abed9bae7",
    "sha384WithRSAEncryption": "c25c6902e20cd4e57795f0197b5eebade7c12dd8b01bbf06c4e5a9c6b1cd5f7d01894a119092dea696dddb7abed9bae7",
    "sha512": "25401e50121bec22ecd77147c28afeb3aed0012eac5ce5319cdedafe50552c3dc41fb1375eb1d26d0c7219ba53e8bff8df7bac099c50e19220f9b13c04e9c139",
    "sha512WithRSAEncryption": "25401e50121bec22ecd77147c28afeb3aed0012eac5ce5319cdedafe50552c3dc41fb1375eb1d26d0c7219ba53e8bff8df7bac099c50e19220f9b13c04e9c139",
    "shaWithRSAEncryption": "5e93d7df63a5c00a602172214f35cf2db61320fb",
    "ssl2-md5": "00945c1bd739ce389ac24bb93f6f9a85",
    "ssl3-md5": "00945c1bd739ce389ac24bb93f6f9a85",
    "ssl3-sha1": "05fc054b00d97753a9b3e2da8fbba3ee808cef22",
    "whirlpool": "c896ba54d4fc9689ac81075f2876c5e6f065b47c371f3f6c66a58fef321a2562d4c3951320bdd20ee912cd88d161f379b5ed5f329e93a6b7b5a709538ddb5750"
  },
  {
    "input": "//wR/OAOH/+HgB/g//3/wAP/wA8AB/AB/w==",
    "DSA": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "DSA-SHA": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "DSA-SHA1": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "DSA-SHA1-old": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "RSA-MD4": "5a4ec8dcd83c1de8d5ffb0baf464802e",
    "RSA-MD5": "7ab55f0bd5dca5b17ecaa7fef73ed87b",
    "RSA-MDC2": "b579e8d500502ebdd691512e89dfc1ae",
    "RSA-RIPEMD160": "9dffa3a1ee1fd250f126c9b4d671fff02ba1f1cd",
    "RSA-SHA": "3ae062b057f3bd594fcfc0bd60321eb2fa6aeb71",
    "RSA-SHA1": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "RSA-SHA1-2": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "RSA-SHA224": "3b5a53f0a5bbb7cefb37f08622cc3073990f7b1c200a06937dca5de5",
    "RSA-SHA256": "8d2b52d4d4074d471d037cdf9eeb13c18ef9ce4949fce00d106ef0880f2db5ed",
    "RSA-SHA384": "0a508ca377541c85fc9d5a94d492e98dab6926b0dc3d16f42acc403fef719dcb7ab7a072b5371ccfdd7ef2f41ccce180",
    "RSA-SHA512": "445cf90cc104716f55a8e9af95b9cc4645978968bccb5509606098ae0b913eb7551d7a87c1acf85a0735b21abf928e3abfb709d7770e2299d255ac7a7011d1ff",
    "dsaEncryption": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "dsaWithSHA": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "dsaWithSHA1": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "dss1": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "ecdsa-with-SHA1": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "md4": "5a4ec8dcd83c1de8d5ffb0baf464802e",
    "md4WithRSAEncryption": "5a4ec8dcd83c1de8d5ffb0baf464802e",
    "md5": "7ab55f0bd5dca5b17ecaa7fef73ed87b",
    "md5WithRSAEncryption": "7ab55f0bd5dca5b17ecaa7fef73ed87b",
    "mdc2": "b579e8d500502ebdd691512e89dfc1ae",
    "mdc2WithRSA": "b579e8d500502ebdd691512e89dfc1ae",
    "ripemd": "9dffa3a1ee1fd250f126c9b4d671fff02ba1f1cd",
    "ripemd160": "9dffa3a1ee1fd250f126c9b4d671fff02ba1f1cd",
    "ripemd160WithRSA": "9dffa3a1ee1fd250f126c9b4d671fff02ba1f1cd",
    "rmd160": "9dffa3a1ee1fd250f126c9b4d671fff02ba1f1cd",
    "sha": "3ae062b057f3bd594fcfc0bd60321eb2fa6aeb71",
    "sha1": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "sha1WithRSAEncryption": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "sha224": "3b5a53f0a5bbb7cefb37f08622cc3073990f7b1c200a06937dca5de5",
    "sha224WithRSAEncryption": "3b5a53f0a5bbb7cefb37f08622cc3073990f7b1c200a06937dca5de5",
    "sha256": "8d2b52d4d4074d471d037cdf9eeb13c18ef9ce4949fce00d106ef0880f2db5ed",
    "sha256WithRSAEncryption": "8d2b52d4d4074d471d037cdf9eeb13c18ef9ce4949fce00d106ef0880f2db5ed",
    "sha384": "0a508ca377541c85fc9d5a94d492e98dab6926b0dc3d16f42acc403fef719dcb7ab7a072b5371ccfdd7ef2f41ccce180",
    "sha384WithRSAEncryption": "0a508ca377541c85fc9d5a94d492e98dab6926b0dc3d16f42acc403fef719dcb7ab7a072b5371ccfdd7ef2f41ccce180",
    "sha512": "445cf90cc104716f55a8e9af95b9cc4645978968bccb5509606098ae0b913eb7551d7a87c1acf85a0735b21abf928e3abfb709d7770e2299d255ac7a7011d1ff",
    "sha512WithRSAEncryption": "445cf90cc104716f55a8e9af95b9cc4645978968bccb5509606098ae0b913eb7551d7a87c1acf85a0735b21abf928e3abfb709d7770e2299d255ac7a7011d1ff",
    "shaWithRSAEncryption": "3ae062b057f3bd594fcfc0bd60321eb2fa6aeb71",
    "ssl2-md5": "7ab55f0bd5dca5b17ecaa7fef73ed87b",
    "ssl3-md5": "7ab55f0bd5dca5b17ecaa7fef73ed87b",
    "ssl3-sha1": "0c4980ea3a46c757dfbfc5baa38ac6c8e72ddce7",
    "whirlpool": "d0e913c4dc68d53faf1a66d1682a64dad23a1b3368e4af4fefd82206771c39941fa07cec30ee8c0abcc32abdd0c5f1fd1bd1a898da8573ea62547c083675807b"
  },
  {
    "input": "8AfB/gD4AeeA/4A/H3+MABwAD/gH/AD//AA=",
    "DSA": "96a460d2972d276928b69864445bea353bdcffd2",
    "DSA-SHA": "96a460d2972d276928b69864445bea353bdcffd2",
    "DSA-SHA1": "96a460d2972d276928b69864445bea353bdcffd2",
    "DSA-SHA1-old": "96a460d2972d276928b69864445bea353bdcffd2",
    "RSA-MD4": "55cc491fa42a1d79d7a60d3652588616",
    "RSA-MD5": "e3cedd606ad51dd18532abd3079a3e0c",
    "RSA-MDC2": "28570f0209fd38f13a9fc46954a8f19c",
    "RSA-RIPEMD160": "0292bf0051d06cd00b37f5abb15b9d10a02b1a13",
    "RSA-SHA": "8aa916fdbd96cca7c28c7a444ccdaf000418cef5",
    "RSA-SHA1": "96a460d2972d276928b69864445bea353bdcffd2",
    "RSA-SHA1-2": "96a460d2972d276928b69864445bea353bdcffd2",
    "RSA-SHA224": "d340b9a6207faa3440f9d4e11c8e243163aeda4a5548d29a99d91d58",
    "RSA-SHA256": "3d182e9928b2433c94255452170e59e3f4cca3dd29ea2e9b01e94e89da595393",
    "RSA-SHA384": "9fd1473b3582f00dfca4854d312a4cba7337e7d157c5023ac9aaae94ae75fc4e378ed4177d5b05c555812ed355845944",
    "RSA-SHA512": "b617e5d54371bb5ec3ae745026c08b4250efc36e74e6a7d60892dee3e605189998d1dc49ed3cc1397beefa04219f035bf28ecdeab7dbeb59c5fe7b32b18e2a59",
    "dsaEncryption": "96a460d2972d276928b69864445bea353bdcffd2",
    "dsaWithSHA": "96a460d2972d276928b69864445bea353bdcffd2",
    "dsaWithSHA1": "96a460d2972d276928b69864445bea353bdcffd2",
    "dss1": "96a460d2972d276928b69864445bea353bdcffd2",
    "ecdsa-with-SHA1": "96a460d2972d276928b69864445bea353bdcffd2",
    "md4": "55cc491fa42a1d79d7a60d3652588616",
    "md4WithRSAEncryption": "55cc491fa42a1d79d7a60d3652588616",
    "md5": "e3cedd606ad51dd18532abd3079a3e0c",
    "md5WithRSAEncryption": "e3cedd606ad51dd18532abd3079a3e0c",
    "mdc2": "28570f0209fd38f13a9fc46954a8f19c",
    "mdc2WithRSA": "28570f0209fd38f13a9fc46954a8f19c",
    "ripemd": "0292bf0051d06cd00b37f5abb15b9d10a02b1a13",
    "ripemd160": "0292bf0051d06cd00b37f5abb15b9d10a02b1a13",
    "ripemd160WithRSA": "0292bf0051d06cd00b37f5abb15b9d10a02b1a13",
    "rmd160": "0292bf0051d06cd00b37f5abb15b9d10a02b1a13",
    "sha": "8aa916fdbd96cca7c28c7a444ccdaf000418cef5",
    "sha1": "96a460d2972d276928b69864445bea353bdcffd2",
    "sha1WithRSAEncryption": "96a460d2972d276928b69864445bea353bdcffd2",
    "sha224": "d340b9a6207faa3440f9d4e11c8e243163aeda4a5548d29a99d91d58",
    "sha224WithRSAEncryption": "d340b9a6207faa3440f9d4e11c8e243163aeda4a5548d29a99d91d58",
    "sha256": "3d182e9928b2433c94255452170e59e3f4cca3dd29ea2e9b01e94e89da595393",
    "sha256WithRSAEncryption": "3d182e9928b2433c94255452170e59e3f4cca3dd29ea2e9b01e94e89da595393",
    "sha384": "9fd1473b3582f00dfca4854d312a4cba7337e7d157c5023ac9aaae94ae75fc4e378ed4177d5b05c555812ed355845944",
    "sha384WithRSAEncryption": "9fd1473b3582f00dfca4854d312a4cba7337e7d157c5023ac9aaae94ae75fc4e378ed4177d5b05c555812ed355845944",
    "sha512": "b617e5d54371bb5ec3ae745026c08b4250efc36e74e6a7d60892dee3e605189998d1dc49ed3cc1397beefa04219f035bf28ecdeab7dbeb59c5fe7b32b18e2a59",
    "sha512WithRSAEncryption": "b617e5d54371bb5ec3ae745026c08b4250efc36e74e6a7d60892dee3e605189998d1dc49ed3cc1397beefa04219f035bf28ecdeab7dbeb59c5fe7b32b18e2a59",
    "shaWithRSAEncryption": "8aa916fdbd96cca7c28c7a444ccdaf000418cef5",
    "ssl2-md5": "e3cedd606ad51dd18532abd3079a3e0c",
    "ssl3-md5": "e3cedd606ad51dd18532abd3079a3e0c",
    "ssl3-sha1": "96a460d2972d276928b69864445bea353bdcffd2",
    "whirlpool": "319e012886f9f108df29cb397425c89d5eb0a652e196c7193320f06973bf37b28b4b8863f8c4c6fd01de16bc73bd0dc75ce1e97272fbf69efe4bcc99236da61c"
  },
  {
    "input": "AA/4P8BgAH/4/wAD8DwHwH/gP/gBAH4D/8AA",
    "DSA": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "DSA-SHA": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "DSA-SHA1": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "DSA-SHA1-old": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "RSA-MD4": "97b58393146d5ed76262e9a3f769dd89",
    "RSA-MD5": "df5ecc6732e22cc25836398a10222e97",
    "RSA-MDC2": "ece6d11cdb0a595319d5edfe00eaf999",
    "RSA-RIPEMD160": "f2e490c4000d86f6d35b86e573dbf4e374a1ac69",
    "RSA-SHA": "3181ede45f415cacc5841364aa9b5052380206a4",
    "RSA-SHA1": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "RSA-SHA1-2": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "RSA-SHA224": "f281f12f045a4d6d13e0cca775d317862464cabc765bcf2c1861c673",
    "RSA-SHA256": "17c3f5d88ed7f3f62be0e28913357d65916389c1633db8fb62b92e14230d3611",
    "RSA-SHA384": "9885018390a6111f5c5eeb058a989fa8a16e34d4ac748ff6e185d7fb905538a468f1ba25d5913c389c141cfe7334c881",
    "RSA-SHA512": "63a3c524ff190df114dbb6f8483048dd4cf6320a2d4c2928f5b97aeaf9583112d12e3fa6fb76a8994ddc06cb7a349f2d8f9b0b30e6bb72f338d7c6ef3988e3e9",
    "dsaEncryption": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "dsaWithSHA": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "dsaWithSHA1": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "dss1": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "ecdsa-with-SHA1": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "md4": "97b58393146d5ed76262e9a3f769dd89",
    "md4WithRSAEncryption": "97b58393146d5ed76262e9a3f769dd89",
    "md5": "df5ecc6732e22cc25836398a10222e97",
    "md5WithRSAEncryption": "df5ecc6732e22cc25836398a10222e97",
    "mdc2": "ece6d11cdb0a595319d5edfe00eaf999",
    "mdc2WithRSA": "ece6d11cdb0a595319d5edfe00eaf999",
    "ripemd": "f2e490c4000d86f6d35b86e573dbf4e374a1ac69",
    "ripemd160": "f2e490c4000d86f6d35b86e573dbf4e374a1ac69",
    "ripemd160WithRSA": "f2e490c4000d86f6d35b86e573dbf4e374a1ac69",
    "rmd160": "f2e490c4000d86f6d35b86e573dbf4e374a1ac69",
    "sha": "3181ede45f415cacc5841364aa9b5052380206a4",
    "sha1": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "sha1WithRSAEncryption": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "sha224": "f281f12f045a4d6d13e0cca775d317862464cabc765bcf2c1861c673",
    "sha224WithRSAEncryption": "f281f12f045a4d6d13e0cca775d317862464cabc765bcf2c1861c673",
    "sha256": "17c3f5d88ed7f3f62be0e28913357d65916389c1633db8fb62b92e14230d3611",
    "sha256WithRSAEncryption": "17c3f5d88ed7f3f62be0e28913357d65916389c1633db8fb62b92e14230d3611",
    "sha384": "9885018390a6111f5c5eeb058a989fa8a16e34d4ac748ff6e185d7fb905538a468f1ba25d5913c389c141cfe7334c881",
    "sha384WithRSAEncryption": "9885018390a6111f5c5eeb058a989fa8a16e34d4ac748ff6e185d7fb905538a468f1ba25d5913c389c141cfe7334c881",
    "sha512": "63a3c524ff190df114dbb6f8483048dd4cf6320a2d4c2928f5b97aeaf9583112d12e3fa6fb76a8994ddc06cb7a349f2d8f9b0b30e6bb72f338d7c6ef3988e3e9",
    "sha512WithRSAEncryption": "63a3c524ff190df114dbb6f8483048dd4cf6320a2d4c2928f5b97aeaf9583112d12e3fa6fb76a8994ddc06cb7a349f2d8f9b0b30e6bb72f338d7c6ef3988e3e9",
    "shaWithRSAEncryption": "3181ede45f415cacc5841364aa9b5052380206a4",
    "ssl2-md5": "df5ecc6732e22cc25836398a10222e97",
    "ssl3-md5": "df5ecc6732e22cc25836398a10222e97",
    "ssl3-sha1": "f3ef04d8fa8c6fa9850f394a4554c080956fa64b",
    "whirlpool": "c55a0079ac6550316c400a9ff6c9b8f4103caf8fcafcff208fef4000f152dc24484473e74f9c0a880263f5e5a84811153271eccb889ba4db72db36629e25ee4d"
  },
  {
    "input": "AA/4AwAf/wAP/gA/AAP/4AfA/wA8f/AB//g//w==",
    "DSA": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "DSA-SHA": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "DSA-SHA1": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "DSA-SHA1-old": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "RSA-MD4": "254170dbfd6de883830200b35fc6d764",
    "RSA-MD5": "863b6d9962ee3761bbb9cd8a8367589e",
    "RSA-MDC2": "12bae0d014a8cc4125a4db066bf30b3f",
    "RSA-RIPEMD160": "7f2575af0e537f2828c44b68bb3ebff84d945b40",
    "RSA-SHA": "d38ff53524ae6e00c2b5244bffb7036675a92545",
    "RSA-SHA1": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "RSA-SHA1-2": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "RSA-SHA224": "d482f19921293407212e94619a0027f36865d015b80a7770fb47f7c9",
    "RSA-SHA256": "93788128441c894247bd9ccd6fc8af146c0ee76cdbe4e1c5a8dfa81dd0c338b4",
    "RSA-SHA384": "33202d1cdd68c05bd0d8dcfe166fce393d603f9aa4534b1d1118938855a8fb938ff335606d6e477fdba194458079cdd0",
    "RSA-SHA512": "fd256d33a09fca956b374c996c0a22ffbfb47ca3a88723c0274186b095da01c0ba92e89c589fa2fc88b3e614b7928a1f0f101cd5de5425baf4b73b28e305d8cd",
    "dsaEncryption": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "dsaWithSHA": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "dsaWithSHA1": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "dss1": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "ecdsa-with-SHA1": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "md4": "254170dbfd6de883830200b35fc6d764",
    "md4WithRSAEncryption": "254170dbfd6de883830200b35fc6d764",
    "md5": "863b6d9962ee3761bbb9cd8a8367589e",
    "md5WithRSAEncryption": "863b6d9962ee3761bbb9cd8a8367589e",
    "mdc2": "12bae0d014a8cc4125a4db066bf30b3f",
    "mdc2WithRSA": "12bae0d014a8cc4125a4db066bf30b3f",
    "ripemd": "7f2575af0e537f2828c44b68bb3ebff84d945b40",
    "ripemd160": "7f2575af0e537f2828c44b68bb3ebff84d945b40",
    "ripemd160WithRSA": "7f2575af0e537f2828c44b68bb3ebff84d945b40",
    "rmd160": "7f2575af0e537f2828c44b68bb3ebff84d945b40",
    "sha": "d38ff53524ae6e00c2b5244bffb7036675a92545",
    "sha1": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "sha1WithRSAEncryption": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "sha224": "d482f19921293407212e94619a0027f36865d015b80a7770fb47f7c9",
    "sha224WithRSAEncryption": "d482f19921293407212e94619a0027f36865d015b80a7770fb47f7c9",
    "sha256": "93788128441c894247bd9ccd6fc8af146c0ee76cdbe4e1c5a8dfa81dd0c338b4",
    "sha256WithRSAEncryption": "93788128441c894247bd9ccd6fc8af146c0ee76cdbe4e1c5a8dfa81dd0c338b4",
    "sha384": "33202d1cdd68c05bd0d8dcfe166fce393d603f9aa4534b1d1118938855a8fb938ff335606d6e477fdba194458079cdd0",
    "sha384WithRSAEncryption": "33202d1cdd68c05bd0d8dcfe166fce393d603f9aa4534b1d1118938855a8fb938ff335606d6e477fdba194458079cdd0",
    "sha512": "fd256d33a09fca956b374c996c0a22ffbfb47ca3a88723c0274186b095da01c0ba92e89c589fa2fc88b3e614b7928a1f0f101cd5de5425baf4b73b28e305d8cd",
    "sha512WithRSAEncryption": "fd256d33a09fca956b374c996c0a22ffbfb47ca3a88723c0274186b095da01c0ba92e89c589fa2fc88b3e614b7928a1f0f101cd5de5425baf4b73b28e305d8cd",
    "shaWithRSAEncryption": "d38ff53524ae6e00c2b5244bffb7036675a92545",
    "ssl2-md5": "863b6d9962ee3761bbb9cd8a8367589e",
    "ssl3-md5": "863b6d9962ee3761bbb9cd8a8367589e",
    "ssl3-sha1": "f2a31d875d1d7b30874d416c4d2ea6baf0ffbafe",
    "whirlpool": "3425ee9dd80dc63e73609568939298a4e93c80adaddcd3902d2b6584f4e3ea266fb7975b023f9406ecffb56e6f2a9df0580c85e85a5ef4fbbb30e7006ad2b95d"
  },
  {
    "input": "AAHg4B/+AAP8AA//4A//AA4Af/wP/gB4AD//AP8=",
    "DSA": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "DSA-SHA": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "DSA-SHA1": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "DSA-SHA1-old": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "RSA-MD4": "75f3f471982aef5f9ca6c0ca5e542cbc",
    "RSA-MD5": "683c9384e29efe82dd3ac847904c28e8",
    "RSA-MDC2": "34da35c74643c6c2004710ae9cc333cd",
    "RSA-RIPEMD160": "66e68d434de10fe1acc67630a52a645717e46aaa",
    "RSA-SHA": "a711bc3da0c132f3ad954a98339007af5355a06e",
    "RSA-SHA1": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "RSA-SHA1-2": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "RSA-SHA224": "b4136b52a6bee237debf10c492f963133e8c9fc8c29d3b948c3d7ef4",
    "RSA-SHA256": "c7855ac54d2c5767273eec327efe39fdb3bad74121bdd8d2065484268727539e",
    "RSA-SHA384": "8f2e09b486045fd19228dafe0ee2fe8ecf56236c33f383bf353f16ebaded83a0f2e8fb1c086e500abb14d0c97013f427",
    "RSA-SHA512": "cf7789daccf0b20ced8a6c39ddfd0b53d1806e1447fed350d28212ead062b0d9aba6680c5ab0d85a905dadb5692728b5e4e96f82807265c1a5f908c10dc36b0f",
    "dsaEncryption": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "dsaWithSHA": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "dsaWithSHA1": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "dss1": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "ecdsa-with-SHA1": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "md4": "75f3f471982aef5f9ca6c0ca5e542cbc",
    "md4WithRSAEncryption": "75f3f471982aef5f9ca6c0ca5e542cbc",
    "md5": "683c9384e29efe82dd3ac847904c28e8",
    "md5WithRSAEncryption": "683c9384e29efe82dd3ac847904c28e8",
    "mdc2": "34da35c74643c6c2004710ae9cc333cd",
    "mdc2WithRSA": "34da35c74643c6c2004710ae9cc333cd",
    "ripemd": "66e68d434de10fe1acc67630a52a645717e46aaa",
    "ripemd160": "66e68d434de10fe1acc67630a52a645717e46aaa",
    "ripemd160WithRSA": "66e68d434de10fe1acc67630a52a645717e46aaa",
    "rmd160": "66e68d434de10fe1acc67630a52a645717e46aaa",
    "sha": "a711bc3da0c132f3ad954a98339007af5355a06e",
    "sha1": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "sha1WithRSAEncryption": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "sha224": "b4136b52a6bee237debf10c492f963133e8c9fc8c29d3b948c3d7ef4",
    "sha224WithRSAEncryption": "b4136b52a6bee237debf10c492f963133e8c9fc8c29d3b948c3d7ef4",
    "sha256": "c7855ac54d2c5767273eec327efe39fdb3bad74121bdd8d2065484268727539e",
    "sha256WithRSAEncryption": "c7855ac54d2c5767273eec327efe39fdb3bad74121bdd8d2065484268727539e",
    "sha384": "8f2e09b486045fd19228dafe0ee2fe8ecf56236c33f383bf353f16ebaded83a0f2e8fb1c086e500abb14d0c97013f427",
    "sha384WithRSAEncryption": "8f2e09b486045fd19228dafe0ee2fe8ecf56236c33f383bf353f16ebaded83a0f2e8fb1c086e500abb14d0c97013f427",
    "sha512": "cf7789daccf0b20ced8a6c39ddfd0b53d1806e1447fed350d28212ead062b0d9aba6680c5ab0d85a905dadb5692728b5e4e96f82807265c1a5f908c10dc36b0f",
    "sha512WithRSAEncryption": "cf7789daccf0b20ced8a6c39ddfd0b53d1806e1447fed350d28212ead062b0d9aba6680c5ab0d85a905dadb5692728b5e4e96f82807265c1a5f908c10dc36b0f",
    "shaWithRSAEncryption": "a711bc3da0c132f3ad954a98339007af5355a06e",
    "ssl2-md5": "683c9384e29efe82dd3ac847904c28e8",
    "ssl3-md5": "683c9384e29efe82dd3ac847904c28e8",
    "ssl3-sha1": "f4942d3b9e9588dcfdc6312a84df75d05f111c20",
    "whirlpool": "1c9e2f702bb804cf393aa2e878d278092515746205123fb916a15ff21fd96bc9a8691957c6e58d1c46cf8b932c9bc9083a5017aa9fb9c1854aa4e7c88fd6384e"
  },
  {
    "input": "gEH/w/4AHgAP/+D/gA/gAH/3/wH+Af/f/wAB/+AA",
    "DSA": "310207df35b014e4676d30806fa34424813734dd",
    "DSA-SHA": "310207df35b014e4676d30806fa34424813734dd",
    "DSA-SHA1": "310207df35b014e4676d30806fa34424813734dd",
    "DSA-SHA1-old": "310207df35b014e4676d30806fa34424813734dd",
    "RSA-MD4": "a96d7d1c204aa0221ec4c19e97352a60",
    "RSA-MD5": "b3d948e72159ddc9c600d75512c5f115",
    "RSA-MDC2": "22cd84ab5864b42df054576d0391d2cc",
    "RSA-RIPEMD160": "7ba69b7c4378c53519a30020a1c0206a00e878ec",
    "RSA-SHA": "5e5b768ea959acd229b268a520698b84b5d4785d",
    "RSA-SHA1": "310207df35b014e4676d30806fa34424813734dd",
    "RSA-SHA1-2": "310207df35b014e4676d30806fa34424813734dd",
    "RSA-SHA224": "325398b0c7c581fecbd21da45855ff3f7b4c134f2719d7f1122e61a8",
    "RSA-SHA256": "d1e1f2aca9cfe8c6460f576661190a8008705ef13207c4c7200a2d6b0605f519",
    "RSA-SHA384": "e48d377c31ef07e141674e295e6d905e41012a8caec216233a2ae5365d9c43e2c9255622aa0bcb30dc3e1524807afd4b",
    "RSA-SHA512": "6e838146cde732b5d72f1709554a578d8ade9182e54827426818cf4ed6a3d9ef1d98f7e23d0365b34c99c0cefb9dd723716ebacd2eab77ba8e9501d12311e910",
    "dsaEncryption": "310207df35b014e4676d30806fa34424813734dd",
    "dsaWithSHA": "310207df35b014e4676d30806fa34424813734dd",
    "dsaWithSHA1": "310207df35b014e4676d30806fa34424813734dd",
    "dss1": "310207df35b014e4676d30806fa34424813734dd",
    "ecdsa-with-SHA1": "310207df35b014e4676d30806fa34424813734dd",
    "md4": "a96d7d1c204aa0221ec4c19e97352a60",
    "md4WithRSAEncryption": "a96d7d1c204aa0221ec4c19e97352a60",
    "md5": "b3d948e72159ddc9c600d75512c5f115",
    "md5WithRSAEncryption": "b3d948e72159ddc9c600d75512c5f115",
    "mdc2": "22cd84ab5864b42df054576d0391d2cc",
    "mdc2WithRSA": "22cd84ab5864b42df054576d0391d2cc",
    "ripemd": "7ba69b7c4378c53519a30020a1c0206a00e878ec",
    "ripemd160": "7ba69b7c4378c53519a30020a1c0206a00e878ec",
    "ripemd160WithRSA": "7ba69b7c4378c53519a30020a1c0206a00e878ec",
    "rmd160": "7ba69b7c4378c53519a30020a1c0206a00e878ec",
    "sha": "5e5b768ea959acd229b268a520698b84b5d4785d",
    "sha1": "310207df35b014e4676d30806fa34424813734dd",
    "sha1WithRSAEncryption": "310207df35b014e4676d30806fa34424813734dd",
    "sha224": "325398b0c7c581fecbd21da45855ff3f7b4c134f2719d7f1122e61a8",
    "sha224WithRSAEncryption": "325398b0c7c581fecbd21da45855ff3f7b4c134f2719d7f1122e61a8",
    "sha256": "d1e1f2aca9cfe8c6460f576661190a8008705ef13207c4c7200a2d6b0605f519",
    "sha256WithRSAEncryption": "d1e1f2aca9cfe8c6460f576661190a8008705ef13207c4c7200a2d6b0605f519",
    "sha384": "e48d377c31ef07e141674e295e6d905e41012a8caec216233a2ae5365d9c43e2c9255622aa0bcb30dc3e1524807afd4b",
    "sha384WithRSAEncryption": "e48d377c31ef07e141674e295e6d905e41012a8caec216233a2ae5365d9c43e2c9255622aa0bcb30dc3e1524807afd4b",
    "sha512": "6e838146cde732b5d72f1709554a578d8ade9182e54827426818cf4ed6a3d9ef1d98f7e23d0365b34c99c0cefb9dd723716ebacd2eab77ba8e9501d12311e910",
    "sha512WithRSAEncryption": "6e838146cde732b5d72f1709554a578d8ade9182e54827426818cf4ed6a3d9ef1d98f7e23d0365b34c99c0cefb9dd723716ebacd2eab77ba8e9501d12311e910",
    "shaWithRSAEncryption": "5e5b768ea959acd229b268a520698b84b5d4785d",
    "ssl2-md5": "b3d948e72159ddc9c600d75512c5f115",
    "ssl3-md5": "b3d948e72159ddc9c600d75512c5f115",
    "ssl3-sha1": "310207df35b014e4676d30806fa34424813734dd",
    "whirlpool": "1fded05591b9e6d4c07905d384a43e8976ee8d0263d2e7e06a82769aa843d8e3e627802576e5bdde2b11ebd7558f24ece75bba6cede9f0788032de4c76e50a53"
  },
  {
    "input": "+AcA/8B/vgAP/wAD4/D/8AAfgf+AD/+AIAPwA4D//A==",
    "DSA": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "DSA-SHA": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "DSA-SHA1": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "DSA-SHA1-old": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "RSA-MD4": "7bf25a8f5271da6bde0a905482b07401",
    "RSA-MD5": "ce8633a6cf189b07e022147bbbd0f350",
    "RSA-MDC2": "bc0975fed3d2d2786d0c5db1e1003384",
    "RSA-RIPEMD160": "ff2586f8e09787238b1afcda11023fc73dfc5dd7",
    "RSA-SHA": "e9887634d9f889966d51051e384347516ef78dc9",
    "RSA-SHA1": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "RSA-SHA1-2": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "RSA-SHA224": "7fd2bb294a49bf524a73059c23b30d7621d17bb1e1ca5a73c5ca5f33",
    "RSA-SHA256": "b1843454b0258016558abdbd899319c1fd12d03e0c3d9e882da03de9cb981777",
    "RSA-SHA384": "9361ea8d32fc65f15283d36b2deb04850a4e80bcfefc71236f0983b6dfe5e182fc1c4bfbfe9afc166aa2c42b84be372a",
    "RSA-SHA512": "7181c16eb19dd6c82a178d1d9c9b79a7a21f2b7185787fbd31ff781a178870fd9ef6434b5814edf2b55a3c0d51f799e2f319beac54bfbb0153130898370aa64e",
    "dsaEncryption": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "dsaWithSHA": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "dsaWithSHA1": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "dss1": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "ecdsa-with-SHA1": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "md4": "7bf25a8f5271da6bde0a905482b07401",
    "md4WithRSAEncryption": "7bf25a8f5271da6bde0a905482b07401",
    "md5": "ce8633a6cf189b07e022147bbbd0f350",
    "md5WithRSAEncryption": "ce8633a6cf189b07e022147bbbd0f350",
    "mdc2": "bc0975fed3d2d2786d0c5db1e1003384",
    "mdc2WithRSA": "bc0975fed3d2d2786d0c5db1e1003384",
    "ripemd": "ff2586f8e09787238b1afcda11023fc73dfc5dd7",
    "ripemd160": "ff2586f8e09787238b1afcda11023fc73dfc5dd7",
    "ripemd160WithRSA": "ff2586f8e09787238b1afcda11023fc73dfc5dd7",
    "rmd160": "ff2586f8e09787238b1afcda11023fc73dfc5dd7",
    "sha": "e9887634d9f889966d51051e384347516ef78dc9",
    "sha1": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "sha1WithRSAEncryption": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "sha224": "7fd2bb294a49bf524a73059c23b30d7621d17bb1e1ca5a73c5ca5f33",
    "sha224WithRSAEncryption": "7fd2bb294a49bf524a73059c23b30d7621d17bb1e1ca5a73c5ca5f33",
    "sha256": "b1843454b0258016558abdbd899319c1fd12d03e0c3d9e882da03de9cb981777",
    "sha256WithRSAEncryption": "b1843454b0258016558abdbd899319c1fd12d03e0c3d9e882da03de9cb981777",
    "sha384": "9361ea8d32fc65f15283d36b2deb04850a4e80bcfefc71236f0983b6dfe5e182fc1c4bfbfe9afc166aa2c42b84be372a",
    "sha384WithRSAEncryption": "9361ea8d32fc65f15283d36b2deb04850a4e80bcfefc71236f0983b6dfe5e182fc1c4bfbfe9afc166aa2c42b84be372a",
    "sha512": "7181c16eb19dd6c82a178d1d9c9b79a7a21f2b7185787fbd31ff781a178870fd9ef6434b5814edf2b55a3c0d51f799e2f319beac54bfbb0153130898370aa64e",
    "sha512WithRSAEncryption": "7181c16eb19dd6c82a178d1d9c9b79a7a21f2b7185787fbd31ff781a178870fd9ef6434b5814edf2b55a3c0d51f799e2f319beac54bfbb0153130898370aa64e",
    "shaWithRSAEncryption": "e9887634d9f889966d51051e384347516ef78dc9",
    "ssl2-md5": "ce8633a6cf189b07e022147bbbd0f350",
    "ssl3-md5": "ce8633a6cf189b07e022147bbbd0f350",
    "ssl3-sha1": "4da1955b2fa7c7e74e3f47d7360ce530bbf57ca3",
    "whirlpool": "b808f1bb089b54bdbc4ef470b6b16963c65f9e4fc8e38ca38a02315a97f7085e89665fb38cf0c912a814bbae3085e2af2a2b237ce401ac73fb1b7e2662c0593b"
  },
  {
    "input": "ADggAH/wAf/+z/4H/8AAf/gfAADAAMAP/z4PwA//gAA=",
    "DSA": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "DSA-SHA": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "DSA-SHA1": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "DSA-SHA1-old": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "RSA-MD4": "83028cd6493d346d79a6f7cb51ef5c16",
    "RSA-MD5": "8df17372eb32a0afa4fc47837262ff61",
    "RSA-MDC2": "f2ce7971511276de6b17494e074dfe6d",
    "RSA-RIPEMD160": "e7fb567b5b5555d1b61b55dbaea3e0e1659ec984",
    "RSA-SHA": "56296a1654ca244b3662c9236a037183dbba7c5c",
    "RSA-SHA1": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "RSA-SHA1-2": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "RSA-SHA224": "b5866bca881d1ff15fbb14757549d9ea637186b8bfb1132e26f41851",
    "RSA-SHA256": "2834dcb6957b97fdde61b532d151ee4482bface8714fe36cd072b4783765901d",
    "RSA-SHA384": "1da4e010eaadfd837c926d7ccf688d0b7bee73682601195201a8294e29dcb3adfeb84f43364593766937106dd15fa680",
    "RSA-SHA512": "2fcb3ddc573861b64f05ea82a1c1abe7ada1d16bf18fa7760d7893d029dd0b60dd181dd052e7b9882c4e5699f72d2a06a5d83b26960123faae6bbb8d75cdf93c",
    "dsaEncryption": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "dsaWithSHA": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "dsaWithSHA1": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "dss1": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "ecdsa-with-SHA1": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "md4": "83028cd6493d346d79a6f7cb51ef5c16",
    "md4WithRSAEncryption": "83028cd6493d346d79a6f7cb51ef5c16",
    "md5": "8df17372eb32a0afa4fc47837262ff61",
    "md5WithRSAEncryption": "8df17372eb32a0afa4fc47837262ff61",
    "mdc2": "f2ce7971511276de6b17494e074dfe6d",
    "mdc2WithRSA": "f2ce7971511276de6b17494e074dfe6d",
    "ripemd": "e7fb567b5b5555d1b61b55dbaea3e0e1659ec984",
    "ripemd160": "e7fb567b5b5555d1b61b55dbaea3e0e1659ec984",
    "ripemd160WithRSA": "e7fb567b5b5555d1b61b55dbaea3e0e1659ec984",
    "rmd160": "e7fb567b5b5555d1b61b55dbaea3e0e1659ec984",
    "sha": "56296a1654ca244b3662c9236a037183dbba7c5c",
    "sha1": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "sha1WithRSAEncryption": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "sha224": "b5866bca881d1ff15fbb14757549d9ea637186b8bfb1132e26f41851",
    "sha224WithRSAEncryption": "b5866bca881d1ff15fbb14757549d9ea637186b8bfb1132e26f41851",
    "sha256": "2834dcb6957b97fdde61b532d151ee4482bface8714fe36cd072b4783765901d",
    "sha256WithRSAEncryption": "2834dcb6957b97fdde61b532d151ee4482bface8714fe36cd072b4783765901d",
    "sha384": "1da4e010eaadfd837c926d7ccf688d0b7bee73682601195201a8294e29dcb3adfeb84f43364593766937106dd15fa680",
    "sha384WithRSAEncryption": "1da4e010eaadfd837c926d7ccf688d0b7bee73682601195201a8294e29dcb3adfeb84f43364593766937106dd15fa680",
    "sha512": "2fcb3ddc573861b64f05ea82a1c1abe7ada1d16bf18fa7760d7893d029dd0b60dd181dd052e7b9882c4e5699f72d2a06a5d83b26960123faae6bbb8d75cdf93c",
    "sha512WithRSAEncryption": "2fcb3ddc573861b64f05ea82a1c1abe7ada1d16bf18fa7760d7893d029dd0b60dd181dd052e7b9882c4e5699f72d2a06a5d83b26960123faae6bbb8d75cdf93c",
    "shaWithRSAEncryption": "56296a1654ca244b3662c9236a037183dbba7c5c",
    "ssl2-md5": "8df17372eb32a0afa4fc47837262ff61",
    "ssl3-md5": "8df17372eb32a0afa4fc47837262ff61",
    "ssl3-sha1": "74c4bc5b26fb4a08602d40ccec6c6161b6c11478",
    "whirlpool": "cd8ec5b56ac28e0471986a70f8c1dc4b99e070961f9b07babe7960338419873103d17aab924e12458282dfa5fb530b6ecb510e6ec6ad6bea85e1b495cbe5a61d"
  },
  {
    "input": "H/gH//gD4AH//D/4ADgfAD/cAcAE//8AD/wIAgAB8D//",
    "DSA": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "DSA-SHA": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "DSA-SHA1": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "DSA-SHA1-old": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "RSA-MD4": "045f5a64d376e8100a09eeab090c3c80",
    "RSA-MD5": "62c63ca91890ce6f78a59c0bdb1e7bab",
    "RSA-MDC2": "f536bb3e3365b901815b148c14d7fce9",
    "RSA-RIPEMD160": "c633f59186562d45274f67d83a3cb9b5a336cbc4",
    "RSA-SHA": "74870248e7af360c2a5a96346f4c76ebd17269f2",
    "RSA-SHA1": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "RSA-SHA1-2": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "RSA-SHA224": "b3790b8e49a88c53ec402394518b82bf4058198a7cc37d2e8845435b",
    "RSA-SHA256": "47d61de59879013f64eb78fa8f6c8b906f7d25b8e1c3ca888f32421749c0d042",
    "RSA-SHA384": "127544ea2bd3173a5eddf8503b5beed520ef445a118e022c94f18ce3b68f90fb85e11df34979118644cdbd793157cee8",
    "RSA-SHA512": "e181d464243b380c604e97793333ca188d193357c743d0402990d796f2028f28838a93d717e5e07119e06dd2ba889b2ba775989ed77fa6fd959d565c1f179401",
    "dsaEncryption": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "dsaWithSHA": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "dsaWithSHA1": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "dss1": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "ecdsa-with-SHA1": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "md4": "045f5a64d376e8100a09eeab090c3c80",
    "md4WithRSAEncryption": "045f5a64d376e8100a09eeab090c3c80",
    "md5": "62c63ca91890ce6f78a59c0bdb1e7bab",
    "md5WithRSAEncryption": "62c63ca91890ce6f78a59c0bdb1e7bab",
    "mdc2": "f536bb3e3365b901815b148c14d7fce9",
    "mdc2WithRSA": "f536bb3e3365b901815b148c14d7fce9",
    "ripemd": "c633f59186562d45274f67d83a3cb9b5a336cbc4",
    "ripemd160": "c633f59186562d45274f67d83a3cb9b5a336cbc4",
    "ripemd160WithRSA": "c633f59186562d45274f67d83a3cb9b5a336cbc4",
    "rmd160": "c633f59186562d45274f67d83a3cb9b5a336cbc4",
    "sha": "74870248e7af360c2a5a96346f4c76ebd17269f2",
    "sha1": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "sha1WithRSAEncryption": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "sha224": "b3790b8e49a88c53ec402394518b82bf4058198a7cc37d2e8845435b",
    "sha224WithRSAEncryption": "b3790b8e49a88c53ec402394518b82bf4058198a7cc37d2e8845435b",
    "sha256": "47d61de59879013f64eb78fa8f6c8b906f7d25b8e1c3ca888f32421749c0d042",
    "sha256WithRSAEncryption": "47d61de59879013f64eb78fa8f6c8b906f7d25b8e1c3ca888f32421749c0d042",
    "sha384": "127544ea2bd3173a5eddf8503b5beed520ef445a118e022c94f18ce3b68f90fb85e11df34979118644cdbd793157cee8",
    "sha384WithRSAEncryption": "127544ea2bd3173a5eddf8503b5beed520ef445a118e022c94f18ce3b68f90fb85e11df34979118644cdbd793157cee8",
    "sha512": "e181d464243b380c604e97793333ca188d193357c743d0402990d796f2028f28838a93d717e5e07119e06dd2ba889b2ba775989ed77fa6fd959d565c1f179401",
    "sha512WithRSAEncryption": "e181d464243b380c604e97793333ca188d193357c743d0402990d796f2028f28838a93d717e5e07119e06dd2ba889b2ba775989ed77fa6fd959d565c1f179401",
    "shaWithRSAEncryption": "74870248e7af360c2a5a96346f4c76ebd17269f2",
    "ssl2-md5": "62c63ca91890ce6f78a59c0bdb1e7bab",
    "ssl3-md5": "62c63ca91890ce6f78a59c0bdb1e7bab",
    "ssl3-sha1": "0b103ce297338dfc7395f7715ee47539b556ddb6",
    "whirlpool": "90363b4b32218f1dda7535d499ad59c6a3911731e1b50588b9877b6723423cab907e5007d10f075a409c4504a43555664bc30e830b1f1a0636b3590f0e3475f6"
  },
  {
    "input": "gAeGAAP/4AA/+AAPgA/4D//gAB+AAH/4wA//8HwEB/8AAA==",
    "DSA": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "DSA-SHA": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "DSA-SHA1": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "DSA-SHA1-old": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "RSA-MD4": "325ec9a7c1190a91cc2741650eb93c91",
    "RSA-MD5": "1eda4bb0259a939548ec4ceb39facde4",
    "RSA-MDC2": "d29176e2f2bb0a680cffaf44be9f0eaf",
    "RSA-RIPEMD160": "1a61bd3b02bd0b20a2bbaf0a2bb3d32d94618d5b",
    "RSA-SHA": "7c7ebeb661bc0c3dbb7a8f99f865c7543d4f7960",
    "RSA-SHA1": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "RSA-SHA1-2": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "RSA-SHA224": "ffac87d0364dc7a0923fbdd3070c687e2bd0acc923ea7faaf0408cc8",
    "RSA-SHA256": "855fc59aa873328501ab0b1ce9c60a7d5582662c725605ebe02b64a13e34b3bc",
    "RSA-SHA384": "dcb16c0c0022a0ba6917767ecaf29335ad966bac8416dcadc504018b322f845a9f8837cb672d60cbe20319590a4cd15c",
    "RSA-SHA512": "4c57d718a80f7e0d59285733fe06e763861cfefab394fc2fef53cf7739514e03b0c334c4420720f1bd4ec219da00e3dfc6272eeb4890ab4fb0d405ab26d9dcd0",
    "dsaEncryption": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "dsaWithSHA": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "dsaWithSHA1": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "dss1": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "ecdsa-with-SHA1": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "md4": "325ec9a7c1190a91cc2741650eb93c91",
    "md4WithRSAEncryption": "325ec9a7c1190a91cc2741650eb93c91",
    "md5": "1eda4bb0259a939548ec4ceb39facde4",
    "md5WithRSAEncryption": "1eda4bb0259a939548ec4ceb39facde4",
    "mdc2": "d29176e2f2bb0a680cffaf44be9f0eaf",
    "mdc2WithRSA": "d29176e2f2bb0a680cffaf44be9f0eaf",
    "ripemd": "1a61bd3b02bd0b20a2bbaf0a2bb3d32d94618d5b",
    "ripemd160": "1a61bd3b02bd0b20a2bbaf0a2bb3d32d94618d5b",
    "ripemd160WithRSA": "1a61bd3b02bd0b20a2bbaf0a2bb3d32d94618d5b",
    "rmd160": "1a61bd3b02bd0b20a2bbaf0a2bb3d32d94618d5b",
    "sha": "7c7ebeb661bc0c3dbb7a8f99f865c7543d4f7960",
    "sha1": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "sha1WithRSAEncryption": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "sha224": "ffac87d0364dc7a0923fbdd3070c687e2bd0acc923ea7faaf0408cc8",
    "sha224WithRSAEncryption": "ffac87d0364dc7a0923fbdd3070c687e2bd0acc923ea7faaf0408cc8",
    "sha256": "855fc59aa873328501ab0b1ce9c60a7d5582662c725605ebe02b64a13e34b3bc",
    "sha256WithRSAEncryption": "855fc59aa873328501ab0b1ce9c60a7d5582662c725605ebe02b64a13e34b3bc",
    "sha384": "dcb16c0c0022a0ba6917767ecaf29335ad966bac8416dcadc504018b322f845a9f8837cb672d60cbe20319590a4cd15c",
    "sha384WithRSAEncryption": "dcb16c0c0022a0ba6917767ecaf29335ad966bac8416dcadc504018b322f845a9f8837cb672d60cbe20319590a4cd15c",
    "sha512": "4c57d718a80f7e0d59285733fe06e763861cfefab394fc2fef53cf7739514e03b0c334c4420720f1bd4ec219da00e3dfc6272eeb4890ab4fb0d405ab26d9dcd0",
    "sha512WithRSAEncryption": "4c57d718a80f7e0d59285733fe06e763861cfefab394fc2fef53cf7739514e03b0c334c4420720f1bd4ec219da00e3dfc6272eeb4890ab4fb0d405ab26d9dcd0",
    "shaWithRSAEncryption": "7c7ebeb661bc0c3dbb7a8f99f865c7543d4f7960",
    "ssl2-md5": "1eda4bb0259a939548ec4ceb39facde4",
    "ssl3-md5": "1eda4bb0259a939548ec4ceb39facde4",
    "ssl3-sha1": "efc72d99e3d2311ce14190c0b726bdc68f4b0821",
    "whirlpool": "1b5afba2021c913e619d5196061be1cd1528ffb4e29cacef7c5304452a3d455bae6999aea4119151a75fd65b6876859a09259f3aab5a9547ab195df812f849d4"
  },
  {
    "input": "Af8AGD4PAAf/wADwH/4HgGAP+AA//jgfwAA/gf/8H+AAP/8=",
    "DSA": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "DSA-SHA": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "DSA-SHA1": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "DSA-SHA1-old": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "RSA-MD4": "6ff736d1aa4abd98d9989432edd810ac",
    "RSA-MD5": "c4f37a2c450f2a23322513b372e668a5",
    "RSA-MDC2": "2ad8a917d8e3600f4f7286ded0951bfb",
    "RSA-RIPEMD160": "5c0967aaa76255ea98f062a1abcbef90ce769ae2",
    "RSA-SHA": "371d30691202f9d31776855ded13e28a8a36e9af",
    "RSA-SHA1": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "RSA-SHA1-2": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "RSA-SHA224": "0abe94c703e751f4d66d223ebf9c59b3083adcf7c94933677f05e45e",
    "RSA-SHA256": "e05939e8ff4ed77a11522dde249a74841c54970d984e0bb6f77ac64f1fa313b0",
    "RSA-SHA384": "3893656e1942b21c17880f752c3950cd281a1431ec5e5d7c10329d281f7839edc8e239416bac6705f814d849a2fc4512",
    "RSA-SHA512": "28e62841b7553adf1a3fc1e5e24c0f81df969fd315dbc616a75adde00093472f401aa4840a23afa128b19d345756c74ee4ff2dd79879841258508390233f159c",
    "dsaEncryption": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "dsaWithSHA": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "dsaWithSHA1": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "dss1": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "ecdsa-with-SHA1": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "md4": "6ff736d1aa4abd98d9989432edd810ac",
    "md4WithRSAEncryption": "6ff736d1aa4abd98d9989432edd810ac",
    "md5": "c4f37a2c450f2a23322513b372e668a5",
    "md5WithRSAEncryption": "c4f37a2c450f2a23322513b372e668a5",
    "mdc2": "2ad8a917d8e3600f4f7286ded0951bfb",
    "mdc2WithRSA": "2ad8a917d8e3600f4f7286ded0951bfb",
    "ripemd": "5c0967aaa76255ea98f062a1abcbef90ce769ae2",
    "ripemd160": "5c0967aaa76255ea98f062a1abcbef90ce769ae2",
    "ripemd160WithRSA": "5c0967aaa76255ea98f062a1abcbef90ce769ae2",
    "rmd160": "5c0967aaa76255ea98f062a1abcbef90ce769ae2",
    "sha": "371d30691202f9d31776855ded13e28a8a36e9af",
    "sha1": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "sha1WithRSAEncryption": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "sha224": "0abe94c703e751f4d66d223ebf9c59b3083adcf7c94933677f05e45e",
    "sha224WithRSAEncryption": "0abe94c703e751f4d66d223ebf9c59b3083adcf7c94933677f05e45e",
    "sha256": "e05939e8ff4ed77a11522dde249a74841c54970d984e0bb6f77ac64f1fa313b0",
    "sha256WithRSAEncryption": "e05939e8ff4ed77a11522dde249a74841c54970d984e0bb6f77ac64f1fa313b0",
    "sha384": "3893656e1942b21c17880f752c3950cd281a1431ec5e5d7c10329d281f7839edc8e239416bac6705f814d849a2fc4512",
    "sha384WithRSAEncryption": "3893656e1942b21c17880f752c3950cd281a1431ec5e5d7c10329d281f7839edc8e239416bac6705f814d849a2fc4512",
    "sha512": "28e62841b7553adf1a3fc1e5e24c0f81df969fd315dbc616a75adde00093472f401aa4840a23afa128b19d345756c74ee4ff2dd79879841258508390233f159c",
    "sha512WithRSAEncryption": "28e62841b7553adf1a3fc1e5e24c0f81df969fd315dbc616a75adde00093472f401aa4840a23afa128b19d345756c74ee4ff2dd79879841258508390233f159c",
    "shaWithRSAEncryption": "371d30691202f9d31776855ded13e28a8a36e9af",
    "ssl2-md5": "c4f37a2c450f2a23322513b372e668a5",
    "ssl3-md5": "c4f37a2c450f2a23322513b372e668a5",
    "ssl3-sha1": "660edac0a8f4ce33da0d8dbae597650e97687250",
    "whirlpool": "8b4523d7e6087f66d5880ac5148d04ebb9385f8fcd3af4cdf45d3f483f2d1903316dfbc654f8dbbf743bb3b87dba1827428f7c6ed2e9eea9f8a3c5f664b0d589"
  },
  {
    "input": "8D//wAB/8AA//w/gBw/8fgP/8PwPn8A//8//AAD/wADnAf/4",
    "DSA": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "DSA-SHA": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "DSA-SHA1": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "DSA-SHA1-old": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "RSA-MD4": "63321fdbb21383e845ff2b30e6a91689",
    "RSA-MD5": "cab8f06436c5ad45f982490215836f4e",
    "RSA-MDC2": "247ba412552d6ed08363bc63e73d08b1",
    "RSA-RIPEMD160": "e09b8578929c27a2004a86e133d34360a583706e",
    "RSA-SHA": "c9f49c7f723391913ab0205a6f2b5ab871a850f3",
    "RSA-SHA1": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "RSA-SHA1-2": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "RSA-SHA224": "b9b20d5d7d15d2b111c3f0b99e6f86c000fb2b2a1a10b1e13a052b7c",
    "RSA-SHA256": "078778fed0e382da5d7dd36f585e1f1aa9b92d4caf20b85c0f6dd346de8d3998",
    "RSA-SHA384": "01ea7a7eb085c5f1cedb1fb8ae652acbd318e83d06954cc87d3d1c4af08ab71f227b31781b2c2510e166b936b40a96db",
    "RSA-SHA512": "515d0e71faca3297dc1a88774bcf181faa928a4a76481e0adbf0ac2833f6f10c1e55780306c499aa89b4647be727be083ce5f38971e218edbb76d7ee63591bb7",
    "dsaEncryption": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "dsaWithSHA": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "dsaWithSHA1": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "dss1": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "ecdsa-with-SHA1": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "md4": "63321fdbb21383e845ff2b30e6a91689",
    "md4WithRSAEncryption": "63321fdbb21383e845ff2b30e6a91689",
    "md5": "cab8f06436c5ad45f982490215836f4e",
    "md5WithRSAEncryption": "cab8f06436c5ad45f982490215836f4e",
    "mdc2": "247ba412552d6ed08363bc63e73d08b1",
    "mdc2WithRSA": "247ba412552d6ed08363bc63e73d08b1",
    "ripemd": "e09b8578929c27a2004a86e133d34360a583706e",
    "ripemd160": "e09b8578929c27a2004a86e133d34360a583706e",
    "ripemd160WithRSA": "e09b8578929c27a2004a86e133d34360a583706e",
    "rmd160": "e09b8578929c27a2004a86e133d34360a583706e",
    "sha": "c9f49c7f723391913ab0205a6f2b5ab871a850f3",
    "sha1": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "sha1WithRSAEncryption": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "sha224": "b9b20d5d7d15d2b111c3f0b99e6f86c000fb2b2a1a10b1e13a052b7c",
    "sha224WithRSAEncryption": "b9b20d5d7d15d2b111c3f0b99e6f86c000fb2b2a1a10b1e13a052b7c",
    "sha256": "078778fed0e382da5d7dd36f585e1f1aa9b92d4caf20b85c0f6dd346de8d3998",
    "sha256WithRSAEncryption": "078778fed0e382da5d7dd36f585e1f1aa9b92d4caf20b85c0f6dd346de8d3998",
    "sha384": "01ea7a7eb085c5f1cedb1fb8ae652acbd318e83d06954cc87d3d1c4af08ab71f227b31781b2c2510e166b936b40a96db",
    "sha384WithRSAEncryption": "01ea7a7eb085c5f1cedb1fb8ae652acbd318e83d06954cc87d3d1c4af08ab71f227b31781b2c2510e166b936b40a96db",
    "sha512": "515d0e71faca3297dc1a88774bcf181faa928a4a76481e0adbf0ac2833f6f10c1e55780306c499aa89b4647be727be083ce5f38971e218edbb76d7ee63591bb7",
    "sha512WithRSAEncryption": "515d0e71faca3297dc1a88774bcf181faa928a4a76481e0adbf0ac2833f6f10c1e55780306c499aa89b4647be727be083ce5f38971e218edbb76d7ee63591bb7",
    "shaWithRSAEncryption": "c9f49c7f723391913ab0205a6f2b5ab871a850f3",
    "ssl2-md5": "cab8f06436c5ad45f982490215836f4e",
    "ssl3-md5": "cab8f06436c5ad45f982490215836f4e",
    "ssl3-sha1": "fe0a55a988b3b93946a63eb36b23785a5e6efc3e",
    "whirlpool": "b74ca3c5185c129a4a9d9bee472c664775fb6afb6c7bbfa862d101fb516a839ae7fa276560c449f1701bcf2118a3ad6bb06ff99f524beef9bd32dd9d769d7a29"
  },
  {
    "input": "AAH/gCAAf+AAfgf/+Mf4//AP/gAA4A/gAB//h/8AAfAAf8H//w==",
    "DSA": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "DSA-SHA": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "DSA-SHA1": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "DSA-SHA1-old": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "RSA-MD4": "5ad360c53dda52e5091348a59e5d76f5",
    "RSA-MD5": "3a43bc720714a2a42a73a76085542f86",
    "RSA-MDC2": "9d4c5c0e31af73e6800bd14ecda2529a",
    "RSA-RIPEMD160": "8311abae274187e06b2d5bcb79ab9657b8de7928",
    "RSA-SHA": "5b8c43786d94380703be99943dcb7804391e3d8b",
    "RSA-SHA1": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "RSA-SHA1-2": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "RSA-SHA224": "32c6c30907295bfce00b1921c3900e55e70d2ffa0e10046039541d93",
    "RSA-SHA256": "263140810ae46430e19ac1a4a98b6204b63031b282ecb28594bd837268104308",
    "RSA-SHA384": "b9dcd27ee66d614f738b56a68efd504f9e30b338812c405cb4579a44a9cf53566b26b600f05726cd95e87e15036e7f99",
    "RSA-SHA512": "7113009ad761f953e532a90bd48fa720127539d9b08d1383c09186c23288885c7f841a70ede2485c1d333893347c2f5bf239605b338e57974105427a4235a7b0",
    "dsaEncryption": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "dsaWithSHA": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "dsaWithSHA1": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "dss1": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "ecdsa-with-SHA1": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "md4": "5ad360c53dda52e5091348a59e5d76f5",
    "md4WithRSAEncryption": "5ad360c53dda52e5091348a59e5d76f5",
    "md5": "3a43bc720714a2a42a73a76085542f86",
    "md5WithRSAEncryption": "3a43bc720714a2a42a73a76085542f86",
    "mdc2": "9d4c5c0e31af73e6800bd14ecda2529a",
    "mdc2WithRSA": "9d4c5c0e31af73e6800bd14ecda2529a",
    "ripemd": "8311abae274187e06b2d5bcb79ab9657b8de7928",
    "ripemd160": "8311abae274187e06b2d5bcb79ab9657b8de7928",
    "ripemd160WithRSA": "8311abae274187e06b2d5bcb79ab9657b8de7928",
    "rmd160": "8311abae274187e06b2d5bcb79ab9657b8de7928",
    "sha": "5b8c43786d94380703be99943dcb7804391e3d8b",
    "sha1": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "sha1WithRSAEncryption": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "sha224": "32c6c30907295bfce00b1921c3900e55e70d2ffa0e10046039541d93",
    "sha224WithRSAEncryption": "32c6c30907295bfce00b1921c3900e55e70d2ffa0e10046039541d93",
    "sha256": "263140810ae46430e19ac1a4a98b6204b63031b282ecb28594bd837268104308",
    "sha256WithRSAEncryption": "263140810ae46430e19ac1a4a98b6204b63031b282ecb28594bd837268104308",
    "sha384": "b9dcd27ee66d614f738b56a68efd504f9e30b338812c405cb4579a44a9cf53566b26b600f05726cd95e87e15036e7f99",
    "sha384WithRSAEncryption": "b9dcd27ee66d614f738b56a68efd504f9e30b338812c405cb4579a44a9cf53566b26b600f05726cd95e87e15036e7f99",
    "sha512": "7113009ad761f953e532a90bd48fa720127539d9b08d1383c09186c23288885c7f841a70ede2485c1d333893347c2f5bf239605b338e57974105427a4235a7b0",
    "sha512WithRSAEncryption": "7113009ad761f953e532a90bd48fa720127539d9b08d1383c09186c23288885c7f841a70ede2485c1d333893347c2f5bf239605b338e57974105427a4235a7b0",
    "shaWithRSAEncryption": "5b8c43786d94380703be99943dcb7804391e3d8b",
    "ssl2-md5": "3a43bc720714a2a42a73a76085542f86",
    "ssl3-md5": "3a43bc720714a2a42a73a76085542f86",
    "ssl3-sha1": "0cbdf2a5781c59f907513147a0de3cc774b54bf3",
    "whirlpool": "f675505d8bea33d69d124d2e80571171cde3426a34dc66d3b96f53546cd0c151caa23aea38012ddb63e4bd546bcdfedec5df22f6016ee93d1f99aeffce1bcf0b"
  },
  {
    "input": "AAB//8AB/n4B//7/8H//z/gH/gAP/8AH//wAPgAH/AB/wAeAD/8=",
    "DSA": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "DSA-SHA": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "DSA-SHA1": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "DSA-SHA1-old": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "RSA-MD4": "8ce4760471117752e87c41636b0ea34d",
    "RSA-MD5": "03f2f4033b258e6eb1e101f1ed4c24b4",
    "RSA-MDC2": "e755476354bdd63c30e3167f70d711c4",
    "RSA-RIPEMD160": "335960e48047116b369001869e502fa72bdaa3e5",
    "RSA-SHA": "b04d69932f9826200317d5bc2673a8a09622bf90",
    "RSA-SHA1": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "RSA-SHA1-2": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "RSA-SHA224": "9aceeccd3a8ae54e0262a8a5728dd7a0436e28313afb5286dd1fe612",
    "RSA-SHA256": "ed39f65ea0e6cd8fb39bc5d94a1554dfd0002733e01618161d58a7b7dc8be834",
    "RSA-SHA384": "43fad30a9d3ec3c0f01663d151df2015cc858ba6b38a28912251b79137ee5b9c280c52df4681b1dfb6f26c4ca7cdf579",
    "RSA-SHA512": "4511276b41b462f8cbf45da6f699d00217a8ee2bb8594c41f33ca39febcf1ab52725c15bad08c6dc1aa5f85e511f218898a574baf7b8e910d6e44158ddfc381d",
    "dsaEncryption": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "dsaWithSHA": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "dsaWithSHA1": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "dss1": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "ecdsa-with-SHA1": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "md4": "8ce4760471117752e87c41636b0ea34d",
    "md4WithRSAEncryption": "8ce4760471117752e87c41636b0ea34d",
    "md5": "03f2f4033b258e6eb1e101f1ed4c24b4",
    "md5WithRSAEncryption": "03f2f4033b258e6eb1e101f1ed4c24b4",
    "mdc2": "e755476354bdd63c30e3167f70d711c4",
    "mdc2WithRSA": "e755476354bdd63c30e3167f70d711c4",
    "ripemd": "335960e48047116b369001869e502fa72bdaa3e5",
    "ripemd160": "335960e48047116b369001869e502fa72bdaa3e5",
    "ripemd160WithRSA": "335960e48047116b369001869e502fa72bdaa3e5",
    "rmd160": "335960e48047116b369001869e502fa72bdaa3e5",
    "sha": "b04d69932f9826200317d5bc2673a8a09622bf90",
    "sha1": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "sha1WithRSAEncryption": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "sha224": "9aceeccd3a8ae54e0262a8a5728dd7a0436e28313afb5286dd1fe612",
    "sha224WithRSAEncryption": "9aceeccd3a8ae54e0262a8a5728dd7a0436e28313afb5286dd1fe612",
    "sha256": "ed39f65ea0e6cd8fb39bc5d94a1554dfd0002733e01618161d58a7b7dc8be834",
    "sha256WithRSAEncryption": "ed39f65ea0e6cd8fb39bc5d94a1554dfd0002733e01618161d58a7b7dc8be834",
    "sha384": "43fad30a9d3ec3c0f01663d151df2015cc858ba6b38a28912251b79137ee5b9c280c52df4681b1dfb6f26c4ca7cdf579",
    "sha384WithRSAEncryption": "43fad30a9d3ec3c0f01663d151df2015cc858ba6b38a28912251b79137ee5b9c280c52df4681b1dfb6f26c4ca7cdf579",
    "sha512": "4511276b41b462f8cbf45da6f699d00217a8ee2bb8594c41f33ca39febcf1ab52725c15bad08c6dc1aa5f85e511f218898a574baf7b8e910d6e44158ddfc381d",
    "sha512WithRSAEncryption": "4511276b41b462f8cbf45da6f699d00217a8ee2bb8594c41f33ca39febcf1ab52725c15bad08c6dc1aa5f85e511f218898a574baf7b8e910d6e44158ddfc381d",
    "shaWithRSAEncryption": "b04d69932f9826200317d5bc2673a8a09622bf90",
    "ssl2-md5": "03f2f4033b258e6eb1e101f1ed4c24b4",
    "ssl3-md5": "03f2f4033b258e6eb1e101f1ed4c24b4",
    "ssl3-sha1": "663e40fee5a44bfcb1c99ea5935a6b5bc9f583b0",
    "whirlpool": "39adfe06ee12f87bc1b7c6fad393a4e0a6bd1e1214c5f815c9618c258b8bb151e313cb4a5353203838f51a055123b7567cd7736897ff3c2d4675e0e86cbf97a3"
  },
  {
    "input": "//8D/wf4//+AAH/+//4AA//4H/8/+B//AB//D8B/8AH/4AAf/wAA",
    "DSA": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "DSA-SHA": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "DSA-SHA1": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "DSA-SHA1-old": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "RSA-MD4": "2606d9fd8600b8addf8b126c8d0d1e73",
    "RSA-MD5": "2ceb33cec5ecad4a50f6bd3a831ae77c",
    "RSA-MDC2": "9cad54842606364770aae6d2e4a86233",
    "RSA-RIPEMD160": "2b7b0d23c8ed008e4f6b6e96d0a47ce4bc80c959",
    "RSA-SHA": "cde513475313739f6bcd6607dd261d689d39fa8c",
    "RSA-SHA1": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "RSA-SHA1-2": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "RSA-SHA224": "bfc7ba957f6c2f4452aac46fb3d9aec50562396e2a7dd02e675b064e",
    "RSA-SHA256": "89830272d1fd54040f9329a39c7f491f15eea851095e0bd2d0bb412baeda7445",
    "RSA-SHA384": "f1a62032a76c0e52c6eb444b8cc7d60ee50d220f5b5f0a433ea52da61b8601093797b5cccbb5f68461894cd9779c473a",
    "RSA-SHA512": "1eb56e081e4b413df323fb7b9b0b31d9c71e438ea8d80d8d0374c2acfec3825492220e9eecdcbedb48c4017dc28bab48dcd6af5a240a865929641b7cee0e67e9",
    "dsaEncryption": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "dsaWithSHA": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "dsaWithSHA1": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "dss1": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "ecdsa-with-SHA1": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "md4": "2606d9fd8600b8addf8b126c8d0d1e73",
    "md4WithRSAEncryption": "2606d9fd8600b8addf8b126c8d0d1e73",
    "md5": "2ceb33cec5ecad4a50f6bd3a831ae77c",
    "md5WithRSAEncryption": "2ceb33cec5ecad4a50f6bd3a831ae77c",
    "mdc2": "9cad54842606364770aae6d2e4a86233",
    "mdc2WithRSA": "9cad54842606364770aae6d2e4a86233",
    "ripemd": "2b7b0d23c8ed008e4f6b6e96d0a47ce4bc80c959",
    "ripemd160": "2b7b0d23c8ed008e4f6b6e96d0a47ce4bc80c959",
    "ripemd160WithRSA": "2b7b0d23c8ed008e4f6b6e96d0a47ce4bc80c959",
    "rmd160": "2b7b0d23c8ed008e4f6b6e96d0a47ce4bc80c959",
    "sha": "cde513475313739f6bcd6607dd261d689d39fa8c",
    "sha1": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "sha1WithRSAEncryption": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "sha224": "bfc7ba957f6c2f4452aac46fb3d9aec50562396e2a7dd02e675b064e",
    "sha224WithRSAEncryption": "bfc7ba957f6c2f4452aac46fb3d9aec50562396e2a7dd02e675b064e",
    "sha256": "89830272d1fd54040f9329a39c7f491f15eea851095e0bd2d0bb412baeda7445",
    "sha256WithRSAEncryption": "89830272d1fd54040f9329a39c7f491f15eea851095e0bd2d0bb412baeda7445",
    "sha384": "f1a62032a76c0e52c6eb444b8cc7d60ee50d220f5b5f0a433ea52da61b8601093797b5cccbb5f68461894cd9779c473a",
    "sha384WithRSAEncryption": "f1a62032a76c0e52c6eb444b8cc7d60ee50d220f5b5f0a433ea52da61b8601093797b5cccbb5f68461894cd9779c473a",
    "sha512": "1eb56e081e4b413df323fb7b9b0b31d9c71e438ea8d80d8d0374c2acfec3825492220e9eecdcbedb48c4017dc28bab48dcd6af5a240a865929641b7cee0e67e9",
    "sha512WithRSAEncryption": "1eb56e081e4b413df323fb7b9b0b31d9c71e438ea8d80d8d0374c2acfec3825492220e9eecdcbedb48c4017dc28bab48dcd6af5a240a865929641b7cee0e67e9",
    "shaWithRSAEncryption": "cde513475313739f6bcd6607dd261d689d39fa8c",
    "ssl2-md5": "2ceb33cec5ecad4a50f6bd3a831ae77c",
    "ssl3-md5": "2ceb33cec5ecad4a50f6bd3a831ae77c",
    "ssl3-sha1": "00162134256952dd9ae6b51efb159b35c3c138c7",
    "whirlpool": "42fd4026bfa5d624f8e0ca73047b1fb78236dc1ae2f321d8b4b8c45ebb36a5eae078e744a5ce9876cc120e418923722d6d1f5b065a67f73fcf11b555de663c05"
  },
  {
    "input": "//8AAP/8AAMP//AB+AAP4f//A+A/H/+AAHwAAf/AAX/+AA4H/+D//w==",
    "DSA": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "DSA-SHA": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "DSA-SHA1": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "DSA-SHA1-old": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "RSA-MD4": "411ab6cf1c2f5497951da1e0eac259de",
    "RSA-MD5": "dd808f695d28f93562cfcb164bc3cce4",
    "RSA-MDC2": "6d028c0cee1bc0e4170fc6cf77d45b6b",
    "RSA-RIPEMD160": "a35ad99104096c19a92ece98bec973c12ffd5f37",
    "RSA-SHA": "306d4ae1d4f998d20e3702ab2ea1ac1d15052d49",
    "RSA-SHA1": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "RSA-SHA1-2": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "RSA-SHA224": "284ab5f6074548e1acf57da62f3450c81a61a0b36fe2e6edae1de141",
    "RSA-SHA256": "c9b63e8ac2e87494f98c9ece5d74f4540090c286166efdaedc6d59a0f623e5f8",
    "RSA-SHA384": "1e58486c3bd0053af910d6dbd8bd9b7edd12acf12056df8372ae534407507ffb4ba889ec8660f77d22a3c8e59b49b9de",
    "RSA-SHA512": "7f1fd27e9d2aff5bb3b0f5e3e2868b7718f8f27fc4e7e71e71283e1d0563346632bfb36e27710d2129d858db958c34ae51c26cd23cdc5186d9517c9eb5556c17",
    "dsaEncryption": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "dsaWithSHA": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "dsaWithSHA1": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "dss1": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "ecdsa-with-SHA1": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "md4": "411ab6cf1c2f5497951da1e0eac259de",
    "md4WithRSAEncryption": "411ab6cf1c2f5497951da1e0eac259de",
    "md5": "dd808f695d28f93562cfcb164bc3cce4",
    "md5WithRSAEncryption": "dd808f695d28f93562cfcb164bc3cce4",
    "mdc2": "6d028c0cee1bc0e4170fc6cf77d45b6b",
    "mdc2WithRSA": "6d028c0cee1bc0e4170fc6cf77d45b6b",
    "ripemd": "a35ad99104096c19a92ece98bec973c12ffd5f37",
    "ripemd160": "a35ad99104096c19a92ece98bec973c12ffd5f37",
    "ripemd160WithRSA": "a35ad99104096c19a92ece98bec973c12ffd5f37",
    "rmd160": "a35ad99104096c19a92ece98bec973c12ffd5f37",
    "sha": "306d4ae1d4f998d20e3702ab2ea1ac1d15052d49",
    "sha1": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "sha1WithRSAEncryption": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "sha224": "284ab5f6074548e1acf57da62f3450c81a61a0b36fe2e6edae1de141",
    "sha224WithRSAEncryption": "284ab5f6074548e1acf57da62f3450c81a61a0b36fe2e6edae1de141",
    "sha256": "c9b63e8ac2e87494f98c9ece5d74f4540090c286166efdaedc6d59a0f623e5f8",
    "sha256WithRSAEncryption": "c9b63e8ac2e87494f98c9ece5d74f4540090c286166efdaedc6d59a0f623e5f8",
    "sha384": "1e58486c3bd0053af910d6dbd8bd9b7edd12acf12056df8372ae534407507ffb4ba889ec8660f77d22a3c8e59b49b9de",
    "sha384WithRSAEncryption": "1e58486c3bd0053af910d6dbd8bd9b7edd12acf12056df8372ae534407507ffb4ba889ec8660f77d22a3c8e59b49b9de",
    "sha512": "7f1fd27e9d2aff5bb3b0f5e3e2868b7718f8f27fc4e7e71e71283e1d0563346632bfb36e27710d2129d858db958c34ae51c26cd23cdc5186d9517c9eb5556c17",
    "sha512WithRSAEncryption": "7f1fd27e9d2aff5bb3b0f5e3e2868b7718f8f27fc4e7e71e71283e1d0563346632bfb36e27710d2129d858db958c34ae51c26cd23cdc5186d9517c9eb5556c17",
    "shaWithRSAEncryption": "306d4ae1d4f998d20e3702ab2ea1ac1d15052d49",
    "ssl2-md5": "dd808f695d28f93562cfcb164bc3cce4",
    "ssl3-md5": "dd808f695d28f93562cfcb164bc3cce4",
    "ssl3-sha1": "ceb88e4736e354416e2010fc1061b3b53b81664b",
    "whirlpool": "5461d0358c333b80ad97de34372bfa9e900a91b7b0045175b13eeb931ccb3fa9ab199945f0182d662f331483f73a8ebc61ea48e8efcc4bb3b9a77a3bb9644547"
  },
  {
    "input": "wAA//gP8DAAEAf/h4AP/4DAB/wAAPB4BgAH/AEA//gA//4B8Af+AAH8=",
    "DSA": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "DSA-SHA": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "DSA-SHA1": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "DSA-SHA1-old": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "RSA-MD4": "b4f7f72920a85969ba364111878ea21f",
    "RSA-MD5": "01c6d7a87e94bf685205ec8d7c5196af",
    "RSA-MDC2": "d6758044dfd4c9a26f592daf096f7071",
    "RSA-RIPEMD160": "e6e179ca5239e4b4321627b5831add90bd222a62",
    "RSA-SHA": "6a147b8fd8222fdcc63cd8e076cf071f990416f0",
    "RSA-SHA1": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "RSA-SHA1-2": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "RSA-SHA224": "f117692dbfb6705bb7c596d2c6b573c455067fa52c20379513c0b9b7",
    "RSA-SHA256": "509e6b7dacb70bfa62f3964eba990b9c576fd2485c1040fefc8eab5f07269f4d",
    "RSA-SHA384": "7ad3873eba02c33dee71a0a5335c0da4b328500017a6d25b3eebdca45482fd8687d2a24f2f3a14f2721d3547274dc2e7",
    "RSA-SHA512": "152802b0fcc383bf8e9df9ac1ede5bac84475aceb03a3599e70e1588e7b4b2c0b06fd3d299e72c284bf0d8d8d9f6cf80c8eab409567f9b97554c3d9475573977",
    "dsaEncryption": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "dsaWithSHA": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "dsaWithSHA1": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "dss1": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "ecdsa-with-SHA1": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "md4": "b4f7f72920a85969ba364111878ea21f",
    "md4WithRSAEncryption": "b4f7f72920a85969ba364111878ea21f",
    "md5": "01c6d7a87e94bf685205ec8d7c5196af",
    "md5WithRSAEncryption": "01c6d7a87e94bf685205ec8d7c5196af",
    "mdc2": "d6758044dfd4c9a26f592daf096f7071",
    "mdc2WithRSA": "d6758044dfd4c9a26f592daf096f7071",
    "ripemd": "e6e179ca5239e4b4321627b5831add90bd222a62",
    "ripemd160": "e6e179ca5239e4b4321627b5831add90bd222a62",
    "ripemd160WithRSA": "e6e179ca5239e4b4321627b5831add90bd222a62",
    "rmd160": "e6e179ca5239e4b4321627b5831add90bd222a62",
    "sha": "6a147b8fd8222fdcc63cd8e076cf071f990416f0",
    "sha1": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "sha1WithRSAEncryption": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "sha224": "f117692dbfb6705bb7c596d2c6b573c455067fa52c20379513c0b9b7",
    "sha224WithRSAEncryption": "f117692dbfb6705bb7c596d2c6b573c455067fa52c20379513c0b9b7",
    "sha256": "509e6b7dacb70bfa62f3964eba990b9c576fd2485c1040fefc8eab5f07269f4d",
    "sha256WithRSAEncryption": "509e6b7dacb70bfa62f3964eba990b9c576fd2485c1040fefc8eab5f07269f4d",
    "sha384": "7ad3873eba02c33dee71a0a5335c0da4b328500017a6d25b3eebdca45482fd8687d2a24f2f3a14f2721d3547274dc2e7",
    "sha384WithRSAEncryption": "7ad3873eba02c33dee71a0a5335c0da4b328500017a6d25b3eebdca45482fd8687d2a24f2f3a14f2721d3547274dc2e7",
    "sha512": "152802b0fcc383bf8e9df9ac1ede5bac84475aceb03a3599e70e1588e7b4b2c0b06fd3d299e72c284bf0d8d8d9f6cf80c8eab409567f9b97554c3d9475573977",
    "sha512WithRSAEncryption": "152802b0fcc383bf8e9df9ac1ede5bac84475aceb03a3599e70e1588e7b4b2c0b06fd3d299e72c284bf0d8d8d9f6cf80c8eab409567f9b97554c3d9475573977",
    "shaWithRSAEncryption": "6a147b8fd8222fdcc63cd8e076cf071f990416f0",
    "ssl2-md5": "01c6d7a87e94bf685205ec8d7c5196af",
    "ssl3-md5": "01c6d7a87e94bf685205ec8d7c5196af",
    "ssl3-sha1": "a6a2c4b6bcc41ddc67278f3df4d8d0b9dd7784ef",
    "whirlpool": "5559d00d9bb3123609fcb20b653ecf1bcad01cab748324b04c5c8e7be742f17033a2d478f811b2fb07b9c52d8bf7734a13f0c7bcbbd78d2e724c0ee5675eb328"
  },
  {
    "input": "P6AAD/+B/8AP8H/4AA/AAH/gAeAABP8AH/4AAf+AB//+AD//wAP/gAA/",
    "DSA": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "DSA-SHA": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "DSA-SHA1": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "DSA-SHA1-old": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "RSA-MD4": "b242293b0460fc0c76f53f5c1cbcfc7f",
    "RSA-MD5": "ef0e93e8928f8bae1b216da8e661fc9b",
    "RSA-MDC2": "03a845894389466cfb52e2547578ccfc",
    "RSA-RIPEMD160": "1fc8dfe540c03fd0fcf174ffb823561b3d3e9cee",
    "RSA-SHA": "67f756689cffcf9c2adb4086b758c36011e5ba48",
    "RSA-SHA1": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "RSA-SHA1-2": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "RSA-SHA224": "e13c64dc6d3b313d6fd72d2debe30b886031569fdc4ba3ee51775189",
    "RSA-SHA256": "8bb7546f64ce1cab770407de791ab25f7bfbac3e071810310ee674c2824e59ac",
    "RSA-SHA384": "8804834cd00d6a72562fe06665f773724a532fc592beb4c1d53397b2ec9c62005518633a47dde8d354aa8f88f6dcd350",
    "RSA-SHA512": "0483e42546dcdd8c225a87308a3b42b4a74a1d0d0c1d5771debea9465483bc04ca267c9203fbcc5ec668ac1de37e77ecc880a78e79f2a618b877f39d42161fa2",
    "dsaEncryption": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "dsaWithSHA": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "dsaWithSHA1": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "dss1": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "ecdsa-with-SHA1": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "md4": "b242293b0460fc0c76f53f5c1cbcfc7f",
    "md4WithRSAEncryption": "b242293b0460fc0c76f53f5c1cbcfc7f",
    "md5": "ef0e93e8928f8bae1b216da8e661fc9b",
    "md5WithRSAEncryption": "ef0e93e8928f8bae1b216da8e661fc9b",
    "mdc2": "03a845894389466cfb52e2547578ccfc",
    "mdc2WithRSA": "03a845894389466cfb52e2547578ccfc",
    "ripemd": "1fc8dfe540c03fd0fcf174ffb823561b3d3e9cee",
    "ripemd160": "1fc8dfe540c03fd0fcf174ffb823561b3d3e9cee",
    "ripemd160WithRSA": "1fc8dfe540c03fd0fcf174ffb823561b3d3e9cee",
    "rmd160": "1fc8dfe540c03fd0fcf174ffb823561b3d3e9cee",
    "sha": "67f756689cffcf9c2adb4086b758c36011e5ba48",
    "sha1": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "sha1WithRSAEncryption": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "sha224": "e13c64dc6d3b313d6fd72d2debe30b886031569fdc4ba3ee51775189",
    "sha224WithRSAEncryption": "e13c64dc6d3b313d6fd72d2debe30b886031569fdc4ba3ee51775189",
    "sha256": "8bb7546f64ce1cab770407de791ab25f7bfbac3e071810310ee674c2824e59ac",
    "sha256WithRSAEncryption": "8bb7546f64ce1cab770407de791ab25f7bfbac3e071810310ee674c2824e59ac",
    "sha384": "8804834cd00d6a72562fe06665f773724a532fc592beb4c1d53397b2ec9c62005518633a47dde8d354aa8f88f6dcd350",
    "sha384WithRSAEncryption": "8804834cd00d6a72562fe06665f773724a532fc592beb4c1d53397b2ec9c62005518633a47dde8d354aa8f88f6dcd350",
    "sha512": "0483e42546dcdd8c225a87308a3b42b4a74a1d0d0c1d5771debea9465483bc04ca267c9203fbcc5ec668ac1de37e77ecc880a78e79f2a618b877f39d42161fa2",
    "sha512WithRSAEncryption": "0483e42546dcdd8c225a87308a3b42b4a74a1d0d0c1d5771debea9465483bc04ca267c9203fbcc5ec668ac1de37e77ecc880a78e79f2a618b877f39d42161fa2",
    "shaWithRSAEncryption": "67f756689cffcf9c2adb4086b758c36011e5ba48",
    "ssl2-md5": "ef0e93e8928f8bae1b216da8e661fc9b",
    "ssl3-md5": "ef0e93e8928f8bae1b216da8e661fc9b",
    "ssl3-sha1": "c23d083cd8820b57800a869f5f261d45e02dc55d",
    "whirlpool": "5c7de0ff9c5b999a4f8f09fa40f64ee484a10d4fbb424477cf9bb8b031a8767fd551cfba9e4e696e07d6dbe69c219d44f73df1b4cc1a8628505e8c50ac1e6182"
  },
  {
    "input": "8B//Af+A/8CAB/AAA/+AABgB//wA//wD//8Af8AD/8f/wAPw/4AAP/4AAA==",
    "DSA": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "DSA-SHA": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "DSA-SHA1": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "DSA-SHA1-old": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "RSA-MD4": "b434544fb31d15c812a6e9054dc98f20",
    "RSA-MD5": "c8da55117d7d4b7ee8ddc8dc4ba73aa6",
    "RSA-MDC2": "4f7bcedbb455634ff3ff6d86597cd6ff",
    "RSA-RIPEMD160": "3445a846455284bdb9f5e4d37bb56f67737eabf5",
    "RSA-SHA": "8b9a37d9d0bd0531b90c5d7769aa19ade36e9b03",
    "RSA-SHA1": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "RSA-SHA1-2": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "RSA-SHA224": "2e55bebe1a0768be92ccb1bf19715228bf007fe752c3b64ef6e3105d",
    "RSA-SHA256": "ac5bf3cad821e7ad8b2ed7bbfbaaa5e7abb30606afd8ed5d6a18a0d0eba343d3",
    "RSA-SHA384": "20621239e199ac6e251508c81d35b04a95765e6fb3599f43b041d54b05ead2d475401f72160e66f3d141d314ff2d7dfe",
    "RSA-SHA512": "be54942c8080777f4e33c0688c587d4178714357d67f0e285411a931d32fff84944d86c7d0a776034f3a5214e1471022e68fa2082c4c28110792c5d15fa5d998",
    "dsaEncryption": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "dsaWithSHA": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "dsaWithSHA1": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "dss1": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "ecdsa-with-SHA1": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "md4": "b434544fb31d15c812a6e9054dc98f20",
    "md4WithRSAEncryption": "b434544fb31d15c812a6e9054dc98f20",
    "md5": "c8da55117d7d4b7ee8ddc8dc4ba73aa6",
    "md5WithRSAEncryption": "c8da55117d7d4b7ee8ddc8dc4ba73aa6",
    "mdc2": "4f7bcedbb455634ff3ff6d86597cd6ff",
    "mdc2WithRSA": "4f7bcedbb455634ff3ff6d86597cd6ff",
    "ripemd": "3445a846455284bdb9f5e4d37bb56f67737eabf5",
    "ripemd160": "3445a846455284bdb9f5e4d37bb56f67737eabf5",
    "ripemd160WithRSA": "3445a846455284bdb9f5e4d37bb56f67737eabf5",
    "rmd160": "3445a846455284bdb9f5e4d37bb56f67737eabf5",
    "sha": "8b9a37d9d0bd0531b90c5d7769aa19ade36e9b03",
    "sha1": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "sha1WithRSAEncryption": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "sha224": "2e55bebe1a0768be92ccb1bf19715228bf007fe752c3b64ef6e3105d",
    "sha224WithRSAEncryption": "2e55bebe1a0768be92ccb1bf19715228bf007fe752c3b64ef6e3105d",
    "sha256": "ac5bf3cad821e7ad8b2ed7bbfbaaa5e7abb30606afd8ed5d6a18a0d0eba343d3",
    "sha256WithRSAEncryption": "ac5bf3cad821e7ad8b2ed7bbfbaaa5e7abb30606afd8ed5d6a18a0d0eba343d3",
    "sha384": "20621239e199ac6e251508c81d35b04a95765e6fb3599f43b041d54b05ead2d475401f72160e66f3d141d314ff2d7dfe",
    "sha384WithRSAEncryption": "20621239e199ac6e251508c81d35b04a95765e6fb3599f43b041d54b05ead2d475401f72160e66f3d141d314ff2d7dfe",
    "sha512": "be54942c8080777f4e33c0688c587d4178714357d67f0e285411a931d32fff84944d86c7d0a776034f3a5214e1471022e68fa2082c4c28110792c5d15fa5d998",
    "sha512WithRSAEncryption": "be54942c8080777f4e33c0688c587d4178714357d67f0e285411a931d32fff84944d86c7d0a776034f3a5214e1471022e68fa2082c4c28110792c5d15fa5d998",
    "shaWithRSAEncryption": "8b9a37d9d0bd0531b90c5d7769aa19ade36e9b03",
    "ssl2-md5": "c8da55117d7d4b7ee8ddc8dc4ba73aa6",
    "ssl3-md5": "c8da55117d7d4b7ee8ddc8dc4ba73aa6",
    "ssl3-sha1": "e8ac31927b78ddec41a31ca7a44eb7177165e7ab",
    "whirlpool": "6bc314e4db88fa3c8f923320f24a8c459a58bd669e6474f580c8a638436303b43e838bf5248edf2979c9d3bc0762a597944728eef3bb908e05f90b5da181f5e9"
  },
  {
    "input": "B/G//+AAeAAH4ACAA/A/9wAAOAD+APgP/gAAgD//wf/8AP//j/AAH//wD/8=",
    "DSA": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "DSA-SHA": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "DSA-SHA1": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "DSA-SHA1-old": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "RSA-MD4": "713d489c36a2ec53e7e5cb4af3b9a09d",
    "RSA-MD5": "bbfc64583c6d4c2ef4b0358464d4d028",
    "RSA-MDC2": "b6b0041f6e193bfbfc19c4553d83759a",
    "RSA-RIPEMD160": "974c96fe4fc1f87b6569fd80b1775d080b97a846",
    "RSA-SHA": "566a4a030d4f1521807a488af917cf7f1a746cc1",
    "RSA-SHA1": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "RSA-SHA1-2": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "RSA-SHA224": "6d25a9ec7a2b6e5109de8bc8c8493a548ca7b3225f5251cada60bfaa",
    "RSA-SHA256": "f7995f433d17bee25f44c918de82eb147b3bfef24045ff8fb17ffedf559e06b7",
    "RSA-SHA384": "eb99b466448ea1dab0d57fe1ecc7f06e9c0186e7714e9ff40408bc9a0ddb68405bb748c9d9a7dc37dca4b012bc60f877",
    "RSA-SHA512": "a0e78554a722cca6d512903028d8aa121cd77df3e0779cd0941ade5cbc6080d7e69d0a78e266c7e30505397fa06e7c5b58addcefe12be21fdc8c29075dd3e85c",
    "dsaEncryption": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "dsaWithSHA": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "dsaWithSHA1": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "dss1": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "ecdsa-with-SHA1": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "md4": "713d489c36a2ec53e7e5cb4af3b9a09d",
    "md4WithRSAEncryption": "713d489c36a2ec53e7e5cb4af3b9a09d",
    "md5": "bbfc64583c6d4c2ef4b0358464d4d028",
    "md5WithRSAEncryption": "bbfc64583c6d4c2ef4b0358464d4d028",
    "mdc2": "b6b0041f6e193bfbfc19c4553d83759a",
    "mdc2WithRSA": "b6b0041f6e193bfbfc19c4553d83759a",
    "ripemd": "974c96fe4fc1f87b6569fd80b1775d080b97a846",
    "ripemd160": "974c96fe4fc1f87b6569fd80b1775d080b97a846",
    "ripemd160WithRSA": "974c96fe4fc1f87b6569fd80b1775d080b97a846",
    "rmd160": "974c96fe4fc1f87b6569fd80b1775d080b97a846",
    "sha": "566a4a030d4f1521807a488af917cf7f1a746cc1",
    "sha1": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "sha1WithRSAEncryption": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "sha224": "6d25a9ec7a2b6e5109de8bc8c8493a548ca7b3225f5251cada60bfaa",
    "sha224WithRSAEncryption": "6d25a9ec7a2b6e5109de8bc8c8493a548ca7b3225f5251cada60bfaa",
    "sha256": "f7995f433d17bee25f44c918de82eb147b3bfef24045ff8fb17ffedf559e06b7",
    "sha256WithRSAEncryption": "f7995f433d17bee25f44c918de82eb147b3bfef24045ff8fb17ffedf559e06b7",
    "sha384": "eb99b466448ea1dab0d57fe1ecc7f06e9c0186e7714e9ff40408bc9a0ddb68405bb748c9d9a7dc37dca4b012bc60f877",
    "sha384WithRSAEncryption": "eb99b466448ea1dab0d57fe1ecc7f06e9c0186e7714e9ff40408bc9a0ddb68405bb748c9d9a7dc37dca4b012bc60f877",
    "sha512": "a0e78554a722cca6d512903028d8aa121cd77df3e0779cd0941ade5cbc6080d7e69d0a78e266c7e30505397fa06e7c5b58addcefe12be21fdc8c29075dd3e85c",
    "sha512WithRSAEncryption": "a0e78554a722cca6d512903028d8aa121cd77df3e0779cd0941ade5cbc6080d7e69d0a78e266c7e30505397fa06e7c5b58addcefe12be21fdc8c29075dd3e85c",
    "shaWithRSAEncryption": "566a4a030d4f1521807a488af917cf7f1a746cc1",
    "ssl2-md5": "bbfc64583c6d4c2ef4b0358464d4d028",
    "ssl3-md5": "bbfc64583c6d4c2ef4b0358464d4d028",
    "ssl3-sha1": "e864ec5dbab0f9ff6984ab6ad43a8c9b81cc9f9c",
    "whirlpool": "29159b483e6dcf789ad10f8b987e97f77b87a25c0568ccbad296a2a9e7a0d0aa6fab2b16d29e6e3f4c3a4b41a92150ccaf0383bc0cc42ffd46a2337179f4224c"
  },
  {
    "input": "ABwAB//8AF4//wAAPP//wD//geBwAB/8AAP/AAB//8AfjA//8P+AB+AQAf//",
    "DSA": "cfed6269069417a84d6de2347220f4b858bcd530",
    "DSA-SHA": "cfed6269069417a84d6de2347220f4b858bcd530",
    "DSA-SHA1": "cfed6269069417a84d6de2347220f4b858bcd530",
    "DSA-SHA1-old": "cfed6269069417a84d6de2347220f4b858bcd530",
    "RSA-MD4": "5c42e24437efcffd5406bc89c5b82aa0",
    "RSA-MD5": "3bb5864481f2e66387419dd1a168aadc",
    "RSA-MDC2": "c6de7db6f61e67313a0bc57bd7abfbfa",
    "RSA-RIPEMD160": "523ad1f31d1f05b7ab9e325100f4724cfb0b8bee",
    "RSA-SHA": "76bc5714d21939afaaaa4426a0308665f7714507",
    "RSA-SHA1": "cfed6269069417a84d6de2347220f4b858bcd530",
    "RSA-SHA1-2": "cfed6269069417a84d6de2347220f4b858bcd530",
    "RSA-SHA224": "9837a1f4ec3839168846c831ea67d236324d690a5cdc015717399b35",
    "RSA-SHA256": "2c465ddc53e88894a2279e30b9e6feb064c66b15dcf5a38722f5c92d65a84bab",
    "RSA-SHA384": "9115154861977a5037522e48500a0f2c1c06b7e686ff256d8b3e60cd3e061f112c0667745d48e3b7c71e22a068799737",
    "RSA-SHA512": "cb370c694eac9caa723acc2f76a91db5f2b25a2d4d420cb36ab7cb39a82e63e474073c84de3789d4342383f85acc4444c0e971c47a4224751a39b5a5aa110eaf",
    "dsaEncryption": "cfed6269069417a84d6de2347220f4b858bcd530",
    "dsaWithSHA": "cfed6269069417a84d6de2347220f4b858bcd530",
    "dsaWithSHA1": "cfed6269069417a84d6de2347220f4b858bcd530",
    "dss1": "cfed6269069417a84d6de2347220f4b858bcd530",
    "ecdsa-with-SHA1": "cfed6269069417a84d6de2347220f4b858bcd530",
    "md4": "5c42e24437efcffd5406bc89c5b82aa0",
    "md4WithRSAEncryption": "5c42e24437efcffd5406bc89c5b82aa0",
    "md5": "3bb5864481f2e66387419dd1a168aadc",
    "md5WithRSAEncryption": "3bb5864481f2e66387419dd1a168aadc",
    "mdc2": "c6de7db6f61e67313a0bc57bd7abfbfa",
    "mdc2WithRSA": "c6de7db6f61e67313a0bc57bd7abfbfa",
    "ripemd": "523ad1f31d1f05b7ab9e325100f4724cfb0b8bee",
    "ripemd160": "523ad1f31d1f05b7ab9e325100f4724cfb0b8bee",
    "ripemd160WithRSA": "523ad1f31d1f05b7ab9e325100f4724cfb0b8bee",
    "rmd160": "523ad1f31d1f05b7ab9e325100f4724cfb0b8bee",
    "sha": "76bc5714d21939afaaaa4426a0308665f7714507",
    "sha1": "cfed6269069417a84d6de2347220f4b858bcd530",
    "sha1WithRSAEncryption": "cfed6269069417a84d6de2347220f4b858bcd530",
    "sha224": "9837a1f4ec3839168846c831ea67d236324d690a5cdc015717399b35",
    "sha224WithRSAEncryption": "9837a1f4ec3839168846c831ea67d236324d690a5cdc015717399b35",
    "sha256": "2c465ddc53e88894a2279e30b9e6feb064c66b15dcf5a38722f5c92d65a84bab",
    "sha256WithRSAEncryption": "2c465ddc53e88894a2279e30b9e6feb064c66b15dcf5a38722f5c92d65a84bab",
    "sha384": "9115154861977a5037522e48500a0f2c1c06b7e686ff256d8b3e60cd3e061f112c0667745d48e3b7c71e22a068799737",
    "sha384WithRSAEncryption": "9115154861977a5037522e48500a0f2c1c06b7e686ff256d8b3e60cd3e061f112c0667745d48e3b7c71e22a068799737",
    "sha512": "cb370c694eac9caa723acc2f76a91db5f2b25a2d4d420cb36ab7cb39a82e63e474073c84de3789d4342383f85acc4444c0e971c47a4224751a39b5a5aa110eaf",
    "sha512WithRSAEncryption": "cb370c694eac9caa723acc2f76a91db5f2b25a2d4d420cb36ab7cb39a82e63e474073c84de3789d4342383f85acc4444c0e971c47a4224751a39b5a5aa110eaf",
    "shaWithRSAEncryption": "76bc5714d21939afaaaa4426a0308665f7714507",
    "ssl2-md5": "3bb5864481f2e66387419dd1a168aadc",
    "ssl3-md5": "3bb5864481f2e66387419dd1a168aadc",
    "ssl3-sha1": "cfed6269069417a84d6de2347220f4b858bcd530",
    "whirlpool": "614147a0939ba02b31c06cbee6ab0baebb7c3579bdb70970f5b6730a7d11f30e2cdde19173859498f050e4fa98885f7d4877b5d372d1df24da4e38189d5ddc41"
  },
  {
    "input": "wAAH/4B//4ABgD//z8D+AP/AH/wB//gA//4P//AGAADAP/+AeP/8AA//8AAP/w==",
    "DSA": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "DSA-SHA": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "DSA-SHA1": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "DSA-SHA1-old": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "RSA-MD4": "f0485af8f735a5c94e7e001d06210720",
    "RSA-MD5": "0d725d3a1d3d97d7b5ea8293bbbf32ba",
    "RSA-MDC2": "5588486752845dd18cb5cf1445461897",
    "RSA-RIPEMD160": "0effbcc6b9b139147aab04a6bd20714ae3c083e2",
    "RSA-SHA": "229d3ecb95d0be7aee5b50dc0148d12759ca0932",
    "RSA-SHA1": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "RSA-SHA1-2": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "RSA-SHA224": "d2dced3f0af5bf576f1d7b0394c2727565e39c90de529e69fbc813e1",
    "RSA-SHA256": "b0ced82dc52c4f9b1dec098a80a23a4a711f3a8c9c3684f0761b0e8a29ba560a",
    "RSA-SHA384": "30b69da62b0af120e461b7b827abdc92154cd7568363c0c94d24f03f4e55e76b4e7eac436c31697512d347a4b72d3abe",
    "RSA-SHA512": "b1be6bc2581e06b40dd711119535f92f5a1f7b4b5752b519203859f3c15817c91b44a2c99949f22f026c2d34463e794ad556bc59593814289c5651a61613847d",
    "dsaEncryption": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "dsaWithSHA": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "dsaWithSHA1": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "dss1": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "ecdsa-with-SHA1": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "md4": "f0485af8f735a5c94e7e001d06210720",
    "md4WithRSAEncryption": "f0485af8f735a5c94e7e001d06210720",
    "md5": "0d725d3a1d3d97d7b5ea8293bbbf32ba",
    "md5WithRSAEncryption": "0d725d3a1d3d97d7b5ea8293bbbf32ba",
    "mdc2": "5588486752845dd18cb5cf1445461897",
    "mdc2WithRSA": "5588486752845dd18cb5cf1445461897",
    "ripemd": "0effbcc6b9b139147aab04a6bd20714ae3c083e2",
    "ripemd160": "0effbcc6b9b139147aab04a6bd20714ae3c083e2",
    "ripemd160WithRSA": "0effbcc6b9b139147aab04a6bd20714ae3c083e2",
    "rmd160": "0effbcc6b9b139147aab04a6bd20714ae3c083e2",
    "sha": "229d3ecb95d0be7aee5b50dc0148d12759ca0932",
    "sha1": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "sha1WithRSAEncryption": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "sha224": "d2dced3f0af5bf576f1d7b0394c2727565e39c90de529e69fbc813e1",
    "sha224WithRSAEncryption": "d2dced3f0af5bf576f1d7b0394c2727565e39c90de529e69fbc813e1",
    "sha256": "b0ced82dc52c4f9b1dec098a80a23a4a711f3a8c9c3684f0761b0e8a29ba560a",
    "sha256WithRSAEncryption": "b0ced82dc52c4f9b1dec098a80a23a4a711f3a8c9c3684f0761b0e8a29ba560a",
    "sha384": "30b69da62b0af120e461b7b827abdc92154cd7568363c0c94d24f03f4e55e76b4e7eac436c31697512d347a4b72d3abe",
    "sha384WithRSAEncryption": "30b69da62b0af120e461b7b827abdc92154cd7568363c0c94d24f03f4e55e76b4e7eac436c31697512d347a4b72d3abe",
    "sha512": "b1be6bc2581e06b40dd711119535f92f5a1f7b4b5752b519203859f3c15817c91b44a2c99949f22f026c2d34463e794ad556bc59593814289c5651a61613847d",
    "sha512WithRSAEncryption": "b1be6bc2581e06b40dd711119535f92f5a1f7b4b5752b519203859f3c15817c91b44a2c99949f22f026c2d34463e794ad556bc59593814289c5651a61613847d",
    "shaWithRSAEncryption": "229d3ecb95d0be7aee5b50dc0148d12759ca0932",
    "ssl2-md5": "0d725d3a1d3d97d7b5ea8293bbbf32ba",
    "ssl3-md5": "0d725d3a1d3d97d7b5ea8293bbbf32ba",
    "ssl3-sha1": "d9217bfb46c96348722c3783d29d4b1a3feda38c",
    "whirlpool": "ee6135d957b324cb10b73564a44c8a66d6dfb67a5abfe60ba73e470a9b1f27559bf567c6e0b0f45a760522987fc668806d441afe81bff537e4b77d7ef44891bb"
  },
  {
    "input": "/+AH//gAf/Af/4AB//gf+AED/+AAA+B4D/8AD/wf+AAP/+AfAAf//AAfA//3//8=",
    "DSA": "dec24e5554f79697218d317315fa986229ce3350",
    "DSA-SHA": "dec24e5554f79697218d317315fa986229ce3350",
    "DSA-SHA1": "dec24e5554f79697218d317315fa986229ce3350",
    "DSA-SHA1-old": "dec24e5554f79697218d317315fa986229ce3350",
    "RSA-MD4": "de028feab66bca025dc9996b35bd6030",
    "RSA-MD5": "915eb22a15f7673f983672b6c353b6c8",
    "RSA-MDC2": "917669574ca879f2454f6fb7a750108f",
    "RSA-RIPEMD160": "b1ed395efe6d7ab5fa6601382e2761235353efef",
    "RSA-SHA": "a3d0722ed6ac1c1605a5440d07b1014728f242b7",
    "RSA-SHA1": "dec24e5554f79697218d317315fa986229ce3350",
    "RSA-SHA1-2": "dec24e5554f79697218d317315fa986229ce3350",
    "RSA-SHA224": "f7efbd83d2006d973aee86c7216c659ece1337279fe5dfccc2488de6",
    "RSA-SHA256": "f8dce75572495bc241288c07246acf7a157d462a9c01d1491618f073e57f47e2",
    "RSA-SHA384": "5a141d9111b80d154332907a96181361c37d224f33bc78b43a3653271e03568b2536a0088282bbc5e88318010174f702",
    "RSA-SHA512": "688c2c2e28b3eef624ad1f6d47e13d9a73f9a59b5de509a6f56d2c2575fa80919d51fd9e5832ebc3ef680b7e3573c88e1f95cbca73afbfe4f2004a7887e710e0",
    "dsaEncryption": "dec24e5554f79697218d317315fa986229ce3350",
    "dsaWithSHA": "dec24e5554f79697218d317315fa986229ce3350",
    "dsaWithSHA1": "dec24e5554f79697218d317315fa986229ce3350",
    "dss1": "dec24e5554f79697218d317315fa986229ce3350",
    "ecdsa-with-SHA1": "dec24e5554f79697218d317315fa986229ce3350",
    "md4": "de028feab66bca025dc9996b35bd6030",
    "md4WithRSAEncryption": "de028feab66bca025dc9996b35bd6030",
    "md5": "915eb22a15f7673f983672b6c353b6c8",
    "md5WithRSAEncryption": "915eb22a15f7673f983672b6c353b6c8",
    "mdc2": "917669574ca879f2454f6fb7a750108f",
    "mdc2WithRSA": "917669574ca879f2454f6fb7a750108f",
    "ripemd": "b1ed395efe6d7ab5fa6601382e2761235353efef",
    "ripemd160": "b1ed395efe6d7ab5fa6601382e2761235353efef",
    "ripemd160WithRSA": "b1ed395efe6d7ab5fa6601382e2761235353efef",
    "rmd160": "b1ed395efe6d7ab5fa6601382e2761235353efef",
    "sha": "a3d0722ed6ac1c1605a5440d07b1014728f242b7",
    "sha1": "dec24e5554f79697218d317315fa986229ce3350",
    "sha1WithRSAEncryption": "dec24e5554f79697218d317315fa986229ce3350",
    "sha224": "f7efbd83d2006d973aee86c7216c659ece1337279fe5dfccc2488de6",
    "sha224WithRSAEncryption": "f7efbd83d2006d973aee86c7216c659ece1337279fe5dfccc2488de6",
    "sha256": "f8dce75572495bc241288c07246acf7a157d462a9c01d1491618f073e57f47e2",
    "sha256WithRSAEncryption": "f8dce75572495bc241288c07246acf7a157d462a9c01d1491618f073e57f47e2",
    "sha384": "5a141d9111b80d154332907a96181361c37d224f33bc78b43a3653271e03568b2536a0088282bbc5e88318010174f702",
    "sha384WithRSAEncryption": "5a141d9111b80d154332907a96181361c37d224f33bc78b43a3653271e03568b2536a0088282bbc5e88318010174f702",
    "sha512": "688c2c2e28b3eef624ad1f6d47e13d9a73f9a59b5de509a6f56d2c2575fa80919d51fd9e5832ebc3ef680b7e3573c88e1f95cbca73afbfe4f2004a7887e710e0",
    "sha512WithRSAEncryption": "688c2c2e28b3eef624ad1f6d47e13d9a73f9a59b5de509a6f56d2c2575fa80919d51fd9e5832ebc3ef680b7e3573c88e1f95cbca73afbfe4f2004a7887e710e0",
    "shaWithRSAEncryption": "a3d0722ed6ac1c1605a5440d07b1014728f242b7",
    "ssl2-md5": "915eb22a15f7673f983672b6c353b6c8",
    "ssl3-md5": "915eb22a15f7673f983672b6c353b6c8",
    "ssl3-sha1": "dec24e5554f79697218d317315fa986229ce3350",
    "whirlpool": "d53970e94fac8419fcd8463bff58253f2ee6f7f9175977d9fd7ff7c735b582eff88b009eedf2f936829021fda9f0c300cc843489f9ff749d3c6e2a104736de71"
  },
  {
    "input": "wPgAA/4AP//wAAP8D/+AAOP/+D/+AABz4P/8B//D//4DAABwAAP/+A//4AAf//gA",
    "DSA": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "DSA-SHA": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "DSA-SHA1": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "DSA-SHA1-old": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "RSA-MD4": "306a941663a185bd3482a37cf0d86568",
    "RSA-MD5": "13b51da3e8a1422bfd58b79c4e19de64",
    "RSA-MDC2": "21047acb0d86cb869859664cac98d108",
    "RSA-RIPEMD160": "24728a16a52263b0616a8ab603d7c6ec0cba5691",
    "RSA-SHA": "3cba9d5585b357445922e48d2bb1a420f08ecc80",
    "RSA-SHA1": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "RSA-SHA1-2": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "RSA-SHA224": "4ec77dbcbf0669631f3172260c1471d481568b2cdd6af5e61137ede2",
    "RSA-SHA256": "46d89d780f178334d19e02c41d5af2e265e2190896dce94822b99c19adc3ff6f",
    "RSA-SHA384": "147769479a780330d2ac69f5809ce6e186708a88409575719b3199e824907160f963899466cdd5ce52ad2b1cf1c3caa9",
    "RSA-SHA512": "1bed6b7e19942b514d17b1c5a112a23f923e458a01bb58a6291664353df37f734accd54477c68311a86e7f1dcd98df4f1fd05271d2880203932ce7cfddff71fa",
    "dsaEncryption": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "dsaWithSHA": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "dsaWithSHA1": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "dss1": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "ecdsa-with-SHA1": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "md4": "306a941663a185bd3482a37cf0d86568",
    "md4WithRSAEncryption": "306a941663a185bd3482a37cf0d86568",
    "md5": "13b51da3e8a1422bfd58b79c4e19de64",
    "md5WithRSAEncryption": "13b51da3e8a1422bfd58b79c4e19de64",
    "mdc2": "21047acb0d86cb869859664cac98d108",
    "mdc2WithRSA": "21047acb0d86cb869859664cac98d108",
    "ripemd": "24728a16a52263b0616a8ab603d7c6ec0cba5691",
    "ripemd160": "24728a16a52263b0616a8ab603d7c6ec0cba5691",
    "ripemd160WithRSA": "24728a16a52263b0616a8ab603d7c6ec0cba5691",
    "rmd160": "24728a16a52263b0616a8ab603d7c6ec0cba5691",
    "sha": "3cba9d5585b357445922e48d2bb1a420f08ecc80",
    "sha1": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "sha1WithRSAEncryption": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "sha224": "4ec77dbcbf0669631f3172260c1471d481568b2cdd6af5e61137ede2",
    "sha224WithRSAEncryption": "4ec77dbcbf0669631f3172260c1471d481568b2cdd6af5e61137ede2",
    "sha256": "46d89d780f178334d19e02c41d5af2e265e2190896dce94822b99c19adc3ff6f",
    "sha256WithRSAEncryption": "46d89d780f178334d19e02c41d5af2e265e2190896dce94822b99c19adc3ff6f",
    "sha384": "147769479a780330d2ac69f5809ce6e186708a88409575719b3199e824907160f963899466cdd5ce52ad2b1cf1c3caa9",
    "sha384WithRSAEncryption": "147769479a780330d2ac69f5809ce6e186708a88409575719b3199e824907160f963899466cdd5ce52ad2b1cf1c3caa9",
    "sha512": "1bed6b7e19942b514d17b1c5a112a23f923e458a01bb58a6291664353df37f734accd54477c68311a86e7f1dcd98df4f1fd05271d2880203932ce7cfddff71fa",
    "sha512WithRSAEncryption": "1bed6b7e19942b514d17b1c5a112a23f923e458a01bb58a6291664353df37f734accd54477c68311a86e7f1dcd98df4f1fd05271d2880203932ce7cfddff71fa",
    "shaWithRSAEncryption": "3cba9d5585b357445922e48d2bb1a420f08ecc80",
    "ssl2-md5": "13b51da3e8a1422bfd58b79c4e19de64",
    "ssl3-md5": "13b51da3e8a1422bfd58b79c4e19de64",
    "ssl3-sha1": "83a099df7071437ba5495a5b0bfbfefe1c0ef7f3",
    "whirlpool": "7fd471d6e22521a579ed72261365db54039bb0d18fdc672d3d8bb895632dc04393603f2cdbf7c225ad2050e1b678d16570cc34665e7b29eb1ab3c33bb844438e"
  },
  {
    "input": "//APx//8AD/+AAA//4A/gAA//8AAcAH/wYAD//+AAGH//gP9gD//4AHB//+AAA/+AA==",
    "DSA": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "DSA-SHA": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "DSA-SHA1": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "DSA-SHA1-old": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "RSA-MD4": "d63a1d45416e9bc2dd98a3f768e0d54e",
    "RSA-MD5": "e69d6c03102464f22c395f9fa27108de",
    "RSA-MDC2": "da22a29bc9432f956dc29c65dbc376a8",
    "RSA-RIPEMD160": "0b18eb58350d3957f2ca38bed26729169bbbeed8",
    "RSA-SHA": "ab21532477066ad3548d278de9edf1f5c17a3150",
    "RSA-SHA1": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "RSA-SHA1-2": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "RSA-SHA224": "ce38ac38319dda989edc725269f421ba2ddbd26795214dd5d3aeb080",
    "RSA-SHA256": "968954bafff8e2a118d3aedffc6283b30efddbac0af2245195c2a32a665a5d54",
    "RSA-SHA384": "ba265d256884a9c993e2fd91333e945b3f7c000580f3bd66eb25679688f4ea48a2ca6dff1733c88dcf883e1cc7ec3618",
    "RSA-SHA512": "3d8a970a249b71233b9a25f7109d5a99f62c4bcb11c47bc72d26dd46ad853ff682b8e1abb7053b4401461681a86d6f22bca4ce9420cab97c77f601f2463de7af",
    "dsaEncryption": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "dsaWithSHA": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "dsaWithSHA1": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "dss1": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "ecdsa-with-SHA1": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "md4": "d63a1d45416e9bc2dd98a3f768e0d54e",
    "md4WithRSAEncryption": "d63a1d45416e9bc2dd98a3f768e0d54e",
    "md5": "e69d6c03102464f22c395f9fa27108de",
    "md5WithRSAEncryption": "e69d6c03102464f22c395f9fa27108de",
    "mdc2": "da22a29bc9432f956dc29c65dbc376a8",
    "mdc2WithRSA": "da22a29bc9432f956dc29c65dbc376a8",
    "ripemd": "0b18eb58350d3957f2ca38bed26729169bbbeed8",
    "ripemd160": "0b18eb58350d3957f2ca38bed26729169bbbeed8",
    "ripemd160WithRSA": "0b18eb58350d3957f2ca38bed26729169bbbeed8",
    "rmd160": "0b18eb58350d3957f2ca38bed26729169bbbeed8",
    "sha": "ab21532477066ad3548d278de9edf1f5c17a3150",
    "sha1": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "sha1WithRSAEncryption": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "sha224": "ce38ac38319dda989edc725269f421ba2ddbd26795214dd5d3aeb080",
    "sha224WithRSAEncryption": "ce38ac38319dda989edc725269f421ba2ddbd26795214dd5d3aeb080",
    "sha256": "968954bafff8e2a118d3aedffc6283b30efddbac0af2245195c2a32a665a5d54",
    "sha256WithRSAEncryption": "968954bafff8e2a118d3aedffc6283b30efddbac0af2245195c2a32a665a5d54",
    "sha384": "ba265d256884a9c993e2fd91333e945b3f7c000580f3bd66eb25679688f4ea48a2ca6dff1733c88dcf883e1cc7ec3618",
    "sha384WithRSAEncryption": "ba265d256884a9c993e2fd91333e945b3f7c000580f3bd66eb25679688f4ea48a2ca6dff1733c88dcf883e1cc7ec3618",
    "sha512": "3d8a970a249b71233b9a25f7109d5a99f62c4bcb11c47bc72d26dd46ad853ff682b8e1abb7053b4401461681a86d6f22bca4ce9420cab97c77f601f2463de7af",
    "sha512WithRSAEncryption": "3d8a970a249b71233b9a25f7109d5a99f62c4bcb11c47bc72d26dd46ad853ff682b8e1abb7053b4401461681a86d6f22bca4ce9420cab97c77f601f2463de7af",
    "shaWithRSAEncryption": "ab21532477066ad3548d278de9edf1f5c17a3150",
    "ssl2-md5": "e69d6c03102464f22c395f9fa27108de",
    "ssl3-md5": "e69d6c03102464f22c395f9fa27108de",
    "ssl3-sha1": "aa3198e30891a83e33ce3bfa0587d86a197d4f80",
    "whirlpool": "8804b40b22369a7c19c9d939d922a277b08fe02f413b4128f49e2fa26d8ff70682b85ba3b81b84798c8182639dbc8b6dec96046c3118dffe2c0480e5e94f5362"
  },
  {
    "input": "//wAA//wD/gAB9+P//gAAf/+AIAA/4Af8AABHAAAP/gAP//v//4Bw4CAAf//wAAH//8=",
    "DSA": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "DSA-SHA": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "DSA-SHA1": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "DSA-SHA1-old": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "RSA-MD4": "1fc86868e1bd9332c786acff7e798aca",
    "RSA-MD5": "132fa4cbedaa7bd965b0b5900211be48",
    "RSA-MDC2": "f263caa22e6eea99d7355ae78738801f",
    "RSA-RIPEMD160": "c76b4437ff109a4fde3cd3ce6cc5306e8cb5fc4c",
    "RSA-SHA": "b63b8fd589118e7d7837e28147a76674692e30f0",
    "RSA-SHA1": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "RSA-SHA1-2": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "RSA-SHA224": "75e0d9316456c0229b8fda801e5cc052e5cd14d945d11e95b01a7098",
    "RSA-SHA256": "33f78a8a6adc466fed41020fa799aa537cc1c1bb4e938c06a1baec97f7b3c26c",
    "RSA-SHA384": "88f7b78dfb4c9ffedea5c00a25722fe7c2bb559a7065c2a097a7d51548ce7937fa2360b16fa915b1d29393cf99fb2fdc",
    "RSA-SHA512": "c618b2550d72c4ba8940c0c38f69d385f1439fd99a5f4b811a3939fdfeaff80490576f1557dc0ec354a2788ecc84220f56dc59ce8b3089312ea180a0d5d26d92",
    "dsaEncryption": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "dsaWithSHA": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "dsaWithSHA1": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "dss1": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "ecdsa-with-SHA1": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "md4": "1fc86868e1bd9332c786acff7e798aca",
    "md4WithRSAEncryption": "1fc86868e1bd9332c786acff7e798aca",
    "md5": "132fa4cbedaa7bd965b0b5900211be48",
    "md5WithRSAEncryption": "132fa4cbedaa7bd965b0b5900211be48",
    "mdc2": "f263caa22e6eea99d7355ae78738801f",
    "mdc2WithRSA": "f263caa22e6eea99d7355ae78738801f",
    "ripemd": "c76b4437ff109a4fde3cd3ce6cc5306e8cb5fc4c",
    "ripemd160": "c76b4437ff109a4fde3cd3ce6cc5306e8cb5fc4c",
    "ripemd160WithRSA": "c76b4437ff109a4fde3cd3ce6cc5306e8cb5fc4c",
    "rmd160": "c76b4437ff109a4fde3cd3ce6cc5306e8cb5fc4c",
    "sha": "b63b8fd589118e7d7837e28147a76674692e30f0",
    "sha1": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "sha1WithRSAEncryption": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "sha224": "75e0d9316456c0229b8fda801e5cc052e5cd14d945d11e95b01a7098",
    "sha224WithRSAEncryption": "75e0d9316456c0229b8fda801e5cc052e5cd14d945d11e95b01a7098",
    "sha256": "33f78a8a6adc466fed41020fa799aa537cc1c1bb4e938c06a1baec97f7b3c26c",
    "sha256WithRSAEncryption": "33f78a8a6adc466fed41020fa799aa537cc1c1bb4e938c06a1baec97f7b3c26c",
    "sha384": "88f7b78dfb4c9ffedea5c00a25722fe7c2bb559a7065c2a097a7d51548ce7937fa2360b16fa915b1d29393cf99fb2fdc",
    "sha384WithRSAEncryption": "88f7b78dfb4c9ffedea5c00a25722fe7c2bb559a7065c2a097a7d51548ce7937fa2360b16fa915b1d29393cf99fb2fdc",
    "sha512": "c618b2550d72c4ba8940c0c38f69d385f1439fd99a5f4b811a3939fdfeaff80490576f1557dc0ec354a2788ecc84220f56dc59ce8b3089312ea180a0d5d26d92",
    "sha512WithRSAEncryption": "c618b2550d72c4ba8940c0c38f69d385f1439fd99a5f4b811a3939fdfeaff80490576f1557dc0ec354a2788ecc84220f56dc59ce8b3089312ea180a0d5d26d92",
    "shaWithRSAEncryption": "b63b8fd589118e7d7837e28147a76674692e30f0",
    "ssl2-md5": "132fa4cbedaa7bd965b0b5900211be48",
    "ssl3-md5": "132fa4cbedaa7bd965b0b5900211be48",
    "ssl3-sha1": "9b6acbeb4989cbee7015c7d515a75672ffde3442",
    "whirlpool": "0d84d05eae2f05329353233049086f1a90f8c0d4eded775a09128b850c2e6d989814ff80ec9491165f45e3b931a1c187c772b331124c96e3016a3e0dd0c96617"
  },
  {
    "input": "///AAf/B//+H//8APwAAH/wAAf+AH8Af/wAA/4Af//h/+D//wf//4AHAP/f//vwAAD//",
    "DSA": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "DSA-SHA": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "DSA-SHA1": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "DSA-SHA1-old": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "RSA-MD4": "6b91b9f582fef43c0fa18698c08832a3",
    "RSA-MD5": "e37ff5d9f14249f327a19dd5296e6c7e",
    "RSA-MDC2": "51329f27074e4fc3a7b13a1729e1bbd7",
    "RSA-RIPEMD160": "07c4b5f0bee272fafa23386adda0a394d1c2a647",
    "RSA-SHA": "9063a2d6f269c4fcde986c0f4c0890dddabc540b",
    "RSA-SHA1": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "RSA-SHA1-2": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "RSA-SHA224": "efba845d974ccfde660112bbeb3b5e62de51778c2bb17f91f01bd54e",
    "RSA-SHA256": "5f7f49d1c307363de95d450b558275f8d5a6780ee47246268e6729f7733e535a",
    "RSA-SHA384": "4ed47f6aebb617c1780d595798d70f48648a974388e694bb5f466fcd2be9f33b4e9c3e276f3ebd6311eeffbb47a13aec",
    "RSA-SHA512": "6b8de48cc9108209f15be365ade22d3d2172aa2c742b255500153e5d8016af0ba64b403368fe3be84c39d9e1cb366d96bbccd0ebc91ba26baed8618c2d7afe51",
    "dsaEncryption": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "dsaWithSHA": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "dsaWithSHA1": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "dss1": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "ecdsa-with-SHA1": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "md4": "6b91b9f582fef43c0fa18698c08832a3",
    "md4WithRSAEncryption": "6b91b9f582fef43c0fa18698c08832a3",
    "md5": "e37ff5d9f14249f327a19dd5296e6c7e",
    "md5WithRSAEncryption": "e37ff5d9f14249f327a19dd5296e6c7e",
    "mdc2": "51329f27074e4fc3a7b13a1729e1bbd7",
    "mdc2WithRSA": "51329f27074e4fc3a7b13a1729e1bbd7",
    "ripemd": "07c4b5f0bee272fafa23386adda0a394d1c2a647",
    "ripemd160": "07c4b5f0bee272fafa23386adda0a394d1c2a647",
    "ripemd160WithRSA": "07c4b5f0bee272fafa23386adda0a394d1c2a647",
    "rmd160": "07c4b5f0bee272fafa23386adda0a394d1c2a647",
    "sha": "9063a2d6f269c4fcde986c0f4c0890dddabc540b",
    "sha1": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "sha1WithRSAEncryption": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "sha224": "efba845d974ccfde660112bbeb3b5e62de51778c2bb17f91f01bd54e",
    "sha224WithRSAEncryption": "efba845d974ccfde660112bbeb3b5e62de51778c2bb17f91f01bd54e",
    "sha256": "5f7f49d1c307363de95d450b558275f8d5a6780ee47246268e6729f7733e535a",
    "sha256WithRSAEncryption": "5f7f49d1c307363de95d450b558275f8d5a6780ee47246268e6729f7733e535a",
    "sha384": "4ed47f6aebb617c1780d595798d70f48648a974388e694bb5f466fcd2be9f33b4e9c3e276f3ebd6311eeffbb47a13aec",
    "sha384WithRSAEncryption": "4ed47f6aebb617c1780d595798d70f48648a974388e694bb5f466fcd2be9f33b4e9c3e276f3ebd6311eeffbb47a13aec",
    "sha512": "6b8de48cc9108209f15be365ade22d3d2172aa2c742b255500153e5d8016af0ba64b403368fe3be84c39d9e1cb366d96bbccd0ebc91ba26baed8618c2d7afe51",
    "sha512WithRSAEncryption": "6b8de48cc9108209f15be365ade22d3d2172aa2c742b255500153e5d8016af0ba64b403368fe3be84c39d9e1cb366d96bbccd0ebc91ba26baed8618c2d7afe51",
    "shaWithRSAEncryption": "9063a2d6f269c4fcde986c0f4c0890dddabc540b",
    "ssl2-md5": "e37ff5d9f14249f327a19dd5296e6c7e",
    "ssl3-md5": "e37ff5d9f14249f327a19dd5296e6c7e",
    "ssl3-sha1": "b021eb08a436b02658eaa7ba3c88d49f1219c035",
    "whirlpool": "670d7a10b52f22ffb2d50dba696c4469dfb210cb5c4ac9ae84631597cbbd725c3ca89c5ff51096e847a0b91d920c1af2b89483a7c707d05fa3c66c24b911d938"
  },
  {
    "input": "AP+B/+AD+A4AAP/4H//+AAD/gAAH//gB/+AAD/AB/gA/8H/gAH//4B///AH/4AGAAAf//w==",
    "DSA": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "DSA-SHA": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "DSA-SHA1": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "DSA-SHA1-old": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "RSA-MD4": "44ef779db3903ddb1c2f38819b533722",
    "RSA-MD5": "4881a65cf107b1d034ff3ecd64ab9cb4",
    "RSA-MDC2": "fcce8f0b15c34e9cd38b60672fc44c3d",
    "RSA-RIPEMD160": "268aa5b65d2b6807a2722666bd72df0ae48186c9",
    "RSA-SHA": "655ea421fd49e9ab3715036690e4b4c879a27fdf",
    "RSA-SHA1": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "RSA-SHA1-2": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "RSA-SHA224": "f36328dc33fe910741b8653998e3e921c8ff748812d499b14e020cec",
    "RSA-SHA256": "9f126c6e07ed2744cef5de1f468b2ed1c51a13ec3c8351935b9656458a3dc40f",
    "RSA-SHA384": "4f5d4dc54ffbf3dd96f0bfb94fa1a7ba8bc94135933be290008a232e3dd7d5d7c5cf198f7348e8406ea5ddf41465920c",
    "RSA-SHA512": "2fab3a562074e25cc68d89fd2e4fb2dff240c734391d244eb87e59f256318ebbb77ba1dd7de7a981ba43beefc37411c98e8e523ec3d4995a71cd4718c96a2dfc",
    "dsaEncryption": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "dsaWithSHA": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "dsaWithSHA1": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "dss1": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "ecdsa-with-SHA1": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "md4": "44ef779db3903ddb1c2f38819b533722",
    "md4WithRSAEncryption": "44ef779db3903ddb1c2f38819b533722",
    "md5": "4881a65cf107b1d034ff3ecd64ab9cb4",
    "md5WithRSAEncryption": "4881a65cf107b1d034ff3ecd64ab9cb4",
    "mdc2": "fcce8f0b15c34e9cd38b60672fc44c3d",
    "mdc2WithRSA": "fcce8f0b15c34e9cd38b60672fc44c3d",
    "ripemd": "268aa5b65d2b6807a2722666bd72df0ae48186c9",
    "ripemd160": "268aa5b65d2b6807a2722666bd72df0ae48186c9",
    "ripemd160WithRSA": "268aa5b65d2b6807a2722666bd72df0ae48186c9",
    "rmd160": "268aa5b65d2b6807a2722666bd72df0ae48186c9",
    "sha": "655ea421fd49e9ab3715036690e4b4c879a27fdf",
    "sha1": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "sha1WithRSAEncryption": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "sha224": "f36328dc33fe910741b8653998e3e921c8ff748812d499b14e020cec",
    "sha224WithRSAEncryption": "f36328dc33fe910741b8653998e3e921c8ff748812d499b14e020cec",
    "sha256": "9f126c6e07ed2744cef5de1f468b2ed1c51a13ec3c8351935b9656458a3dc40f",
    "sha256WithRSAEncryption": "9f126c6e07ed2744cef5de1f468b2ed1c51a13ec3c8351935b9656458a3dc40f",
    "sha384": "4f5d4dc54ffbf3dd96f0bfb94fa1a7ba8bc94135933be290008a232e3dd7d5d7c5cf198f7348e8406ea5ddf41465920c",
    "sha384WithRSAEncryption": "4f5d4dc54ffbf3dd96f0bfb94fa1a7ba8bc94135933be290008a232e3dd7d5d7c5cf198f7348e8406ea5ddf41465920c",
    "sha512": "2fab3a562074e25cc68d89fd2e4fb2dff240c734391d244eb87e59f256318ebbb77ba1dd7de7a981ba43beefc37411c98e8e523ec3d4995a71cd4718c96a2dfc",
    "sha512WithRSAEncryption": "2fab3a562074e25cc68d89fd2e4fb2dff240c734391d244eb87e59f256318ebbb77ba1dd7de7a981ba43beefc37411c98e8e523ec3d4995a71cd4718c96a2dfc",
    "shaWithRSAEncryption": "655ea421fd49e9ab3715036690e4b4c879a27fdf",
    "ssl2-md5": "4881a65cf107b1d034ff3ecd64ab9cb4",
    "ssl3-md5": "4881a65cf107b1d034ff3ecd64ab9cb4",
    "ssl3-sha1": "cae36dab8aea29f62e0855d9cb3cd8e7d39094b1",
    "whirlpool": "335ac5b2ea90395271b3d6438142429e2e4c07a36f9a506675d2a8ef167db700f63525b01563119eba76be7b626eb47679ddaeda75c958d281277d0151dcffa5"
  },
  {
    "input": "AA//8AAA4A/4AAD//4AD/+H//z/4D//H4AAf/wA//g//8AMAwAAf//w//+A///gf8AAf/8A=",
    "DSA": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "DSA-SHA": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "DSA-SHA1": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "DSA-SHA1-old": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "RSA-MD4": "4762a395499ddd1e729a3bd1208517ae",
    "RSA-MD5": "547e92d01c0b699cfdf43f91714cfe2d",
    "RSA-MDC2": "c402e4c555fbe1a00c9adf716e0fb517",
    "RSA-RIPEMD160": "3c748cdb3476c7ff1f4d88cf7f6568c77725b740",
    "RSA-SHA": "aa1a578a65d05a55d33ffffac48c68edffd9b520",
    "RSA-SHA1": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "RSA-SHA1-2": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "RSA-SHA224": "e86e0d8898c6ddd95842fdf9def5d6072786172ddc7dc52ae8d527da",
    "RSA-SHA256": "b8e3d23621cb02bcae060bdf5b6b7db1f024651f98ec63766c20b7883bc033d2",
    "RSA-SHA384": "de73f6dab881150f4747f0149e717e0e0c0b6b001d6abdb2b03536bc1a924b7afc272dbe706f80fd4b34415804b383e0",
    "RSA-SHA512": "95fcadd861b5b2cfd5a7af2696018a9f06090f40b1b1f5a27da12d6463aaf93461222d748412ae3ffed6a2dba87e5cd11acb0195d42e955c86a00ca87fc4c693",
    "dsaEncryption": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "dsaWithSHA": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "dsaWithSHA1": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "dss1": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "ecdsa-with-SHA1": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "md4": "4762a395499ddd1e729a3bd1208517ae",
    "md4WithRSAEncryption": "4762a395499ddd1e729a3bd1208517ae",
    "md5": "547e92d01c0b699cfdf43f91714cfe2d",
    "md5WithRSAEncryption": "547e92d01c0b699cfdf43f91714cfe2d",
    "mdc2": "c402e4c555fbe1a00c9adf716e0fb517",
    "mdc2WithRSA": "c402e4c555fbe1a00c9adf716e0fb517",
    "ripemd": "3c748cdb3476c7ff1f4d88cf7f6568c77725b740",
    "ripemd160": "3c748cdb3476c7ff1f4d88cf7f6568c77725b740",
    "ripemd160WithRSA": "3c748cdb3476c7ff1f4d88cf7f6568c77725b740",
    "rmd160": "3c748cdb3476c7ff1f4d88cf7f6568c77725b740",
    "sha": "aa1a578a65d05a55d33ffffac48c68edffd9b520",
    "sha1": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "sha1WithRSAEncryption": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "sha224": "e86e0d8898c6ddd95842fdf9def5d6072786172ddc7dc52ae8d527da",
    "sha224WithRSAEncryption": "e86e0d8898c6ddd95842fdf9def5d6072786172ddc7dc52ae8d527da",
    "sha256": "b8e3d23621cb02bcae060bdf5b6b7db1f024651f98ec63766c20b7883bc033d2",
    "sha256WithRSAEncryption": "b8e3d23621cb02bcae060bdf5b6b7db1f024651f98ec63766c20b7883bc033d2",
    "sha384": "de73f6dab881150f4747f0149e717e0e0c0b6b001d6abdb2b03536bc1a924b7afc272dbe706f80fd4b34415804b383e0",
    "sha384WithRSAEncryption": "de73f6dab881150f4747f0149e717e0e0c0b6b001d6abdb2b03536bc1a924b7afc272dbe706f80fd4b34415804b383e0",
    "sha512": "95fcadd861b5b2cfd5a7af2696018a9f06090f40b1b1f5a27da12d6463aaf93461222d748412ae3ffed6a2dba87e5cd11acb0195d42e955c86a00ca87fc4c693",
    "sha512WithRSAEncryption": "95fcadd861b5b2cfd5a7af2696018a9f06090f40b1b1f5a27da12d6463aaf93461222d748412ae3ffed6a2dba87e5cd11acb0195d42e955c86a00ca87fc4c693",
    "shaWithRSAEncryption": "aa1a578a65d05a55d33ffffac48c68edffd9b520",
    "ssl2-md5": "547e92d01c0b699cfdf43f91714cfe2d",
    "ssl3-md5": "547e92d01c0b699cfdf43f91714cfe2d",
    "ssl3-sha1": "02de8ba699f3c1b0cb5ad89a01f2346e630459d7",
    "whirlpool": "182dec14b9dd0ee66280bd625704c42f0f4dbaebf2d17ac0f3a7bc3406eea09b06f9150c9421bcc567d97bb214dbae3a5a9f3fdbdb119a6f7686730f763d7e59"
  },
  {
    "input": "AYAAHwH//4MAAfwAf+AOf/4AADgA/wAAP/+Dg//AAH//gB//8B///AADf/+BwAAH/4P//wAA",
    "DSA": "88021458847dd39b4495368f7254941859fad44b",
    "DSA-SHA": "88021458847dd39b4495368f7254941859fad44b",
    "DSA-SHA1": "88021458847dd39b4495368f7254941859fad44b",
    "DSA-SHA1-old": "88021458847dd39b4495368f7254941859fad44b",
    "RSA-MD4": "72d73f94bb5323d86d798936f6a40cf9",
    "RSA-MD5": "aa2b3a055b56845f19109f21d3c783f4",
    "RSA-MDC2": "63c5170472df4188fac595ec595597a3",
    "RSA-RIPEMD160": "4dca6e1616513df40e39c509bc66c90a83878a39",
    "RSA-SHA": "70c90e9d4ce54d224d213e7564da8226aca87e4b",
    "RSA-SHA1": "88021458847dd39b4495368f7254941859fad44b",
    "RSA-SHA1-2": "88021458847dd39b4495368f7254941859fad44b",
    "RSA-SHA224": "c64db67666ef33a901fbd0090eb74f068570b4602529eed11dcac13c",
    "RSA-SHA256": "689c608602d5e5d37a0285eeb5006d97addd7c2b8e006770fad588eff621c971",
    "RSA-SHA384": "a3b430fbd7c2c03db652708d22a41a2657bc76caf3305105d75a87aa58de8be90ac435fc68a91315c53d51b0e09f9118",
    "RSA-SHA512": "159fd2f979439b91980e9e00cfd86c1f72ab02d7bcc9ca9766cae9448dc4d8d229004936b43fdb066449b5ffa2faf327cac122cb93a8880ed2ee64906954615d",
    "dsaEncryption": "88021458847dd39b4495368f7254941859fad44b",
    "dsaWithSHA": "88021458847dd39b4495368f7254941859fad44b",
    "dsaWithSHA1": "88021458847dd39b4495368f7254941859fad44b",
    "dss1": "88021458847dd39b4495368f7254941859fad44b",
    "ecdsa-with-SHA1": "88021458847dd39b4495368f7254941859fad44b",
    "md4": "72d73f94bb5323d86d798936f6a40cf9",
    "md4WithRSAEncryption": "72d73f94bb5323d86d798936f6a40cf9",
    "md5": "aa2b3a055b56845f19109f21d3c783f4",
    "md5WithRSAEncryption": "aa2b3a055b56845f19109f21d3c783f4",
    "mdc2": "63c5170472df4188fac595ec595597a3",
    "mdc2WithRSA": "63c5170472df4188fac595ec595597a3",
    "ripemd": "4dca6e1616513df40e39c509bc66c90a83878a39",
    "ripemd160": "4dca6e1616513df40e39c509bc66c90a83878a39",
    "ripemd160WithRSA": "4dca6e1616513df40e39c509bc66c90a83878a39",
    "rmd160": "4dca6e1616513df40e39c509bc66c90a83878a39",
    "sha": "70c90e9d4ce54d224d213e7564da8226aca87e4b",
    "sha1": "88021458847dd39b4495368f7254941859fad44b",
    "sha1WithRSAEncryption": "88021458847dd39b4495368f7254941859fad44b",
    "sha224": "c64db67666ef33a901fbd0090eb74f068570b4602529eed11dcac13c",
    "sha224WithRSAEncryption": "c64db67666ef33a901fbd0090eb74f068570b4602529eed11dcac13c",
    "sha256": "689c608602d5e5d37a0285eeb5006d97addd7c2b8e006770fad588eff621c971",
    "sha256WithRSAEncryption": "689c608602d5e5d37a0285eeb5006d97addd7c2b8e006770fad588eff621c971",
    "sha384": "a3b430fbd7c2c03db652708d22a41a2657bc76caf3305105d75a87aa58de8be90ac435fc68a91315c53d51b0e09f9118",
    "sha384WithRSAEncryption": "a3b430fbd7c2c03db652708d22a41a2657bc76caf3305105d75a87aa58de8be90ac435fc68a91315c53d51b0e09f9118",
    "sha512": "159fd2f979439b91980e9e00cfd86c1f72ab02d7bcc9ca9766cae9448dc4d8d229004936b43fdb066449b5ffa2faf327cac122cb93a8880ed2ee64906954615d",
    "sha512WithRSAEncryption": "159fd2f979439b91980e9e00cfd86c1f72ab02d7bcc9ca9766cae9448dc4d8d229004936b43fdb066449b5ffa2faf327cac122cb93a8880ed2ee64906954615d",
    "shaWithRSAEncryption": "70c90e9d4ce54d224d213e7564da8226aca87e4b",
    "ssl2-md5": "aa2b3a055b56845f19109f21d3c783f4",
    "ssl3-md5": "aa2b3a055b56845f19109f21d3c783f4",
    "ssl3-sha1": "88021458847dd39b4495368f7254941859fad44b",
    "whirlpool": "5b39bb9ed9e330edd1a18520a305b1df0f792f52af68b85f1aa0d142b4f8ef28c7c05ccd67fb0c0488e3251da7c106d81919381f999a7e081211ee36eba845be"
  },
  {
    "input": "/4AN/+AD//AA//wA8AH4B//4D4AP//8A//+H/+H//GeMf/4AA/8//AcB///gAAH//8AMQA///w==",
    "DSA": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "DSA-SHA": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "DSA-SHA1": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "DSA-SHA1-old": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "RSA-MD4": "e4b8c40a3cbe7c3782c621cde1998635",
    "RSA-MD5": "eb1f01cc647ece73b2192537200bb8b9",
    "RSA-MDC2": "2794af516ba61627969de1a1eedf877c",
    "RSA-RIPEMD160": "51a906da584e7ef0976c103f1df9df47bd615b52",
    "RSA-SHA": "991c3e25840ccd2c6c37d04dcebcbc2b0bb3d113",
    "RSA-SHA1": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "RSA-SHA1-2": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "RSA-SHA224": "d539062c3b6147b95aacf748b50ee7817c711234cf83dfb95437ae62",
    "RSA-SHA256": "17c6f0073c4f92d5eedda57ca2506aa6002695c6b7bf12e4dbf4dd1a7fbceb08",
    "RSA-SHA384": "c6f93370caea221f74d2a3cddc9744be99c77b7b420d709b0bdc140d462beaa954f86c1b74e12f0cc75abb01c303542c",
    "RSA-SHA512": "e4e68d6dd664a69d5b05e1d2d110a047c34a26417d74aaf26c6e5fb9501a2bf05787dc615c91bfaa224ffd295c80a8694553639f4e82dbd61417e62c269a750e",
    "dsaEncryption": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "dsaWithSHA": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "dsaWithSHA1": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "dss1": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "ecdsa-with-SHA1": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "md4": "e4b8c40a3cbe7c3782c621cde1998635",
    "md4WithRSAEncryption": "e4b8c40a3cbe7c3782c621cde1998635",
    "md5": "eb1f01cc647ece73b2192537200bb8b9",
    "md5WithRSAEncryption": "eb1f01cc647ece73b2192537200bb8b9",
    "mdc2": "2794af516ba61627969de1a1eedf877c",
    "mdc2WithRSA": "2794af516ba61627969de1a1eedf877c",
    "ripemd": "51a906da584e7ef0976c103f1df9df47bd615b52",
    "ripemd160": "51a906da584e7ef0976c103f1df9df47bd615b52",
    "ripemd160WithRSA": "51a906da584e7ef0976c103f1df9df47bd615b52",
    "rmd160": "51a906da584e7ef0976c103f1df9df47bd615b52",
    "sha": "991c3e25840ccd2c6c37d04dcebcbc2b0bb3d113",
    "sha1": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "sha1WithRSAEncryption": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "sha224": "d539062c3b6147b95aacf748b50ee7817c711234cf83dfb95437ae62",
    "sha224WithRSAEncryption": "d539062c3b6147b95aacf748b50ee7817c711234cf83dfb95437ae62",
    "sha256": "17c6f0073c4f92d5eedda57ca2506aa6002695c6b7bf12e4dbf4dd1a7fbceb08",
    "sha256WithRSAEncryption": "17c6f0073c4f92d5eedda57ca2506aa6002695c6b7bf12e4dbf4dd1a7fbceb08",
    "sha384": "c6f93370caea221f74d2a3cddc9744be99c77b7b420d709b0bdc140d462beaa954f86c1b74e12f0cc75abb01c303542c",
    "sha384WithRSAEncryption": "c6f93370caea221f74d2a3cddc9744be99c77b7b420d709b0bdc140d462beaa954f86c1b74e12f0cc75abb01c303542c",
    "sha512": "e4e68d6dd664a69d5b05e1d2d110a047c34a26417d74aaf26c6e5fb9501a2bf05787dc615c91bfaa224ffd295c80a8694553639f4e82dbd61417e62c269a750e",
    "sha512WithRSAEncryption": "e4e68d6dd664a69d5b05e1d2d110a047c34a26417d74aaf26c6e5fb9501a2bf05787dc615c91bfaa224ffd295c80a8694553639f4e82dbd61417e62c269a750e",
    "shaWithRSAEncryption": "991c3e25840ccd2c6c37d04dcebcbc2b0bb3d113",
    "ssl2-md5": "eb1f01cc647ece73b2192537200bb8b9",
    "ssl3-md5": "eb1f01cc647ece73b2192537200bb8b9",
    "ssl3-sha1": "91a165295c666fe85c2adbc5a10329daf0cb81a0",
    "whirlpool": "1b952786f0a57d2288863e20c019260786fd529a1f3e3bce7309a267181056f00b2639e690dcf9d42193ef59e9e8e975a94676bd56e72240ea96772e439e07ea"
  },
  {
    "input": "AAAf//4AHwAAH///B///wAf/4AACAAD/AHgAAOAACAAf//8AA/gfAAAP/8AAAf//4fgAAD+AD/8=",
    "DSA": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "DSA-SHA": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "DSA-SHA1": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "DSA-SHA1-old": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "RSA-MD4": "815d1d3c5fa25f7917698dc56f00ca72",
    "RSA-MD5": "1db274ef41b1ad71f713df2b05207e1a",
    "RSA-MDC2": "3d8fefb077bd4f6e033656c985c21467",
    "RSA-RIPEMD160": "ba57313d4502e3874ea153d7883c98eac645d318",
    "RSA-SHA": "6eae2aa1e98a42c0f4e1162e263d09ea0b1d1bc6",
    "RSA-SHA1": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "RSA-SHA1-2": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "RSA-SHA224": "a2344200c4633bfa72b776e5a269959aa7f6256900eaf6db033df016",
    "RSA-SHA256": "504472bf96d0a3da1098dacacac48886d1ab92929187de95c7f42eab9907801d",
    "RSA-SHA384": "06538369656a39f45a5911de3e59a4bb983aa49fef7fef726eecaa824552c32b2bb0ee18868f4f5408b731ab2d14c753",
    "RSA-SHA512": "765e9cd6478a6da8c8887a5b76c30a277fd5de87a34fe401286163fc0ae773835f8fe4e81650a6a7a7d32ce43af44774989f29e5295f7d0d1642bc72f5797131",
    "dsaEncryption": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "dsaWithSHA": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "dsaWithSHA1": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "dss1": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "ecdsa-with-SHA1": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "md4": "815d1d3c5fa25f7917698dc56f00ca72",
    "md4WithRSAEncryption": "815d1d3c5fa25f7917698dc56f00ca72",
    "md5": "1db274ef41b1ad71f713df2b05207e1a",
    "md5WithRSAEncryption": "1db274ef41b1ad71f713df2b05207e1a",
    "mdc2": "3d8fefb077bd4f6e033656c985c21467",
    "mdc2WithRSA": "3d8fefb077bd4f6e033656c985c21467",
    "ripemd": "ba57313d4502e3874ea153d7883c98eac645d318",
    "ripemd160": "ba57313d4502e3874ea153d7883c98eac645d318",
    "ripemd160WithRSA": "ba57313d4502e3874ea153d7883c98eac645d318",
    "rmd160": "ba57313d4502e3874ea153d7883c98eac645d318",
    "sha": "6eae2aa1e98a42c0f4e1162e263d09ea0b1d1bc6",
    "sha1": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "sha1WithRSAEncryption": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "sha224": "a2344200c4633bfa72b776e5a269959aa7f6256900eaf6db033df016",
    "sha224WithRSAEncryption": "a2344200c4633bfa72b776e5a269959aa7f6256900eaf6db033df016",
    "sha256": "504472bf96d0a3da1098dacacac48886d1ab92929187de95c7f42eab9907801d",
    "sha256WithRSAEncryption": "504472bf96d0a3da1098dacacac48886d1ab92929187de95c7f42eab9907801d",
    "sha384": "06538369656a39f45a5911de3e59a4bb983aa49fef7fef726eecaa824552c32b2bb0ee18868f4f5408b731ab2d14c753",
    "sha384WithRSAEncryption": "06538369656a39f45a5911de3e59a4bb983aa49fef7fef726eecaa824552c32b2bb0ee18868f4f5408b731ab2d14c753",
    "sha512": "765e9cd6478a6da8c8887a5b76c30a277fd5de87a34fe401286163fc0ae773835f8fe4e81650a6a7a7d32ce43af44774989f29e5295f7d0d1642bc72f5797131",
    "sha512WithRSAEncryption": "765e9cd6478a6da8c8887a5b76c30a277fd5de87a34fe401286163fc0ae773835f8fe4e81650a6a7a7d32ce43af44774989f29e5295f7d0d1642bc72f5797131",
    "shaWithRSAEncryption": "6eae2aa1e98a42c0f4e1162e263d09ea0b1d1bc6",
    "ssl2-md5": "1db274ef41b1ad71f713df2b05207e1a",
    "ssl3-md5": "1db274ef41b1ad71f713df2b05207e1a",
    "ssl3-sha1": "4b31312eaf8b506811151a9dbd162961f7548c4b",
    "whirlpool": "e8b6b7e5050aee6b0dd5195e9a6a305f5f1db7cf21bfedf8a1a45570fd59ff788d48488974f89d7b594d3391a5857f021e3fd2f23baafcb2887cd8cc4f74bb38"
  },
  {
    "input": "AA/4APwAA///AAA/8AH//+B/+AD4D///gAAP//wP/+AAAP/D//AH//8AOPgAIB/+P/4A/gB//8AA",
    "DSA": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "DSA-SHA": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "DSA-SHA1": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "DSA-SHA1-old": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "RSA-MD4": "24b36ec9caa9009c64c2a68bfa0c912a",
    "RSA-MD5": "d8b4ec343b4310345efc6da9cee8a2ec",
    "RSA-MDC2": "f59a59d03170661717ab7d638a28f6c0",
    "RSA-RIPEMD160": "de71f96026252d3baa5197a878daf0276c7ce513",
    "RSA-SHA": "ed565d0f32c22d0483c0840e0fcbb070c0fa0fc7",
    "RSA-SHA1": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "RSA-SHA1-2": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "RSA-SHA224": "9e418baa84ac4bd2df6fd8fd077e07be1e4180e0d3b5e3bd8cf160da",
    "RSA-SHA256": "ad3a49ab7ad5b69182301d9ef971feab72f770f4d9f60f6db308ffea746db005",
    "RSA-SHA384": "6d62ccacd4cec0bb0f6104d784fc985fdf11eb44b730db999f35d9d8837f3a67f2246b5002e82273fe1be14adeb412de",
    "RSA-SHA512": "6dc712927b0fc4528db9b1412b989f307c98f349e9ae36404b7cba1c5e49ab59a732fc446556b7f80cad3aa04ca92911c8f72a8d663966a442e987f00a08bc3b",
    "dsaEncryption": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "dsaWithSHA": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "dsaWithSHA1": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "dss1": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "ecdsa-with-SHA1": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "md4": "24b36ec9caa9009c64c2a68bfa0c912a",
    "md4WithRSAEncryption": "24b36ec9caa9009c64c2a68bfa0c912a",
    "md5": "d8b4ec343b4310345efc6da9cee8a2ec",
    "md5WithRSAEncryption": "d8b4ec343b4310345efc6da9cee8a2ec",
    "mdc2": "f59a59d03170661717ab7d638a28f6c0",
    "mdc2WithRSA": "f59a59d03170661717ab7d638a28f6c0",
    "ripemd": "de71f96026252d3baa5197a878daf0276c7ce513",
    "ripemd160": "de71f96026252d3baa5197a878daf0276c7ce513",
    "ripemd160WithRSA": "de71f96026252d3baa5197a878daf0276c7ce513",
    "rmd160": "de71f96026252d3baa5197a878daf0276c7ce513",
    "sha": "ed565d0f32c22d0483c0840e0fcbb070c0fa0fc7",
    "sha1": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "sha1WithRSAEncryption": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "sha224": "9e418baa84ac4bd2df6fd8fd077e07be1e4180e0d3b5e3bd8cf160da",
    "sha224WithRSAEncryption": "9e418baa84ac4bd2df6fd8fd077e07be1e4180e0d3b5e3bd8cf160da",
    "sha256": "ad3a49ab7ad5b69182301d9ef971feab72f770f4d9f60f6db308ffea746db005",
    "sha256WithRSAEncryption": "ad3a49ab7ad5b69182301d9ef971feab72f770f4d9f60f6db308ffea746db005",
    "sha384": "6d62ccacd4cec0bb0f6104d784fc985fdf11eb44b730db999f35d9d8837f3a67f2246b5002e82273fe1be14adeb412de",
    "sha384WithRSAEncryption": "6d62ccacd4cec0bb0f6104d784fc985fdf11eb44b730db999f35d9d8837f3a67f2246b5002e82273fe1be14adeb412de",
    "sha512": "6dc712927b0fc4528db9b1412b989f307c98f349e9ae36404b7cba1c5e49ab59a732fc446556b7f80cad3aa04ca92911c8f72a8d663966a442e987f00a08bc3b",
    "sha512WithRSAEncryption": "6dc712927b0fc4528db9b1412b989f307c98f349e9ae36404b7cba1c5e49ab59a732fc446556b7f80cad3aa04ca92911c8f72a8d663966a442e987f00a08bc3b",
    "shaWithRSAEncryption": "ed565d0f32c22d0483c0840e0fcbb070c0fa0fc7",
    "ssl2-md5": "d8b4ec343b4310345efc6da9cee8a2ec",
    "ssl3-md5": "d8b4ec343b4310345efc6da9cee8a2ec",
    "ssl3-sha1": "3fe70971b20558f7e9bac303ed2bc14bde659a62",
    "whirlpool": "309d95791bb0cc1ac009155b2f726c14f0908a7a9b92dfd51326bce3a1ad1a202e603f28374d49d5279e64de5870b9f50675794b9ec99b3cf995a066b14830df"
  },
  {
    "input": "AD8A4AAP//x///wAAH4AAP/+H/AAH/AAH/+H8AA/wA//h/8AP4H///f/4P/gP5//AAcAf/wD//AAAA==",
    "DSA": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "DSA-SHA": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "DSA-SHA1": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "DSA-SHA1-old": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "RSA-MD4": "611686d18f35adc16c74425b5c7a5699",
    "RSA-MD5": "082ee3b2be7910f7350368e395a63d90",
    "RSA-MDC2": "7549a9bfff6737d3bc91d64ff99d37a3",
    "RSA-RIPEMD160": "8d5d691ade94c9cd19db6e2127ee6ed720ed7f39",
    "RSA-SHA": "85b2eb1ba4e374de787b653f6162af3d593e535b",
    "RSA-SHA1": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "RSA-SHA1-2": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "RSA-SHA224": "d6584455038fe2604700a80305c0083fcc90212b9f0c7dc2adbdcfa1",
    "RSA-SHA256": "5cdcb342f26857e8db5ac97a89da6197759adf384ab241a8112795241983238f",
    "RSA-SHA384": "00c2d950ce42e33a02d965fee284b50da6dc80a5cea93432aa9406aeb2d27e901e1c402d7aef5a7e9ac3381c4ce076a1",
    "RSA-SHA512": "7465eca59636aa00877954200b7a25f03cdf41541ca4e732aba4945ab4dc2ee41ba1438485882e84d997b64af4f31f7f67ae16ea6b94e384e2689a12413aa143",
    "dsaEncryption": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "dsaWithSHA": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "dsaWithSHA1": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "dss1": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "ecdsa-with-SHA1": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "md4": "611686d18f35adc16c74425b5c7a5699",
    "md4WithRSAEncryption": "611686d18f35adc16c74425b5c7a5699",
    "md5": "082ee3b2be7910f7350368e395a63d90",
    "md5WithRSAEncryption": "082ee3b2be7910f7350368e395a63d90",
    "mdc2": "7549a9bfff6737d3bc91d64ff99d37a3",
    "mdc2WithRSA": "7549a9bfff6737d3bc91d64ff99d37a3",
    "ripemd": "8d5d691ade94c9cd19db6e2127ee6ed720ed7f39",
    "ripemd160": "8d5d691ade94c9cd19db6e2127ee6ed720ed7f39",
    "ripemd160WithRSA": "8d5d691ade94c9cd19db6e2127ee6ed720ed7f39",
    "rmd160": "8d5d691ade94c9cd19db6e2127ee6ed720ed7f39",
    "sha": "85b2eb1ba4e374de787b653f6162af3d593e535b",
    "sha1": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "sha1WithRSAEncryption": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "sha224": "d6584455038fe2604700a80305c0083fcc90212b9f0c7dc2adbdcfa1",
    "sha224WithRSAEncryption": "d6584455038fe2604700a80305c0083fcc90212b9f0c7dc2adbdcfa1",
    "sha256": "5cdcb342f26857e8db5ac97a89da6197759adf384ab241a8112795241983238f",
    "sha256WithRSAEncryption": "5cdcb342f26857e8db5ac97a89da6197759adf384ab241a8112795241983238f",
    "sha384": "00c2d950ce42e33a02d965fee284b50da6dc80a5cea93432aa9406aeb2d27e901e1c402d7aef5a7e9ac3381c4ce076a1",
    "sha384WithRSAEncryption": "00c2d950ce42e33a02d965fee284b50da6dc80a5cea93432aa9406aeb2d27e901e1c402d7aef5a7e9ac3381c4ce076a1",
    "sha512": "7465eca59636aa00877954200b7a25f03cdf41541ca4e732aba4945ab4dc2ee41ba1438485882e84d997b64af4f31f7f67ae16ea6b94e384e2689a12413aa143",
    "sha512WithRSAEncryption": "7465eca59636aa00877954200b7a25f03cdf41541ca4e732aba4945ab4dc2ee41ba1438485882e84d997b64af4f31f7f67ae16ea6b94e384e2689a12413aa143",
    "shaWithRSAEncryption": "85b2eb1ba4e374de787b653f6162af3d593e535b",
    "ssl2-md5": "082ee3b2be7910f7350368e395a63d90",
    "ssl3-md5": "082ee3b2be7910f7350368e395a63d90",
    "ssl3-sha1": "93fb769d5bf49d6c563685954e2aecc024dc02d6",
    "whirlpool": "99ab6ef232a55a1302a8c9914cfd09a1c0dd4712ae082896f0f36af16b33e1235ddf02287787452b9347dd7ea40d8499a98d005b70e9162bb66f4f3b896f7d2f"
  },
  {
    "input": "4D//8P+APgAD/+AAD/wAB//4AAB/gAAP+AH/f//wAD///n//4AD/w///AADwAAB//wA///AAAcAD//8=",
    "DSA": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "DSA-SHA": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "DSA-SHA1": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "DSA-SHA1-old": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "RSA-MD4": "5300b5f565c1fed0e91c450a9029f9e0",
    "RSA-MD5": "d247c4070ae1de106bcb438a2dacac23",
    "RSA-MDC2": "e7795d8f85c383461ee6339d0d918a87",
    "RSA-RIPEMD160": "b44d9673ebe43687936d3c52397ac5190ea8b934",
    "RSA-SHA": "592a10ac3244878e143540b9bcf74ccc0cac9448",
    "RSA-SHA1": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "RSA-SHA1-2": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "RSA-SHA224": "e03841e9b24fd7bd394e73d6899aca180ce418e31eb9ef9b9d9de07c",
    "RSA-SHA256": "4ec9883c8ad72131c79f14e4f1e75042a61100a5bc290fc344ee3c2adc99c143",
    "RSA-SHA384": "7df760b82976689499679b3f23257f06f0701d94b47fafd60b543420463f3cfdd938b0166359b42c21aacf251a54cb59",
    "RSA-SHA512": "3a490375e04aa9723b0fae4e8718f2409c57ec7650709551e65899ce2a6fca62f913f3303b4b073af50cf8c0c2b82bc11ea4ad2f5d56f17af2ae8764f7dda99d",
    "dsaEncryption": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "dsaWithSHA": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "dsaWithSHA1": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "dss1": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "ecdsa-with-SHA1": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "md4": "5300b5f565c1fed0e91c450a9029f9e0",
    "md4WithRSAEncryption": "5300b5f565c1fed0e91c450a9029f9e0",
    "md5": "d247c4070ae1de106bcb438a2dacac23",
    "md5WithRSAEncryption": "d247c4070ae1de106bcb438a2dacac23",
    "mdc2": "e7795d8f85c383461ee6339d0d918a87",
    "mdc2WithRSA": "e7795d8f85c383461ee6339d0d918a87",
    "ripemd": "b44d9673ebe43687936d3c52397ac5190ea8b934",
    "ripemd160": "b44d9673ebe43687936d3c52397ac5190ea8b934",
    "ripemd160WithRSA": "b44d9673ebe43687936d3c52397ac5190ea8b934",
    "rmd160": "b44d9673ebe43687936d3c52397ac5190ea8b934",
    "sha": "592a10ac3244878e143540b9bcf74ccc0cac9448",
    "sha1": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "sha1WithRSAEncryption": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "sha224": "e03841e9b24fd7bd394e73d6899aca180ce418e31eb9ef9b9d9de07c",
    "sha224WithRSAEncryption": "e03841e9b24fd7bd394e73d6899aca180ce418e31eb9ef9b9d9de07c",
    "sha256": "4ec9883c8ad72131c79f14e4f1e75042a61100a5bc290fc344ee3c2adc99c143",
    "sha256WithRSAEncryption": "4ec9883c8ad72131c79f14e4f1e75042a61100a5bc290fc344ee3c2adc99c143",
    "sha384": "7df760b82976689499679b3f23257f06f0701d94b47fafd60b543420463f3cfdd938b0166359b42c21aacf251a54cb59",
    "sha384WithRSAEncryption": "7df760b82976689499679b3f23257f06f0701d94b47fafd60b543420463f3cfdd938b0166359b42c21aacf251a54cb59",
    "sha512": "3a490375e04aa9723b0fae4e8718f2409c57ec7650709551e65899ce2a6fca62f913f3303b4b073af50cf8c0c2b82bc11ea4ad2f5d56f17af2ae8764f7dda99d",
    "sha512WithRSAEncryption": "3a490375e04aa9723b0fae4e8718f2409c57ec7650709551e65899ce2a6fca62f913f3303b4b073af50cf8c0c2b82bc11ea4ad2f5d56f17af2ae8764f7dda99d",
    "shaWithRSAEncryption": "592a10ac3244878e143540b9bcf74ccc0cac9448",
    "ssl2-md5": "d247c4070ae1de106bcb438a2dacac23",
    "ssl3-md5": "d247c4070ae1de106bcb438a2dacac23",
    "ssl3-sha1": "bc8827c3e614d515e83dea503989dea4fda6ea13",
    "whirlpool": "5ea57fdc9c3fa84becae93297ee456672ce3f491c32a04780e9c505f68685e6468de18771a86b3ecc574feb7aef6cf0febaeef3b0b79f3138810be210e18d563"
  },
  {
    "input": "AAPAAf/f/f+f/h///wA///4AAH/P//Af//4H8AD//+AAAQAH/4Af4AAA//4D//+AA/AP//4AAB//+AAA",
    "DSA": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "DSA-SHA": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "DSA-SHA1": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "DSA-SHA1-old": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "RSA-MD4": "c420a0fc8ffdb1de5af32692292a7434",
    "RSA-MD5": "f8cbc4f3af45befc792679f2b113f1cb",
    "RSA-MDC2": "1ab924f8cec5ecaeb11976e1975318ba",
    "RSA-RIPEMD160": "cbd69987073b18a3baee9ec6186bc521265e6665",
    "RSA-SHA": "9b2aeaa9eaa303c03855a1a04e2b4d8fa08d3033",
    "RSA-SHA1": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "RSA-SHA1-2": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "RSA-SHA224": "21d3d0aa1c09146bec6f47556551415f15d1f6416f1543cdcc205a15",
    "RSA-SHA256": "375c64eb3361f34b4d89078fa95d082c74bced92436aa3d50031839375d6473e",
    "RSA-SHA384": "af56c257d65f9fb051edd9460e1d6697b1ecdc57569a35fb93122ff85dc8e827967bbfb39048cf27c92c222ad192b804",
    "RSA-SHA512": "10a72fadb32da865d39d36445c053776af1f19b384d6cbb45fee9d93399e22250ffdf16b2f867a5adf87d2215cd2685587db3ea50920a36354b22d17b4897e63",
    "dsaEncryption": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "dsaWithSHA": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "dsaWithSHA1": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "dss1": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "ecdsa-with-SHA1": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "md4": "c420a0fc8ffdb1de5af32692292a7434",
    "md4WithRSAEncryption": "c420a0fc8ffdb1de5af32692292a7434",
    "md5": "f8cbc4f3af45befc792679f2b113f1cb",
    "md5WithRSAEncryption": "f8cbc4f3af45befc792679f2b113f1cb",
    "mdc2": "1ab924f8cec5ecaeb11976e1975318ba",
    "mdc2WithRSA": "1ab924f8cec5ecaeb11976e1975318ba",
    "ripemd": "cbd69987073b18a3baee9ec6186bc521265e6665",
    "ripemd160": "cbd69987073b18a3baee9ec6186bc521265e6665",
    "ripemd160WithRSA": "cbd69987073b18a3baee9ec6186bc521265e6665",
    "rmd160": "cbd69987073b18a3baee9ec6186bc521265e6665",
    "sha": "9b2aeaa9eaa303c03855a1a04e2b4d8fa08d3033",
    "sha1": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "sha1WithRSAEncryption": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "sha224": "21d3d0aa1c09146bec6f47556551415f15d1f6416f1543cdcc205a15",
    "sha224WithRSAEncryption": "21d3d0aa1c09146bec6f47556551415f15d1f6416f1543cdcc205a15",
    "sha256": "375c64eb3361f34b4d89078fa95d082c74bced92436aa3d50031839375d6473e",
    "sha256WithRSAEncryption": "375c64eb3361f34b4d89078fa95d082c74bced92436aa3d50031839375d6473e",
    "sha384": "af56c257d65f9fb051edd9460e1d6697b1ecdc57569a35fb93122ff85dc8e827967bbfb39048cf27c92c222ad192b804",
    "sha384WithRSAEncryption": "af56c257d65f9fb051edd9460e1d6697b1ecdc57569a35fb93122ff85dc8e827967bbfb39048cf27c92c222ad192b804",
    "sha512": "10a72fadb32da865d39d36445c053776af1f19b384d6cbb45fee9d93399e22250ffdf16b2f867a5adf87d2215cd2685587db3ea50920a36354b22d17b4897e63",
    "sha512WithRSAEncryption": "10a72fadb32da865d39d36445c053776af1f19b384d6cbb45fee9d93399e22250ffdf16b2f867a5adf87d2215cd2685587db3ea50920a36354b22d17b4897e63",
    "shaWithRSAEncryption": "9b2aeaa9eaa303c03855a1a04e2b4d8fa08d3033",
    "ssl2-md5": "f8cbc4f3af45befc792679f2b113f1cb",
    "ssl3-md5": "f8cbc4f3af45befc792679f2b113f1cb",
    "ssl3-sha1": "e83868dbe4a389ab48e61cfc4ed894f32ae112ac",
    "whirlpool": "16e6a645c7c03c1bd98fe948245b29d5d0609a73f06e1894ef4d26246bd1fb14fe9e2516d1d2c37e78bb7e0845f4c45ab90a6efe5ee18e3914451803daaa13da"
  },
  {
    "input": "AB//+//+AAf/8AAA//8AAA/z//4AeAAAPgAAP//4AB///4AAA///AAf/7gAf/AB4AAAf/wf//gP//+AAAA==",
    "DSA": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "DSA-SHA": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "DSA-SHA1": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "DSA-SHA1-old": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "RSA-MD4": "3328a16bd616f393f072cae3b7a8d568",
    "RSA-MD5": "9031006a437019c5dcd987a31731ebd9",
    "RSA-MDC2": "1927355cd6a42ba7e8ee2a5e79921e40",
    "RSA-RIPEMD160": "5577734066615583f24dabb143614c8a453e9bb5",
    "RSA-SHA": "796f1d3bb9dc26016bb372ca901320de7c70df89",
    "RSA-SHA1": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "RSA-SHA1-2": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "RSA-SHA224": "7b468eb4af1be5fd6430a657608e926fa935c4ec9eb1c9ab9bfd19dd",
    "RSA-SHA256": "8a0a36538da941bea6c614b2c038424588d8d2505039f70cbff291d4f0f9f6a1",
    "RSA-SHA384": "7d99a9de7f215dfd851c588c04dda0e141fb5129b44e6936a069267cdcda2d3d74446384be97550d80bfe97f0fa906bf",
    "RSA-SHA512": "e1ecf3f08e315a415e0043b21e6b30b18d468c41bce2f58db6dcb59a4147db9a2919512eaefd71b6ed3ae4561f6d9eda2f7519c50a069e04a43db55c626817f9",
    "dsaEncryption": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "dsaWithSHA": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "dsaWithSHA1": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "dss1": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "ecdsa-with-SHA1": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "md4": "3328a16bd616f393f072cae3b7a8d568",
    "md4WithRSAEncryption": "3328a16bd616f393f072cae3b7a8d568",
    "md5": "9031006a437019c5dcd987a31731ebd9",
    "md5WithRSAEncryption": "9031006a437019c5dcd987a31731ebd9",
    "mdc2": "1927355cd6a42ba7e8ee2a5e79921e40",
    "mdc2WithRSA": "1927355cd6a42ba7e8ee2a5e79921e40",
    "ripemd": "5577734066615583f24dabb143614c8a453e9bb5",
    "ripemd160": "5577734066615583f24dabb143614c8a453e9bb5",
    "ripemd160WithRSA": "5577734066615583f24dabb143614c8a453e9bb5",
    "rmd160": "5577734066615583f24dabb143614c8a453e9bb5",
    "sha": "796f1d3bb9dc26016bb372ca901320de7c70df89",
    "sha1": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "sha1WithRSAEncryption": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "sha224": "7b468eb4af1be5fd6430a657608e926fa935c4ec9eb1c9ab9bfd19dd",
    "sha224WithRSAEncryption": "7b468eb4af1be5fd6430a657608e926fa935c4ec9eb1c9ab9bfd19dd",
    "sha256": "8a0a36538da941bea6c614b2c038424588d8d2505039f70cbff291d4f0f9f6a1",
    "sha256WithRSAEncryption": "8a0a36538da941bea6c614b2c038424588d8d2505039f70cbff291d4f0f9f6a1",
    "sha384": "7d99a9de7f215dfd851c588c04dda0e141fb5129b44e6936a069267cdcda2d3d74446384be97550d80bfe97f0fa906bf",
    "sha384WithRSAEncryption": "7d99a9de7f215dfd851c588c04dda0e141fb5129b44e6936a069267cdcda2d3d74446384be97550d80bfe97f0fa906bf",
    "sha512": "e1ecf3f08e315a415e0043b21e6b30b18d468c41bce2f58db6dcb59a4147db9a2919512eaefd71b6ed3ae4561f6d9eda2f7519c50a069e04a43db55c626817f9",
    "sha512WithRSAEncryption": "e1ecf3f08e315a415e0043b21e6b30b18d468c41bce2f58db6dcb59a4147db9a2919512eaefd71b6ed3ae4561f6d9eda2f7519c50a069e04a43db55c626817f9",
    "shaWithRSAEncryption": "796f1d3bb9dc26016bb372ca901320de7c70df89",
    "ssl2-md5": "9031006a437019c5dcd987a31731ebd9",
    "ssl3-md5": "9031006a437019c5dcd987a31731ebd9",
    "ssl3-sha1": "55c95459cde4b33791b4b2bcaaf840930af3f3bd",
    "whirlpool": "6b800fa612fe6153f37713504e8d51e671f9576802ab407ccc507b6bb0c4320c2ebd74a42fcf5f95f63153b7d06083c9a913278e8661bb488f3cee4bb696bc90"
  },
  {
    "input": "AH///gAAP/wD//wf//B/2APwAP38OAAIABAA4AYAf/4AAA//gAA/A//+///5//gAB//8Af/AAAP//+AD//8=",
    "DSA": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "DSA-SHA": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "DSA-SHA1": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "DSA-SHA1-old": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "RSA-MD4": "5ef22d7a910889dc336a5f1162dd1634",
    "RSA-MD5": "a6b62759ee3883258fbdeeb8b56e6283",
    "RSA-MDC2": "c29f7308445825ac55e893124d367be0",
    "RSA-RIPEMD160": "9ad5335ded934194b1248757762ed502c8450085",
    "RSA-SHA": "49f14b2e0793a8f9d711d84c0e98bc98c284df5d",
    "RSA-SHA1": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "RSA-SHA1-2": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "RSA-SHA224": "817a9ed3a97bbaf56727b98552002bd517564de266a5df09620a126e",
    "RSA-SHA256": "a4dd6338174ebeda6a25b88d754fa5b95cad27902eb0bc8321b76db62efb1abc",
    "RSA-SHA384": "369e73fc37ef5775684618459b0e4c3e70e5a2609c1c37ada7f34fdfeee9ceaf0dc65551ddb40fad1ac708d69c90d516",
    "RSA-SHA512": "96a0d87a5e1da55518c46b94c86d3a3442fbf077bfc92dfd4de8c8135a957b6ec082abc4b16155a423848cd6f221677a764f24e603cfcfd5582cdcdbece50070",
    "dsaEncryption": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "dsaWithSHA": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "dsaWithSHA1": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "dss1": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "ecdsa-with-SHA1": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "md4": "5ef22d7a910889dc336a5f1162dd1634",
    "md4WithRSAEncryption": "5ef22d7a910889dc336a5f1162dd1634",
    "md5": "a6b62759ee3883258fbdeeb8b56e6283",
    "md5WithRSAEncryption": "a6b62759ee3883258fbdeeb8b56e6283",
    "mdc2": "c29f7308445825ac55e893124d367be0",
    "mdc2WithRSA": "c29f7308445825ac55e893124d367be0",
    "ripemd": "9ad5335ded934194b1248757762ed502c8450085",
    "ripemd160": "9ad5335ded934194b1248757762ed502c8450085",
    "ripemd160WithRSA": "9ad5335ded934194b1248757762ed502c8450085",
    "rmd160": "9ad5335ded934194b1248757762ed502c8450085",
    "sha": "49f14b2e0793a8f9d711d84c0e98bc98c284df5d",
    "sha1": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "sha1WithRSAEncryption": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "sha224": "817a9ed3a97bbaf56727b98552002bd517564de266a5df09620a126e",
    "sha224WithRSAEncryption": "817a9ed3a97bbaf56727b98552002bd517564de266a5df09620a126e",
    "sha256": "a4dd6338174ebeda6a25b88d754fa5b95cad27902eb0bc8321b76db62efb1abc",
    "sha256WithRSAEncryption": "a4dd6338174ebeda6a25b88d754fa5b95cad27902eb0bc8321b76db62efb1abc",
    "sha384": "369e73fc37ef5775684618459b0e4c3e70e5a2609c1c37ada7f34fdfeee9ceaf0dc65551ddb40fad1ac708d69c90d516",
    "sha384WithRSAEncryption": "369e73fc37ef5775684618459b0e4c3e70e5a2609c1c37ada7f34fdfeee9ceaf0dc65551ddb40fad1ac708d69c90d516",
    "sha512": "96a0d87a5e1da55518c46b94c86d3a3442fbf077bfc92dfd4de8c8135a957b6ec082abc4b16155a423848cd6f221677a764f24e603cfcfd5582cdcdbece50070",
    "sha512WithRSAEncryption": "96a0d87a5e1da55518c46b94c86d3a3442fbf077bfc92dfd4de8c8135a957b6ec082abc4b16155a423848cd6f221677a764f24e603cfcfd5582cdcdbece50070",
    "shaWithRSAEncryption": "49f14b2e0793a8f9d711d84c0e98bc98c284df5d",
    "ssl2-md5": "a6b62759ee3883258fbdeeb8b56e6283",
    "ssl3-md5": "a6b62759ee3883258fbdeeb8b56e6283",
    "ssl3-sha1": "36bb0e2ba438a3e03214d9ed2b28a4d5c578fcaa",
    "whirlpool": "d7cd91fc9156343280b64419487b09919964204408bed2b799a9d42e768ac986821845304d12e7371997cc12252ed8ed4fcce7eb3c1cc41d56ea69f9a5bd17aa"
  },
  {
    "input": "//AP//8ABgD///AH/+AEAAMAAAPw//8AA//7/8P/8Af//8cAf4AAA//4AB/h//hj/AA/wJ//+AAAf/8f//wA",
    "DSA": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "DSA-SHA": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "DSA-SHA1": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "DSA-SHA1-old": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "RSA-MD4": "c4bc5d69be75075927474ef60f58a507",
    "RSA-MD5": "4933898605b4a1b970b674a2dde92292",
    "RSA-MDC2": "7ed887bb3f7745e007119066aa3af9ed",
    "RSA-RIPEMD160": "a7ba45e9e7ef17bd3b4f15bdef23c7bb73467485",
    "RSA-SHA": "42f1b94b7bce310a3e6ec0535d3c0231df3dff45",
    "RSA-SHA1": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "RSA-SHA1-2": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "RSA-SHA224": "13c658333351f4171c527333892dbe2dea44f15cb775fd551d16d7a5",
    "RSA-SHA256": "a644092a1de8e05e17908ce565d55fcf39e30585565d96bf1c13eeb9f3401803",
    "RSA-SHA384": "22db6cca00f4ce076f97fe8513f788968ff1c2cdee2aeb614830ed77b8b4b04481f1831acadc605ecd340c0a79a507fd",
    "RSA-SHA512": "92b2850798b270bfd56c21fd8e81e28cb3e353a4b681aac2d0bb6572c6bbd7cff8f1d84d634f1b9c4abd3d1700bd07b4c83fbaae88adf9ec275f0e5eac3ab9c3",
    "dsaEncryption": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "dsaWithSHA": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "dsaWithSHA1": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "dss1": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "ecdsa-with-SHA1": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "md4": "c4bc5d69be75075927474ef60f58a507",
    "md4WithRSAEncryption": "c4bc5d69be75075927474ef60f58a507",
    "md5": "4933898605b4a1b970b674a2dde92292",
    "md5WithRSAEncryption": "4933898605b4a1b970b674a2dde92292",
    "mdc2": "7ed887bb3f7745e007119066aa3af9ed",
    "mdc2WithRSA": "7ed887bb3f7745e007119066aa3af9ed",
    "ripemd": "a7ba45e9e7ef17bd3b4f15bdef23c7bb73467485",
    "ripemd160": "a7ba45e9e7ef17bd3b4f15bdef23c7bb73467485",
    "ripemd160WithRSA": "a7ba45e9e7ef17bd3b4f15bdef23c7bb73467485",
    "rmd160": "a7ba45e9e7ef17bd3b4f15bdef23c7bb73467485",
    "sha": "42f1b94b7bce310a3e6ec0535d3c0231df3dff45",
    "sha1": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "sha1WithRSAEncryption": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "sha224": "13c658333351f4171c527333892dbe2dea44f15cb775fd551d16d7a5",
    "sha224WithRSAEncryption": "13c658333351f4171c527333892dbe2dea44f15cb775fd551d16d7a5",
    "sha256": "a644092a1de8e05e17908ce565d55fcf39e30585565d96bf1c13eeb9f3401803",
    "sha256WithRSAEncryption": "a644092a1de8e05e17908ce565d55fcf39e30585565d96bf1c13eeb9f3401803",
    "sha384": "22db6cca00f4ce076f97fe8513f788968ff1c2cdee2aeb614830ed77b8b4b04481f1831acadc605ecd340c0a79a507fd",
    "sha384WithRSAEncryption": "22db6cca00f4ce076f97fe8513f788968ff1c2cdee2aeb614830ed77b8b4b04481f1831acadc605ecd340c0a79a507fd",
    "sha512": "92b2850798b270bfd56c21fd8e81e28cb3e353a4b681aac2d0bb6572c6bbd7cff8f1d84d634f1b9c4abd3d1700bd07b4c83fbaae88adf9ec275f0e5eac3ab9c3",
    "sha512WithRSAEncryption": "92b2850798b270bfd56c21fd8e81e28cb3e353a4b681aac2d0bb6572c6bbd7cff8f1d84d634f1b9c4abd3d1700bd07b4c83fbaae88adf9ec275f0e5eac3ab9c3",
    "shaWithRSAEncryption": "42f1b94b7bce310a3e6ec0535d3c0231df3dff45",
    "ssl2-md5": "4933898605b4a1b970b674a2dde92292",
    "ssl3-md5": "4933898605b4a1b970b674a2dde92292",
    "ssl3-sha1": "3acbf874199763eba20f3789dfc59572aca4cf33",
    "whirlpool": "94aef3f4288be25a88b79704589b269872591e31643e3b9d4bf72758c85421ac83922197b23cbda66da02888c361c9b1164d48d6a30adeb786db8af0d346d885"
  },
  {
    "input": "AD///AAPx4AAAgAeAABgfwP+AAAf/4Af+AAA//+AAAP/wAB//8B/4AP8AP/3//8AAB/wAAP//+H//4AP+AAAHw==",
    "DSA": "86be037c4d509c9202020767d860dab039cadace",
    "DSA-SHA": "86be037c4d509c9202020767d860dab039cadace",
    "DSA-SHA1": "86be037c4d509c9202020767d860dab039cadace",
    "DSA-SHA1-old": "86be037c4d509c9202020767d860dab039cadace",
    "RSA-MD4": "475120a727b78f41b9b12631d72060e3",
    "RSA-MD5": "f0684ca20de4607232f3e158e81a37f2",
    "RSA-MDC2": "73ec5f0c87b7dfaad3d53a1a7132a2e9",
    "RSA-RIPEMD160": "36af7bb2af7006bec47cd11eba7ea9c8dc69fdd0",
    "RSA-SHA": "d8cb319d77c8e4549c4f9d417168214c4b3ea46d",
    "RSA-SHA1": "86be037c4d509c9202020767d860dab039cadace",
    "RSA-SHA1-2": "86be037c4d509c9202020767d860dab039cadace",
    "RSA-SHA224": "cec6acec377ac4ffd4d6cf603ab6184347cd9e243a8fbe0b7aaa9cc6",
    "RSA-SHA256": "7697b1435a5bdc094038469fc5268615cbe94641b2165bee62466426ab414c97",
    "RSA-SHA384": "21f91cb26989f353a90013722fcbdd0769ae927fb661dfd8140cfa88d42aa523680404dd50fb80b2112b79da589bb452",
    "RSA-SHA512": "9cec66b2a39a697b2a3fbd582ab032ee12f7ee3fdbb58236c87723dffbc541f45b04d865c9da0588917cccd960f4daf725059dd788e39899694a235322bfa9d0",
    "dsaEncryption": "86be037c4d509c9202020767d860dab039cadace",
    "dsaWithSHA": "86be037c4d509c9202020767d860dab039cadace",
    "dsaWithSHA1": "86be037c4d509c9202020767d860dab039cadace",
    "dss1": "86be037c4d509c9202020767d860dab039cadace",
    "ecdsa-with-SHA1": "86be037c4d509c9202020767d860dab039cadace",
    "md4": "475120a727b78f41b9b12631d72060e3",
    "md4WithRSAEncryption": "475120a727b78f41b9b12631d72060e3",
    "md5": "f0684ca20de4607232f3e158e81a37f2",
    "md5WithRSAEncryption": "f0684ca20de4607232f3e158e81a37f2",
    "mdc2": "73ec5f0c87b7dfaad3d53a1a7132a2e9",
    "mdc2WithRSA": "73ec5f0c87b7dfaad3d53a1a7132a2e9",
    "ripemd": "36af7bb2af7006bec47cd11eba7ea9c8dc69fdd0",
    "ripemd160": "36af7bb2af7006bec47cd11eba7ea9c8dc69fdd0",
    "ripemd160WithRSA": "36af7bb2af7006bec47cd11eba7ea9c8dc69fdd0",
    "rmd160": "36af7bb2af7006bec47cd11eba7ea9c8dc69fdd0",
    "sha": "d8cb319d77c8e4549c4f9d417168214c4b3ea46d",
    "sha1": "86be037c4d509c9202020767d860dab039cadace",
    "sha1WithRSAEncryption": "86be037c4d509c9202020767d860dab039cadace",
    "sha224": "cec6acec377ac4ffd4d6cf603ab6184347cd9e243a8fbe0b7aaa9cc6",
    "sha224WithRSAEncryption": "cec6acec377ac4ffd4d6cf603ab6184347cd9e243a8fbe0b7aaa9cc6",
    "sha256": "7697b1435a5bdc094038469fc5268615cbe94641b2165bee62466426ab414c97",
    "sha256WithRSAEncryption": "7697b1435a5bdc094038469fc5268615cbe94641b2165bee62466426ab414c97",
    "sha384": "21f91cb26989f353a90013722fcbdd0769ae927fb661dfd8140cfa88d42aa523680404dd50fb80b2112b79da589bb452",
    "sha384WithRSAEncryption": "21f91cb26989f353a90013722fcbdd0769ae927fb661dfd8140cfa88d42aa523680404dd50fb80b2112b79da589bb452",
    "sha512": "9cec66b2a39a697b2a3fbd582ab032ee12f7ee3fdbb58236c87723dffbc541f45b04d865c9da0588917cccd960f4daf725059dd788e39899694a235322bfa9d0",
    "sha512WithRSAEncryption": "9cec66b2a39a697b2a3fbd582ab032ee12f7ee3fdbb58236c87723dffbc541f45b04d865c9da0588917cccd960f4daf725059dd788e39899694a235322bfa9d0",
    "shaWithRSAEncryption": "d8cb319d77c8e4549c4f9d417168214c4b3ea46d",
    "ssl2-md5": "f0684ca20de4607232f3e158e81a37f2",
    "ssl3-md5": "f0684ca20de4607232f3e158e81a37f2",
    "ssl3-sha1": "86be037c4d509c9202020767d860dab039cadace",
    "whirlpool": "d6d4a09ddf64b39742d239b1c0ac5618dbfbbd4486b2c69a3c71b094f708eab67125d7e987163b2c59826b91504c09d1c0ebd9d775beefc15290e55c1972ee98"
  },
  {
    "input": "AAH+AAOD8///gAf//D///AP/gAAGAAB4AAf//4AH/AH4AAf//8AAOAAH//4///g//88//AB//wAf/4AAMAP//wA=",
    "DSA": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "DSA-SHA": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "DSA-SHA1": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "DSA-SHA1-old": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "RSA-MD4": "a6e70363c14951aea848a94c375cd29e",
    "RSA-MD5": "c0b3fdecb3bb7b4ff0c936f378ccb027",
    "RSA-MDC2": "6ce6a6b52c708cd3e4901de1116062f1",
    "RSA-RIPEMD160": "a44429ce419fed89876d84f53ad3b3532ba6d8d6",
    "RSA-SHA": "587bc5e083ae369ad4b805ae9219b0131580d8dd",
    "RSA-SHA1": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "RSA-SHA1-2": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "RSA-SHA224": "11340da4b0c582ca91fc14906f69e1b74b6d93cf9049abdd10b7114e",
    "RSA-SHA256": "62f249a85b14b477e764e63e9821d3f44dd2c745293f3586eff976266311a39f",
    "RSA-SHA384": "bbcf5abdb4eeaad97aab9b37c643df3cf4c47686cf87a9cb0155cc26041f23c44c6bb3fae7659a7fcd18fc5cd76eda94",
    "RSA-SHA512": "ad3922a3daaca8508e73bcfd2a605c1a7efff788de1ddea32eec897d9cafc137187c0c766b60f642d3697ab6f99ab2ab3d79e0361069b9daf6ad38479757cec7",
    "dsaEncryption": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "dsaWithSHA": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "dsaWithSHA1": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "dss1": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "ecdsa-with-SHA1": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "md4": "a6e70363c14951aea848a94c375cd29e",
    "md4WithRSAEncryption": "a6e70363c14951aea848a94c375cd29e",
    "md5": "c0b3fdecb3bb7b4ff0c936f378ccb027",
    "md5WithRSAEncryption": "c0b3fdecb3bb7b4ff0c936f378ccb027",
    "mdc2": "6ce6a6b52c708cd3e4901de1116062f1",
    "mdc2WithRSA": "6ce6a6b52c708cd3e4901de1116062f1",
    "ripemd": "a44429ce419fed89876d84f53ad3b3532ba6d8d6",
    "ripemd160": "a44429ce419fed89876d84f53ad3b3532ba6d8d6",
    "ripemd160WithRSA": "a44429ce419fed89876d84f53ad3b3532ba6d8d6",
    "rmd160": "a44429ce419fed89876d84f53ad3b3532ba6d8d6",
    "sha": "587bc5e083ae369ad4b805ae9219b0131580d8dd",
    "sha1": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "sha1WithRSAEncryption": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "sha224": "11340da4b0c582ca91fc14906f69e1b74b6d93cf9049abdd10b7114e",
    "sha224WithRSAEncryption": "11340da4b0c582ca91fc14906f69e1b74b6d93cf9049abdd10b7114e",
    "sha256": "62f249a85b14b477e764e63e9821d3f44dd2c745293f3586eff976266311a39f",
    "sha256WithRSAEncryption": "62f249a85b14b477e764e63e9821d3f44dd2c745293f3586eff976266311a39f",
    "sha384": "bbcf5abdb4eeaad97aab9b37c643df3cf4c47686cf87a9cb0155cc26041f23c44c6bb3fae7659a7fcd18fc5cd76eda94",
    "sha384WithRSAEncryption": "bbcf5abdb4eeaad97aab9b37c643df3cf4c47686cf87a9cb0155cc26041f23c44c6bb3fae7659a7fcd18fc5cd76eda94",
    "sha512": "ad3922a3daaca8508e73bcfd2a605c1a7efff788de1ddea32eec897d9cafc137187c0c766b60f642d3697ab6f99ab2ab3d79e0361069b9daf6ad38479757cec7",
    "sha512WithRSAEncryption": "ad3922a3daaca8508e73bcfd2a605c1a7efff788de1ddea32eec897d9cafc137187c0c766b60f642d3697ab6f99ab2ab3d79e0361069b9daf6ad38479757cec7",
    "shaWithRSAEncryption": "587bc5e083ae369ad4b805ae9219b0131580d8dd",
    "ssl2-md5": "c0b3fdecb3bb7b4ff0c936f378ccb027",
    "ssl3-md5": "c0b3fdecb3bb7b4ff0c936f378ccb027",
    "ssl3-sha1": "51b57d7080a87394eec3eb2e0b242e553f2827c9",
    "whirlpool": "9e993bad215ee78624db67a0fd8a0d28a28d1b80beb9fd61ef4e934b0f6001b920be0cb31e0dd10de539a811b67b04a436e464e06ccf3749b7f28a62b111844b"
  },
  {
    "input": "+AA4AAA+PwAAP//wAgAAD///gIAD/8AABAAPwD///gAAP//+AD//+AAwAHv/AAAD//w/4f+AAHAf/8AH/AAf//AA",
    "DSA": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "DSA-SHA": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "DSA-SHA1": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "DSA-SHA1-old": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "RSA-MD4": "acbbe3a78dc3378fa7669b77b1c65214",
    "RSA-MD5": "50652123b5e0e51bb5bc3fdde3c6a750",
    "RSA-MDC2": "0b6dae67058231260435948070898eec",
    "RSA-RIPEMD160": "113605cfd7dc057a558751df31148d9f87b97668",
    "RSA-SHA": "694248022bedc0cff7e46501f82450220af37c61",
    "RSA-SHA1": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "RSA-SHA1-2": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "RSA-SHA224": "62561df304dd9a368393cfc515595297aef41386335fd2f34758b7a4",
    "RSA-SHA256": "eb2c75aa7330a6589d09f58231d1218e4124ba49b7b0c5245a76a5101d136449",
    "RSA-SHA384": "02a0759609ca9d1324181abf21b4dfe2b1634a2f7a2e44450a20b88474f3cb9ab9696bc503e85db661866181ab4171de",
    "RSA-SHA512": "057cddff81c1b44002cf70049822ef9aa3de2867cdd84b185b5337d7795089de5095f915963dd9569196ab2fc916457c3886a2721a0daf47e79896cbc72e35c8",
    "dsaEncryption": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "dsaWithSHA": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "dsaWithSHA1": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "dss1": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "ecdsa-with-SHA1": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "md4": "acbbe3a78dc3378fa7669b77b1c65214",
    "md4WithRSAEncryption": "acbbe3a78dc3378fa7669b77b1c65214",
    "md5": "50652123b5e0e51bb5bc3fdde3c6a750",
    "md5WithRSAEncryption": "50652123b5e0e51bb5bc3fdde3c6a750",
    "mdc2": "0b6dae67058231260435948070898eec",
    "mdc2WithRSA": "0b6dae67058231260435948070898eec",
    "ripemd": "113605cfd7dc057a558751df31148d9f87b97668",
    "ripemd160": "113605cfd7dc057a558751df31148d9f87b97668",
    "ripemd160WithRSA": "113605cfd7dc057a558751df31148d9f87b97668",
    "rmd160": "113605cfd7dc057a558751df31148d9f87b97668",
    "sha": "694248022bedc0cff7e46501f82450220af37c61",
    "sha1": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "sha1WithRSAEncryption": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "sha224": "62561df304dd9a368393cfc515595297aef41386335fd2f34758b7a4",
    "sha224WithRSAEncryption": "62561df304dd9a368393cfc515595297aef41386335fd2f34758b7a4",
    "sha256": "eb2c75aa7330a6589d09f58231d1218e4124ba49b7b0c5245a76a5101d136449",
    "sha256WithRSAEncryption": "eb2c75aa7330a6589d09f58231d1218e4124ba49b7b0c5245a76a5101d136449",
    "sha384": "02a0759609ca9d1324181abf21b4dfe2b1634a2f7a2e44450a20b88474f3cb9ab9696bc503e85db661866181ab4171de",
    "sha384WithRSAEncryption": "02a0759609ca9d1324181abf21b4dfe2b1634a2f7a2e44450a20b88474f3cb9ab9696bc503e85db661866181ab4171de",
    "sha512": "057cddff81c1b44002cf70049822ef9aa3de2867cdd84b185b5337d7795089de5095f915963dd9569196ab2fc916457c3886a2721a0daf47e79896cbc72e35c8",
    "sha512WithRSAEncryption": "057cddff81c1b44002cf70049822ef9aa3de2867cdd84b185b5337d7795089de5095f915963dd9569196ab2fc916457c3886a2721a0daf47e79896cbc72e35c8",
    "shaWithRSAEncryption": "694248022bedc0cff7e46501f82450220af37c61",
    "ssl2-md5": "50652123b5e0e51bb5bc3fdde3c6a750",
    "ssl3-md5": "50652123b5e0e51bb5bc3fdde3c6a750",
    "ssl3-sha1": "1efbfa78866315ce6a71e457f3a750a38facab41",
    "whirlpool": "c8ed06dc7cbe8674d32d0481061a317065413bad8c16edbae8897b67c4abffd6bffa90157108618130ede02600184bf59f4e624a971becbed8edb6a842ca0ebe"
  },
  {
    "input": "AAP4GAAAcD//+AAA/8///8AD//4AEAAA/gP/+AAAfgAAf4//wAAAf//gADwHwAAAf/8B//gB/4AAD//54AA//+AAAA==",
    "DSA": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "DSA-SHA": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "DSA-SHA1": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "DSA-SHA1-old": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "RSA-MD4": "6ae9d4bb24e999169b04deea4c5dcc09",
    "RSA-MD5": "ed4526ba8226d969f47edbb27b2f1144",
    "RSA-MDC2": "d970ee061adce2df67add1bfc87f076c",
    "RSA-RIPEMD160": "b42c0346ecf67deec4f403925804de2aa5b8fe00",
    "RSA-SHA": "626ab00e7f281cdfa1653aa7b9778d541f668c2f",
    "RSA-SHA1": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "RSA-SHA1-2": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "RSA-SHA224": "5c9dc5097c1d7d72644b70fcc03982e1e2f16da36d003a0ade57d062",
    "RSA-SHA256": "90c096f9852990cf0fcfbd36ffeb577b4d106d66e9c7a18abdc6f7a3b1ddbab1",
    "RSA-SHA384": "f8779f7604c1bc30b0929deffdf07a5aff85c61a7d054b92cbc305980df4e4df8afedeb231e77078b0bcbd071682c0a5",
    "RSA-SHA512": "80409076e286025cef2ee16f55e02c8b96a2eb7b8da31218adda76df57b6ec12303ec1eccab269a508ad7547472ffecd569c56773a301655bb32580b479df093",
    "dsaEncryption": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "dsaWithSHA": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "dsaWithSHA1": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "dss1": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "ecdsa-with-SHA1": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "md4": "6ae9d4bb24e999169b04deea4c5dcc09",
    "md4WithRSAEncryption": "6ae9d4bb24e999169b04deea4c5dcc09",
    "md5": "ed4526ba8226d969f47edbb27b2f1144",
    "md5WithRSAEncryption": "ed4526ba8226d969f47edbb27b2f1144",
    "mdc2": "d970ee061adce2df67add1bfc87f076c",
    "mdc2WithRSA": "d970ee061adce2df67add1bfc87f076c",
    "ripemd": "b42c0346ecf67deec4f403925804de2aa5b8fe00",
    "ripemd160": "b42c0346ecf67deec4f403925804de2aa5b8fe00",
    "ripemd160WithRSA": "b42c0346ecf67deec4f403925804de2aa5b8fe00",
    "rmd160": "b42c0346ecf67deec4f403925804de2aa5b8fe00",
    "sha": "626ab00e7f281cdfa1653aa7b9778d541f668c2f",
    "sha1": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "sha1WithRSAEncryption": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "sha224": "5c9dc5097c1d7d72644b70fcc03982e1e2f16da36d003a0ade57d062",
    "sha224WithRSAEncryption": "5c9dc5097c1d7d72644b70fcc03982e1e2f16da36d003a0ade57d062",
    "sha256": "90c096f9852990cf0fcfbd36ffeb577b4d106d66e9c7a18abdc6f7a3b1ddbab1",
    "sha256WithRSAEncryption": "90c096f9852990cf0fcfbd36ffeb577b4d106d66e9c7a18abdc6f7a3b1ddbab1",
    "sha384": "f8779f7604c1bc30b0929deffdf07a5aff85c61a7d054b92cbc305980df4e4df8afedeb231e77078b0bcbd071682c0a5",
    "sha384WithRSAEncryption": "f8779f7604c1bc30b0929deffdf07a5aff85c61a7d054b92cbc305980df4e4df8afedeb231e77078b0bcbd071682c0a5",
    "sha512": "80409076e286025cef2ee16f55e02c8b96a2eb7b8da31218adda76df57b6ec12303ec1eccab269a508ad7547472ffecd569c56773a301655bb32580b479df093",
    "sha512WithRSAEncryption": "80409076e286025cef2ee16f55e02c8b96a2eb7b8da31218adda76df57b6ec12303ec1eccab269a508ad7547472ffecd569c56773a301655bb32580b479df093",
    "shaWithRSAEncryption": "626ab00e7f281cdfa1653aa7b9778d541f668c2f",
    "ssl2-md5": "ed4526ba8226d969f47edbb27b2f1144",
    "ssl3-md5": "ed4526ba8226d969f47edbb27b2f1144",
    "ssl3-sha1": "57d6cb41aeec20236f365b3a490c61d0cfa39611",
    "whirlpool": "1c38deb54f19b75caa86d002e5f05603d894c9a9937e552bf4afb020b14a40a2319c5dc996f7e8b5c0ce90b366321b9a8ee1725ffa05bf945a992bf919db1784"
  },
  {
    "input": "//4AP8Af//B/+AAB//gf//4AAP//+AB//4A///8Af//4AAwAAA/+fgA/4Bh//gAAOAAAP//+AAAD/P/h/h///gAAB/8=",
    "DSA": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "DSA-SHA": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "DSA-SHA1": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "DSA-SHA1-old": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "RSA-MD4": "b1b60a17789bd4d3093c0ebc28509cd1",
    "RSA-MD5": "80e6f61dff9da8673fa16dbbdb14d03d",
    "RSA-MDC2": "e5854557b5d3af15ee1abe9870d3f683",
    "RSA-RIPEMD160": "1862e03f92e0c820d5fb3750b3cd6b0959046539",
    "RSA-SHA": "139691134207cf12eb9ec7fd7c88037b60ee0982",
    "RSA-SHA1": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "RSA-SHA1-2": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "RSA-SHA224": "a0b23194cc97dcdbec1ba92a20ccb275cafc3c4bd0cbc543c3080855",
    "RSA-SHA256": "327b0e47ba3bc200579ac67ac38968e0df655e2d22ffe3adf238f7ac9029a1de",
    "RSA-SHA384": "53db2d26ea80665f7a30c7b5650cb180de649a1afdf33a2bfb926beffe5ffbadf8abdc2a34f408b68963cb308f7e0b07",
    "RSA-SHA512": "2d2b0df226f6b5d1bf32d9768e976c58c9e523fdb908b65ba43b10efd3f0b44b2bd752e508b1603c3ad86d28d0e0659ca7fa01002d9a7a17822d360575e799d6",
    "dsaEncryption": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "dsaWithSHA": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "dsaWithSHA1": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "dss1": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "ecdsa-with-SHA1": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "md4": "b1b60a17789bd4d3093c0ebc28509cd1",
    "md4WithRSAEncryption": "b1b60a17789bd4d3093c0ebc28509cd1",
    "md5": "80e6f61dff9da8673fa16dbbdb14d03d",
    "md5WithRSAEncryption": "80e6f61dff9da8673fa16dbbdb14d03d",
    "mdc2": "e5854557b5d3af15ee1abe9870d3f683",
    "mdc2WithRSA": "e5854557b5d3af15ee1abe9870d3f683",
    "ripemd": "1862e03f92e0c820d5fb3750b3cd6b0959046539",
    "ripemd160": "1862e03f92e0c820d5fb3750b3cd6b0959046539",
    "ripemd160WithRSA": "1862e03f92e0c820d5fb3750b3cd6b0959046539",
    "rmd160": "1862e03f92e0c820d5fb3750b3cd6b0959046539",
    "sha": "139691134207cf12eb9ec7fd7c88037b60ee0982",
    "sha1": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "sha1WithRSAEncryption": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "sha224": "a0b23194cc97dcdbec1ba92a20ccb275cafc3c4bd0cbc543c3080855",
    "sha224WithRSAEncryption": "a0b23194cc97dcdbec1ba92a20ccb275cafc3c4bd0cbc543c3080855",
    "sha256": "327b0e47ba3bc200579ac67ac38968e0df655e2d22ffe3adf238f7ac9029a1de",
    "sha256WithRSAEncryption": "327b0e47ba3bc200579ac67ac38968e0df655e2d22ffe3adf238f7ac9029a1de",
    "sha384": "53db2d26ea80665f7a30c7b5650cb180de649a1afdf33a2bfb926beffe5ffbadf8abdc2a34f408b68963cb308f7e0b07",
    "sha384WithRSAEncryption": "53db2d26ea80665f7a30c7b5650cb180de649a1afdf33a2bfb926beffe5ffbadf8abdc2a34f408b68963cb308f7e0b07",
    "sha512": "2d2b0df226f6b5d1bf32d9768e976c58c9e523fdb908b65ba43b10efd3f0b44b2bd752e508b1603c3ad86d28d0e0659ca7fa01002d9a7a17822d360575e799d6",
    "sha512WithRSAEncryption": "2d2b0df226f6b5d1bf32d9768e976c58c9e523fdb908b65ba43b10efd3f0b44b2bd752e508b1603c3ad86d28d0e0659ca7fa01002d9a7a17822d360575e799d6",
    "shaWithRSAEncryption": "139691134207cf12eb9ec7fd7c88037b60ee0982",
    "ssl2-md5": "80e6f61dff9da8673fa16dbbdb14d03d",
    "ssl3-md5": "80e6f61dff9da8673fa16dbbdb14d03d",
    "ssl3-sha1": "c532cb64b4ba826372bccf2b4b5793d5b88bb715",
    "whirlpool": "f8a1d24863f0e53d63b78beb2820b699066406092b592d1ec238066c22387de4f3f1644c537d9da9afb45ca3c33fc5adf9ec1b05e294671ae486d65b95d863a3"
  },
  {
    "input": "AAAH//4AAAf+AAA/4AB//8AAAH///AD+AAP/4AAfD/wAH/+AAAf///AA///wAAAf//gB/+Af//8AH4AH8AAB//gAAf//",
    "DSA": "15833b5631032663e783686a209c6a2b47a1080e",
    "DSA-SHA": "15833b5631032663e783686a209c6a2b47a1080e",
    "DSA-SHA1": "15833b5631032663e783686a209c6a2b47a1080e",
    "DSA-SHA1-old": "15833b5631032663e783686a209c6a2b47a1080e",
    "RSA-MD4": "ea930b6d997e4b84fa0b694d3ac7646e",
    "RSA-MD5": "1d52744bf1450d7c5cfdf1f0bbf967c1",
    "RSA-MDC2": "0290b6e8236b904e8e76d4b0cfd7bd97",
    "RSA-RIPEMD160": "369b5e4553148a1c8eed5e504fb193248ed51a12",
    "RSA-SHA": "d4315369acda2beb95c8b213136900fe5baed499",
    "RSA-SHA1": "15833b5631032663e783686a209c6a2b47a1080e",
    "RSA-SHA1-2": "15833b5631032663e783686a209c6a2b47a1080e",
    "RSA-SHA224": "920b84e0be9ac697f67b657c8dec761cf524f360d3316cf378a7b0a2",
    "RSA-SHA256": "bdf4ef8fcafbe13b772ca217eef56a316210e71f69cd943433087c68d9a67bb9",
    "RSA-SHA384": "57a23290e0b610841a905ea45e4de76661e1a1dbe89ced84d7ea488ad16de3eb34a0a501b669e5d4470a0205e978768d",
    "RSA-SHA512": "aab28280cbd78a6d4efdcd7c39ef64badfe6e781db9c90d25bbe9192d8d609e89e5e512b2072b462985642345643f29a4b3198c81a41f2b99967bcb6b299e227",
    "dsaEncryption": "15833b5631032663e783686a209c6a2b47a1080e",
    "dsaWithSHA": "15833b5631032663e783686a209c6a2b47a1080e",
    "dsaWithSHA1": "15833b5631032663e783686a209c6a2b47a1080e",
    "dss1": "15833b5631032663e783686a209c6a2b47a1080e",
    "ecdsa-with-SHA1": "15833b5631032663e783686a209c6a2b47a1080e",
    "md4": "ea930b6d997e4b84fa0b694d3ac7646e",
    "md4WithRSAEncryption": "ea930b6d997e4b84fa0b694d3ac7646e",
    "md5": "1d52744bf1450d7c5cfdf1f0bbf967c1",
    "md5WithRSAEncryption": "1d52744bf1450d7c5cfdf1f0bbf967c1",
    "mdc2": "0290b6e8236b904e8e76d4b0cfd7bd97",
    "mdc2WithRSA": "0290b6e8236b904e8e76d4b0cfd7bd97",
    "ripemd": "369b5e4553148a1c8eed5e504fb193248ed51a12",
    "ripemd160": "369b5e4553148a1c8eed5e504fb193248ed51a12",
    "ripemd160WithRSA": "369b5e4553148a1c8eed5e504fb193248ed51a12",
    "rmd160": "369b5e4553148a1c8eed5e504fb193248ed51a12",
    "sha": "d4315369acda2beb95c8b213136900fe5baed499",
    "sha1": "15833b5631032663e783686a209c6a2b47a1080e",
    "sha1WithRSAEncryption": "15833b5631032663e783686a209c6a2b47a1080e",
    "sha224": "920b84e0be9ac697f67b657c8dec761cf524f360d3316cf378a7b0a2",
    "sha224WithRSAEncryption": "920b84e0be9ac697f67b657c8dec761cf524f360d3316cf378a7b0a2",
    "sha256": "bdf4ef8fcafbe13b772ca217eef56a316210e71f69cd943433087c68d9a67bb9",
    "sha256WithRSAEncryption": "bdf4ef8fcafbe13b772ca217eef56a316210e71f69cd943433087c68d9a67bb9",
    "sha384": "57a23290e0b610841a905ea45e4de76661e1a1dbe89ced84d7ea488ad16de3eb34a0a501b669e5d4470a0205e978768d",
    "sha384WithRSAEncryption": "57a23290e0b610841a905ea45e4de76661e1a1dbe89ced84d7ea488ad16de3eb34a0a501b669e5d4470a0205e978768d",
    "sha512": "aab28280cbd78a6d4efdcd7c39ef64badfe6e781db9c90d25bbe9192d8d609e89e5e512b2072b462985642345643f29a4b3198c81a41f2b99967bcb6b299e227",
    "sha512WithRSAEncryption": "aab28280cbd78a6d4efdcd7c39ef64badfe6e781db9c90d25bbe9192d8d609e89e5e512b2072b462985642345643f29a4b3198c81a41f2b99967bcb6b299e227",
    "shaWithRSAEncryption": "d4315369acda2beb95c8b213136900fe5baed499",
    "ssl2-md5": "1d52744bf1450d7c5cfdf1f0bbf967c1",
    "ssl3-md5": "1d52744bf1450d7c5cfdf1f0bbf967c1",
    "ssl3-sha1": "15833b5631032663e783686a209c6a2b47a1080e",
    "whirlpool": "532d002032565e658fe0b957daa6a1a866c4bc85885cd175889cdacf8cf7da55cffec30a77ed399688d4ff8160b4c14648224a8b2dfc2900312181e5fa58ea7a"
  },
  {
    "input": "AAA///8D/gAAB8AAAH/8D/AAAB///gAAB8AAAP/+AAA///wB/3/8AB/4AB//B///4AB///wB///wAAH/+AAeAAB//AA//w==",
    "DSA": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "DSA-SHA": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "DSA-SHA1": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "DSA-SHA1-old": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "RSA-MD4": "c0e998ff5763b11cb709436c6b8cc3ef",
    "RSA-MD5": "3438a953124960bcc44611923a8844ee",
    "RSA-MDC2": "afff12f530d3c29fa1e27ed814ca67e1",
    "RSA-RIPEMD160": "c97bd95fbcbb86963ec5e5cdecd4036071e63f3a",
    "RSA-SHA": "3e3c52fb482fbe6c087f0004ecee0a79edfd341c",
    "RSA-SHA1": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "RSA-SHA1-2": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "RSA-SHA224": "6bb6de5c2f3b8daeb6667d84c1d774ffef1fce26d7f62a742c7adc5e",
    "RSA-SHA256": "72c955a5adaf9e49d565342b41b36ee5ab9b5a394d003b804e4e361a46bda571",
    "RSA-SHA384": "2eba9c18dcfa208bf6b0385c5a12b40efa0dbe9b0b4042f176dec43201c7a62523f10395f01ed353809740c385cfb140",
    "RSA-SHA512": "d6c146d5f60a8354f2ba75c199742ca029ea85cb28f136420e4f80298f231173d4b554ab960b7a4adf2710bd77a6b8e64262f3235e7ab1af631a1f0967d81048",
    "dsaEncryption": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "dsaWithSHA": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "dsaWithSHA1": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "dss1": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "ecdsa-with-SHA1": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "md4": "c0e998ff5763b11cb709436c6b8cc3ef",
    "md4WithRSAEncryption": "c0e998ff5763b11cb709436c6b8cc3ef",
    "md5": "3438a953124960bcc44611923a8844ee",
    "md5WithRSAEncryption": "3438a953124960bcc44611923a8844ee",
    "mdc2": "afff12f530d3c29fa1e27ed814ca67e1",
    "mdc2WithRSA": "afff12f530d3c29fa1e27ed814ca67e1",
    "ripemd": "c97bd95fbcbb86963ec5e5cdecd4036071e63f3a",
    "ripemd160": "c97bd95fbcbb86963ec5e5cdecd4036071e63f3a",
    "ripemd160WithRSA": "c97bd95fbcbb86963ec5e5cdecd4036071e63f3a",
    "rmd160": "c97bd95fbcbb86963ec5e5cdecd4036071e63f3a",
    "sha": "3e3c52fb482fbe6c087f0004ecee0a79edfd341c",
    "sha1": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "sha1WithRSAEncryption": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "sha224": "6bb6de5c2f3b8daeb6667d84c1d774ffef1fce26d7f62a742c7adc5e",
    "sha224WithRSAEncryption": "6bb6de5c2f3b8daeb6667d84c1d774ffef1fce26d7f62a742c7adc5e",
    "sha256": "72c955a5adaf9e49d565342b41b36ee5ab9b5a394d003b804e4e361a46bda571",
    "sha256WithRSAEncryption": "72c955a5adaf9e49d565342b41b36ee5ab9b5a394d003b804e4e361a46bda571",
    "sha384": "2eba9c18dcfa208bf6b0385c5a12b40efa0dbe9b0b4042f176dec43201c7a62523f10395f01ed353809740c385cfb140",
    "sha384WithRSAEncryption": "2eba9c18dcfa208bf6b0385c5a12b40efa0dbe9b0b4042f176dec43201c7a62523f10395f01ed353809740c385cfb140",
    "sha512": "d6c146d5f60a8354f2ba75c199742ca029ea85cb28f136420e4f80298f231173d4b554ab960b7a4adf2710bd77a6b8e64262f3235e7ab1af631a1f0967d81048",
    "sha512WithRSAEncryption": "d6c146d5f60a8354f2ba75c199742ca029ea85cb28f136420e4f80298f231173d4b554ab960b7a4adf2710bd77a6b8e64262f3235e7ab1af631a1f0967d81048",
    "shaWithRSAEncryption": "3e3c52fb482fbe6c087f0004ecee0a79edfd341c",
    "ssl2-md5": "3438a953124960bcc44611923a8844ee",
    "ssl3-md5": "3438a953124960bcc44611923a8844ee",
    "ssl3-sha1": "d04f2043c96e10cd83b574b1e1c217052cd4a6b2",
    "whirlpool": "b6385943d8bff5951eb6ee6e80ff6ff04d9db7cdfd928a80847f8f9dc9fcaf773895de2c81767aa99a11155fc9c4763024190f0443936035a928c36786b33bd3"
  },
  {
    "input": "/j//g//+AAf///AAPgAA///8AEA//gAAA/AAAHA/+A///+AfgAADw///8AAB//APgAAP4P///vAAAf/AAAB/8AAAf/7gAAA=",
    "DSA": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "DSA-SHA": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "DSA-SHA1": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "DSA-SHA1-old": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "RSA-MD4": "fb06ab2a6f0f44fead1fdaca2500e738",
    "RSA-MD5": "b2f341296dd7aabbd4fd8e011be68a7d",
    "RSA-MDC2": "8fea14cf0218c68fc738eb14f09588e3",
    "RSA-RIPEMD160": "11e597cb26f5b7be9b7a5fd7901b4b949f578e1a",
    "RSA-SHA": "f7ca608b47b90ff65e95f63a6ff60f059a259097",
    "RSA-SHA1": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "RSA-SHA1-2": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "RSA-SHA224": "36d7e31a2eadaa06f99b00ccc32503e8bc649992e98f0c4745c586d6",
    "RSA-SHA256": "cbd287d6a6707e2cdc8e63a29f758facbdab375bb252183d3af877dea8d25260",
    "RSA-SHA384": "6e010fdcccece7abaae07a26f86dfe945b089603f1013a4ae53e00b5d4c5594a83154ef5f38fefdb626a15b25fbd21ec",
    "RSA-SHA512": "d278d3750bb1e2bb657f48f47d92d468e82a1f15b589defca3d54a328e9a143c69c810d2a4d5dc4c40f544ae7134fec00471f4a9fd5fb8ce9fd8cc292be1a5d6",
    "dsaEncryption": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "dsaWithSHA": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "dsaWithSHA1": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "dss1": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "ecdsa-with-SHA1": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "md4": "fb06ab2a6f0f44fead1fdaca2500e738",
    "md4WithRSAEncryption": "fb06ab2a6f0f44fead1fdaca2500e738",
    "md5": "b2f341296dd7aabbd4fd8e011be68a7d",
    "md5WithRSAEncryption": "b2f341296dd7aabbd4fd8e011be68a7d",
    "mdc2": "8fea14cf0218c68fc738eb14f09588e3",
    "mdc2WithRSA": "8fea14cf0218c68fc738eb14f09588e3",
    "ripemd": "11e597cb26f5b7be9b7a5fd7901b4b949f578e1a",
    "ripemd160": "11e597cb26f5b7be9b7a5fd7901b4b949f578e1a",
    "ripemd160WithRSA": "11e597cb26f5b7be9b7a5fd7901b4b949f578e1a",
    "rmd160": "11e597cb26f5b7be9b7a5fd7901b4b949f578e1a",
    "sha": "f7ca608b47b90ff65e95f63a6ff60f059a259097",
    "sha1": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "sha1WithRSAEncryption": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "sha224": "36d7e31a2eadaa06f99b00ccc32503e8bc649992e98f0c4745c586d6",
    "sha224WithRSAEncryption": "36d7e31a2eadaa06f99b00ccc32503e8bc649992e98f0c4745c586d6",
    "sha256": "cbd287d6a6707e2cdc8e63a29f758facbdab375bb252183d3af877dea8d25260",
    "sha256WithRSAEncryption": "cbd287d6a6707e2cdc8e63a29f758facbdab375bb252183d3af877dea8d25260",
    "sha384": "6e010fdcccece7abaae07a26f86dfe945b089603f1013a4ae53e00b5d4c5594a83154ef5f38fefdb626a15b25fbd21ec",
    "sha384WithRSAEncryption": "6e010fdcccece7abaae07a26f86dfe945b089603f1013a4ae53e00b5d4c5594a83154ef5f38fefdb626a15b25fbd21ec",
    "sha512": "d278d3750bb1e2bb657f48f47d92d468e82a1f15b589defca3d54a328e9a143c69c810d2a4d5dc4c40f544ae7134fec00471f4a9fd5fb8ce9fd8cc292be1a5d6",
    "sha512WithRSAEncryption": "d278d3750bb1e2bb657f48f47d92d468e82a1f15b589defca3d54a328e9a143c69c810d2a4d5dc4c40f544ae7134fec00471f4a9fd5fb8ce9fd8cc292be1a5d6",
    "shaWithRSAEncryption": "f7ca608b47b90ff65e95f63a6ff60f059a259097",
    "ssl2-md5": "b2f341296dd7aabbd4fd8e011be68a7d",
    "ssl3-md5": "b2f341296dd7aabbd4fd8e011be68a7d",
    "ssl3-sha1": "e8882627c64db743f7db8b4413dd033fc63beb20",
    "whirlpool": "aa062ad77797f2e6760717322cfeb60cc80b715cd5f6b639db10f7e57bd3a951bb07e618644cc34562907047f794a981ca80996b3c08fbf90199711fc664e3a9"
  },
  {
    "input": "AAAD//AB/AAA//8AAH///4AH/4//gAAP//AAADwAA8D///4B//+ADH//+AAAH/AAAH+AAACAAAD///Af/+AA///+H/8fwAAA",
    "DSA": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "DSA-SHA": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "DSA-SHA1": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "DSA-SHA1-old": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "RSA-MD4": "0e8483bbf21dc089c51ccc6620b9e24c",
    "RSA-MD5": "322dba69658a92e9a9ace4d7177fb97d",
    "RSA-MDC2": "cb76ad1d1b33af8e8f9be8076e467f3f",
    "RSA-RIPEMD160": "14e9a1dff67ef745cb720e18f92f5c0eed54ba2d",
    "RSA-SHA": "3679289596070f3a9258fbcdafbacbeaddb94a77",
    "RSA-SHA1": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "RSA-SHA1-2": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "RSA-SHA224": "0a933fd8facdeaefa80657df37645ee534899f954568f365ada176cd",
    "RSA-SHA256": "7aa856fd19741a16ec634b1f653cfd5ac224278652e0b0a2903e274be20a048f",
    "RSA-SHA384": "c5ea936d90dc270cd5c7825312bb0d06c07cbe41e7cde5e0a14e2731af1a336f736aa2e9d1a4f1eecb05165ddb00e04a",
    "RSA-SHA512": "a13267c4d3e417c839e85649445039b75c5f63a24bcdbabf645cd98da1a4c9d86c3e8765b2d969c562f938f83101fdf4a6dc23dd346c3d4a7686c6e5c93bfe32",
    "dsaEncryption": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "dsaWithSHA": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "dsaWithSHA1": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "dss1": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "ecdsa-with-SHA1": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "md4": "0e8483bbf21dc089c51ccc6620b9e24c",
    "md4WithRSAEncryption": "0e8483bbf21dc089c51ccc6620b9e24c",
    "md5": "322dba69658a92e9a9ace4d7177fb97d",
    "md5WithRSAEncryption": "322dba69658a92e9a9ace4d7177fb97d",
    "mdc2": "cb76ad1d1b33af8e8f9be8076e467f3f",
    "mdc2WithRSA": "cb76ad1d1b33af8e8f9be8076e467f3f",
    "ripemd": "14e9a1dff67ef745cb720e18f92f5c0eed54ba2d",
    "ripemd160": "14e9a1dff67ef745cb720e18f92f5c0eed54ba2d",
    "ripemd160WithRSA": "14e9a1dff67ef745cb720e18f92f5c0eed54ba2d",
    "rmd160": "14e9a1dff67ef745cb720e18f92f5c0eed54ba2d",
    "sha": "3679289596070f3a9258fbcdafbacbeaddb94a77",
    "sha1": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "sha1WithRSAEncryption": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "sha224": "0a933fd8facdeaefa80657df37645ee534899f954568f365ada176cd",
    "sha224WithRSAEncryption": "0a933fd8facdeaefa80657df37645ee534899f954568f365ada176cd",
    "sha256": "7aa856fd19741a16ec634b1f653cfd5ac224278652e0b0a2903e274be20a048f",
    "sha256WithRSAEncryption": "7aa856fd19741a16ec634b1f653cfd5ac224278652e0b0a2903e274be20a048f",
    "sha384": "c5ea936d90dc270cd5c7825312bb0d06c07cbe41e7cde5e0a14e2731af1a336f736aa2e9d1a4f1eecb05165ddb00e04a",
    "sha384WithRSAEncryption": "c5ea936d90dc270cd5c7825312bb0d06c07cbe41e7cde5e0a14e2731af1a336f736aa2e9d1a4f1eecb05165ddb00e04a",
    "sha512": "a13267c4d3e417c839e85649445039b75c5f63a24bcdbabf645cd98da1a4c9d86c3e8765b2d969c562f938f83101fdf4a6dc23dd346c3d4a7686c6e5c93bfe32",
    "sha512WithRSAEncryption": "a13267c4d3e417c839e85649445039b75c5f63a24bcdbabf645cd98da1a4c9d86c3e8765b2d969c562f938f83101fdf4a6dc23dd346c3d4a7686c6e5c93bfe32",
    "shaWithRSAEncryption": "3679289596070f3a9258fbcdafbacbeaddb94a77",
    "ssl2-md5": "322dba69658a92e9a9ace4d7177fb97d",
    "ssl3-md5": "322dba69658a92e9a9ace4d7177fb97d",
    "ssl3-sha1": "cd2d32286b8867bc124a0af2236fc74be3622199",
    "whirlpool": "2bc9eb2655b27a07decc64d39d5362556a696f8fdbb54f108a25b60ff049447fe31375291eac5c1fa88654cdcac14e692293e15cfb3f5058e4d367ff47d91838"
  },
  {
    "input": "///+B//AAAY/n/AH//A//h///4H//8AAAgD+AAQABwAAAf///gAAB//+AB/+AAD//+AH+AD///wAP/P//8AAf//gAA///Af//w==",
    "DSA": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "DSA-SHA": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "DSA-SHA1": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "DSA-SHA1-old": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "RSA-MD4": "a4ca70e522435979e927cf285a457d6a",
    "RSA-MD5": "b94a434a98efa493fbbc989360671bb9",
    "RSA-MDC2": "43ad1a98c00d2174e1b9f2e40d9a4645",
    "RSA-RIPEMD160": "e5a817bc97cc6f6f2981f2048a341529cbd7487b",
    "RSA-SHA": "686126c3ed810e13043743736bfb16c874082ef8",
    "RSA-SHA1": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "RSA-SHA1-2": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "RSA-SHA224": "aa57a857afa42b403375fc25e41d7726b8e88de6e827f004dcaff27a",
    "RSA-SHA256": "8410cdb01c659f05741fd29469d0dbb0251b4fd8e708abeec4a879047fba7c37",
    "RSA-SHA384": "dfde801f1429c77be11eb1d2e753c5fc9802357554c37cd0fcc02b3cc96a26428a3c4b2b053de62b09bdbf2d2e4faeec",
    "RSA-SHA512": "94e96bdf3f3c8f4c5eca524a5e22cdcd779c964be49c958ed7810dedfca6fa93025784d5b1c1a181092b99c4b590a3f8b08efe4b6266a1326e322d03c67ed6a9",
    "dsaEncryption": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "dsaWithSHA": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "dsaWithSHA1": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "dss1": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "ecdsa-with-SHA1": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "md4": "a4ca70e522435979e927cf285a457d6a",
    "md4WithRSAEncryption": "a4ca70e522435979e927cf285a457d6a",
    "md5": "b94a434a98efa493fbbc989360671bb9",
    "md5WithRSAEncryption": "b94a434a98efa493fbbc989360671bb9",
    "mdc2": "43ad1a98c00d2174e1b9f2e40d9a4645",
    "mdc2WithRSA": "43ad1a98c00d2174e1b9f2e40d9a4645",
    "ripemd": "e5a817bc97cc6f6f2981f2048a341529cbd7487b",
    "ripemd160": "e5a817bc97cc6f6f2981f2048a341529cbd7487b",
    "ripemd160WithRSA": "e5a817bc97cc6f6f2981f2048a341529cbd7487b",
    "rmd160": "e5a817bc97cc6f6f2981f2048a341529cbd7487b",
    "sha": "686126c3ed810e13043743736bfb16c874082ef8",
    "sha1": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "sha1WithRSAEncryption": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "sha224": "aa57a857afa42b403375fc25e41d7726b8e88de6e827f004dcaff27a",
    "sha224WithRSAEncryption": "aa57a857afa42b403375fc25e41d7726b8e88de6e827f004dcaff27a",
    "sha256": "8410cdb01c659f05741fd29469d0dbb0251b4fd8e708abeec4a879047fba7c37",
    "sha256WithRSAEncryption": "8410cdb01c659f05741fd29469d0dbb0251b4fd8e708abeec4a879047fba7c37",
    "sha384": "dfde801f1429c77be11eb1d2e753c5fc9802357554c37cd0fcc02b3cc96a26428a3c4b2b053de62b09bdbf2d2e4faeec",
    "sha384WithRSAEncryption": "dfde801f1429c77be11eb1d2e753c5fc9802357554c37cd0fcc02b3cc96a26428a3c4b2b053de62b09bdbf2d2e4faeec",
    "sha512": "94e96bdf3f3c8f4c5eca524a5e22cdcd779c964be49c958ed7810dedfca6fa93025784d5b1c1a181092b99c4b590a3f8b08efe4b6266a1326e322d03c67ed6a9",
    "sha512WithRSAEncryption": "94e96bdf3f3c8f4c5eca524a5e22cdcd779c964be49c958ed7810dedfca6fa93025784d5b1c1a181092b99c4b590a3f8b08efe4b6266a1326e322d03c67ed6a9",
    "shaWithRSAEncryption": "686126c3ed810e13043743736bfb16c874082ef8",
    "ssl2-md5": "b94a434a98efa493fbbc989360671bb9",
    "ssl3-md5": "b94a434a98efa493fbbc989360671bb9",
    "ssl3-sha1": "019b70d745375091ed5c7b218445ec986d0f5a82",
    "whirlpool": "91f5ba55f93ce51d814a8da695da5c70d41a76901238252c950fc2a9375fcc7d7ea9d7b8d71b15abdeb276076f38f6237a670d34b8a39c820d8e5b9bbcd26dda"
  },
  {
    "input": "//AAAH4AHgP//wAAc//wAAAP/9///9/8AAf+B//+AAAf3+//8D///AAAB///8AAAf+AH/4AAAH/gA///+f/gAAA/4////AAAA/8=",
    "DSA": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "DSA-SHA": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "DSA-SHA1": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "DSA-SHA1-old": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "RSA-MD4": "e0b33c8215006c4079c5bd82ca280d93",
    "RSA-MD5": "cd9ce9a01ed810af70999d8ce4c63811",
    "RSA-MDC2": "7b0c28be85018111ce5742b9dfe40567",
    "RSA-RIPEMD160": "5fc7055572f08fb6507163f1370362a331127e16",
    "RSA-SHA": "05d606bbf62b5fb7d79ebd816005397e231bbdb1",
    "RSA-SHA1": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "RSA-SHA1-2": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "RSA-SHA224": "a903dd425031ab66475b6829321dd6dd86a5ad129e49b4c96cf77a3f",
    "RSA-SHA256": "b5f811baf9c441d04f010f76bcd7eae80c5bb249a40ce37436f0a0296849b8ab",
    "RSA-SHA384": "77663453fac83b7a470d97d13b1b1eddd9ea12c1a35512358f650b056886c91b48eb409895625191c73efe88b0af3bf2",
    "RSA-SHA512": "c446aae62b6dce4d53665d0598c2e980280edee0c7cac0a033157cca9a9fe6e70e31f334c42ed17de21fce51599cb0392cef59d1c6fade17928892a531f4937e",
    "dsaEncryption": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "dsaWithSHA": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "dsaWithSHA1": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "dss1": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "ecdsa-with-SHA1": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "md4": "e0b33c8215006c4079c5bd82ca280d93",
    "md4WithRSAEncryption": "e0b33c8215006c4079c5bd82ca280d93",
    "md5": "cd9ce9a01ed810af70999d8ce4c63811",
    "md5WithRSAEncryption": "cd9ce9a01ed810af70999d8ce4c63811",
    "mdc2": "7b0c28be85018111ce5742b9dfe40567",
    "mdc2WithRSA": "7b0c28be85018111ce5742b9dfe40567",
    "ripemd": "5fc7055572f08fb6507163f1370362a331127e16",
    "ripemd160": "5fc7055572f08fb6507163f1370362a331127e16",
    "ripemd160WithRSA": "5fc7055572f08fb6507163f1370362a331127e16",
    "rmd160": "5fc7055572f08fb6507163f1370362a331127e16",
    "sha": "05d606bbf62b5fb7d79ebd816005397e231bbdb1",
    "sha1": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "sha1WithRSAEncryption": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "sha224": "a903dd425031ab66475b6829321dd6dd86a5ad129e49b4c96cf77a3f",
    "sha224WithRSAEncryption": "a903dd425031ab66475b6829321dd6dd86a5ad129e49b4c96cf77a3f",
    "sha256": "b5f811baf9c441d04f010f76bcd7eae80c5bb249a40ce37436f0a0296849b8ab",
    "sha256WithRSAEncryption": "b5f811baf9c441d04f010f76bcd7eae80c5bb249a40ce37436f0a0296849b8ab",
    "sha384": "77663453fac83b7a470d97d13b1b1eddd9ea12c1a35512358f650b056886c91b48eb409895625191c73efe88b0af3bf2",
    "sha384WithRSAEncryption": "77663453fac83b7a470d97d13b1b1eddd9ea12c1a35512358f650b056886c91b48eb409895625191c73efe88b0af3bf2",
    "sha512": "c446aae62b6dce4d53665d0598c2e980280edee0c7cac0a033157cca9a9fe6e70e31f334c42ed17de21fce51599cb0392cef59d1c6fade17928892a531f4937e",
    "sha512WithRSAEncryption": "c446aae62b6dce4d53665d0598c2e980280edee0c7cac0a033157cca9a9fe6e70e31f334c42ed17de21fce51599cb0392cef59d1c6fade17928892a531f4937e",
    "shaWithRSAEncryption": "05d606bbf62b5fb7d79ebd816005397e231bbdb1",
    "ssl2-md5": "cd9ce9a01ed810af70999d8ce4c63811",
    "ssl3-md5": "cd9ce9a01ed810af70999d8ce4c63811",
    "ssl3-sha1": "e5ff5fec1dadbaed02bf2dad4026be6a96b3f2af",
    "whirlpool": "65dc765df2bfe7ac3be6cb6bac0bcbc69cdce18c8da069f40837a0a9f3d3472f0ee1bcf0c37fced33d93a21c10631c60071f24e1a749fd2611d6387b1d8be94e"
  },
  {
    "input": "AAP/AAA//4AB8AAP/gAABgAD///8A///94AAAH/AD//j/g8AAH//AH/4AAD//+4AfgHAAB/gAAf///gAAOH//D/n///4P//8AB//",
    "DSA": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "DSA-SHA": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "DSA-SHA1": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "DSA-SHA1-old": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "RSA-MD4": "e0ed0e64439e624f72f41be2dffa1223",
    "RSA-MD5": "4c639abb75a0ae0f22c3384cb9c68441",
    "RSA-MDC2": "98d39d205c66427b1f308a109d811d64",
    "RSA-RIPEMD160": "bc2f04769c2689968d61059f2b964d40399b6005",
    "RSA-SHA": "7dc2a915a78faa03a7b6550773c8cfd1280cc0d6",
    "RSA-SHA1": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "RSA-SHA1-2": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "RSA-SHA224": "d79284f1cf212b598ddcad25c285c18db8f079ab680ebbd2cc24cde8",
    "RSA-SHA256": "9be38d9ac8a9c30e8a5e86e3ede291b23bb381ee41dc662421e394f6b8b9881e",
    "RSA-SHA384": "abc18c34c8eb0510bb48311f03202ad7e4cf23b70e79635758c5dc6aba0a1bf931c2b1c567d0d6011cd1b8bce0b1a9a6",
    "RSA-SHA512": "cfefe5a6d4a13bb1d4f8d728ef310efc0bd4fb22c01ef685bc6e9b8459591391e871525448484c46ff6872f4b7d60af3c2530ba3d474ba6cf9ab0ec9cd9a4c90",
    "dsaEncryption": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "dsaWithSHA": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "dsaWithSHA1": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "dss1": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "ecdsa-with-SHA1": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "md4": "e0ed0e64439e624f72f41be2dffa1223",
    "md4WithRSAEncryption": "e0ed0e64439e624f72f41be2dffa1223",
    "md5": "4c639abb75a0ae0f22c3384cb9c68441",
    "md5WithRSAEncryption": "4c639abb75a0ae0f22c3384cb9c68441",
    "mdc2": "98d39d205c66427b1f308a109d811d64",
    "mdc2WithRSA": "98d39d205c66427b1f308a109d811d64",
    "ripemd": "bc2f04769c2689968d61059f2b964d40399b6005",
    "ripemd160": "bc2f04769c2689968d61059f2b964d40399b6005",
    "ripemd160WithRSA": "bc2f04769c2689968d61059f2b964d40399b6005",
    "rmd160": "bc2f04769c2689968d61059f2b964d40399b6005",
    "sha": "7dc2a915a78faa03a7b6550773c8cfd1280cc0d6",
    "sha1": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "sha1WithRSAEncryption": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "sha224": "d79284f1cf212b598ddcad25c285c18db8f079ab680ebbd2cc24cde8",
    "sha224WithRSAEncryption": "d79284f1cf212b598ddcad25c285c18db8f079ab680ebbd2cc24cde8",
    "sha256": "9be38d9ac8a9c30e8a5e86e3ede291b23bb381ee41dc662421e394f6b8b9881e",
    "sha256WithRSAEncryption": "9be38d9ac8a9c30e8a5e86e3ede291b23bb381ee41dc662421e394f6b8b9881e",
    "sha384": "abc18c34c8eb0510bb48311f03202ad7e4cf23b70e79635758c5dc6aba0a1bf931c2b1c567d0d6011cd1b8bce0b1a9a6",
    "sha384WithRSAEncryption": "abc18c34c8eb0510bb48311f03202ad7e4cf23b70e79635758c5dc6aba0a1bf931c2b1c567d0d6011cd1b8bce0b1a9a6",
    "sha512": "cfefe5a6d4a13bb1d4f8d728ef310efc0bd4fb22c01ef685bc6e9b8459591391e871525448484c46ff6872f4b7d60af3c2530ba3d474ba6cf9ab0ec9cd9a4c90",
    "sha512WithRSAEncryption": "cfefe5a6d4a13bb1d4f8d728ef310efc0bd4fb22c01ef685bc6e9b8459591391e871525448484c46ff6872f4b7d60af3c2530ba3d474ba6cf9ab0ec9cd9a4c90",
    "shaWithRSAEncryption": "7dc2a915a78faa03a7b6550773c8cfd1280cc0d6",
    "ssl2-md5": "4c639abb75a0ae0f22c3384cb9c68441",
    "ssl3-md5": "4c639abb75a0ae0f22c3384cb9c68441",
    "ssl3-sha1": "6f4e23b3f2e2c068d13921fe4e5e053ffed4e146",
    "whirlpool": "db664aab16edb3a9d3f3664905b46d6d512c1b0f803c3ef1c7ce554a46119f0e343d1468e7365102dc18e245e02a7d64db69ab636e4ef811c8868cb76b7baa78"
  },
  {
    "input": "AAAP//gAAP///AAf4Af//wAB/9//gAA///wAAA/8B/8AAP+AAAP///AAB///8AD//h///+A///4AAGAAAP//f//wAAP//8AHAAH//w==",
    "DSA": "25e179602a575c915067566fba6da930e97f8678",
    "DSA-SHA": "25e179602a575c915067566fba6da930e97f8678",
    "DSA-SHA1": "25e179602a575c915067566fba6da930e97f8678",
    "DSA-SHA1-old": "25e179602a575c915067566fba6da930e97f8678",
    "RSA-MD4": "ba1eb37016b94baba3a1ea3c695809ba",
    "RSA-MD5": "fe31ffcced1717988c854c2f3492466e",
    "RSA-MDC2": "d38c6004161e0117d76ca9fb6cd94d96",
    "RSA-RIPEMD160": "33731b611b0b525f589952fab271b2fc90ecaa7b",
    "RSA-SHA": "4b35df60174be0bd138e6649209086a209e2fb82",
    "RSA-SHA1": "25e179602a575c915067566fba6da930e97f8678",
    "RSA-SHA1-2": "25e179602a575c915067566fba6da930e97f8678",
    "RSA-SHA224": "f7d5e2c06b1b25c24243f89b69b1417e8308e135414c319dd45c0a04",
    "RSA-SHA256": "ef45cac2d6f325a523c40a989f5554e152f8d65cbd22d35824d1f28378658432",
    "RSA-SHA384": "4e21a1ab31bffedd33c2800087346e1f9a5452bcd10889033726451b06fbaa2b51da0d1b47fc52b1cc739e61101e1ea4",
    "RSA-SHA512": "b82c05e20de02ae1ee1e68f0c0467b40ccf82e201f96176f940f39117df5d8ad76c351b934cc6aab9d6c857d8d90af4ba4881d11cb8c83bd924aba69d6eafc20",
    "dsaEncryption": "25e179602a575c915067566fba6da930e97f8678",
    "dsaWithSHA": "25e179602a575c915067566fba6da930e97f8678",
    "dsaWithSHA1": "25e179602a575c915067566fba6da930e97f8678",
    "dss1": "25e179602a575c915067566fba6da930e97f8678",
    "ecdsa-with-SHA1": "25e179602a575c915067566fba6da930e97f8678",
    "md4": "ba1eb37016b94baba3a1ea3c695809ba",
    "md4WithRSAEncryption": "ba1eb37016b94baba3a1ea3c695809ba",
    "md5": "fe31ffcced1717988c854c2f3492466e",
    "md5WithRSAEncryption": "fe31ffcced1717988c854c2f3492466e",
    "mdc2": "d38c6004161e0117d76ca9fb6cd94d96",
    "mdc2WithRSA": "d38c6004161e0117d76ca9fb6cd94d96",
    "ripemd": "33731b611b0b525f589952fab271b2fc90ecaa7b",
    "ripemd160": "33731b611b0b525f589952fab271b2fc90ecaa7b",
    "ripemd160WithRSA": "33731b611b0b525f589952fab271b2fc90ecaa7b",
    "rmd160": "33731b611b0b525f589952fab271b2fc90ecaa7b",
    "sha": "4b35df60174be0bd138e6649209086a209e2fb82",
    "sha1": "25e179602a575c915067566fba6da930e97f8678",
    "sha1WithRSAEncryption": "25e179602a575c915067566fba6da930e97f8678",
    "sha224": "f7d5e2c06b1b25c24243f89b69b1417e8308e135414c319dd45c0a04",
    "sha224WithRSAEncryption": "f7d5e2c06b1b25c24243f89b69b1417e8308e135414c319dd45c0a04",
    "sha256": "ef45cac2d6f325a523c40a989f5554e152f8d65cbd22d35824d1f28378658432",
    "sha256WithRSAEncryption": "ef45cac2d6f325a523c40a989f5554e152f8d65cbd22d35824d1f28378658432",
    "sha384": "4e21a1ab31bffedd33c2800087346e1f9a5452bcd10889033726451b06fbaa2b51da0d1b47fc52b1cc739e61101e1ea4",
    "sha384WithRSAEncryption": "4e21a1ab31bffedd33c2800087346e1f9a5452bcd10889033726451b06fbaa2b51da0d1b47fc52b1cc739e61101e1ea4",
    "sha512": "b82c05e20de02ae1ee1e68f0c0467b40ccf82e201f96176f940f39117df5d8ad76c351b934cc6aab9d6c857d8d90af4ba4881d11cb8c83bd924aba69d6eafc20",
    "sha512WithRSAEncryption": "b82c05e20de02ae1ee1e68f0c0467b40ccf82e201f96176f940f39117df5d8ad76c351b934cc6aab9d6c857d8d90af4ba4881d11cb8c83bd924aba69d6eafc20",
    "shaWithRSAEncryption": "4b35df60174be0bd138e6649209086a209e2fb82",
    "ssl2-md5": "fe31ffcced1717988c854c2f3492466e",
    "ssl3-md5": "fe31ffcced1717988c854c2f3492466e",
    "ssl3-sha1": "25e179602a575c915067566fba6da930e97f8678",
    "whirlpool": "7554acf88217af7a14a40e8652ae446bb5ca4e392b376670193a408346a9a351d167cce27dc295a4f5a56c196500718644c6ee9749aef46767b4e153b87712d5"
  },
  {
    "input": "AAAgf/4Pg///gAP/AAAA///gAB///+AAP/5///AAH///4AAA//+H/8AAF/3/n//7///gAAPgAAf/n///gAB///8AAf//wP//wBAAAB8=",
    "DSA": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "DSA-SHA": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "DSA-SHA1": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "DSA-SHA1-old": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "RSA-MD4": "043ce077b7bb5344fe630ff312606d9b",
    "RSA-MD5": "b56d81337f9bbf0d838df831e9b40216",
    "RSA-MDC2": "63422bd277fbf0daa6dc2ccfe1f28987",
    "RSA-RIPEMD160": "eea47325f8882a8ddf48ebb209ea4acb077ba971",
    "RSA-SHA": "04586f55308d4a48e75b536d9a4155457c974ea5",
    "RSA-SHA1": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "RSA-SHA1-2": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "RSA-SHA224": "856ae98e7c9a3471d3b0ebd8e5b60bda641046059f8c041f51ba4c61",
    "RSA-SHA256": "8e3d126f3a316e0ec49741a3ae6215e29c4acaee364272b7087d9b766579e00c",
    "RSA-SHA384": "8afbdb82a65f2c525d3b998e2ccd7f03769b6eb3dbb0f9b4d505202a753fd369f4140f2dcf5970c5cd501099e6823e21",
    "RSA-SHA512": "c4b58481ad9de99212d85c7382dabf79b3e59307152163d748573a56fa844718ded648b77b31dcf1456b269fbf3e4e27c7edb89a10c4a0bbb5f014bbb3962293",
    "dsaEncryption": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "dsaWithSHA": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "dsaWithSHA1": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "dss1": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "ecdsa-with-SHA1": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "md4": "043ce077b7bb5344fe630ff312606d9b",
    "md4WithRSAEncryption": "043ce077b7bb5344fe630ff312606d9b",
    "md5": "b56d81337f9bbf0d838df831e9b40216",
    "md5WithRSAEncryption": "b56d81337f9bbf0d838df831e9b40216",
    "mdc2": "63422bd277fbf0daa6dc2ccfe1f28987",
    "mdc2WithRSA": "63422bd277fbf0daa6dc2ccfe1f28987",
    "ripemd": "eea47325f8882a8ddf48ebb209ea4acb077ba971",
    "ripemd160": "eea47325f8882a8ddf48ebb209ea4acb077ba971",
    "ripemd160WithRSA": "eea47325f8882a8ddf48ebb209ea4acb077ba971",
    "rmd160": "eea47325f8882a8ddf48ebb209ea4acb077ba971",
    "sha": "04586f55308d4a48e75b536d9a4155457c974ea5",
    "sha1": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "sha1WithRSAEncryption": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "sha224": "856ae98e7c9a3471d3b0ebd8e5b60bda641046059f8c041f51ba4c61",
    "sha224WithRSAEncryption": "856ae98e7c9a3471d3b0ebd8e5b60bda641046059f8c041f51ba4c61",
    "sha256": "8e3d126f3a316e0ec49741a3ae6215e29c4acaee364272b7087d9b766579e00c",
    "sha256WithRSAEncryption": "8e3d126f3a316e0ec49741a3ae6215e29c4acaee364272b7087d9b766579e00c",
    "sha384": "8afbdb82a65f2c525d3b998e2ccd7f03769b6eb3dbb0f9b4d505202a753fd369f4140f2dcf5970c5cd501099e6823e21",
    "sha384WithRSAEncryption": "8afbdb82a65f2c525d3b998e2ccd7f03769b6eb3dbb0f9b4d505202a753fd369f4140f2dcf5970c5cd501099e6823e21",
    "sha512": "c4b58481ad9de99212d85c7382dabf79b3e59307152163d748573a56fa844718ded648b77b31dcf1456b269fbf3e4e27c7edb89a10c4a0bbb5f014bbb3962293",
    "sha512WithRSAEncryption": "c4b58481ad9de99212d85c7382dabf79b3e59307152163d748573a56fa844718ded648b77b31dcf1456b269fbf3e4e27c7edb89a10c4a0bbb5f014bbb3962293",
    "shaWithRSAEncryption": "04586f55308d4a48e75b536d9a4155457c974ea5",
    "ssl2-md5": "b56d81337f9bbf0d838df831e9b40216",
    "ssl3-md5": "b56d81337f9bbf0d838df831e9b40216",
    "ssl3-sha1": "67ded0e68e235c8a523e051e86108eeb757efbfd",
    "whirlpool": "12c9d37c12df2db88eae2c5a3031829dba0ccfa2c7fd7beaaa2a8f623f7b6de2ee43de816f2db69902b1f80c6aecb42a4a31737cf61ab945ead77c9f3ac569c6"
  },
  {
    "input": "AAAH/8AA/+AAB/+AA4AAD/gAAH///gAAGAD/8CAB//4AAGAP8OAD//4APh///AAD/4AAAP/4AAEAAA/z//wAA///4f//wfAAAP///wAA",
    "DSA": "af78536ea83c822796745556d62a3ee82c7be098",
    "DSA-SHA": "af78536ea83c822796745556d62a3ee82c7be098",
    "DSA-SHA1": "af78536ea83c822796745556d62a3ee82c7be098",
    "DSA-SHA1-old": "af78536ea83c822796745556d62a3ee82c7be098",
    "RSA-MD4": "7f9c8eef3364d36d66bde429a1a36f05",
    "RSA-MD5": "0be9161adfeb2dd1c3f20338bfb3ec4b",
    "RSA-MDC2": "91895baa7223f2e1b9d8acaa6490066a",
    "RSA-RIPEMD160": "01ea808373af742994bc4440e60dfc9ea17c79ad",
    "RSA-SHA": "35389446aef5b4b708ac2504f69da56119a2b7a1",
    "RSA-SHA1": "af78536ea83c822796745556d62a3ee82c7be098",
    "RSA-SHA1-2": "af78536ea83c822796745556d62a3ee82c7be098",
    "RSA-SHA224": "387a49bd7462ffa6df6d885202092417ed918a170e5b5babafc5fc84",
    "RSA-SHA256": "a43ee360b1dc90c573bef4145e1d4557166d7cce6ea1ed33e0cbd909643c3621",
    "RSA-SHA384": "f9b8d542a5b27f8d36e03d6062027e1dbfe05df3cd55561005d1ab4c26f8c97ce2c0bf42eee14ea72a7b1d6a8ed4aad6",
    "RSA-SHA512": "c5706521041bc9554215370dfc9bc0c480fa995d46ed5698a63270dba26a901ae059232d9377c150a7d254d23197e56d05ab1e195b8e25dddd9282eb253cc1cb",
    "dsaEncryption": "af78536ea83c822796745556d62a3ee82c7be098",
    "dsaWithSHA": "af78536ea83c822796745556d62a3ee82c7be098",
    "dsaWithSHA1": "af78536ea83c822796745556d62a3ee82c7be098",
    "dss1": "af78536ea83c822796745556d62a3ee82c7be098",
    "ecdsa-with-SHA1": "af78536ea83c822796745556d62a3ee82c7be098",
    "md4": "7f9c8eef3364d36d66bde429a1a36f05",
    "md4WithRSAEncryption": "7f9c8eef3364d36d66bde429a1a36f05",
    "md5": "0be9161adfeb2dd1c3f20338bfb3ec4b",
    "md5WithRSAEncryption": "0be9161adfeb2dd1c3f20338bfb3ec4b",
    "mdc2": "91895baa7223f2e1b9d8acaa6490066a",
    "mdc2WithRSA": "91895baa7223f2e1b9d8acaa6490066a",
    "ripemd": "01ea808373af742994bc4440e60dfc9ea17c79ad",
    "ripemd160": "01ea808373af742994bc4440e60dfc9ea17c79ad",
    "ripemd160WithRSA": "01ea808373af742994bc4440e60dfc9ea17c79ad",
    "rmd160": "01ea808373af742994bc4440e60dfc9ea17c79ad",
    "sha": "35389446aef5b4b708ac2504f69da56119a2b7a1",
    "sha1": "af78536ea83c822796745556d62a3ee82c7be098",
    "sha1WithRSAEncryption": "af78536ea83c822796745556d62a3ee82c7be098",
    "sha224": "387a49bd7462ffa6df6d885202092417ed918a170e5b5babafc5fc84",
    "sha224WithRSAEncryption": "387a49bd7462ffa6df6d885202092417ed918a170e5b5babafc5fc84",
    "sha256": "a43ee360b1dc90c573bef4145e1d4557166d7cce6ea1ed33e0cbd909643c3621",
    "sha256WithRSAEncryption": "a43ee360b1dc90c573bef4145e1d4557166d7cce6ea1ed33e0cbd909643c3621",
    "sha384": "f9b8d542a5b27f8d36e03d6062027e1dbfe05df3cd55561005d1ab4c26f8c97ce2c0bf42eee14ea72a7b1d6a8ed4aad6",
    "sha384WithRSAEncryption": "f9b8d542a5b27f8d36e03d6062027e1dbfe05df3cd55561005d1ab4c26f8c97ce2c0bf42eee14ea72a7b1d6a8ed4aad6",
    "sha512": "c5706521041bc9554215370dfc9bc0c480fa995d46ed5698a63270dba26a901ae059232d9377c150a7d254d23197e56d05ab1e195b8e25dddd9282eb253cc1cb",
    "sha512WithRSAEncryption": "c5706521041bc9554215370dfc9bc0c480fa995d46ed5698a63270dba26a901ae059232d9377c150a7d254d23197e56d05ab1e195b8e25dddd9282eb253cc1cb",
    "shaWithRSAEncryption": "35389446aef5b4b708ac2504f69da56119a2b7a1",
    "ssl2-md5": "0be9161adfeb2dd1c3f20338bfb3ec4b",
    "ssl3-md5": "0be9161adfeb2dd1c3f20338bfb3ec4b",
    "ssl3-sha1": "af78536ea83c822796745556d62a3ee82c7be098",
    "whirlpool": "c06233aabbc0f149862da341657c771908c945a75d37a9b400675a6a491f7d21606481770ed96fe74549a54d009be7ed20eddba1ebdc2d3a37c4be8cbaef2b92"
  },
  {
    "input": "///wAAAH//wAf4f//wAAAH//wH//gAAD8P8//4AwB///H44Af///wAH//Af4AAB///wAP/AA+AAAB/8AAA4AD/+AAH/AAf+P+AAHAf///w==",
    "DSA": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "DSA-SHA": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "DSA-SHA1": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "DSA-SHA1-old": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "RSA-MD4": "5769b012c8bacc12aaa0dff947bac486",
    "RSA-MD5": "be7b7c9fa1ab09d6578a3f2a82bfafe3",
    "RSA-MDC2": "f7dfde1489a0857b14f0d2ca35a8d587",
    "RSA-RIPEMD160": "79cc9fd2779727a67bd592cdcb5b32cfba7752e4",
    "RSA-SHA": "52318c99d321af4a496cade427ebed24821e247c",
    "RSA-SHA1": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "RSA-SHA1-2": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "RSA-SHA224": "7b4db2c69f766cf2ddaf3ba0e25ed9db407ae002866bddc435f7f6d9",
    "RSA-SHA256": "5396745f9645dad55b732efde57de49c2ae40624fee192579014dc2b79d814d5",
    "RSA-SHA384": "542d258b04158fd5a7246005a205f39d04f9e0819a43bda53ced1b4bfb352d3af75d6e95220c0d88c88e269d881db3f1",
    "RSA-SHA512": "7d8a31bde32e9ca2d71e7088c919e0b3640b44bb861071b67f862d748839185fa9ced67edfa8aa6761bc82163efbf343c5ec6b5f26970026361672b686f4251a",
    "dsaEncryption": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "dsaWithSHA": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "dsaWithSHA1": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "dss1": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "ecdsa-with-SHA1": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "md4": "5769b012c8bacc12aaa0dff947bac486",
    "md4WithRSAEncryption": "5769b012c8bacc12aaa0dff947bac486",
    "md5": "be7b7c9fa1ab09d6578a3f2a82bfafe3",
    "md5WithRSAEncryption": "be7b7c9fa1ab09d6578a3f2a82bfafe3",
    "mdc2": "f7dfde1489a0857b14f0d2ca35a8d587",
    "mdc2WithRSA": "f7dfde1489a0857b14f0d2ca35a8d587",
    "ripemd": "79cc9fd2779727a67bd592cdcb5b32cfba7752e4",
    "ripemd160": "79cc9fd2779727a67bd592cdcb5b32cfba7752e4",
    "ripemd160WithRSA": "79cc9fd2779727a67bd592cdcb5b32cfba7752e4",
    "rmd160": "79cc9fd2779727a67bd592cdcb5b32cfba7752e4",
    "sha": "52318c99d321af4a496cade427ebed24821e247c",
    "sha1": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "sha1WithRSAEncryption": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "sha224": "7b4db2c69f766cf2ddaf3ba0e25ed9db407ae002866bddc435f7f6d9",
    "sha224WithRSAEncryption": "7b4db2c69f766cf2ddaf3ba0e25ed9db407ae002866bddc435f7f6d9",
    "sha256": "5396745f9645dad55b732efde57de49c2ae40624fee192579014dc2b79d814d5",
    "sha256WithRSAEncryption": "5396745f9645dad55b732efde57de49c2ae40624fee192579014dc2b79d814d5",
    "sha384": "542d258b04158fd5a7246005a205f39d04f9e0819a43bda53ced1b4bfb352d3af75d6e95220c0d88c88e269d881db3f1",
    "sha384WithRSAEncryption": "542d258b04158fd5a7246005a205f39d04f9e0819a43bda53ced1b4bfb352d3af75d6e95220c0d88c88e269d881db3f1",
    "sha512": "7d8a31bde32e9ca2d71e7088c919e0b3640b44bb861071b67f862d748839185fa9ced67edfa8aa6761bc82163efbf343c5ec6b5f26970026361672b686f4251a",
    "sha512WithRSAEncryption": "7d8a31bde32e9ca2d71e7088c919e0b3640b44bb861071b67f862d748839185fa9ced67edfa8aa6761bc82163efbf343c5ec6b5f26970026361672b686f4251a",
    "shaWithRSAEncryption": "52318c99d321af4a496cade427ebed24821e247c",
    "ssl2-md5": "be7b7c9fa1ab09d6578a3f2a82bfafe3",
    "ssl3-md5": "be7b7c9fa1ab09d6578a3f2a82bfafe3",
    "ssl3-sha1": "64d7ac52e47834be72455f6c64325f9c358b610d",
    "whirlpool": "2c50b3c64b854f4410f7b32adb82439412d38b035096caf95884c9336b8d2aecb1795218d57f592d7767f1e98068c63707c61948a5d121d1a6081bc656f71ffb"
  },
  {
    "input": "/4A//z/+AAD///+f//g///gAAA/4AAAD/gB///8AD/8B//AP/+Agf//8/wH4AAf/4AB/+AAP/4AAAH/gAD/4Af4AB//wAAB////AAAH///8=",
    "DSA": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "DSA-SHA": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "DSA-SHA1": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "DSA-SHA1-old": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "RSA-MD4": "59871deaec467a863fa9e971864f9ceb",
    "RSA-MD5": "f6bdc04b4611ddf0aa8403bcb04292f7",
    "RSA-MDC2": "2fdea8d86abe5a366735b0c79c1b1dc8",
    "RSA-RIPEMD160": "8289141680171d1fafd4a234613788f51a9ed504",
    "RSA-SHA": "808f17895d75dd558becdd0bbd0885927b7e4ab8",
    "RSA-SHA1": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "RSA-SHA1-2": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "RSA-SHA224": "ff92027dd3fb54d85cfc0e03c3c8e1782ba526ee9080b581a9992dc5",
    "RSA-SHA256": "b617be050dedb47be64d82dc19e3d84b6799b5bada18944df5417759a85e445e",
    "RSA-SHA384": "aed6284880a9caf799ff972de663e68fb2cb6948e2571df884831e532e4aee503fb27141e83b220bb2efaf96205ebbbd",
    "RSA-SHA512": "b78eb89bbe88846d006364775b54beb32e9308fd578c810fcec790d053de4abd7554831a67c63c9e9cfaa39bb327de60097d90b4728034410ba20b4398bf59c3",
    "dsaEncryption": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "dsaWithSHA": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "dsaWithSHA1": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "dss1": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "ecdsa-with-SHA1": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "md4": "59871deaec467a863fa9e971864f9ceb",
    "md4WithRSAEncryption": "59871deaec467a863fa9e971864f9ceb",
    "md5": "f6bdc04b4611ddf0aa8403bcb04292f7",
    "md5WithRSAEncryption": "f6bdc04b4611ddf0aa8403bcb04292f7",
    "mdc2": "2fdea8d86abe5a366735b0c79c1b1dc8",
    "mdc2WithRSA": "2fdea8d86abe5a366735b0c79c1b1dc8",
    "ripemd": "8289141680171d1fafd4a234613788f51a9ed504",
    "ripemd160": "8289141680171d1fafd4a234613788f51a9ed504",
    "ripemd160WithRSA": "8289141680171d1fafd4a234613788f51a9ed504",
    "rmd160": "8289141680171d1fafd4a234613788f51a9ed504",
    "sha": "808f17895d75dd558becdd0bbd0885927b7e4ab8",
    "sha1": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "sha1WithRSAEncryption": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "sha224": "ff92027dd3fb54d85cfc0e03c3c8e1782ba526ee9080b581a9992dc5",
    "sha224WithRSAEncryption": "ff92027dd3fb54d85cfc0e03c3c8e1782ba526ee9080b581a9992dc5",
    "sha256": "b617be050dedb47be64d82dc19e3d84b6799b5bada18944df5417759a85e445e",
    "sha256WithRSAEncryption": "b617be050dedb47be64d82dc19e3d84b6799b5bada18944df5417759a85e445e",
    "sha384": "aed6284880a9caf799ff972de663e68fb2cb6948e2571df884831e532e4aee503fb27141e83b220bb2efaf96205ebbbd",
    "sha384WithRSAEncryption": "aed6284880a9caf799ff972de663e68fb2cb6948e2571df884831e532e4aee503fb27141e83b220bb2efaf96205ebbbd",
    "sha512": "b78eb89bbe88846d006364775b54beb32e9308fd578c810fcec790d053de4abd7554831a67c63c9e9cfaa39bb327de60097d90b4728034410ba20b4398bf59c3",
    "sha512WithRSAEncryption": "b78eb89bbe88846d006364775b54beb32e9308fd578c810fcec790d053de4abd7554831a67c63c9e9cfaa39bb327de60097d90b4728034410ba20b4398bf59c3",
    "shaWithRSAEncryption": "808f17895d75dd558becdd0bbd0885927b7e4ab8",
    "ssl2-md5": "f6bdc04b4611ddf0aa8403bcb04292f7",
    "ssl3-md5": "f6bdc04b4611ddf0aa8403bcb04292f7",
    "ssl3-sha1": "9d4866baa3639c13e541f250ffa3d8bc157a491f",
    "whirlpool": "1500ac67e5dca38e5cefdf16ae0fff6e36a54552096845e7f849defd37e2e1b13dc4950e01bcea1edf40c32aad6031de5dd9c64ecd9fa50d0e31808e58d780fc"
  },
  {
    "input": "AH//4AAB///4AAA///wAf/4AAAP///AD/+AAf4AAD/8/+AAAf///AAeAH4P4AAAP/j//wD///h/gAAfAA//wD8AAA///gAAAf4AAAP//gAAA",
    "DSA": "2e258811961d3eb876f30e7019241a01f9517bec",
    "DSA-SHA": "2e258811961d3eb876f30e7019241a01f9517bec",
    "DSA-SHA1": "2e258811961d3eb876f30e7019241a01f9517bec",
    "DSA-SHA1-old": "2e258811961d3eb876f30e7019241a01f9517bec",
    "RSA-MD4": "cd9eaa2cf632ea84c4a33f591b615fca",
    "RSA-MD5": "1c7146a10f3c76b0c1dd4af354b14982",
    "RSA-MDC2": "d19fd9c547abc3762168aa444e1fdbfe",
    "RSA-RIPEMD160": "594ce2c0fd56a495a20c3576a6cab628adb8d245",
    "RSA-SHA": "7d763f41ab0edc18ee03ea6f1e60443b27bf6ee7",
    "RSA-SHA1": "2e258811961d3eb876f30e7019241a01f9517bec",
    "RSA-SHA1-2": "2e258811961d3eb876f30e7019241a01f9517bec",
    "RSA-SHA224": "f2d520bb881c5420638f0c33629a5d9063d13bd2e483fd998a8d4092",
    "RSA-SHA256": "17d5520a82dd7c945de6a92200d036cd95bb16330f0f95df802d23e90c8e5c2c",
    "RSA-SHA384": "fa2bb9e84da6538bda60469291c92795edb64f5debedbb4eca6b55374a3f81c9a4bf1ca5537d800a7e2328237fe214e1",
    "RSA-SHA512": "37956b43f14a97e2ba3c4a58f13599b8ed7aa419d199939d25b069c00c43d71731d6e9be6d5086a91d5b65aae51581f1d71c481783468c7872dabd068aa71bf6",
    "dsaEncryption": "2e258811961d3eb876f30e7019241a01f9517bec",
    "dsaWithSHA": "2e258811961d3eb876f30e7019241a01f9517bec",
    "dsaWithSHA1": "2e258811961d3eb876f30e7019241a01f9517bec",
    "dss1": "2e258811961d3eb876f30e7019241a01f9517bec",
    "ecdsa-with-SHA1": "2e258811961d3eb876f30e7019241a01f9517bec",
    "md4": "cd9eaa2cf632ea84c4a33f591b615fca",
    "md4WithRSAEncryption": "cd9eaa2cf632ea84c4a33f591b615fca",
    "md5": "1c7146a10f3c76b0c1dd4af354b14982",
    "md5WithRSAEncryption": "1c7146a10f3c76b0c1dd4af354b14982",
    "mdc2": "d19fd9c547abc3762168aa444e1fdbfe",
    "mdc2WithRSA": "d19fd9c547abc3762168aa444e1fdbfe",
    "ripemd": "594ce2c0fd56a495a20c3576a6cab628adb8d245",
    "ripemd160": "594ce2c0fd56a495a20c3576a6cab628adb8d245",
    "ripemd160WithRSA": "594ce2c0fd56a495a20c3576a6cab628adb8d245",
    "rmd160": "594ce2c0fd56a495a20c3576a6cab628adb8d245",
    "sha": "7d763f41ab0edc18ee03ea6f1e60443b27bf6ee7",
    "sha1": "2e258811961d3eb876f30e7019241a01f9517bec",
    "sha1WithRSAEncryption": "2e258811961d3eb876f30e7019241a01f9517bec",
    "sha224": "f2d520bb881c5420638f0c33629a5d9063d13bd2e483fd998a8d4092",
    "sha224WithRSAEncryption": "f2d520bb881c5420638f0c33629a5d9063d13bd2e483fd998a8d4092",
    "sha256": "17d5520a82dd7c945de6a92200d036cd95bb16330f0f95df802d23e90c8e5c2c",
    "sha256WithRSAEncryption": "17d5520a82dd7c945de6a92200d036cd95bb16330f0f95df802d23e90c8e5c2c",
    "sha384": "fa2bb9e84da6538bda60469291c92795edb64f5debedbb4eca6b55374a3f81c9a4bf1ca5537d800a7e2328237fe214e1",
    "sha384WithRSAEncryption": "fa2bb9e84da6538bda60469291c92795edb64f5debedbb4eca6b55374a3f81c9a4bf1ca5537d800a7e2328237fe214e1",
    "sha512": "37956b43f14a97e2ba3c4a58f13599b8ed7aa419d199939d25b069c00c43d71731d6e9be6d5086a91d5b65aae51581f1d71c481783468c7872dabd068aa71bf6",
    "sha512WithRSAEncryption": "37956b43f14a97e2ba3c4a58f13599b8ed7aa419d199939d25b069c00c43d71731d6e9be6d5086a91d5b65aae51581f1d71c481783468c7872dabd068aa71bf6",
    "shaWithRSAEncryption": "7d763f41ab0edc18ee03ea6f1e60443b27bf6ee7",
    "ssl2-md5": "1c7146a10f3c76b0c1dd4af354b14982",
    "ssl3-md5": "1c7146a10f3c76b0c1dd4af354b14982",
    "ssl3-sha1": "2e258811961d3eb876f30e7019241a01f9517bec",
    "whirlpool": "186a8ad78da11af36c26a991265c43322df1c94d6cc2bd8573c0b165680e5c3033415e5de785355920c17706ff9cf476150180f17a1fa1cf33f53e40711e54a1"
  },
  {
    "input": "/gAAIAAEAA///8AB//g/wAAA///AAP///4AAP/gAf//+f/gAf/+AB//AAA//+AB//8AA///AP///4A///+DgH/+AAAB//8Bx///8AAH///gAAA==",
    "DSA": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "DSA-SHA": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "DSA-SHA1": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "DSA-SHA1-old": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "RSA-MD4": "a8f4ede471fb47445c6d358d603a8f65",
    "RSA-MD5": "0d3d987f94aee65f84436696bcf33ea4",
    "RSA-MDC2": "2db8a6df01a2dc676552ea3aff1b29cf",
    "RSA-RIPEMD160": "ffe837eae27ac304cacfc4dee09d320bdad1846e",
    "RSA-SHA": "7a933688ce6ca9fdbb12c1fc10a2b6a8c3e1af9b",
    "RSA-SHA1": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "RSA-SHA1-2": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "RSA-SHA224": "2a19b663463dbac2dc2af1be0dfe1ce2066ab608b3f7787b3ae3c33e",
    "RSA-SHA256": "b71e5a677801057ec719ae2655732720644bc8f999a8698876c92e4323d4ae0f",
    "RSA-SHA384": "f96a5754e25deef63d7478f1e0d4cb8c25a3f6471af5a6ca0bb98290d7a1a69c5a80ceb1404671f903289dab0c1def2c",
    "RSA-SHA512": "bb5802eb5e8011a5b87c81cb4b8562ea03ab2e82168963cfe2c88999d8b341e63b1215a356b328b4cf515b0975da9a5ef51bac9cd13ea8f938e24dcd1a52b9fa",
    "dsaEncryption": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "dsaWithSHA": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "dsaWithSHA1": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "dss1": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "ecdsa-with-SHA1": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "md4": "a8f4ede471fb47445c6d358d603a8f65",
    "md4WithRSAEncryption": "a8f4ede471fb47445c6d358d603a8f65",
    "md5": "0d3d987f94aee65f84436696bcf33ea4",
    "md5WithRSAEncryption": "0d3d987f94aee65f84436696bcf33ea4",
    "mdc2": "2db8a6df01a2dc676552ea3aff1b29cf",
    "mdc2WithRSA": "2db8a6df01a2dc676552ea3aff1b29cf",
    "ripemd": "ffe837eae27ac304cacfc4dee09d320bdad1846e",
    "ripemd160": "ffe837eae27ac304cacfc4dee09d320bdad1846e",
    "ripemd160WithRSA": "ffe837eae27ac304cacfc4dee09d320bdad1846e",
    "rmd160": "ffe837eae27ac304cacfc4dee09d320bdad1846e",
    "sha": "7a933688ce6ca9fdbb12c1fc10a2b6a8c3e1af9b",
    "sha1": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "sha1WithRSAEncryption": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "sha224": "2a19b663463dbac2dc2af1be0dfe1ce2066ab608b3f7787b3ae3c33e",
    "sha224WithRSAEncryption": "2a19b663463dbac2dc2af1be0dfe1ce2066ab608b3f7787b3ae3c33e",
    "sha256": "b71e5a677801057ec719ae2655732720644bc8f999a8698876c92e4323d4ae0f",
    "sha256WithRSAEncryption": "b71e5a677801057ec719ae2655732720644bc8f999a8698876c92e4323d4ae0f",
    "sha384": "f96a5754e25deef63d7478f1e0d4cb8c25a3f6471af5a6ca0bb98290d7a1a69c5a80ceb1404671f903289dab0c1def2c",
    "sha384WithRSAEncryption": "f96a5754e25deef63d7478f1e0d4cb8c25a3f6471af5a6ca0bb98290d7a1a69c5a80ceb1404671f903289dab0c1def2c",
    "sha512": "bb5802eb5e8011a5b87c81cb4b8562ea03ab2e82168963cfe2c88999d8b341e63b1215a356b328b4cf515b0975da9a5ef51bac9cd13ea8f938e24dcd1a52b9fa",
    "sha512WithRSAEncryption": "bb5802eb5e8011a5b87c81cb4b8562ea03ab2e82168963cfe2c88999d8b341e63b1215a356b328b4cf515b0975da9a5ef51bac9cd13ea8f938e24dcd1a52b9fa",
    "shaWithRSAEncryption": "7a933688ce6ca9fdbb12c1fc10a2b6a8c3e1af9b",
    "ssl2-md5": "0d3d987f94aee65f84436696bcf33ea4",
    "ssl3-md5": "0d3d987f94aee65f84436696bcf33ea4",
    "ssl3-sha1": "8e0ebc487146f83bc9077a1630e0fb3ab3c89e63",
    "whirlpool": "3ea41665d1eb284f421a3aabfb6d11392381673fd393ddd5e32cbe734071c5f7eecc2471d12fbaaaedbcdaebf92445ad83940152ecef3290f09c802ce00ba300"
  },
  {
    "input": "///gAA//8AAAP///wAD//wAAD///4AAB/wAAH//gP/wAA+Af8B/4AAA////AD/4AACAAAP/8AA///j///wD/8AAAgAAfA+AB//oAP+AAAHAAAA8=",
    "DSA": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "DSA-SHA": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "DSA-SHA1": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "DSA-SHA1-old": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "RSA-MD4": "1164629c3626b86827984dcf0c2aa302",
    "RSA-MD5": "1a5c9ac3ee859361ad5477ea792506a3",
    "RSA-MDC2": "5c8fc9113df0c8c6dceb80fb7e6e652a",
    "RSA-RIPEMD160": "a640d32ae7931f023f5aab36355e9b4fe7ac88b6",
    "RSA-SHA": "57648c0b0494d77dbe298cd09c7413f6303f98ce",
    "RSA-SHA1": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "RSA-SHA1-2": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "RSA-SHA224": "5f9694a1cbb0634b4752f256fef456ecd2efb6fb0d4e758fb0471276",
    "RSA-SHA256": "80c6a41efdfe452d1ad6f3b0d5eb31b962c332a9bb7e4f7ee6f4aaa18a3b81d4",
    "RSA-SHA384": "55b692939a2ba5895df0704df30c01a4c86d33ca843c70550e4ea03b6e2e4c4a413aff20f72ccef49cc77616e6af5797",
    "RSA-SHA512": "493f75fc17c2a89a35ca0be8995dc126a2d205897c91b5b120751218b987e371299bbb1f22ad39df68c3d4366790f971fc29fddef5758d78759777b73b9b619d",
    "dsaEncryption": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "dsaWithSHA": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "dsaWithSHA1": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "dss1": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "ecdsa-with-SHA1": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "md4": "1164629c3626b86827984dcf0c2aa302",
    "md4WithRSAEncryption": "1164629c3626b86827984dcf0c2aa302",
    "md5": "1a5c9ac3ee859361ad5477ea792506a3",
    "md5WithRSAEncryption": "1a5c9ac3ee859361ad5477ea792506a3",
    "mdc2": "5c8fc9113df0c8c6dceb80fb7e6e652a",
    "mdc2WithRSA": "5c8fc9113df0c8c6dceb80fb7e6e652a",
    "ripemd": "a640d32ae7931f023f5aab36355e9b4fe7ac88b6",
    "ripemd160": "a640d32ae7931f023f5aab36355e9b4fe7ac88b6",
    "ripemd160WithRSA": "a640d32ae7931f023f5aab36355e9b4fe7ac88b6",
    "rmd160": "a640d32ae7931f023f5aab36355e9b4fe7ac88b6",
    "sha": "57648c0b0494d77dbe298cd09c7413f6303f98ce",
    "sha1": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "sha1WithRSAEncryption": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "sha224": "5f9694a1cbb0634b4752f256fef456ecd2efb6fb0d4e758fb0471276",
    "sha224WithRSAEncryption": "5f9694a1cbb0634b4752f256fef456ecd2efb6fb0d4e758fb0471276",
    "sha256": "80c6a41efdfe452d1ad6f3b0d5eb31b962c332a9bb7e4f7ee6f4aaa18a3b81d4",
    "sha256WithRSAEncryption": "80c6a41efdfe452d1ad6f3b0d5eb31b962c332a9bb7e4f7ee6f4aaa18a3b81d4",
    "sha384": "55b692939a2ba5895df0704df30c01a4c86d33ca843c70550e4ea03b6e2e4c4a413aff20f72ccef49cc77616e6af5797",
    "sha384WithRSAEncryption": "55b692939a2ba5895df0704df30c01a4c86d33ca843c70550e4ea03b6e2e4c4a413aff20f72ccef49cc77616e6af5797",
    "sha512": "493f75fc17c2a89a35ca0be8995dc126a2d205897c91b5b120751218b987e371299bbb1f22ad39df68c3d4366790f971fc29fddef5758d78759777b73b9b619d",
    "sha512WithRSAEncryption": "493f75fc17c2a89a35ca0be8995dc126a2d205897c91b5b120751218b987e371299bbb1f22ad39df68c3d4366790f971fc29fddef5758d78759777b73b9b619d",
    "shaWithRSAEncryption": "57648c0b0494d77dbe298cd09c7413f6303f98ce",
    "ssl2-md5": "1a5c9ac3ee859361ad5477ea792506a3",
    "ssl3-md5": "1a5c9ac3ee859361ad5477ea792506a3",
    "ssl3-sha1": "ce8953741fff3425d2311fbbf4ab481b669def70",
    "whirlpool": "e9a8f61e7d754a692e4fcf837e103c4e7370a7f869cf3c690f4389211cbfb00403deb4f93bddf997dfeb9b7820b9cd8f9905bdd4c5e946cd27330a4601a49bd9"
  },
  {
    "input": "/f/AACAB/gA/+AAD/wAAA/j/z8P///wAA////AAAeD//8AH/4A///wAAB////P//+AAB/4AAB////AAAHAAB//8H+AAAH///8AAB/gB///Af/AAA",
    "DSA": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "DSA-SHA": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "DSA-SHA1": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "DSA-SHA1-old": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "RSA-MD4": "fcb0116444df9a4f02803876de218848",
    "RSA-MD5": "e827d60f27e35d8e5b05af748ba897dd",
    "RSA-MDC2": "687a212075d534e8282565b4e9d6c4d6",
    "RSA-RIPEMD160": "5c88cd25e0b55a2534d5bc6fdad192c853c0f83e",
    "RSA-SHA": "8507cc667959f7cb4ca9311304c32f31cfa61e16",
    "RSA-SHA1": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "RSA-SHA1-2": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "RSA-SHA224": "471398eba2908ec0a0d595d8e8de668e350d576146ad083dd3dac3bd",
    "RSA-SHA256": "32ae8512b486d4523ca7a630556758655a5cff12aa5cfcb8dc5e65b21a257f4a",
    "RSA-SHA384": "0281ab7ccffe79f3c749c06debbd2da368fca55fbc1725ecf4bb0a28fd967e0efc9482125a37711f11b910435a2a460d",
    "RSA-SHA512": "f5af63acbedce005bcb250c44ebee7e9b63200e2d515c6ec74d072ed66adb79f52f44000de5dad0961c8b058f59ebaf9db40806aaab9b71e72d50c7cb2a97576",
    "dsaEncryption": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "dsaWithSHA": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "dsaWithSHA1": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "dss1": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "ecdsa-with-SHA1": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "md4": "fcb0116444df9a4f02803876de218848",
    "md4WithRSAEncryption": "fcb0116444df9a4f02803876de218848",
    "md5": "e827d60f27e35d8e5b05af748ba897dd",
    "md5WithRSAEncryption": "e827d60f27e35d8e5b05af748ba897dd",
    "mdc2": "687a212075d534e8282565b4e9d6c4d6",
    "mdc2WithRSA": "687a212075d534e8282565b4e9d6c4d6",
    "ripemd": "5c88cd25e0b55a2534d5bc6fdad192c853c0f83e",
    "ripemd160": "5c88cd25e0b55a2534d5bc6fdad192c853c0f83e",
    "ripemd160WithRSA": "5c88cd25e0b55a2534d5bc6fdad192c853c0f83e",
    "rmd160": "5c88cd25e0b55a2534d5bc6fdad192c853c0f83e",
    "sha": "8507cc667959f7cb4ca9311304c32f31cfa61e16",
    "sha1": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "sha1WithRSAEncryption": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "sha224": "471398eba2908ec0a0d595d8e8de668e350d576146ad083dd3dac3bd",
    "sha224WithRSAEncryption": "471398eba2908ec0a0d595d8e8de668e350d576146ad083dd3dac3bd",
    "sha256": "32ae8512b486d4523ca7a630556758655a5cff12aa5cfcb8dc5e65b21a257f4a",
    "sha256WithRSAEncryption": "32ae8512b486d4523ca7a630556758655a5cff12aa5cfcb8dc5e65b21a257f4a",
    "sha384": "0281ab7ccffe79f3c749c06debbd2da368fca55fbc1725ecf4bb0a28fd967e0efc9482125a37711f11b910435a2a460d",
    "sha384WithRSAEncryption": "0281ab7ccffe79f3c749c06debbd2da368fca55fbc1725ecf4bb0a28fd967e0efc9482125a37711f11b910435a2a460d",
    "sha512": "f5af63acbedce005bcb250c44ebee7e9b63200e2d515c6ec74d072ed66adb79f52f44000de5dad0961c8b058f59ebaf9db40806aaab9b71e72d50c7cb2a97576",
    "sha512WithRSAEncryption": "f5af63acbedce005bcb250c44ebee7e9b63200e2d515c6ec74d072ed66adb79f52f44000de5dad0961c8b058f59ebaf9db40806aaab9b71e72d50c7cb2a97576",
    "shaWithRSAEncryption": "8507cc667959f7cb4ca9311304c32f31cfa61e16",
    "ssl2-md5": "e827d60f27e35d8e5b05af748ba897dd",
    "ssl3-md5": "e827d60f27e35d8e5b05af748ba897dd",
    "ssl3-sha1": "789d1d2dab52086bd90c0e137e2515ed9c6b59b5",
    "whirlpool": "eb0468f0206e6f2156271ed8adf9c9bc4cc5e12fb3cc42bfc00942b2431c45ecc0759b9b7faa494c4f5fa842ced33f592db7cbdba30cf9a29a9214221b0677b5"
  },
  {
    "input": "AAAAP/8AAAf///wAAAHgD/+D/AH///AP/wAAAD///8Af///gACAAAD///wAA//wD///wAB///AAAA///wH+AAP///wAPD///4AAA//gAAP/+AAAP/w==",
    "DSA": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "DSA-SHA": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "DSA-SHA1": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "DSA-SHA1-old": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "RSA-MD4": "f780a554f2679d39d9ff6638a171f99f",
    "RSA-MD5": "5b7899bf7a6267d9b3b8c82f241a1d7b",
    "RSA-MDC2": "b5662774e6b7234b2bffcf1a6390c050",
    "RSA-RIPEMD160": "d0fb08d21488aef0d85201f786fad47a64d9d4ee",
    "RSA-SHA": "71f4809a9efdb9208f8907290f852146ed2a3b4c",
    "RSA-SHA1": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "RSA-SHA1-2": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "RSA-SHA224": "9586dc5765ee61d7acb7cc1320158f1ae112db3e499b2518516632e1",
    "RSA-SHA256": "0f14c68ffe8c26e9d2ecdd5ea8027b6549b3e8742023ffbdc7547227cc27ec2c",
    "RSA-SHA384": "2429f589e94bdaad5b35149fe1d347616f5d8e13a4062c79cf9ecf1c48966d59a4a9e49184afa096eb1d755ae2406313",
    "RSA-SHA512": "781dc172a8c8757c56daf68cee5ce6a19b7180334fb33277c7e31031f9e68214b6356fec09725b2e9f7a1f9ffbf3a1371e3c0001c5b5d11a626b797fc649d49b",
    "dsaEncryption": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "dsaWithSHA": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "dsaWithSHA1": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "dss1": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "ecdsa-with-SHA1": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "md4": "f780a554f2679d39d9ff6638a171f99f",
    "md4WithRSAEncryption": "f780a554f2679d39d9ff6638a171f99f",
    "md5": "5b7899bf7a6267d9b3b8c82f241a1d7b",
    "md5WithRSAEncryption": "5b7899bf7a6267d9b3b8c82f241a1d7b",
    "mdc2": "b5662774e6b7234b2bffcf1a6390c050",
    "mdc2WithRSA": "b5662774e6b7234b2bffcf1a6390c050",
    "ripemd": "d0fb08d21488aef0d85201f786fad47a64d9d4ee",
    "ripemd160": "d0fb08d21488aef0d85201f786fad47a64d9d4ee",
    "ripemd160WithRSA": "d0fb08d21488aef0d85201f786fad47a64d9d4ee",
    "rmd160": "d0fb08d21488aef0d85201f786fad47a64d9d4ee",
    "sha": "71f4809a9efdb9208f8907290f852146ed2a3b4c",
    "sha1": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "sha1WithRSAEncryption": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "sha224": "9586dc5765ee61d7acb7cc1320158f1ae112db3e499b2518516632e1",
    "sha224WithRSAEncryption": "9586dc5765ee61d7acb7cc1320158f1ae112db3e499b2518516632e1",
    "sha256": "0f14c68ffe8c26e9d2ecdd5ea8027b6549b3e8742023ffbdc7547227cc27ec2c",
    "sha256WithRSAEncryption": "0f14c68ffe8c26e9d2ecdd5ea8027b6549b3e8742023ffbdc7547227cc27ec2c",
    "sha384": "2429f589e94bdaad5b35149fe1d347616f5d8e13a4062c79cf9ecf1c48966d59a4a9e49184afa096eb1d755ae2406313",
    "sha384WithRSAEncryption": "2429f589e94bdaad5b35149fe1d347616f5d8e13a4062c79cf9ecf1c48966d59a4a9e49184afa096eb1d755ae2406313",
    "sha512": "781dc172a8c8757c56daf68cee5ce6a19b7180334fb33277c7e31031f9e68214b6356fec09725b2e9f7a1f9ffbf3a1371e3c0001c5b5d11a626b797fc649d49b",
    "sha512WithRSAEncryption": "781dc172a8c8757c56daf68cee5ce6a19b7180334fb33277c7e31031f9e68214b6356fec09725b2e9f7a1f9ffbf3a1371e3c0001c5b5d11a626b797fc649d49b",
    "shaWithRSAEncryption": "71f4809a9efdb9208f8907290f852146ed2a3b4c",
    "ssl2-md5": "5b7899bf7a6267d9b3b8c82f241a1d7b",
    "ssl3-md5": "5b7899bf7a6267d9b3b8c82f241a1d7b",
    "ssl3-sha1": "b76ce7472700dd68d6328b7aa8437fb051d15745",
    "whirlpool": "b04e6ff15a22ac5dcc31684f7b906f1dc9986881615a68a2e5612208a2694af3eabdea0012db0a182def39581b11177cbd4f2c2c02edae15abd7d6948abc49f7"
  },
  {
    "input": "//4DgAAD///AP///AAP///gAAAH//8/8AADg7/gAD//j+AA///+AP7/+AAD//AAAAf8AAM/AAfwAAH///8AAEH///P4AAAfA////j/8AAB+eAAAB//8=",
    "DSA": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "DSA-SHA": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "DSA-SHA1": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "DSA-SHA1-old": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "RSA-MD4": "77e0d1457a282455baed22f0b552c7ba",
    "RSA-MD5": "6dc9fe740cf4a4b93cb0953a3c2a6026",
    "RSA-MDC2": "406437d55be09f14d932b1bf33ffed39",
    "RSA-RIPEMD160": "59896e45f25098aa6afd585b74f528b9317e62e4",
    "RSA-SHA": "5039f18a070245dec0d008ba682bc717a2f60f3c",
    "RSA-SHA1": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "RSA-SHA1-2": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "RSA-SHA224": "4385df93cb2b95cb2565bfa0b88c73540b653deb0fc1e407bd737204",
    "RSA-SHA256": "85dff510ebd3f1fa617a2273ed67ef5abe4774cfe95657fe380e75b25090664d",
    "RSA-SHA384": "49ee586792de3b0ae45ad44689d7a74694a6ad4f467315815afde426219feae640fce9b2283ff769ba6d28e7e28df8a1",
    "RSA-SHA512": "6a295f58b75db5d93485951c5b411adce64309498ce0a189974145b70ecb145b2aba84ee62e72a90a5324aa7fb3b527e9e842bb2c54db9ce58d9bc4550f5f7d9",
    "dsaEncryption": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "dsaWithSHA": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "dsaWithSHA1": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "dss1": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "ecdsa-with-SHA1": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "md4": "77e0d1457a282455baed22f0b552c7ba",
    "md4WithRSAEncryption": "77e0d1457a282455baed22f0b552c7ba",
    "md5": "6dc9fe740cf4a4b93cb0953a3c2a6026",
    "md5WithRSAEncryption": "6dc9fe740cf4a4b93cb0953a3c2a6026",
    "mdc2": "406437d55be09f14d932b1bf33ffed39",
    "mdc2WithRSA": "406437d55be09f14d932b1bf33ffed39",
    "ripemd": "59896e45f25098aa6afd585b74f528b9317e62e4",
    "ripemd160": "59896e45f25098aa6afd585b74f528b9317e62e4",
    "ripemd160WithRSA": "59896e45f25098aa6afd585b74f528b9317e62e4",
    "rmd160": "59896e45f25098aa6afd585b74f528b9317e62e4",
    "sha": "5039f18a070245dec0d008ba682bc717a2f60f3c",
    "sha1": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "sha1WithRSAEncryption": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "sha224": "4385df93cb2b95cb2565bfa0b88c73540b653deb0fc1e407bd737204",
    "sha224WithRSAEncryption": "4385df93cb2b95cb2565bfa0b88c73540b653deb0fc1e407bd737204",
    "sha256": "85dff510ebd3f1fa617a2273ed67ef5abe4774cfe95657fe380e75b25090664d",
    "sha256WithRSAEncryption": "85dff510ebd3f1fa617a2273ed67ef5abe4774cfe95657fe380e75b25090664d",
    "sha384": "49ee586792de3b0ae45ad44689d7a74694a6ad4f467315815afde426219feae640fce9b2283ff769ba6d28e7e28df8a1",
    "sha384WithRSAEncryption": "49ee586792de3b0ae45ad44689d7a74694a6ad4f467315815afde426219feae640fce9b2283ff769ba6d28e7e28df8a1",
    "sha512": "6a295f58b75db5d93485951c5b411adce64309498ce0a189974145b70ecb145b2aba84ee62e72a90a5324aa7fb3b527e9e842bb2c54db9ce58d9bc4550f5f7d9",
    "sha512WithRSAEncryption": "6a295f58b75db5d93485951c5b411adce64309498ce0a189974145b70ecb145b2aba84ee62e72a90a5324aa7fb3b527e9e842bb2c54db9ce58d9bc4550f5f7d9",
    "shaWithRSAEncryption": "5039f18a070245dec0d008ba682bc717a2f60f3c",
    "ssl2-md5": "6dc9fe740cf4a4b93cb0953a3c2a6026",
    "ssl3-md5": "6dc9fe740cf4a4b93cb0953a3c2a6026",
    "ssl3-sha1": "f218669b596c5ffb0b1c14bd03c467fc873230a0",
    "whirlpool": "9c4c4eef21f475aa465495e3ea407cd568fe3026304d5f2cb2c1661c65b42f04d5c224b66b6cf6a4cd12a950f6c5c800fa986f141fe52f7ad45382c637d6db2b"
  },
  {
    "input": "AH//4AAB///D/4ABA/wAAAD8Af//+H/n8AAAf8A////AAAAf/4AAAf/gAABwAAAcf//4H/wAAAfv4P//wf/8AAAB////oAf/AB4AH/wAADgAGMAAAH//",
    "DSA": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "DSA-SHA": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "DSA-SHA1": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "DSA-SHA1-old": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "RSA-MD4": "640b7163f4e578a6e1b37678c79785b7",
    "RSA-MD5": "27adf814806fd4a51c1ffc84122c5c8a",
    "RSA-MDC2": "727a18112aa78beae425cf04d17865e8",
    "RSA-RIPEMD160": "023a2bad26bafc46f9c35b9c21ca8d0ab5caa333",
    "RSA-SHA": "f4aafc8ee250c01332d1d872755f832f4411b965",
    "RSA-SHA1": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "RSA-SHA1-2": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "RSA-SHA224": "38856bb823d33dbdc63494d53e8d670472173b75ce0ba4e3c384fbc0",
    "RSA-SHA256": "7a852eb3b59ad350c9d47adf1ce0812d06866cca8e1f2c65c893e7952a62eea4",
    "RSA-SHA384": "d1dd95785a7fc1feb0939b922952b5181183386d2ac5609a5d05668390b1a9414cd8b35acc250f2fdb163d600aad1e16",
    "RSA-SHA512": "82976c7f43220e623b217ac30133205c212d56ab94f2c5f132bf318454ae1e485aeac0941b28008dbc87fcd20d635c3ac5fdf5260421fff25ee90f70a521fe27",
    "dsaEncryption": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "dsaWithSHA": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "dsaWithSHA1": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "dss1": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "ecdsa-with-SHA1": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "md4": "640b7163f4e578a6e1b37678c79785b7",
    "md4WithRSAEncryption": "640b7163f4e578a6e1b37678c79785b7",
    "md5": "27adf814806fd4a51c1ffc84122c5c8a",
    "md5WithRSAEncryption": "27adf814806fd4a51c1ffc84122c5c8a",
    "mdc2": "727a18112aa78beae425cf04d17865e8",
    "mdc2WithRSA": "727a18112aa78beae425cf04d17865e8",
    "ripemd": "023a2bad26bafc46f9c35b9c21ca8d0ab5caa333",
    "ripemd160": "023a2bad26bafc46f9c35b9c21ca8d0ab5caa333",
    "ripemd160WithRSA": "023a2bad26bafc46f9c35b9c21ca8d0ab5caa333",
    "rmd160": "023a2bad26bafc46f9c35b9c21ca8d0ab5caa333",
    "sha": "f4aafc8ee250c01332d1d872755f832f4411b965",
    "sha1": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "sha1WithRSAEncryption": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "sha224": "38856bb823d33dbdc63494d53e8d670472173b75ce0ba4e3c384fbc0",
    "sha224WithRSAEncryption": "38856bb823d33dbdc63494d53e8d670472173b75ce0ba4e3c384fbc0",
    "sha256": "7a852eb3b59ad350c9d47adf1ce0812d06866cca8e1f2c65c893e7952a62eea4",
    "sha256WithRSAEncryption": "7a852eb3b59ad350c9d47adf1ce0812d06866cca8e1f2c65c893e7952a62eea4",
    "sha384": "d1dd95785a7fc1feb0939b922952b5181183386d2ac5609a5d05668390b1a9414cd8b35acc250f2fdb163d600aad1e16",
    "sha384WithRSAEncryption": "d1dd95785a7fc1feb0939b922952b5181183386d2ac5609a5d05668390b1a9414cd8b35acc250f2fdb163d600aad1e16",
    "sha512": "82976c7f43220e623b217ac30133205c212d56ab94f2c5f132bf318454ae1e485aeac0941b28008dbc87fcd20d635c3ac5fdf5260421fff25ee90f70a521fe27",
    "sha512WithRSAEncryption": "82976c7f43220e623b217ac30133205c212d56ab94f2c5f132bf318454ae1e485aeac0941b28008dbc87fcd20d635c3ac5fdf5260421fff25ee90f70a521fe27",
    "shaWithRSAEncryption": "f4aafc8ee250c01332d1d872755f832f4411b965",
    "ssl2-md5": "27adf814806fd4a51c1ffc84122c5c8a",
    "ssl3-md5": "27adf814806fd4a51c1ffc84122c5c8a",
    "ssl3-sha1": "1ff3bdbe0d504cb0cdfab17e6c37aba6b3cffded",
    "whirlpool": "4e49d9de1786f2294e83f100fee22e8e40a0ecdefd7a89bc55a7f9d15e8b0d2354c86a530eba5dd8bf4f0e63ad3ff1795f2382d21ef22dc6823de4da4b9e05fd"
  },
  {
    "input": "AA//+AAAB/8A/AAAA//8AAf//+AAAP/8D/8AAA///g+AB/8D///5//4AAAP4AAAH4AAAwAAf//B////AB////AAAP///4AAAH//4H/4AAD///+A/BgAAAA==",
    "DSA": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "DSA-SHA": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "DSA-SHA1": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "DSA-SHA1-old": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "RSA-MD4": "9ed55ef0b5de9b55895b5d512ef413f8",
    "RSA-MD5": "f74e94ab992c8f27de264993a09ab429",
    "RSA-MDC2": "ade314a75b94f2ef3b584eacd69bc0f9",
    "RSA-RIPEMD160": "770b4f509217784881a8349d65526c88ef53bfcc",
    "RSA-SHA": "681af577f76c76efa8ca6661a3391346be8afc38",
    "RSA-SHA1": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "RSA-SHA1-2": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "RSA-SHA224": "eeefc4300067150acdef5fa8857e2c1f53ac206c2b250a2c6aaa3a82",
    "RSA-SHA256": "49cfe8b6302a2d45b866a26c4940d777df4f588ebe1bafeb275a8a03a1eeb0aa",
    "RSA-SHA384": "7c8c03d0c9fef5c1b5bc572a4249daed624fc6684409cd0c65dda8eca7e245d9b6ec4baa59f476b5e50e72f89d170e98",
    "RSA-SHA512": "8ed7db5fb6d0aa5bde561900450c8f49799b19be158a5d08208c5124dddad1befcda048e4d578827213a55cdd613e5ac667ab8b149ece286af5dec91af98f1ef",
    "dsaEncryption": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "dsaWithSHA": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "dsaWithSHA1": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "dss1": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "ecdsa-with-SHA1": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "md4": "9ed55ef0b5de9b55895b5d512ef413f8",
    "md4WithRSAEncryption": "9ed55ef0b5de9b55895b5d512ef413f8",
    "md5": "f74e94ab992c8f27de264993a09ab429",
    "md5WithRSAEncryption": "f74e94ab992c8f27de264993a09ab429",
    "mdc2": "ade314a75b94f2ef3b584eacd69bc0f9",
    "mdc2WithRSA": "ade314a75b94f2ef3b584eacd69bc0f9",
    "ripemd": "770b4f509217784881a8349d65526c88ef53bfcc",
    "ripemd160": "770b4f509217784881a8349d65526c88ef53bfcc",
    "ripemd160WithRSA": "770b4f509217784881a8349d65526c88ef53bfcc",
    "rmd160": "770b4f509217784881a8349d65526c88ef53bfcc",
    "sha": "681af577f76c76efa8ca6661a3391346be8afc38",
    "sha1": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "sha1WithRSAEncryption": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "sha224": "eeefc4300067150acdef5fa8857e2c1f53ac206c2b250a2c6aaa3a82",
    "sha224WithRSAEncryption": "eeefc4300067150acdef5fa8857e2c1f53ac206c2b250a2c6aaa3a82",
    "sha256": "49cfe8b6302a2d45b866a26c4940d777df4f588ebe1bafeb275a8a03a1eeb0aa",
    "sha256WithRSAEncryption": "49cfe8b6302a2d45b866a26c4940d777df4f588ebe1bafeb275a8a03a1eeb0aa",
    "sha384": "7c8c03d0c9fef5c1b5bc572a4249daed624fc6684409cd0c65dda8eca7e245d9b6ec4baa59f476b5e50e72f89d170e98",
    "sha384WithRSAEncryption": "7c8c03d0c9fef5c1b5bc572a4249daed624fc6684409cd0c65dda8eca7e245d9b6ec4baa59f476b5e50e72f89d170e98",
    "sha512": "8ed7db5fb6d0aa5bde561900450c8f49799b19be158a5d08208c5124dddad1befcda048e4d578827213a55cdd613e5ac667ab8b149ece286af5dec91af98f1ef",
    "sha512WithRSAEncryption": "8ed7db5fb6d0aa5bde561900450c8f49799b19be158a5d08208c5124dddad1befcda048e4d578827213a55cdd613e5ac667ab8b149ece286af5dec91af98f1ef",
    "shaWithRSAEncryption": "681af577f76c76efa8ca6661a3391346be8afc38",
    "ssl2-md5": "f74e94ab992c8f27de264993a09ab429",
    "ssl3-md5": "f74e94ab992c8f27de264993a09ab429",
    "ssl3-sha1": "2f3cbacbb14405a4652ed52793c1814fd8c4fce0",
    "whirlpool": "48c8203ddc91e35e511946c33100ffae5fcdf202aa20ec41babd2ab8ef18491b27a8ac78ad20500db7154bd4fdc54af8166d0f51923355fd8d690ee9ac842bc6"
  },
  {
    "input": "//AACAAP7////AAAf//wAH//+AD//4H//+D///8AAACAAAP/gD///AAAH//AD//+AAAAc/Af/gD/wD//AD//g//+Af//9///gAAAPwAAH+P///AAD//wAAA=",
    "DSA": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "DSA-SHA": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "DSA-SHA1": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "DSA-SHA1-old": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "RSA-MD4": "c3923f200f41ab03468f89f728e2ace9",
    "RSA-MD5": "5eee0f1591d10c159763749ec86b9ecb",
    "RSA-MDC2": "1bcf03e4aadb7d6b81603041a31dfa0f",
    "RSA-RIPEMD160": "294ade6c412a8d229db38e7a0ad965476921dc2a",
    "RSA-SHA": "77ef0ee88f4433bde3f4d5e056c7eac123bd0ff0",
    "RSA-SHA1": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "RSA-SHA1-2": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "RSA-SHA224": "e82b5c0b1ccdf88bc55b1d08f6e7347acf91a2ffc7c33d1103207bde",
    "RSA-SHA256": "e6e49ebcd83acd3a9ec0b100e26c4d82388eb9378ecfcbf967a31c4951ad0c01",
    "RSA-SHA384": "6f32fec53a80f38832f24df35c2c5890d8b4e4c093734285472f9fe09a7d555eff38c451f4d7783773925b7f5d6f83d1",
    "RSA-SHA512": "03a2d1acb8111cade71d6eec11811743335b4bf3184bbf0848f393824d840e6ed8e6346daae20e546ba759010334a2b86ac4b06af6a672ea47705de21f9b1665",
    "dsaEncryption": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "dsaWithSHA": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "dsaWithSHA1": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "dss1": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "ecdsa-with-SHA1": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "md4": "c3923f200f41ab03468f89f728e2ace9",
    "md4WithRSAEncryption": "c3923f200f41ab03468f89f728e2ace9",
    "md5": "5eee0f1591d10c159763749ec86b9ecb",
    "md5WithRSAEncryption": "5eee0f1591d10c159763749ec86b9ecb",
    "mdc2": "1bcf03e4aadb7d6b81603041a31dfa0f",
    "mdc2WithRSA": "1bcf03e4aadb7d6b81603041a31dfa0f",
    "ripemd": "294ade6c412a8d229db38e7a0ad965476921dc2a",
    "ripemd160": "294ade6c412a8d229db38e7a0ad965476921dc2a",
    "ripemd160WithRSA": "294ade6c412a8d229db38e7a0ad965476921dc2a",
    "rmd160": "294ade6c412a8d229db38e7a0ad965476921dc2a",
    "sha": "77ef0ee88f4433bde3f4d5e056c7eac123bd0ff0",
    "sha1": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "sha1WithRSAEncryption": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "sha224": "e82b5c0b1ccdf88bc55b1d08f6e7347acf91a2ffc7c33d1103207bde",
    "sha224WithRSAEncryption": "e82b5c0b1ccdf88bc55b1d08f6e7347acf91a2ffc7c33d1103207bde",
    "sha256": "e6e49ebcd83acd3a9ec0b100e26c4d82388eb9378ecfcbf967a31c4951ad0c01",
    "sha256WithRSAEncryption": "e6e49ebcd83acd3a9ec0b100e26c4d82388eb9378ecfcbf967a31c4951ad0c01",
    "sha384": "6f32fec53a80f38832f24df35c2c5890d8b4e4c093734285472f9fe09a7d555eff38c451f4d7783773925b7f5d6f83d1",
    "sha384WithRSAEncryption": "6f32fec53a80f38832f24df35c2c5890d8b4e4c093734285472f9fe09a7d555eff38c451f4d7783773925b7f5d6f83d1",
    "sha512": "03a2d1acb8111cade71d6eec11811743335b4bf3184bbf0848f393824d840e6ed8e6346daae20e546ba759010334a2b86ac4b06af6a672ea47705de21f9b1665",
    "sha512WithRSAEncryption": "03a2d1acb8111cade71d6eec11811743335b4bf3184bbf0848f393824d840e6ed8e6346daae20e546ba759010334a2b86ac4b06af6a672ea47705de21f9b1665",
    "shaWithRSAEncryption": "77ef0ee88f4433bde3f4d5e056c7eac123bd0ff0",
    "ssl2-md5": "5eee0f1591d10c159763749ec86b9ecb",
    "ssl3-md5": "5eee0f1591d10c159763749ec86b9ecb",
    "ssl3-sha1": "982c8ab6ce164f481915af59aaed9fff2a391752",
    "whirlpool": "4db598aaba118cd24a02d1502f9a3cdaa418fec612f03d4fadb9454f545f4682ac834ce87983868b8cd542abb5c628e138cac9c65218c14ed364fca2d507514a"
  },
  {
    "input": "AAB//AB/4AAP/+AB+AA//wAAeAB/4AAAHwAH///4+fAB//gHwA//+AAH+H/+AAAP/+PwAAf///wDHAAAf+AA///8AAAP8//gAAAP//kAABAAP//8+H//AAAA",
    "DSA": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "DSA-SHA": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "DSA-SHA1": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "DSA-SHA1-old": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "RSA-MD4": "4878e13f6830ca9ad9bbb5618855c5db",
    "RSA-MD5": "46898964a3889615d9f7c22a81e0a0e7",
    "RSA-MDC2": "5bf60590977c92747671e6f728a13300",
    "RSA-RIPEMD160": "f3cc2bc895c6f164efe70cb839fe6ad608fdd021",
    "RSA-SHA": "848550915693cbf92fcf25f70f70bcf54c2cc4eb",
    "RSA-SHA1": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "RSA-SHA1-2": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "RSA-SHA224": "20de7acc09b7b9472bae4db044c98a766902d153fafb92df899d7b92",
    "RSA-SHA256": "9edf4d38cdd6e73e857f1ec91132499e7f930d2cdee6b3583a8f062ff7e9d848",
    "RSA-SHA384": "e52d9d66b17f1a61736a699fcf3616bbc37e8f60a609ac88aafb6937908b74a68be30bcbb14a1ab1e3d76e0261e4d32f",
    "RSA-SHA512": "06c1accab6d42ea7914ce698993c7a3cb67c1e08e38ba5f7fcb4c67229f5c5f16c4034c04d4fb0bdf51e34c9ee50b87739c77535b3b1b892425b313a5aeb4a6c",
    "dsaEncryption": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "dsaWithSHA": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "dsaWithSHA1": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "dss1": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "ecdsa-with-SHA1": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "md4": "4878e13f6830ca9ad9bbb5618855c5db",
    "md4WithRSAEncryption": "4878e13f6830ca9ad9bbb5618855c5db",
    "md5": "46898964a3889615d9f7c22a81e0a0e7",
    "md5WithRSAEncryption": "46898964a3889615d9f7c22a81e0a0e7",
    "mdc2": "5bf60590977c92747671e6f728a13300",
    "mdc2WithRSA": "5bf60590977c92747671e6f728a13300",
    "ripemd": "f3cc2bc895c6f164efe70cb839fe6ad608fdd021",
    "ripemd160": "f3cc2bc895c6f164efe70cb839fe6ad608fdd021",
    "ripemd160WithRSA": "f3cc2bc895c6f164efe70cb839fe6ad608fdd021",
    "rmd160": "f3cc2bc895c6f164efe70cb839fe6ad608fdd021",
    "sha": "848550915693cbf92fcf25f70f70bcf54c2cc4eb",
    "sha1": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "sha1WithRSAEncryption": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "sha224": "20de7acc09b7b9472bae4db044c98a766902d153fafb92df899d7b92",
    "sha224WithRSAEncryption": "20de7acc09b7b9472bae4db044c98a766902d153fafb92df899d7b92",
    "sha256": "9edf4d38cdd6e73e857f1ec91132499e7f930d2cdee6b3583a8f062ff7e9d848",
    "sha256WithRSAEncryption": "9edf4d38cdd6e73e857f1ec91132499e7f930d2cdee6b3583a8f062ff7e9d848",
    "sha384": "e52d9d66b17f1a61736a699fcf3616bbc37e8f60a609ac88aafb6937908b74a68be30bcbb14a1ab1e3d76e0261e4d32f",
    "sha384WithRSAEncryption": "e52d9d66b17f1a61736a699fcf3616bbc37e8f60a609ac88aafb6937908b74a68be30bcbb14a1ab1e3d76e0261e4d32f",
    "sha512": "06c1accab6d42ea7914ce698993c7a3cb67c1e08e38ba5f7fcb4c67229f5c5f16c4034c04d4fb0bdf51e34c9ee50b87739c77535b3b1b892425b313a5aeb4a6c",
    "sha512WithRSAEncryption": "06c1accab6d42ea7914ce698993c7a3cb67c1e08e38ba5f7fcb4c67229f5c5f16c4034c04d4fb0bdf51e34c9ee50b87739c77535b3b1b892425b313a5aeb4a6c",
    "shaWithRSAEncryption": "848550915693cbf92fcf25f70f70bcf54c2cc4eb",
    "ssl2-md5": "46898964a3889615d9f7c22a81e0a0e7",
    "ssl3-md5": "46898964a3889615d9f7c22a81e0a0e7",
    "ssl3-sha1": "5cd92012d488a07ece0e47901d0e083b6bd93e3f",
    "whirlpool": "9076df8261ff9110fea7e9d425d42aa69662b5c3372f435eed25b57c0735aa4f22676c7dbf3792e67a097c603bd0068d143f44492adde8ed27ab6868046d0576"
  },
  {
    "input": "AAP//8B////AAAP///8AAA//8B//8AAH///v/4H3//4AB//wAAAf/8APgAAP//wAAP///8AD/+P///4AH///AAD///8P//H4AAAB////gB///gAIAAB///+AAA==",
    "DSA": "69603fec02920851d4b3b8782e07b92bb2963009",
    "DSA-SHA": "69603fec02920851d4b3b8782e07b92bb2963009",
    "DSA-SHA1": "69603fec02920851d4b3b8782e07b92bb2963009",
    "DSA-SHA1-old": "69603fec02920851d4b3b8782e07b92bb2963009",
    "RSA-MD4": "8669c44038eebd26c3966bb79d7b254b",
    "RSA-MD5": "8fb58d6770971b0f12e40b31ad65b4a9",
    "RSA-MDC2": "e1b419a4a168666a68f58d9410d75e8f",
    "RSA-RIPEMD160": "856219d628a2a5cdd32de7b4c6e24ec9c17ca6e8",
    "RSA-SHA": "ecc9709b726dcd9f694b6e18f466f23732916835",
    "RSA-SHA1": "69603fec02920851d4b3b8782e07b92bb2963009",
    "RSA-SHA1-2": "69603fec02920851d4b3b8782e07b92bb2963009",
    "RSA-SHA224": "07ea1c5ef9b180e6bb34c73c331d14087ed0034f54b4361a82a61779",
    "RSA-SHA256": "768dbebcd6aa66337810b7457964c63322904e9242229e5d98b808799f7f4cd4",
    "RSA-SHA384": "a9010f1a1da7eee8983e94832b595dc3bfc2bb37dfafd93fed5581587dbc0497543c80efa5e576151a96701901ddcaf2",
    "RSA-SHA512": "5b695679de2856bf0b7a95680807a2dd147519411ea07234771ebec48f613d865af8516d74eb27e2878a9379d9067fa5f5f2e7c09de452af8060f554e4b09b64",
    "dsaEncryption": "69603fec02920851d4b3b8782e07b92bb2963009",
    "dsaWithSHA": "69603fec02920851d4b3b8782e07b92bb2963009",
    "dsaWithSHA1": "69603fec02920851d4b3b8782e07b92bb2963009",
    "dss1": "69603fec02920851d4b3b8782e07b92bb2963009",
    "ecdsa-with-SHA1": "69603fec02920851d4b3b8782e07b92bb2963009",
    "md4": "8669c44038eebd26c3966bb79d7b254b",
    "md4WithRSAEncryption": "8669c44038eebd26c3966bb79d7b254b",
    "md5": "8fb58d6770971b0f12e40b31ad65b4a9",
    "md5WithRSAEncryption": "8fb58d6770971b0f12e40b31ad65b4a9",
    "mdc2": "e1b419a4a168666a68f58d9410d75e8f",
    "mdc2WithRSA": "e1b419a4a168666a68f58d9410d75e8f",
    "ripemd": "856219d628a2a5cdd32de7b4c6e24ec9c17ca6e8",
    "ripemd160": "856219d628a2a5cdd32de7b4c6e24ec9c17ca6e8",
    "ripemd160WithRSA": "856219d628a2a5cdd32de7b4c6e24ec9c17ca6e8",
    "rmd160": "856219d628a2a5cdd32de7b4c6e24ec9c17ca6e8",
    "sha": "ecc9709b726dcd9f694b6e18f466f23732916835",
    "sha1": "69603fec02920851d4b3b8782e07b92bb2963009",
    "sha1WithRSAEncryption": "69603fec02920851d4b3b8782e07b92bb2963009",
    "sha224": "07ea1c5ef9b180e6bb34c73c331d14087ed0034f54b4361a82a61779",
    "sha224WithRSAEncryption": "07ea1c5ef9b180e6bb34c73c331d14087ed0034f54b4361a82a61779",
    "sha256": "768dbebcd6aa66337810b7457964c63322904e9242229e5d98b808799f7f4cd4",
    "sha256WithRSAEncryption": "768dbebcd6aa66337810b7457964c63322904e9242229e5d98b808799f7f4cd4",
    "sha384": "a9010f1a1da7eee8983e94832b595dc3bfc2bb37dfafd93fed5581587dbc0497543c80efa5e576151a96701901ddcaf2",
    "sha384WithRSAEncryption": "a9010f1a1da7eee8983e94832b595dc3bfc2bb37dfafd93fed5581587dbc0497543c80efa5e576151a96701901ddcaf2",
    "sha512": "5b695679de2856bf0b7a95680807a2dd147519411ea07234771ebec48f613d865af8516d74eb27e2878a9379d9067fa5f5f2e7c09de452af8060f554e4b09b64",
    "sha512WithRSAEncryption": "5b695679de2856bf0b7a95680807a2dd147519411ea07234771ebec48f613d865af8516d74eb27e2878a9379d9067fa5f5f2e7c09de452af8060f554e4b09b64",
    "shaWithRSAEncryption": "ecc9709b726dcd9f694b6e18f466f23732916835",
    "ssl2-md5": "8fb58d6770971b0f12e40b31ad65b4a9",
    "ssl3-md5": "8fb58d6770971b0f12e40b31ad65b4a9",
    "ssl3-sha1": "69603fec02920851d4b3b8782e07b92bb2963009",
    "whirlpool": "2d540d16820a0bd2b81b92364fc76172a2fac6dbd9d9ef22a44818461120c7d1c3154adb853aa4f9b0a88dab75d8cda13a85c85ea62e936c3aee271442e71c7e"
  },
  {
    "input": "H+AAfB/AB//AB////gA8AAAA//+AAAf//wAf+P/AAP+B/wH//gB4f//wAAGAAAAf/wAAH//wAB///+AAPAAAH///gAP/4AH///n/+AAAfAAA/gAA////AAAP//8=",
    "DSA": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "DSA-SHA": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "DSA-SHA1": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "DSA-SHA1-old": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "RSA-MD4": "2faf354f138e307cab7c7fe4814a529c",
    "RSA-MD5": "eb4ce130268dc13731dcd16ff492d0a9",
    "RSA-MDC2": "19dcd545ce72b4a8c303fa86a6c01a58",
    "RSA-RIPEMD160": "c13d68828b0c77ae4dc5fb732746b4b4e6afcb3e",
    "RSA-SHA": "e5d4e70b781fe2117d3ef3e19499236f6c9f12d4",
    "RSA-SHA1": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "RSA-SHA1-2": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "RSA-SHA224": "a4f4a5747a90372583733e2f8d5346363bb4f423c763197ca5142e9c",
    "RSA-SHA256": "867a5ab42d15f9843d67438db495a8a581eddd39c3753f3d203225b60eaa9a3e",
    "RSA-SHA384": "98e51dc04ec51c743045f86b73d3e38846077ba2ecd08132a850189444455e160272aaf7b5bc5f35ee5dc30a793e2aa5",
    "RSA-SHA512": "3ffb6486fb6a3b7931673c5e754b0f44c193a00ed86b0a7bdd0e20f6afa14a870c84fc1d24db19fc2f73680e9719e41679a0ca5dc49e8ddd41496b8d46c49594",
    "dsaEncryption": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "dsaWithSHA": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "dsaWithSHA1": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "dss1": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "ecdsa-with-SHA1": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "md4": "2faf354f138e307cab7c7fe4814a529c",
    "md4WithRSAEncryption": "2faf354f138e307cab7c7fe4814a529c",
    "md5": "eb4ce130268dc13731dcd16ff492d0a9",
    "md5WithRSAEncryption": "eb4ce130268dc13731dcd16ff492d0a9",
    "mdc2": "19dcd545ce72b4a8c303fa86a6c01a58",
    "mdc2WithRSA": "19dcd545ce72b4a8c303fa86a6c01a58",
    "ripemd": "c13d68828b0c77ae4dc5fb732746b4b4e6afcb3e",
    "ripemd160": "c13d68828b0c77ae4dc5fb732746b4b4e6afcb3e",
    "ripemd160WithRSA": "c13d68828b0c77ae4dc5fb732746b4b4e6afcb3e",
    "rmd160": "c13d68828b0c77ae4dc5fb732746b4b4e6afcb3e",
    "sha": "e5d4e70b781fe2117d3ef3e19499236f6c9f12d4",
    "sha1": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "sha1WithRSAEncryption": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "sha224": "a4f4a5747a90372583733e2f8d5346363bb4f423c763197ca5142e9c",
    "sha224WithRSAEncryption": "a4f4a5747a90372583733e2f8d5346363bb4f423c763197ca5142e9c",
    "sha256": "867a5ab42d15f9843d67438db495a8a581eddd39c3753f3d203225b60eaa9a3e",
    "sha256WithRSAEncryption": "867a5ab42d15f9843d67438db495a8a581eddd39c3753f3d203225b60eaa9a3e",
    "sha384": "98e51dc04ec51c743045f86b73d3e38846077ba2ecd08132a850189444455e160272aaf7b5bc5f35ee5dc30a793e2aa5",
    "sha384WithRSAEncryption": "98e51dc04ec51c743045f86b73d3e38846077ba2ecd08132a850189444455e160272aaf7b5bc5f35ee5dc30a793e2aa5",
    "sha512": "3ffb6486fb6a3b7931673c5e754b0f44c193a00ed86b0a7bdd0e20f6afa14a870c84fc1d24db19fc2f73680e9719e41679a0ca5dc49e8ddd41496b8d46c49594",
    "sha512WithRSAEncryption": "3ffb6486fb6a3b7931673c5e754b0f44c193a00ed86b0a7bdd0e20f6afa14a870c84fc1d24db19fc2f73680e9719e41679a0ca5dc49e8ddd41496b8d46c49594",
    "shaWithRSAEncryption": "e5d4e70b781fe2117d3ef3e19499236f6c9f12d4",
    "ssl2-md5": "eb4ce130268dc13731dcd16ff492d0a9",
    "ssl3-md5": "eb4ce130268dc13731dcd16ff492d0a9",
    "ssl3-sha1": "3e90f76437b1ea44cf98a08d83ea24cecf6e6191",
    "whirlpool": "ddfcf526de704cfcba4441dc832643025f279b2871f37a1aef5d580e8dfcd94413aab02a3dc50ec9113321f42a1a62810b820df543cdd6d6d7f887470935cf53"
  },
  {
    "input": "/AAB/wAADAD//+P///CADg4AAA/+AAP/wAAAf///4MAAAAfg//8Dn///wcAAA///w////P//wAAB/AAP/AAAAH///wP///wP//4AAAOAP///AAD///gAA///gAAA",
    "DSA": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "DSA-SHA": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "DSA-SHA1": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "DSA-SHA1-old": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "RSA-MD4": "c55db5ba7c06a7b3a4bf4d51837b1ea1",
    "RSA-MD5": "23532a54e8005860ad5e77f4e3392827",
    "RSA-MDC2": "a889fd0fd28722914189d4a97d6d8550",
    "RSA-RIPEMD160": "5bfa4dc7c605dd3a51c0ef887bc754efc4be1bb4",
    "RSA-SHA": "3edd256e433e36c58ca35191f84c6b38b5147c96",
    "RSA-SHA1": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "RSA-SHA1-2": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "RSA-SHA224": "c83ff49e6fe7c72a2a4a4da5e48fcb56eb5deb5a01ca46491e53514c",
    "RSA-SHA256": "d7acd8d042b8c6802f6d9262055a6e296f3254674745f18cd1b21244e1acb9f0",
    "RSA-SHA384": "002b89732594a1e393f74ecd9a8eee2492c7a6b0b0b2863547e34c9d1de3ded4a02007a35a0af714219881552f520fe6",
    "RSA-SHA512": "0e9edad47cce524e8030cdf77a9bed351e285b8f41aa9144e7d76de2dcea327ebda0d707d56304c9111d9edf933cc157f771cae51ab17814c24df1a1c343e748",
    "dsaEncryption": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "dsaWithSHA": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "dsaWithSHA1": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "dss1": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "ecdsa-with-SHA1": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "md4": "c55db5ba7c06a7b3a4bf4d51837b1ea1",
    "md4WithRSAEncryption": "c55db5ba7c06a7b3a4bf4d51837b1ea1",
    "md5": "23532a54e8005860ad5e77f4e3392827",
    "md5WithRSAEncryption": "23532a54e8005860ad5e77f4e3392827",
    "mdc2": "a889fd0fd28722914189d4a97d6d8550",
    "mdc2WithRSA": "a889fd0fd28722914189d4a97d6d8550",
    "ripemd": "5bfa4dc7c605dd3a51c0ef887bc754efc4be1bb4",
    "ripemd160": "5bfa4dc7c605dd3a51c0ef887bc754efc4be1bb4",
    "ripemd160WithRSA": "5bfa4dc7c605dd3a51c0ef887bc754efc4be1bb4",
    "rmd160": "5bfa4dc7c605dd3a51c0ef887bc754efc4be1bb4",
    "sha": "3edd256e433e36c58ca35191f84c6b38b5147c96",
    "sha1": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "sha1WithRSAEncryption": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "sha224": "c83ff49e6fe7c72a2a4a4da5e48fcb56eb5deb5a01ca46491e53514c",
    "sha224WithRSAEncryption": "c83ff49e6fe7c72a2a4a4da5e48fcb56eb5deb5a01ca46491e53514c",
    "sha256": "d7acd8d042b8c6802f6d9262055a6e296f3254674745f18cd1b21244e1acb9f0",
    "sha256WithRSAEncryption": "d7acd8d042b8c6802f6d9262055a6e296f3254674745f18cd1b21244e1acb9f0",
    "sha384": "002b89732594a1e393f74ecd9a8eee2492c7a6b0b0b2863547e34c9d1de3ded4a02007a35a0af714219881552f520fe6",
    "sha384WithRSAEncryption": "002b89732594a1e393f74ecd9a8eee2492c7a6b0b0b2863547e34c9d1de3ded4a02007a35a0af714219881552f520fe6",
    "sha512": "0e9edad47cce524e8030cdf77a9bed351e285b8f41aa9144e7d76de2dcea327ebda0d707d56304c9111d9edf933cc157f771cae51ab17814c24df1a1c343e748",
    "sha512WithRSAEncryption": "0e9edad47cce524e8030cdf77a9bed351e285b8f41aa9144e7d76de2dcea327ebda0d707d56304c9111d9edf933cc157f771cae51ab17814c24df1a1c343e748",
    "shaWithRSAEncryption": "3edd256e433e36c58ca35191f84c6b38b5147c96",
    "ssl2-md5": "23532a54e8005860ad5e77f4e3392827",
    "ssl3-md5": "23532a54e8005860ad5e77f4e3392827",
    "ssl3-sha1": "34c09f107c42d990eb4881d4bf2dddcab01563ae",
    "whirlpool": "0dd1702b2ab82691e11ab8a9fbf35101664e5bbec5e533e5f06f5a3d03c2469267b5f5292dcbe53b529c6b0d211d9c73d4e91935038a6f0f5253b6041591f341"
  },
  {
    "input": "//+A///4AAD8AAP/+AAP//8AAwAAAH//8AA///AAAfwBAAP/gB//4///+AAf///4Af/f//v/wAAAP//4AACAx///+A//AGAf/+AAAf///g////wAAADwBgP///4AAA==",
    "DSA": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "DSA-SHA": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "DSA-SHA1": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "DSA-SHA1-old": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "RSA-MD4": "e1dd0c2150819bc282fa07caae63f19b",
    "RSA-MD5": "07fedc4dc4891d1a90c501a781a666f2",
    "RSA-MDC2": "7a890bb6cdbf57c20f36be37a41473a8",
    "RSA-RIPEMD160": "a4b1021a72a32cb261faa78429367c742479835a",
    "RSA-SHA": "15615b10f3457ac34a4415c055bf55e26841a7ec",
    "RSA-SHA1": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "RSA-SHA1-2": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "RSA-SHA224": "0f97c178452330f03db746ae7b8d3ead338fd3332b425f5c9f78cfd7",
    "RSA-SHA256": "fe781c4d49e73ca9f82389b6d58f3def857cffe624acfb6a2a5a8e9559623f37",
    "RSA-SHA384": "23138723c1770f2e7752449b989dc8d58bb2f82419e4e2056ed2117791ed32f789abdc8e60d70972d34f497d47a6fb18",
    "RSA-SHA512": "ee2ef4b0866deb7e6150e1883613c4a29ec9c62d87fce6d264bd747f4570af190a1d0bb27876376aa1495f8800f7c9c75f1d53a3cc520019a1cbba4fd038fa5e",
    "dsaEncryption": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "dsaWithSHA": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "dsaWithSHA1": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "dss1": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "ecdsa-with-SHA1": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "md4": "e1dd0c2150819bc282fa07caae63f19b",
    "md4WithRSAEncryption": "e1dd0c2150819bc282fa07caae63f19b",
    "md5": "07fedc4dc4891d1a90c501a781a666f2",
    "md5WithRSAEncryption": "07fedc4dc4891d1a90c501a781a666f2",
    "mdc2": "7a890bb6cdbf57c20f36be37a41473a8",
    "mdc2WithRSA": "7a890bb6cdbf57c20f36be37a41473a8",
    "ripemd": "a4b1021a72a32cb261faa78429367c742479835a",
    "ripemd160": "a4b1021a72a32cb261faa78429367c742479835a",
    "ripemd160WithRSA": "a4b1021a72a32cb261faa78429367c742479835a",
    "rmd160": "a4b1021a72a32cb261faa78429367c742479835a",
    "sha": "15615b10f3457ac34a4415c055bf55e26841a7ec",
    "sha1": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "sha1WithRSAEncryption": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "sha224": "0f97c178452330f03db746ae7b8d3ead338fd3332b425f5c9f78cfd7",
    "sha224WithRSAEncryption": "0f97c178452330f03db746ae7b8d3ead338fd3332b425f5c9f78cfd7",
    "sha256": "fe781c4d49e73ca9f82389b6d58f3def857cffe624acfb6a2a5a8e9559623f37",
    "sha256WithRSAEncryption": "fe781c4d49e73ca9f82389b6d58f3def857cffe624acfb6a2a5a8e9559623f37",
    "sha384": "23138723c1770f2e7752449b989dc8d58bb2f82419e4e2056ed2117791ed32f789abdc8e60d70972d34f497d47a6fb18",
    "sha384WithRSAEncryption": "23138723c1770f2e7752449b989dc8d58bb2f82419e4e2056ed2117791ed32f789abdc8e60d70972d34f497d47a6fb18",
    "sha512": "ee2ef4b0866deb7e6150e1883613c4a29ec9c62d87fce6d264bd747f4570af190a1d0bb27876376aa1495f8800f7c9c75f1d53a3cc520019a1cbba4fd038fa5e",
    "sha512WithRSAEncryption": "ee2ef4b0866deb7e6150e1883613c4a29ec9c62d87fce6d264bd747f4570af190a1d0bb27876376aa1495f8800f7c9c75f1d53a3cc520019a1cbba4fd038fa5e",
    "shaWithRSAEncryption": "15615b10f3457ac34a4415c055bf55e26841a7ec",
    "ssl2-md5": "07fedc4dc4891d1a90c501a781a666f2",
    "ssl3-md5": "07fedc4dc4891d1a90c501a781a666f2",
    "ssl3-sha1": "474be0e5892eb2382109bfc5e3c8249a9283b03d",
    "whirlpool": "7e88b67cbf835abfae703c35646e9f9e16ef00bdb6cc0752646ba7f375cdb1a3c951349a1f79e00938a93b466f8e7c0679e54d883f4b922145d56a406a4b5853"
  },
  {
    "input": "/wAP//wAD////Af//AAA8AAAgAB//gAAD////D8A////AB////AAH///4AAf///D/wAAAf//8AAAD//gB/wAAAD+AAf///gAAD8AAA+AAD//wAAR/+8ABwB///wAAAA=",
    "DSA": "a04b4f75051786682483252438f6a75bf4705ec6",
    "DSA-SHA": "a04b4f75051786682483252438f6a75bf4705ec6",
    "DSA-SHA1": "a04b4f75051786682483252438f6a75bf4705ec6",
    "DSA-SHA1-old": "a04b4f75051786682483252438f6a75bf4705ec6",
    "RSA-MD4": "c5abd27ca77ee1059d5be589548aaac6",
    "RSA-MD5": "83e8341035b37dd70a92a6eed5406927",
    "RSA-MDC2": "b0ce0008ffd00d488f092b790db1a0b7",
    "RSA-RIPEMD160": "72a6387aa8cded1eff08e7cd8760b9c3dae2ec74",
    "RSA-SHA": "d8a67fb670add3418017c56f5539252a87885d9b",
    "RSA-SHA1": "a04b4f75051786682483252438f6a75bf4705ec6",
    "RSA-SHA1-2": "a04b4f75051786682483252438f6a75bf4705ec6",
    "RSA-SHA224": "54d6fdcdb2054c5477de4e75f688646c5f2630e2a00e39223c26ed5c",
    "RSA-SHA256": "96fb72ddb440bb1f00dbafc97768f9890effcc172fcc395de4f2a19318c46c86",
    "RSA-SHA384": "abb586e03efb1565f9542d2a020a8ea3aa726e7decdac92fd5582c570b410ec72cefec006f7dba32e80c8385fd4b415d",
    "RSA-SHA512": "036d8aae871ff4db9549a05157a93ba9e925867543e267cffdb5d2d07584eacd70a57f8029a3125fe880ea5c6613f67e70fe79196a66f9429e83bd9b8f747ec7",
    "dsaEncryption": "a04b4f75051786682483252438f6a75bf4705ec6",
    "dsaWithSHA": "a04b4f75051786682483252438f6a75bf4705ec6",
    "dsaWithSHA1": "a04b4f75051786682483252438f6a75bf4705ec6",
    "dss1": "a04b4f75051786682483252438f6a75bf4705ec6",
    "ecdsa-with-SHA1": "a04b4f75051786682483252438f6a75bf4705ec6",
    "md4": "c5abd27ca77ee1059d5be589548aaac6",
    "md4WithRSAEncryption": "c5abd27ca77ee1059d5be589548aaac6",
    "md5": "83e8341035b37dd70a92a6eed5406927",
    "md5WithRSAEncryption": "83e8341035b37dd70a92a6eed5406927",
    "mdc2": "b0ce0008ffd00d488f092b790db1a0b7",
    "mdc2WithRSA": "b0ce0008ffd00d488f092b790db1a0b7",
    "ripemd": "72a6387aa8cded1eff08e7cd8760b9c3dae2ec74",
    "ripemd160": "72a6387aa8cded1eff08e7cd8760b9c3dae2ec74",
    "ripemd160WithRSA": "72a6387aa8cded1eff08e7cd8760b9c3dae2ec74",
    "rmd160": "72a6387aa8cded1eff08e7cd8760b9c3dae2ec74",
    "sha": "d8a67fb670add3418017c56f5539252a87885d9b",
    "sha1": "a04b4f75051786682483252438f6a75bf4705ec6",
    "sha1WithRSAEncryption": "a04b4f75051786682483252438f6a75bf4705ec6",
    "sha224": "54d6fdcdb2054c5477de4e75f688646c5f2630e2a00e39223c26ed5c",
    "sha224WithRSAEncryption": "54d6fdcdb2054c5477de4e75f688646c5f2630e2a00e39223c26ed5c",
    "sha256": "96fb72ddb440bb1f00dbafc97768f9890effcc172fcc395de4f2a19318c46c86",
    "sha256WithRSAEncryption": "96fb72ddb440bb1f00dbafc97768f9890effcc172fcc395de4f2a19318c46c86",
    "sha384": "abb586e03efb1565f9542d2a020a8ea3aa726e7decdac92fd5582c570b410ec72cefec006f7dba32e80c8385fd4b415d",
    "sha384WithRSAEncryption": "abb586e03efb1565f9542d2a020a8ea3aa726e7decdac92fd5582c570b410ec72cefec006f7dba32e80c8385fd4b415d",
    "sha512": "036d8aae871ff4db9549a05157a93ba9e925867543e267cffdb5d2d07584eacd70a57f8029a3125fe880ea5c6613f67e70fe79196a66f9429e83bd9b8f747ec7",
    "sha512WithRSAEncryption": "036d8aae871ff4db9549a05157a93ba9e925867543e267cffdb5d2d07584eacd70a57f8029a3125fe880ea5c6613f67e70fe79196a66f9429e83bd9b8f747ec7",
    "shaWithRSAEncryption": "d8a67fb670add3418017c56f5539252a87885d9b",
    "ssl2-md5": "83e8341035b37dd70a92a6eed5406927",
    "ssl3-md5": "83e8341035b37dd70a92a6eed5406927",
    "ssl3-sha1": "a04b4f75051786682483252438f6a75bf4705ec6",
    "whirlpool": "ff156da649ee49521883092a5d7e920246880d511110d5748ebb313872f359eb9f404e50fce7c7b8d31a1757c8623222b151370d4631211a60432f78d363e6f5"
  },
  {
    "input": "/gAAf/f//wAAD///4AH/4AAAA//gAP/+AAH/9//4AA//AAAAOAAH//gH//wAH///D8H//8AA//8P//AB//gAAf//gAAAD/gAP//+P///8AAAOA/D////H//AP///4AAA",
    "DSA": "be88a6716083eb50ed9416719d6a247661299383",
    "DSA-SHA": "be88a6716083eb50ed9416719d6a247661299383",
    "DSA-SHA1": "be88a6716083eb50ed9416719d6a247661299383",
    "DSA-SHA1-old": "be88a6716083eb50ed9416719d6a247661299383",
    "RSA-MD4": "337a3b729fc693cc0fafe9ff1e0896a7",
    "RSA-MD5": "6c9f7b3b25734d58f21f5050642874a5",
    "RSA-MDC2": "4b947f875d898e71a2d7e783f6f86772",
    "RSA-RIPEMD160": "63d2165c69da30efd7fb0b01ecb100d1502ecdb7",
    "RSA-SHA": "77c1657d540331165d2379d634a5fb2103b513fb",
    "RSA-SHA1": "be88a6716083eb50ed9416719d6a247661299383",
    "RSA-SHA1-2": "be88a6716083eb50ed9416719d6a247661299383",
    "RSA-SHA224": "9a17cabab19b06d81340aca25628a5a4f802db8b91cc11bdd9aff677",
    "RSA-SHA256": "b63555a77fefcadecfa88a770e70f1d51d46ae68fc672ad4770804495eb1b867",
    "RSA-SHA384": "d0d05177acbf0e0cf45abfd4797aad775f9f02010b4e2fd57f52883ae383b387465ab4fc021037ad4868656a2fe15f2b",
    "RSA-SHA512": "6794d279562e7eb852be3f8a11c23d70c4dae96a3d171d3c017ea94cfd0e30fd462598a977623431c557113b809cbb69c7fa6e6633213b64b74b3ab753d89b3a",
    "dsaEncryption": "be88a6716083eb50ed9416719d6a247661299383",
    "dsaWithSHA": "be88a6716083eb50ed9416719d6a247661299383",
    "dsaWithSHA1": "be88a6716083eb50ed9416719d6a247661299383",
    "dss1": "be88a6716083eb50ed9416719d6a247661299383",
    "ecdsa-with-SHA1": "be88a6716083eb50ed9416719d6a247661299383",
    "md4": "337a3b729fc693cc0fafe9ff1e0896a7",
    "md4WithRSAEncryption": "337a3b729fc693cc0fafe9ff1e0896a7",
    "md5": "6c9f7b3b25734d58f21f5050642874a5",
    "md5WithRSAEncryption": "6c9f7b3b25734d58f21f5050642874a5",
    "mdc2": "4b947f875d898e71a2d7e783f6f86772",
    "mdc2WithRSA": "4b947f875d898e71a2d7e783f6f86772",
    "ripemd": "63d2165c69da30efd7fb0b01ecb100d1502ecdb7",
    "ripemd160": "63d2165c69da30efd7fb0b01ecb100d1502ecdb7",
    "ripemd160WithRSA": "63d2165c69da30efd7fb0b01ecb100d1502ecdb7",
    "rmd160": "63d2165c69da30efd7fb0b01ecb100d1502ecdb7",
    "sha": "77c1657d540331165d2379d634a5fb2103b513fb",
    "sha1": "be88a6716083eb50ed9416719d6a247661299383",
    "sha1WithRSAEncryption": "be88a6716083eb50ed9416719d6a247661299383",
    "sha224": "9a17cabab19b06d81340aca25628a5a4f802db8b91cc11bdd9aff677",
    "sha224WithRSAEncryption": "9a17cabab19b06d81340aca25628a5a4f802db8b91cc11bdd9aff677",
    "sha256": "b63555a77fefcadecfa88a770e70f1d51d46ae68fc672ad4770804495eb1b867",
    "sha256WithRSAEncryption": "b63555a77fefcadecfa88a770e70f1d51d46ae68fc672ad4770804495eb1b867",
    "sha384": "d0d05177acbf0e0cf45abfd4797aad775f9f02010b4e2fd57f52883ae383b387465ab4fc021037ad4868656a2fe15f2b",
    "sha384WithRSAEncryption": "d0d05177acbf0e0cf45abfd4797aad775f9f02010b4e2fd57f52883ae383b387465ab4fc021037ad4868656a2fe15f2b",
    "sha512": "6794d279562e7eb852be3f8a11c23d70c4dae96a3d171d3c017ea94cfd0e30fd462598a977623431c557113b809cbb69c7fa6e6633213b64b74b3ab753d89b3a",
    "sha512WithRSAEncryption": "6794d279562e7eb852be3f8a11c23d70c4dae96a3d171d3c017ea94cfd0e30fd462598a977623431c557113b809cbb69c7fa6e6633213b64b74b3ab753d89b3a",
    "shaWithRSAEncryption": "77c1657d540331165d2379d634a5fb2103b513fb",
    "ssl2-md5": "6c9f7b3b25734d58f21f5050642874a5",
    "ssl3-md5": "6c9f7b3b25734d58f21f5050642874a5",
    "ssl3-sha1": "be88a6716083eb50ed9416719d6a247661299383",
    "whirlpool": "8571ff6d27b5698329dc6dad3f2e1da15458aa0ba3c9817cf8d1ed31d3aaacb61eb718d1c712adca547531261da37f4590d74b6671f36152e0582ec0777effb9"
  },
  {
    "input": "///wAH/AB///gf/AAAH////AAAAf//4DwAAP///8AAP///+D/8AAB/AAAB+AAAA////n/wAH///8AAAf//gAA/AA//wAH///4AP/8AAB////gAAAD///+BAAHgP///+AAA==",
    "DSA": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "DSA-SHA": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "DSA-SHA1": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "DSA-SHA1-old": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "RSA-MD4": "47c0c84eb8153c95f3ac7125fbed34be",
    "RSA-MD5": "ef661042e6624f4052ce86d8f233d780",
    "RSA-MDC2": "d4c56e35c7a8ba2cb45491afd98dd76d",
    "RSA-RIPEMD160": "0f9d5f78bfe18bbe73d07d8af522a9a82ccdb91b",
    "RSA-SHA": "9cac67ece9f0cfe93f207179584b4932f70ffacd",
    "RSA-SHA1": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "RSA-SHA1-2": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "RSA-SHA224": "1020c1e5055b3a3b7337099710a52d994c7bb8a78e4c5961bccfa7dc",
    "RSA-SHA256": "161d1a609fdeb2fa425761bf0b751dfd25e7a0a02995920921f99f63331b76d9",
    "RSA-SHA384": "d1a207efde1cef11d318679923403837ad9afe0cfa2e0e72bc1ec656abc64d75dddc55ce6f1966e4adf872618d0916f4",
    "RSA-SHA512": "c89fe1bc437054e44d4992ead0e5eb9181f28c8e08ff2d92ac879fd0cf6bd2e20ff465cda6be8db631d256135b9513cf299aebd13c75512f5dca3bac62a7f54a",
    "dsaEncryption": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "dsaWithSHA": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "dsaWithSHA1": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "dss1": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "ecdsa-with-SHA1": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "md4": "47c0c84eb8153c95f3ac7125fbed34be",
    "md4WithRSAEncryption": "47c0c84eb8153c95f3ac7125fbed34be",
    "md5": "ef661042e6624f4052ce86d8f233d780",
    "md5WithRSAEncryption": "ef661042e6624f4052ce86d8f233d780",
    "mdc2": "d4c56e35c7a8ba2cb45491afd98dd76d",
    "mdc2WithRSA": "d4c56e35c7a8ba2cb45491afd98dd76d",
    "ripemd": "0f9d5f78bfe18bbe73d07d8af522a9a82ccdb91b",
    "ripemd160": "0f9d5f78bfe18bbe73d07d8af522a9a82ccdb91b",
    "ripemd160WithRSA": "0f9d5f78bfe18bbe73d07d8af522a9a82ccdb91b",
    "rmd160": "0f9d5f78bfe18bbe73d07d8af522a9a82ccdb91b",
    "sha": "9cac67ece9f0cfe93f207179584b4932f70ffacd",
    "sha1": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "sha1WithRSAEncryption": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "sha224": "1020c1e5055b3a3b7337099710a52d994c7bb8a78e4c5961bccfa7dc",
    "sha224WithRSAEncryption": "1020c1e5055b3a3b7337099710a52d994c7bb8a78e4c5961bccfa7dc",
    "sha256": "161d1a609fdeb2fa425761bf0b751dfd25e7a0a02995920921f99f63331b76d9",
    "sha256WithRSAEncryption": "161d1a609fdeb2fa425761bf0b751dfd25e7a0a02995920921f99f63331b76d9",
    "sha384": "d1a207efde1cef11d318679923403837ad9afe0cfa2e0e72bc1ec656abc64d75dddc55ce6f1966e4adf872618d0916f4",
    "sha384WithRSAEncryption": "d1a207efde1cef11d318679923403837ad9afe0cfa2e0e72bc1ec656abc64d75dddc55ce6f1966e4adf872618d0916f4",
    "sha512": "c89fe1bc437054e44d4992ead0e5eb9181f28c8e08ff2d92ac879fd0cf6bd2e20ff465cda6be8db631d256135b9513cf299aebd13c75512f5dca3bac62a7f54a",
    "sha512WithRSAEncryption": "c89fe1bc437054e44d4992ead0e5eb9181f28c8e08ff2d92ac879fd0cf6bd2e20ff465cda6be8db631d256135b9513cf299aebd13c75512f5dca3bac62a7f54a",
    "shaWithRSAEncryption": "9cac67ece9f0cfe93f207179584b4932f70ffacd",
    "ssl2-md5": "ef661042e6624f4052ce86d8f233d780",
    "ssl3-md5": "ef661042e6624f4052ce86d8f233d780",
    "ssl3-sha1": "c67e38717fee1a5f65ec6c7c7c42afc00cd37f04",
    "whirlpool": "d84d67b85a68e20fa41c7873142c88f5a0a089f3b7143860d0fe5462f7585ee9054fb376bfb3da2ae143309eb29bf0cfacfe24c4945359dfa8298ed1e7c77971"
  },
  {
    "input": "AAH//gAAAH////AAAB//gAf///+AAAH//AP//5///gAIAAAGAAAAgf//wAAH+AD///8AAAD///gAP///+D/4AAAAf//Af///wP///gAAAf/4AAAD/8H/8AAAAwf4Af/+AAA=",
    "DSA": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "DSA-SHA": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "DSA-SHA1": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "DSA-SHA1-old": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "RSA-MD4": "ca34700840da5b92bb4bfaf89e6c0fc5",
    "RSA-MD5": "efe794cdfad5cb86656e29854a1f5c92",
    "RSA-MDC2": "c70716f4a55ac0a210d94233bb5000dc",
    "RSA-RIPEMD160": "b1765fc4b91bc384a42942f91d5df69062a9ce55",
    "RSA-SHA": "2204450ab4b1df64742a7c4518ec72a4221b888d",
    "RSA-SHA1": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "RSA-SHA1-2": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "RSA-SHA224": "64fab6154a77d82267968b152b84cb8ea0eccef27ccb431121b81700",
    "RSA-SHA256": "c80931a1263d7f192937eea3e453006b19525ed981314ec3fd561d256e8e135d",
    "RSA-SHA384": "5b16aedae909a1d5994aedd5593fe582b8291227937711903a7ff99cacc6b80e25b4f5e6236cbe80a2bc84bd64032bef",
    "RSA-SHA512": "03d6d82208d4c26503c1bd34a8eda172f485f14f010d266deb828ec950172b876db8c9a65f90a29b58cb100e7922f4d64edc88ac0af7e20be02c6f5e29a1eff4",
    "dsaEncryption": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "dsaWithSHA": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "dsaWithSHA1": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "dss1": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "ecdsa-with-SHA1": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "md4": "ca34700840da5b92bb4bfaf89e6c0fc5",
    "md4WithRSAEncryption": "ca34700840da5b92bb4bfaf89e6c0fc5",
    "md5": "efe794cdfad5cb86656e29854a1f5c92",
    "md5WithRSAEncryption": "efe794cdfad5cb86656e29854a1f5c92",
    "mdc2": "c70716f4a55ac0a210d94233bb5000dc",
    "mdc2WithRSA": "c70716f4a55ac0a210d94233bb5000dc",
    "ripemd": "b1765fc4b91bc384a42942f91d5df69062a9ce55",
    "ripemd160": "b1765fc4b91bc384a42942f91d5df69062a9ce55",
    "ripemd160WithRSA": "b1765fc4b91bc384a42942f91d5df69062a9ce55",
    "rmd160": "b1765fc4b91bc384a42942f91d5df69062a9ce55",
    "sha": "2204450ab4b1df64742a7c4518ec72a4221b888d",
    "sha1": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "sha1WithRSAEncryption": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "sha224": "64fab6154a77d82267968b152b84cb8ea0eccef27ccb431121b81700",
    "sha224WithRSAEncryption": "64fab6154a77d82267968b152b84cb8ea0eccef27ccb431121b81700",
    "sha256": "c80931a1263d7f192937eea3e453006b19525ed981314ec3fd561d256e8e135d",
    "sha256WithRSAEncryption": "c80931a1263d7f192937eea3e453006b19525ed981314ec3fd561d256e8e135d",
    "sha384": "5b16aedae909a1d5994aedd5593fe582b8291227937711903a7ff99cacc6b80e25b4f5e6236cbe80a2bc84bd64032bef",
    "sha384WithRSAEncryption": "5b16aedae909a1d5994aedd5593fe582b8291227937711903a7ff99cacc6b80e25b4f5e6236cbe80a2bc84bd64032bef",
    "sha512": "03d6d82208d4c26503c1bd34a8eda172f485f14f010d266deb828ec950172b876db8c9a65f90a29b58cb100e7922f4d64edc88ac0af7e20be02c6f5e29a1eff4",
    "sha512WithRSAEncryption": "03d6d82208d4c26503c1bd34a8eda172f485f14f010d266deb828ec950172b876db8c9a65f90a29b58cb100e7922f4d64edc88ac0af7e20be02c6f5e29a1eff4",
    "shaWithRSAEncryption": "2204450ab4b1df64742a7c4518ec72a4221b888d",
    "ssl2-md5": "efe794cdfad5cb86656e29854a1f5c92",
    "ssl3-md5": "efe794cdfad5cb86656e29854a1f5c92",
    "ssl3-sha1": "959ac4082388e19e9be5de571c047ef10c174a8d",
    "whirlpool": "f51e413f17b4b0397146a17ced02eaee2e7a676a2ce067ec73a1ceaa5e91734efd768edd94fba3a74daf1dcff34753aa9e6643cc827693daa9563496bd190c6b"
  },
  {
    "input": "+AAAAf//gAAP//+P/wAf/w//wAAA///8AA//8ABwAAA//8AAAHwAAH4AD/wAAAD//4AAAA////w4AAAD8AAx8B///8AH///gH///8/4AAAD//8AAH+f/4f//3wAAAB//AAAA",
    "DSA": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "DSA-SHA": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "DSA-SHA1": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "DSA-SHA1-old": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "RSA-MD4": "55310eb4c7650f3847ca80d363bae64e",
    "RSA-MD5": "e5f19a0045481443bae165f03598a9ba",
    "RSA-MDC2": "7728d4f29b7b3451153de77f0484a840",
    "RSA-RIPEMD160": "4d77c7b1392dcea775686ef4b8067bbaa1a781d8",
    "RSA-SHA": "fe467c8f286ed1967b86b5b204dea1793cf60c5e",
    "RSA-SHA1": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "RSA-SHA1-2": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "RSA-SHA224": "20ad281199872531bb2353c8b36a6f434d6d683f3071fa2fdf3c3194",
    "RSA-SHA256": "a3b6ba9a5cba6071a99b1a43454053bfc3e6d1338ccf0063d5d71247a6b57566",
    "RSA-SHA384": "4e2ca16e010a0a71ee5d37fbe012499af5a0c3ea73132462d0f93432ffd1297efd6208833f3a6acaa93ad29716b6ef39",
    "RSA-SHA512": "b8e94b6c6bb9bb37c87c7a9adb138bf7af5a7758ef84b5fc7b5a7aab1a8bdce779eb22b3654f0286481805ac90b32c3260145143211668ca881523079344c81c",
    "dsaEncryption": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "dsaWithSHA": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "dsaWithSHA1": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "dss1": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "ecdsa-with-SHA1": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "md4": "55310eb4c7650f3847ca80d363bae64e",
    "md4WithRSAEncryption": "55310eb4c7650f3847ca80d363bae64e",
    "md5": "e5f19a0045481443bae165f03598a9ba",
    "md5WithRSAEncryption": "e5f19a0045481443bae165f03598a9ba",
    "mdc2": "7728d4f29b7b3451153de77f0484a840",
    "mdc2WithRSA": "7728d4f29b7b3451153de77f0484a840",
    "ripemd": "4d77c7b1392dcea775686ef4b8067bbaa1a781d8",
    "ripemd160": "4d77c7b1392dcea775686ef4b8067bbaa1a781d8",
    "ripemd160WithRSA": "4d77c7b1392dcea775686ef4b8067bbaa1a781d8",
    "rmd160": "4d77c7b1392dcea775686ef4b8067bbaa1a781d8",
    "sha": "fe467c8f286ed1967b86b5b204dea1793cf60c5e",
    "sha1": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "sha1WithRSAEncryption": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "sha224": "20ad281199872531bb2353c8b36a6f434d6d683f3071fa2fdf3c3194",
    "sha224WithRSAEncryption": "20ad281199872531bb2353c8b36a6f434d6d683f3071fa2fdf3c3194",
    "sha256": "a3b6ba9a5cba6071a99b1a43454053bfc3e6d1338ccf0063d5d71247a6b57566",
    "sha256WithRSAEncryption": "a3b6ba9a5cba6071a99b1a43454053bfc3e6d1338ccf0063d5d71247a6b57566",
    "sha384": "4e2ca16e010a0a71ee5d37fbe012499af5a0c3ea73132462d0f93432ffd1297efd6208833f3a6acaa93ad29716b6ef39",
    "sha384WithRSAEncryption": "4e2ca16e010a0a71ee5d37fbe012499af5a0c3ea73132462d0f93432ffd1297efd6208833f3a6acaa93ad29716b6ef39",
    "sha512": "b8e94b6c6bb9bb37c87c7a9adb138bf7af5a7758ef84b5fc7b5a7aab1a8bdce779eb22b3654f0286481805ac90b32c3260145143211668ca881523079344c81c",
    "sha512WithRSAEncryption": "b8e94b6c6bb9bb37c87c7a9adb138bf7af5a7758ef84b5fc7b5a7aab1a8bdce779eb22b3654f0286481805ac90b32c3260145143211668ca881523079344c81c",
    "shaWithRSAEncryption": "fe467c8f286ed1967b86b5b204dea1793cf60c5e",
    "ssl2-md5": "e5f19a0045481443bae165f03598a9ba",
    "ssl3-md5": "e5f19a0045481443bae165f03598a9ba",
    "ssl3-sha1": "baa7aa7b7753fa0abdc4a541842b5d238d949f0a",
    "whirlpool": "462639254d4c00ddd11ac8de1fc59cf02b01b3538786e13a65646315f5eeb589480553caadfa66d112ee90ffb7df3c730a934cf956fbb40a735dd38d042a4fe9"
  },
  {
    "input": "P///+AAAAGAAD///4Af///8AAD////Af//+AAHAAAAEAAAA///4AAAAf+PzAD//4AD//wP//gAAD///4AD///AAAD4H/wAP/wD///4AD//4A///+AAAcAAAAP///+AB//8AAAA==",
    "DSA": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "DSA-SHA": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "DSA-SHA1": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "DSA-SHA1-old": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "RSA-MD4": "caf6471ff4b9518b8f016561db4b1a15",
    "RSA-MD5": "b8fe8691321edbf308a9d60bb817c6af",
    "RSA-MDC2": "f0beb32c7aff9a1c1625fe032ca6f3ec",
    "RSA-RIPEMD160": "1543df020691f57f14569545c05c46cd7338d828",
    "RSA-SHA": "d804c20c89803fc75bb7e4867ccb9374d9a11d14",
    "RSA-SHA1": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "RSA-SHA1-2": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "RSA-SHA224": "b2e0a40cd537e8aca40f6e48ea404ebaacaa2eb40352658d69775673",
    "RSA-SHA256": "7d057dc07ed5a7c11590262a0a18c8cd614a029ca12fe08bfedc87307b5f65b9",
    "RSA-SHA384": "89498c99301d4543d9eb2845ad25ce4fd66b3ad11a6c6aca2106c75b71647c3162c7f7a6c770fb9ac6f803c3d8172ac7",
    "RSA-SHA512": "2f79327fd6c2a23fbbcc197ba3ba2b07a45672ef75619f6ce3eb34343edbffe4787d26a86c28525e1299182076a4ae35ccb0c0c80fa9fae8effe94c336446f1e",
    "dsaEncryption": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "dsaWithSHA": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "dsaWithSHA1": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "dss1": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "ecdsa-with-SHA1": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "md4": "caf6471ff4b9518b8f016561db4b1a15",
    "md4WithRSAEncryption": "caf6471ff4b9518b8f016561db4b1a15",
    "md5": "b8fe8691321edbf308a9d60bb817c6af",
    "md5WithRSAEncryption": "b8fe8691321edbf308a9d60bb817c6af",
    "mdc2": "f0beb32c7aff9a1c1625fe032ca6f3ec",
    "mdc2WithRSA": "f0beb32c7aff9a1c1625fe032ca6f3ec",
    "ripemd": "1543df020691f57f14569545c05c46cd7338d828",
    "ripemd160": "1543df020691f57f14569545c05c46cd7338d828",
    "ripemd160WithRSA": "1543df020691f57f14569545c05c46cd7338d828",
    "rmd160": "1543df020691f57f14569545c05c46cd7338d828",
    "sha": "d804c20c89803fc75bb7e4867ccb9374d9a11d14",
    "sha1": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "sha1WithRSAEncryption": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "sha224": "b2e0a40cd537e8aca40f6e48ea404ebaacaa2eb40352658d69775673",
    "sha224WithRSAEncryption": "b2e0a40cd537e8aca40f6e48ea404ebaacaa2eb40352658d69775673",
    "sha256": "7d057dc07ed5a7c11590262a0a18c8cd614a029ca12fe08bfedc87307b5f65b9",
    "sha256WithRSAEncryption": "7d057dc07ed5a7c11590262a0a18c8cd614a029ca12fe08bfedc87307b5f65b9",
    "sha384": "89498c99301d4543d9eb2845ad25ce4fd66b3ad11a6c6aca2106c75b71647c3162c7f7a6c770fb9ac6f803c3d8172ac7",
    "sha384WithRSAEncryption": "89498c99301d4543d9eb2845ad25ce4fd66b3ad11a6c6aca2106c75b71647c3162c7f7a6c770fb9ac6f803c3d8172ac7",
    "sha512": "2f79327fd6c2a23fbbcc197ba3ba2b07a45672ef75619f6ce3eb34343edbffe4787d26a86c28525e1299182076a4ae35ccb0c0c80fa9fae8effe94c336446f1e",
    "sha512WithRSAEncryption": "2f79327fd6c2a23fbbcc197ba3ba2b07a45672ef75619f6ce3eb34343edbffe4787d26a86c28525e1299182076a4ae35ccb0c0c80fa9fae8effe94c336446f1e",
    "shaWithRSAEncryption": "d804c20c89803fc75bb7e4867ccb9374d9a11d14",
    "ssl2-md5": "b8fe8691321edbf308a9d60bb817c6af",
    "ssl3-md5": "b8fe8691321edbf308a9d60bb817c6af",
    "ssl3-sha1": "351394dcebc08155d100fcd488578e6ae71d0e9c",
    "whirlpool": "380a2ca456afe1b85467c7292c401db802fa36d8228f404bd77269b10ed70e87256a899d25a2565572f12d34d944ebdd2527c6f79300f50366e7f7c4a723d71c"
  },
  {
    "input": "AAAAD//+D///h////wCAAA//wAAD8B/34AAAcAAB////gAH+B/AAAf/8AAAEAAH//gf///4AB8AAAP///4fwA//8AAAf+AAB///AAAA//8AAAH+P//gAAAB//+AGDgAAD///gAA=",
    "DSA": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "DSA-SHA": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "DSA-SHA1": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "DSA-SHA1-old": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "RSA-MD4": "54cdb51d1dc30c96402d1d821092520d",
    "RSA-MD5": "f31fdd0f1aef106005e6d29b72229fa1",
    "RSA-MDC2": "39876ea15aa7ecdca74dffde0ebff8ea",
    "RSA-RIPEMD160": "4e12b38791fea7cf5a83d0f353e82e8f8c2b708c",
    "RSA-SHA": "a17893a9d038002e3a6865d93fe519e00bba0df8",
    "RSA-SHA1": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "RSA-SHA1-2": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "RSA-SHA224": "c153da85e5091af2a95e6f6ab33f946cd3e5223241dd015e55495fc8",
    "RSA-SHA256": "0b7744d3394c04618e6376cd450cc3fc81586493ab5081a9b3b155938d98563c",
    "RSA-SHA384": "46e859d40c256cbe2871997329b0e330e4278ce3f2307ef61580d55317fdaf4c73cd380fd64475577e82f975fc06bc21",
    "RSA-SHA512": "28fc3b506c5c6ce09784cafad1c08b99c88efc9d46e771ddcfef25e1afc0524453d8c36ceaa9f40dba6689b70d1fcb7febecb0ab302c9e1b2905589d4785808c",
    "dsaEncryption": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "dsaWithSHA": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "dsaWithSHA1": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "dss1": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "ecdsa-with-SHA1": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "md4": "54cdb51d1dc30c96402d1d821092520d",
    "md4WithRSAEncryption": "54cdb51d1dc30c96402d1d821092520d",
    "md5": "f31fdd0f1aef106005e6d29b72229fa1",
    "md5WithRSAEncryption": "f31fdd0f1aef106005e6d29b72229fa1",
    "mdc2": "39876ea15aa7ecdca74dffde0ebff8ea",
    "mdc2WithRSA": "39876ea15aa7ecdca74dffde0ebff8ea",
    "ripemd": "4e12b38791fea7cf5a83d0f353e82e8f8c2b708c",
    "ripemd160": "4e12b38791fea7cf5a83d0f353e82e8f8c2b708c",
    "ripemd160WithRSA": "4e12b38791fea7cf5a83d0f353e82e8f8c2b708c",
    "rmd160": "4e12b38791fea7cf5a83d0f353e82e8f8c2b708c",
    "sha": "a17893a9d038002e3a6865d93fe519e00bba0df8",
    "sha1": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "sha1WithRSAEncryption": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "sha224": "c153da85e5091af2a95e6f6ab33f946cd3e5223241dd015e55495fc8",
    "sha224WithRSAEncryption": "c153da85e5091af2a95e6f6ab33f946cd3e5223241dd015e55495fc8",
    "sha256": "0b7744d3394c04618e6376cd450cc3fc81586493ab5081a9b3b155938d98563c",
    "sha256WithRSAEncryption": "0b7744d3394c04618e6376cd450cc3fc81586493ab5081a9b3b155938d98563c",
    "sha384": "46e859d40c256cbe2871997329b0e330e4278ce3f2307ef61580d55317fdaf4c73cd380fd64475577e82f975fc06bc21",
    "sha384WithRSAEncryption": "46e859d40c256cbe2871997329b0e330e4278ce3f2307ef61580d55317fdaf4c73cd380fd64475577e82f975fc06bc21",
    "sha512": "28fc3b506c5c6ce09784cafad1c08b99c88efc9d46e771ddcfef25e1afc0524453d8c36ceaa9f40dba6689b70d1fcb7febecb0ab302c9e1b2905589d4785808c",
    "sha512WithRSAEncryption": "28fc3b506c5c6ce09784cafad1c08b99c88efc9d46e771ddcfef25e1afc0524453d8c36ceaa9f40dba6689b70d1fcb7febecb0ab302c9e1b2905589d4785808c",
    "shaWithRSAEncryption": "a17893a9d038002e3a6865d93fe519e00bba0df8",
    "ssl2-md5": "f31fdd0f1aef106005e6d29b72229fa1",
    "ssl3-md5": "f31fdd0f1aef106005e6d29b72229fa1",
    "ssl3-sha1": "ab8be94c5af60d9477ef1252d604e58e27b2a9ee",
    "whirlpool": "74a0712eaa873fa0751e25ae58284972bbc487c97361547da0fabc4e0187acc3f691de98630aa2afb99ad039aa67ca1981c5c86277c6f26e7f5a67b9c0e5539d"
  },
  {
    "input": "A////eAAAB//+AH///v//+AB8PAAAP///4AAAH///+Af///wAYD////gAAB///D//8AAAAf+AAAAHgAf///gH//gAf/AAD//4AAAD/AA//9/wB/4P///wAAAf//g//wAAP8P////",
    "DSA": "3429ec74a695fdd3228f152564952308afe0680a",
    "DSA-SHA": "3429ec74a695fdd3228f152564952308afe0680a",
    "DSA-SHA1": "3429ec74a695fdd3228f152564952308afe0680a",
    "DSA-SHA1-old": "3429ec74a695fdd3228f152564952308afe0680a",
    "RSA-MD4": "d8c3eb4837b25c0104f2609e39e303fc",
    "RSA-MD5": "239ed45c3cb734db446adfbbe3dab8a1",
    "RSA-MDC2": "274c9cfec26ca6cd5a0d7fe76d34b981",
    "RSA-RIPEMD160": "accbb4022ec357affb25ad843357824a931895af",
    "RSA-SHA": "ef0bb7e636cc148fb39424fb6d7d15c06cbc53ae",
    "RSA-SHA1": "3429ec74a695fdd3228f152564952308afe0680a",
    "RSA-SHA1-2": "3429ec74a695fdd3228f152564952308afe0680a",
    "RSA-SHA224": "f756eb8dd16502b6fde9233b7cb4cbea68017da71c163dfa31471ff3",
    "RSA-SHA256": "e8d1ea7154ec53c175761311295f69037865db32ec22976b6ddb981d226760ad",
    "RSA-SHA384": "6c813aa44a53c8c35569b29fdb5337b1d8f89463a191dcb7c60f4b64a8bfc82c77a515a042fa282345d37a2fe20943d0",
    "RSA-SHA512": "d874ce9b2ac8b10d85a6a7c9935c76568559b3eef248161afcecb78585d05d476df2005ab43baedffd2acfc78cffbde018d522a3d1ed34566b56e1b209cb624e",
    "dsaEncryption": "3429ec74a695fdd3228f152564952308afe0680a",
    "dsaWithSHA": "3429ec74a695fdd3228f152564952308afe0680a",
    "dsaWithSHA1": "3429ec74a695fdd3228f152564952308afe0680a",
    "dss1": "3429ec74a695fdd3228f152564952308afe0680a",
    "ecdsa-with-SHA1": "3429ec74a695fdd3228f152564952308afe0680a",
    "md4": "d8c3eb4837b25c0104f2609e39e303fc",
    "md4WithRSAEncryption": "d8c3eb4837b25c0104f2609e39e303fc",
    "md5": "239ed45c3cb734db446adfbbe3dab8a1",
    "md5WithRSAEncryption": "239ed45c3cb734db446adfbbe3dab8a1",
    "mdc2": "274c9cfec26ca6cd5a0d7fe76d34b981",
    "mdc2WithRSA": "274c9cfec26ca6cd5a0d7fe76d34b981",
    "ripemd": "accbb4022ec357affb25ad843357824a931895af",
    "ripemd160": "accbb4022ec357affb25ad843357824a931895af",
    "ripemd160WithRSA": "accbb4022ec357affb25ad843357824a931895af",
    "rmd160": "accbb4022ec357affb25ad843357824a931895af",
    "sha": "ef0bb7e636cc148fb39424fb6d7d15c06cbc53ae",
    "sha1": "3429ec74a695fdd3228f152564952308afe0680a",
    "sha1WithRSAEncryption": "3429ec74a695fdd3228f152564952308afe0680a",
    "sha224": "f756eb8dd16502b6fde9233b7cb4cbea68017da71c163dfa31471ff3",
    "sha224WithRSAEncryption": "f756eb8dd16502b6fde9233b7cb4cbea68017da71c163dfa31471ff3",
    "sha256": "e8d1ea7154ec53c175761311295f69037865db32ec22976b6ddb981d226760ad",
    "sha256WithRSAEncryption": "e8d1ea7154ec53c175761311295f69037865db32ec22976b6ddb981d226760ad",
    "sha384": "6c813aa44a53c8c35569b29fdb5337b1d8f89463a191dcb7c60f4b64a8bfc82c77a515a042fa282345d37a2fe20943d0",
    "sha384WithRSAEncryption": "6c813aa44a53c8c35569b29fdb5337b1d8f89463a191dcb7c60f4b64a8bfc82c77a515a042fa282345d37a2fe20943d0",
    "sha512": "d874ce9b2ac8b10d85a6a7c9935c76568559b3eef248161afcecb78585d05d476df2005ab43baedffd2acfc78cffbde018d522a3d1ed34566b56e1b209cb624e",
    "sha512WithRSAEncryption": "d874ce9b2ac8b10d85a6a7c9935c76568559b3eef248161afcecb78585d05d476df2005ab43baedffd2acfc78cffbde018d522a3d1ed34566b56e1b209cb624e",
    "shaWithRSAEncryption": "ef0bb7e636cc148fb39424fb6d7d15c06cbc53ae",
    "ssl2-md5": "239ed45c3cb734db446adfbbe3dab8a1",
    "ssl3-md5": "239ed45c3cb734db446adfbbe3dab8a1",
    "ssl3-sha1": "3429ec74a695fdd3228f152564952308afe0680a",
    "whirlpool": "1063e04df2cb1ecc3193c653525e8fe573a28b04ef344d73990d09da7b5a53d7ab8f411f5ee379bb05376bf431c246109020e4cb945fb3b682d373ad7f745e45"
  },
  {
    "input": "B//8A////9///4f/GAADgAH/AAAAH/8AAD///8Af4D////wAAAH/+AAAP///+AAAB+AAB//5/+AAP+AAf+/wAAeB//wAAAD/4AAwAAAA///wAAAD//x/B/gD////AD/8AAAB/8AAAA==",
    "DSA": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "DSA-SHA": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "DSA-SHA1": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "DSA-SHA1-old": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "RSA-MD4": "e1d299e788abff60e2249ed7e2d80bbf",
    "RSA-MD5": "2c2303411c7d25617a54106aca18070d",
    "RSA-MDC2": "0d7f2d9d5ff11df485d8fb40433b970d",
    "RSA-RIPEMD160": "2fa158685a46114b0aa0eb44792b7a72e206420e",
    "RSA-SHA": "c7bb9cb70aaf9eedf243081901aa41f6629eec6f",
    "RSA-SHA1": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "RSA-SHA1-2": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "RSA-SHA224": "c892b2e1f5d40b80823182aeb78ca0441e17c690df0fd66633c5565b",
    "RSA-SHA256": "40aa287bdf661317439fa5ffa77cc9fa9ca3df504aae74b0ba83b2fbebbaac83",
    "RSA-SHA384": "b7e69de25e82bedf5ebb07010b82547b7b3120959eed48417287de0a94e2bd1cd0ee980e8f9cc98abde68bc5f3b16916",
    "RSA-SHA512": "1e89f0c16069768b010807a5b504a49a5eb506a0341e25971f87d241a161a4ad743da93dfe8a28ff18b025f27a565bddb57d58a9c44ef8c4ccd1bc4769dae6b1",
    "dsaEncryption": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "dsaWithSHA": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "dsaWithSHA1": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "dss1": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "ecdsa-with-SHA1": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "md4": "e1d299e788abff60e2249ed7e2d80bbf",
    "md4WithRSAEncryption": "e1d299e788abff60e2249ed7e2d80bbf",
    "md5": "2c2303411c7d25617a54106aca18070d",
    "md5WithRSAEncryption": "2c2303411c7d25617a54106aca18070d",
    "mdc2": "0d7f2d9d5ff11df485d8fb40433b970d",
    "mdc2WithRSA": "0d7f2d9d5ff11df485d8fb40433b970d",
    "ripemd": "2fa158685a46114b0aa0eb44792b7a72e206420e",
    "ripemd160": "2fa158685a46114b0aa0eb44792b7a72e206420e",
    "ripemd160WithRSA": "2fa158685a46114b0aa0eb44792b7a72e206420e",
    "rmd160": "2fa158685a46114b0aa0eb44792b7a72e206420e",
    "sha": "c7bb9cb70aaf9eedf243081901aa41f6629eec6f",
    "sha1": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "sha1WithRSAEncryption": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "sha224": "c892b2e1f5d40b80823182aeb78ca0441e17c690df0fd66633c5565b",
    "sha224WithRSAEncryption": "c892b2e1f5d40b80823182aeb78ca0441e17c690df0fd66633c5565b",
    "sha256": "40aa287bdf661317439fa5ffa77cc9fa9ca3df504aae74b0ba83b2fbebbaac83",
    "sha256WithRSAEncryption": "40aa287bdf661317439fa5ffa77cc9fa9ca3df504aae74b0ba83b2fbebbaac83",
    "sha384": "b7e69de25e82bedf5ebb07010b82547b7b3120959eed48417287de0a94e2bd1cd0ee980e8f9cc98abde68bc5f3b16916",
    "sha384WithRSAEncryption": "b7e69de25e82bedf5ebb07010b82547b7b3120959eed48417287de0a94e2bd1cd0ee980e8f9cc98abde68bc5f3b16916",
    "sha512": "1e89f0c16069768b010807a5b504a49a5eb506a0341e25971f87d241a161a4ad743da93dfe8a28ff18b025f27a565bddb57d58a9c44ef8c4ccd1bc4769dae6b1",
    "sha512WithRSAEncryption": "1e89f0c16069768b010807a5b504a49a5eb506a0341e25971f87d241a161a4ad743da93dfe8a28ff18b025f27a565bddb57d58a9c44ef8c4ccd1bc4769dae6b1",
    "shaWithRSAEncryption": "c7bb9cb70aaf9eedf243081901aa41f6629eec6f",
    "ssl2-md5": "2c2303411c7d25617a54106aca18070d",
    "ssl3-md5": "2c2303411c7d25617a54106aca18070d",
    "ssl3-sha1": "907fa46c029bc67eaa8e4f46e3c2a232f85bd122",
    "whirlpool": "6d475795500116878cebffaa6693c791ad416578b98b97c63e1f578c307640125e9f10f1a15b3e81c11d24a79981a54463b5de4d693a0d0e74989d7c18166e68"
  },
  {
    "input": "AH/8AAAD//gAAGH+f//+AAAf//w//4AB////4AD///+AH/gAf///+AAAB///4AAAB////4AA/4AP///8AAB///4AAAAwAAB/gAAH///wAAAD/8AP//+AP/+AA////gP///9//B/wAAA=",
    "DSA": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "DSA-SHA": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "DSA-SHA1": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "DSA-SHA1-old": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "RSA-MD4": "f0e60304c9f67343a4c92ff650c83785",
    "RSA-MD5": "de179c41aca8bcdc388964024948ff8e",
    "RSA-MDC2": "8f0060202c06090136da8999ae49b67f",
    "RSA-RIPEMD160": "0b2d06ac7b6b0c2d389df8503a7abad0073e3c54",
    "RSA-SHA": "ec269ef07494b78a45dbac17be0473eac2d43d65",
    "RSA-SHA1": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "RSA-SHA1-2": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "RSA-SHA224": "b3fd39c424c89ade47cdf653a5272ee66a5c8a3fb4e989f6dcac5641",
    "RSA-SHA256": "ee2e8fb7206e2e8fdae91afcc3e903d534b304069f232c68f53407cfc6d0bbae",
    "RSA-SHA384": "94662a4a2d992a072f94b2bcf649cc4169f3f8f46bd4bf9ce9c207f9c4d241eee6c02e4e2e41883c8e916c79c458b771",
    "RSA-SHA512": "47f6def39d031dc2353714e174a4b0574eb8c1d6f6001f59d768591a8aa6273c00446a13a6aaf5918a2772de94563e6b8a42448dc9fc0041f5f9290cf385307b",
    "dsaEncryption": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "dsaWithSHA": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "dsaWithSHA1": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "dss1": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "ecdsa-with-SHA1": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "md4": "f0e60304c9f67343a4c92ff650c83785",
    "md4WithRSAEncryption": "f0e60304c9f67343a4c92ff650c83785",
    "md5": "de179c41aca8bcdc388964024948ff8e",
    "md5WithRSAEncryption": "de179c41aca8bcdc388964024948ff8e",
    "mdc2": "8f0060202c06090136da8999ae49b67f",
    "mdc2WithRSA": "8f0060202c06090136da8999ae49b67f",
    "ripemd": "0b2d06ac7b6b0c2d389df8503a7abad0073e3c54",
    "ripemd160": "0b2d06ac7b6b0c2d389df8503a7abad0073e3c54",
    "ripemd160WithRSA": "0b2d06ac7b6b0c2d389df8503a7abad0073e3c54",
    "rmd160": "0b2d06ac7b6b0c2d389df8503a7abad0073e3c54",
    "sha": "ec269ef07494b78a45dbac17be0473eac2d43d65",
    "sha1": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "sha1WithRSAEncryption": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "sha224": "b3fd39c424c89ade47cdf653a5272ee66a5c8a3fb4e989f6dcac5641",
    "sha224WithRSAEncryption": "b3fd39c424c89ade47cdf653a5272ee66a5c8a3fb4e989f6dcac5641",
    "sha256": "ee2e8fb7206e2e8fdae91afcc3e903d534b304069f232c68f53407cfc6d0bbae",
    "sha256WithRSAEncryption": "ee2e8fb7206e2e8fdae91afcc3e903d534b304069f232c68f53407cfc6d0bbae",
    "sha384": "94662a4a2d992a072f94b2bcf649cc4169f3f8f46bd4bf9ce9c207f9c4d241eee6c02e4e2e41883c8e916c79c458b771",
    "sha384WithRSAEncryption": "94662a4a2d992a072f94b2bcf649cc4169f3f8f46bd4bf9ce9c207f9c4d241eee6c02e4e2e41883c8e916c79c458b771",
    "sha512": "47f6def39d031dc2353714e174a4b0574eb8c1d6f6001f59d768591a8aa6273c00446a13a6aaf5918a2772de94563e6b8a42448dc9fc0041f5f9290cf385307b",
    "sha512WithRSAEncryption": "47f6def39d031dc2353714e174a4b0574eb8c1d6f6001f59d768591a8aa6273c00446a13a6aaf5918a2772de94563e6b8a42448dc9fc0041f5f9290cf385307b",
    "shaWithRSAEncryption": "ec269ef07494b78a45dbac17be0473eac2d43d65",
    "ssl2-md5": "de179c41aca8bcdc388964024948ff8e",
    "ssl3-md5": "de179c41aca8bcdc388964024948ff8e",
    "ssl3-sha1": "2644c87d1fbbbc0fc8d65f64bca2492da15baae4",
    "whirlpool": "b5fcd21f790a1992250a38f98d7e5d0d4d880ecddef947a18f46180a900f261c8072cf331504181c36e7f975039d5ea7d90d1fdb8cacde341db201654962746f"
  },
  {
    "input": "H/AAAH///gIAAAP////YB///4AH//4AAAAfAAA//wH/wAAf//4AAB/AAAH/8A////8AAAf//+f/+AAAf/8AAAAP+P///AAf+AAADwAA/+AAQA/wAD//AAH//4AD/8AAAf//gAAAP////",
    "DSA": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "DSA-SHA": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "DSA-SHA1": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "DSA-SHA1-old": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "RSA-MD4": "f9c0d006e6219227df6c78d6ceda1d60",
    "RSA-MD5": "ca335b74d59bd50832267d3bf28f81df",
    "RSA-MDC2": "973a426475937a0b912f4f09d0527126",
    "RSA-RIPEMD160": "c75d0759656a5c6799012aeac7fde086a68ea46d",
    "RSA-SHA": "cdad2b9881f807b9d5b02c0cd3360209a534815b",
    "RSA-SHA1": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "RSA-SHA1-2": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "RSA-SHA224": "3584fc30e9bee2533b5f35253d633c6d56686e5bd5d0d897be7dd19b",
    "RSA-SHA256": "b940c011eaef2b772ba03659581d525e0b6148f9c59cb7120db55ce18bf6d695",
    "RSA-SHA384": "76df8b40bcb7a491465081ffc145195dc79d642f2cc0859bf464729e6534db28f04bb04fcbb21722aa248cad4cafb4e1",
    "RSA-SHA512": "fbb0bcd5e88a68f5c1644b87db67574716d325fa7dd211e228020f122edc23966a761663231b473fed3626dca83e4e0f3c009fb905a12c91927b279c94e026f1",
    "dsaEncryption": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "dsaWithSHA": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "dsaWithSHA1": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "dss1": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "ecdsa-with-SHA1": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "md4": "f9c0d006e6219227df6c78d6ceda1d60",
    "md4WithRSAEncryption": "f9c0d006e6219227df6c78d6ceda1d60",
    "md5": "ca335b74d59bd50832267d3bf28f81df",
    "md5WithRSAEncryption": "ca335b74d59bd50832267d3bf28f81df",
    "mdc2": "973a426475937a0b912f4f09d0527126",
    "mdc2WithRSA": "973a426475937a0b912f4f09d0527126",
    "ripemd": "c75d0759656a5c6799012aeac7fde086a68ea46d",
    "ripemd160": "c75d0759656a5c6799012aeac7fde086a68ea46d",
    "ripemd160WithRSA": "c75d0759656a5c6799012aeac7fde086a68ea46d",
    "rmd160": "c75d0759656a5c6799012aeac7fde086a68ea46d",
    "sha": "cdad2b9881f807b9d5b02c0cd3360209a534815b",
    "sha1": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "sha1WithRSAEncryption": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "sha224": "3584fc30e9bee2533b5f35253d633c6d56686e5bd5d0d897be7dd19b",
    "sha224WithRSAEncryption": "3584fc30e9bee2533b5f35253d633c6d56686e5bd5d0d897be7dd19b",
    "sha256": "b940c011eaef2b772ba03659581d525e0b6148f9c59cb7120db55ce18bf6d695",
    "sha256WithRSAEncryption": "b940c011eaef2b772ba03659581d525e0b6148f9c59cb7120db55ce18bf6d695",
    "sha384": "76df8b40bcb7a491465081ffc145195dc79d642f2cc0859bf464729e6534db28f04bb04fcbb21722aa248cad4cafb4e1",
    "sha384WithRSAEncryption": "76df8b40bcb7a491465081ffc145195dc79d642f2cc0859bf464729e6534db28f04bb04fcbb21722aa248cad4cafb4e1",
    "sha512": "fbb0bcd5e88a68f5c1644b87db67574716d325fa7dd211e228020f122edc23966a761663231b473fed3626dca83e4e0f3c009fb905a12c91927b279c94e026f1",
    "sha512WithRSAEncryption": "fbb0bcd5e88a68f5c1644b87db67574716d325fa7dd211e228020f122edc23966a761663231b473fed3626dca83e4e0f3c009fb905a12c91927b279c94e026f1",
    "shaWithRSAEncryption": "cdad2b9881f807b9d5b02c0cd3360209a534815b",
    "ssl2-md5": "ca335b74d59bd50832267d3bf28f81df",
    "ssl3-md5": "ca335b74d59bd50832267d3bf28f81df",
    "ssl3-sha1": "110a3eeb408756e2e81abaf4c5dcd4d4c6afcf6d",
    "whirlpool": "6bfbc19433c7ffbb0871d67a3da6b78c66787e155533e1343f4a575cc54e2014b95ba89f63d45bacab3e98d71dfc097709d8c8984df662867b797bd3799cdf01"
  },
  {
    "input": "////+AAAYAAAAP///AP//AAAPAA/4H/4AAf/+A/4AAB////8AH/CAAP///4AAf////AD///wGAfAAA//wAAAf///h+AAAAcAH4AEB//gAAAf/4H/gAAD//wAAAf////AAAAfgAH//wAAAA==",
    "DSA": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "DSA-SHA": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "DSA-SHA1": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "DSA-SHA1-old": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "RSA-MD4": "bfafeb31b1aecf93ff4523a01736565f",
    "RSA-MD5": "dabda7a1cbaa8ea5104c57c8950b703a",
    "RSA-MDC2": "92d08bcba9c96be38dcfe494e25c3274",
    "RSA-RIPEMD160": "306478e5ddc1ca1a45304b197e22e730ec83162a",
    "RSA-SHA": "2121298719445ab95023d442f9f9396d5c86d0cb",
    "RSA-SHA1": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "RSA-SHA1-2": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "RSA-SHA224": "e2b877b8b10dfecaa2f0b1d0dd0473b84593b375bcfbd8e4e9bc05cf",
    "RSA-SHA256": "9574545ba02bd75bb1dcf038884bf9d7892bc017215308f01ebba7932c014a62",
    "RSA-SHA384": "4932ed295a0a3b2218eea675ad35b4a6601ac2aed9e2845cfa63ed740a01bb62ed6be35bc13f2ec14a4951387436d45b",
    "RSA-SHA512": "fb7fb28ee316d6d17f7f0ddd292fa56e0802269a255380e737e8cb255ca93def16be30379495e36d8e46decb16b93edea0d214e78484c5efac10e7f738259816",
    "dsaEncryption": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "dsaWithSHA": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "dsaWithSHA1": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "dss1": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "ecdsa-with-SHA1": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "md4": "bfafeb31b1aecf93ff4523a01736565f",
    "md4WithRSAEncryption": "bfafeb31b1aecf93ff4523a01736565f",
    "md5": "dabda7a1cbaa8ea5104c57c8950b703a",
    "md5WithRSAEncryption": "dabda7a1cbaa8ea5104c57c8950b703a",
    "mdc2": "92d08bcba9c96be38dcfe494e25c3274",
    "mdc2WithRSA": "92d08bcba9c96be38dcfe494e25c3274",
    "ripemd": "306478e5ddc1ca1a45304b197e22e730ec83162a",
    "ripemd160": "306478e5ddc1ca1a45304b197e22e730ec83162a",
    "ripemd160WithRSA": "306478e5ddc1ca1a45304b197e22e730ec83162a",
    "rmd160": "306478e5ddc1ca1a45304b197e22e730ec83162a",
    "sha": "2121298719445ab95023d442f9f9396d5c86d0cb",
    "sha1": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "sha1WithRSAEncryption": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "sha224": "e2b877b8b10dfecaa2f0b1d0dd0473b84593b375bcfbd8e4e9bc05cf",
    "sha224WithRSAEncryption": "e2b877b8b10dfecaa2f0b1d0dd0473b84593b375bcfbd8e4e9bc05cf",
    "sha256": "9574545ba02bd75bb1dcf038884bf9d7892bc017215308f01ebba7932c014a62",
    "sha256WithRSAEncryption": "9574545ba02bd75bb1dcf038884bf9d7892bc017215308f01ebba7932c014a62",
    "sha384": "4932ed295a0a3b2218eea675ad35b4a6601ac2aed9e2845cfa63ed740a01bb62ed6be35bc13f2ec14a4951387436d45b",
    "sha384WithRSAEncryption": "4932ed295a0a3b2218eea675ad35b4a6601ac2aed9e2845cfa63ed740a01bb62ed6be35bc13f2ec14a4951387436d45b",
    "sha512": "fb7fb28ee316d6d17f7f0ddd292fa56e0802269a255380e737e8cb255ca93def16be30379495e36d8e46decb16b93edea0d214e78484c5efac10e7f738259816",
    "sha512WithRSAEncryption": "fb7fb28ee316d6d17f7f0ddd292fa56e0802269a255380e737e8cb255ca93def16be30379495e36d8e46decb16b93edea0d214e78484c5efac10e7f738259816",
    "shaWithRSAEncryption": "2121298719445ab95023d442f9f9396d5c86d0cb",
    "ssl2-md5": "dabda7a1cbaa8ea5104c57c8950b703a",
    "ssl3-md5": "dabda7a1cbaa8ea5104c57c8950b703a",
    "ssl3-sha1": "cd4fdc35fac7e1adb5de40f47f256ef74d584959",
    "whirlpool": "b60a858f0370118c43dd09621fe335c99a54c8200cddbfd8c13139af024c96765db1e13ec8f8b4b59b8f8396b1a20b1a0aca35ffce61052db0490505028bba33"
  },
  {
    "input": "AA/8H/gAD///+Af/8fwAH///8AAP/9////8AAAP///8AAf///8AQD/AAAAD8AB8ABwAB8AAAH+AAADB8P//gAP/8B//8AD////j//8H8H///+AAB//wAAA////8AAP/4DAAAB///AAAAf/8=",
    "DSA": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "DSA-SHA": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "DSA-SHA1": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "DSA-SHA1-old": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "RSA-MD4": "08ad8dcc7d78469c8fe9834c1798ac8b",
    "RSA-MD5": "076352a22ecea5ebc876812f62c1cb8d",
    "RSA-MDC2": "94cd50bebdb725432ae9bfae550ca5b2",
    "RSA-RIPEMD160": "a2665c4f35e593a9a6294c228d9e25210627af3b",
    "RSA-SHA": "099a44003a86df0f797102a5c7f72d99e2898a31",
    "RSA-SHA1": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "RSA-SHA1-2": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "RSA-SHA224": "b30a392033a44919538c8c1a199ebda8cd6b9e871f11c7762be3fc57",
    "RSA-SHA256": "da685c53ddf810225507141759e3c74ffeaa1c5eecbe150386a83027e7014077",
    "RSA-SHA384": "5569d07f4cfa41300d75f69b0c43fad6789c8d7ed1540b81c616e8f95dc8b96b9ab36ddb0ec37e8fcbfd2a2376f2d78d",
    "RSA-SHA512": "9272aa50c3f160a107804b19058950dda018a10293cb811af37c5f984e8e0714b0d3e79635484c518877b928c9fba60c088c31776421f414833758dc4e0e4a8f",
    "dsaEncryption": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "dsaWithSHA": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "dsaWithSHA1": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "dss1": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "ecdsa-with-SHA1": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "md4": "08ad8dcc7d78469c8fe9834c1798ac8b",
    "md4WithRSAEncryption": "08ad8dcc7d78469c8fe9834c1798ac8b",
    "md5": "076352a22ecea5ebc876812f62c1cb8d",
    "md5WithRSAEncryption": "076352a22ecea5ebc876812f62c1cb8d",
    "mdc2": "94cd50bebdb725432ae9bfae550ca5b2",
    "mdc2WithRSA": "94cd50bebdb725432ae9bfae550ca5b2",
    "ripemd": "a2665c4f35e593a9a6294c228d9e25210627af3b",
    "ripemd160": "a2665c4f35e593a9a6294c228d9e25210627af3b",
    "ripemd160WithRSA": "a2665c4f35e593a9a6294c228d9e25210627af3b",
    "rmd160": "a2665c4f35e593a9a6294c228d9e25210627af3b",
    "sha": "099a44003a86df0f797102a5c7f72d99e2898a31",
    "sha1": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "sha1WithRSAEncryption": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "sha224": "b30a392033a44919538c8c1a199ebda8cd6b9e871f11c7762be3fc57",
    "sha224WithRSAEncryption": "b30a392033a44919538c8c1a199ebda8cd6b9e871f11c7762be3fc57",
    "sha256": "da685c53ddf810225507141759e3c74ffeaa1c5eecbe150386a83027e7014077",
    "sha256WithRSAEncryption": "da685c53ddf810225507141759e3c74ffeaa1c5eecbe150386a83027e7014077",
    "sha384": "5569d07f4cfa41300d75f69b0c43fad6789c8d7ed1540b81c616e8f95dc8b96b9ab36ddb0ec37e8fcbfd2a2376f2d78d",
    "sha384WithRSAEncryption": "5569d07f4cfa41300d75f69b0c43fad6789c8d7ed1540b81c616e8f95dc8b96b9ab36ddb0ec37e8fcbfd2a2376f2d78d",
    "sha512": "9272aa50c3f160a107804b19058950dda018a10293cb811af37c5f984e8e0714b0d3e79635484c518877b928c9fba60c088c31776421f414833758dc4e0e4a8f",
    "sha512WithRSAEncryption": "9272aa50c3f160a107804b19058950dda018a10293cb811af37c5f984e8e0714b0d3e79635484c518877b928c9fba60c088c31776421f414833758dc4e0e4a8f",
    "shaWithRSAEncryption": "099a44003a86df0f797102a5c7f72d99e2898a31",
    "ssl2-md5": "076352a22ecea5ebc876812f62c1cb8d",
    "ssl3-md5": "076352a22ecea5ebc876812f62c1cb8d",
    "ssl3-sha1": "8e6e273208ac256f9eccf296f3f5a37bc8a0f9f7",
    "whirlpool": "8dc55ce39d1a79957bea671d83f0122bbe2c8ea99fc6b62b082126397ce45ec6ebbad7e28027d4fa6f154bac6ff76932003524eadb430ed690050eb08620224a"
  },
  {
    "input": "//+A//8AAAB///8AH/wABgAP+AAAAYAAAH///+A////8AGAAAAD+AAAH///wf///+AAAgAAAD////7///8AH//4AABwAH/wHAAH//wAAAIAAH/8DgAAAP///+AAH////gAAf///gH///wAAA",
    "DSA": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "DSA-SHA": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "DSA-SHA1": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "DSA-SHA1-old": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "RSA-MD4": "a5b788fb2c6d1a97c83d74f1e29872a8",
    "RSA-MD5": "ee0a2bdec712a9413623d8a920714b96",
    "RSA-MDC2": "a126048a98e78726a312c63113d125f6",
    "RSA-RIPEMD160": "05a6e4a41a03606cc6f2e2cb21a8527b2dfe2e2b",
    "RSA-SHA": "c0dbd2d8b1e1c261e73963f23a8cce1614e07b45",
    "RSA-SHA1": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "RSA-SHA1-2": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "RSA-SHA224": "224a83538dc40602cf6996116138bc14209c203d8aadb61008678685",
    "RSA-SHA256": "5c0769369e4fb9f9d9e599612923554fb2f1e6d87eaeed283f6106845b66b532",
    "RSA-SHA384": "c0b0e64230da1e03e83d93083ee33d1bf7eef00189dea1759b172fd235691cb85df92390656911bbc12ed2b3465fb4d0",
    "RSA-SHA512": "593c8043119e06289fda10840f0b4cdd651b1a49256ac4aed3fadfacdd52e2c4c09c03e02f16930e9ea8d99f864830e23c35a2796f9bddc96e0db020c18f95ce",
    "dsaEncryption": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "dsaWithSHA": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "dsaWithSHA1": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "dss1": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "ecdsa-with-SHA1": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "md4": "a5b788fb2c6d1a97c83d74f1e29872a8",
    "md4WithRSAEncryption": "a5b788fb2c6d1a97c83d74f1e29872a8",
    "md5": "ee0a2bdec712a9413623d8a920714b96",
    "md5WithRSAEncryption": "ee0a2bdec712a9413623d8a920714b96",
    "mdc2": "a126048a98e78726a312c63113d125f6",
    "mdc2WithRSA": "a126048a98e78726a312c63113d125f6",
    "ripemd": "05a6e4a41a03606cc6f2e2cb21a8527b2dfe2e2b",
    "ripemd160": "05a6e4a41a03606cc6f2e2cb21a8527b2dfe2e2b",
    "ripemd160WithRSA": "05a6e4a41a03606cc6f2e2cb21a8527b2dfe2e2b",
    "rmd160": "05a6e4a41a03606cc6f2e2cb21a8527b2dfe2e2b",
    "sha": "c0dbd2d8b1e1c261e73963f23a8cce1614e07b45",
    "sha1": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "sha1WithRSAEncryption": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "sha224": "224a83538dc40602cf6996116138bc14209c203d8aadb61008678685",
    "sha224WithRSAEncryption": "224a83538dc40602cf6996116138bc14209c203d8aadb61008678685",
    "sha256": "5c0769369e4fb9f9d9e599612923554fb2f1e6d87eaeed283f6106845b66b532",
    "sha256WithRSAEncryption": "5c0769369e4fb9f9d9e599612923554fb2f1e6d87eaeed283f6106845b66b532",
    "sha384": "c0b0e64230da1e03e83d93083ee33d1bf7eef00189dea1759b172fd235691cb85df92390656911bbc12ed2b3465fb4d0",
    "sha384WithRSAEncryption": "c0b0e64230da1e03e83d93083ee33d1bf7eef00189dea1759b172fd235691cb85df92390656911bbc12ed2b3465fb4d0",
    "sha512": "593c8043119e06289fda10840f0b4cdd651b1a49256ac4aed3fadfacdd52e2c4c09c03e02f16930e9ea8d99f864830e23c35a2796f9bddc96e0db020c18f95ce",
    "sha512WithRSAEncryption": "593c8043119e06289fda10840f0b4cdd651b1a49256ac4aed3fadfacdd52e2c4c09c03e02f16930e9ea8d99f864830e23c35a2796f9bddc96e0db020c18f95ce",
    "shaWithRSAEncryption": "c0dbd2d8b1e1c261e73963f23a8cce1614e07b45",
    "ssl2-md5": "ee0a2bdec712a9413623d8a920714b96",
    "ssl3-md5": "ee0a2bdec712a9413623d8a920714b96",
    "ssl3-sha1": "fe0606100bdbc268db39b503e0fdfe3766185828",
    "whirlpool": "84d06f016ea6fefbf31759dbd6e6cf9288e49c151f8d2181ecaa3b47556c978dfaf80bc61b3728b6345aafdbe205c963813b2df83dae5180d0d4e4651297fc57"
  },
  {
    "input": "////+AAAAH4AAAAf/4AH////gAAAD///w//wAAAEf8B/8AA//4AAf+AAA//AAAf/AAAP/4AAAAeAAAAP////Af///8ADwAAAA///4AAP///AAAP//gAD//gAAA///8AB/+AAAP///AAAH////w==",
    "DSA": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "DSA-SHA": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "DSA-SHA1": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "DSA-SHA1-old": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "RSA-MD4": "d8c9d2dba098a2a73e2f285887c49c2d",
    "RSA-MD5": "a927c3a99f2843de4133377c690db9b7",
    "RSA-MDC2": "590e322c3cce4c29823b1c23b3893eff",
    "RSA-RIPEMD160": "da29a53340a19bd8126b7092b0b86fd65dadb674",
    "RSA-SHA": "2b70c4e5201a0d99dcb8f690bfba18cafdaf2af5",
    "RSA-SHA1": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "RSA-SHA1-2": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "RSA-SHA224": "da0a072fb2f2eed7aa39b893aae73c1a53b9197f04861aca1c40eacd",
    "RSA-SHA256": "19056a3d33ebe1b84a100c27fc72d0265ceeb9c573d7942a4d44983238d34ea7",
    "RSA-SHA384": "493ba3abc996a9ba7d3d47c582ec49c715d03c67ad4b64834c0b3926906764ca9acd7d5c557c093089223a85f04f6b5d",
    "RSA-SHA512": "d3ec082c6f34441b9edfb6902e73a1493e15990aa5d230b288bc27f14072ed6265149225d0707a9049c803844ff444559df87be7ee0a1c592468ed1c8c182efb",
    "dsaEncryption": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "dsaWithSHA": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "dsaWithSHA1": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "dss1": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "ecdsa-with-SHA1": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "md4": "d8c9d2dba098a2a73e2f285887c49c2d",
    "md4WithRSAEncryption": "d8c9d2dba098a2a73e2f285887c49c2d",
    "md5": "a927c3a99f2843de4133377c690db9b7",
    "md5WithRSAEncryption": "a927c3a99f2843de4133377c690db9b7",
    "mdc2": "590e322c3cce4c29823b1c23b3893eff",
    "mdc2WithRSA": "590e322c3cce4c29823b1c23b3893eff",
    "ripemd": "da29a53340a19bd8126b7092b0b86fd65dadb674",
    "ripemd160": "da29a53340a19bd8126b7092b0b86fd65dadb674",
    "ripemd160WithRSA": "da29a53340a19bd8126b7092b0b86fd65dadb674",
    "rmd160": "da29a53340a19bd8126b7092b0b86fd65dadb674",
    "sha": "2b70c4e5201a0d99dcb8f690bfba18cafdaf2af5",
    "sha1": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "sha1WithRSAEncryption": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "sha224": "da0a072fb2f2eed7aa39b893aae73c1a53b9197f04861aca1c40eacd",
    "sha224WithRSAEncryption": "da0a072fb2f2eed7aa39b893aae73c1a53b9197f04861aca1c40eacd",
    "sha256": "19056a3d33ebe1b84a100c27fc72d0265ceeb9c573d7942a4d44983238d34ea7",
    "sha256WithRSAEncryption": "19056a3d33ebe1b84a100c27fc72d0265ceeb9c573d7942a4d44983238d34ea7",
    "sha384": "493ba3abc996a9ba7d3d47c582ec49c715d03c67ad4b64834c0b3926906764ca9acd7d5c557c093089223a85f04f6b5d",
    "sha384WithRSAEncryption": "493ba3abc996a9ba7d3d47c582ec49c715d03c67ad4b64834c0b3926906764ca9acd7d5c557c093089223a85f04f6b5d",
    "sha512": "d3ec082c6f34441b9edfb6902e73a1493e15990aa5d230b288bc27f14072ed6265149225d0707a9049c803844ff444559df87be7ee0a1c592468ed1c8c182efb",
    "sha512WithRSAEncryption": "d3ec082c6f34441b9edfb6902e73a1493e15990aa5d230b288bc27f14072ed6265149225d0707a9049c803844ff444559df87be7ee0a1c592468ed1c8c182efb",
    "shaWithRSAEncryption": "2b70c4e5201a0d99dcb8f690bfba18cafdaf2af5",
    "ssl2-md5": "a927c3a99f2843de4133377c690db9b7",
    "ssl3-md5": "a927c3a99f2843de4133377c690db9b7",
    "ssl3-sha1": "6c63c3e58047bcdb35a17f74eeba4e9b14420809",
    "whirlpool": "db36ace428aab422ddf844b164aa8132dd87bb823bb5bfc355a042e51df7558d4515610661251832301b2b9d69b8cab6f47da4c761ecfc719e20c581ed114079"
  },
  {
    "input": "//AAP/wAAP///+Afw/4AB//4AA/wAf//8AAA/8AP//+AAAD///P/gAAAgAg4AAAP//AAH////AAPgABwAAAx///+P//4AAAAPD/wD///AAP/+////wAP///+AAAA8AAAAP///AB///AAAf///gA=",
    "DSA": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "DSA-SHA": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "DSA-SHA1": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "DSA-SHA1-old": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "RSA-MD4": "4dc384f3e7f2836b317ccaf1b8be898a",
    "RSA-MD5": "1fa98cff485549d49799dc8cf987a8af",
    "RSA-MDC2": "6ec3a005165154faa0269f79d12f28b9",
    "RSA-RIPEMD160": "f1869a123b115a90bdd3382ea210a58f37f62d94",
    "RSA-SHA": "bc1da92e3ea4a2685d5b058cf4e040c1d0436abc",
    "RSA-SHA1": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "RSA-SHA1-2": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "RSA-SHA224": "4e0edbd811507777b492a9c4a458bbe6f100779e56f12156aab4bf79",
    "RSA-SHA256": "8a5e6e6cae30d4283fd70af96d9c53d8ea45ca48892d313981fe208b1384f0dc",
    "RSA-SHA384": "4ceb6f484051006c78ddd5bbe1d81a9b04ac61a9145297e3ac8fc4b036ac040d6ec99b7eefa436c6a9710149876d7565",
    "RSA-SHA512": "0edd3f9f6adf8642d20edad7a3d23b84990de8152534ffc375b4c7cf127b78fe5a7f578ec4f00c623b1aebb9255d6dff4f8df3b07b5c930de5319275a2e1c0e5",
    "dsaEncryption": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "dsaWithSHA": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "dsaWithSHA1": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "dss1": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "ecdsa-with-SHA1": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "md4": "4dc384f3e7f2836b317ccaf1b8be898a",
    "md4WithRSAEncryption": "4dc384f3e7f2836b317ccaf1b8be898a",
    "md5": "1fa98cff485549d49799dc8cf987a8af",
    "md5WithRSAEncryption": "1fa98cff485549d49799dc8cf987a8af",
    "mdc2": "6ec3a005165154faa0269f79d12f28b9",
    "mdc2WithRSA": "6ec3a005165154faa0269f79d12f28b9",
    "ripemd": "f1869a123b115a90bdd3382ea210a58f37f62d94",
    "ripemd160": "f1869a123b115a90bdd3382ea210a58f37f62d94",
    "ripemd160WithRSA": "f1869a123b115a90bdd3382ea210a58f37f62d94",
    "rmd160": "f1869a123b115a90bdd3382ea210a58f37f62d94",
    "sha": "bc1da92e3ea4a2685d5b058cf4e040c1d0436abc",
    "sha1": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "sha1WithRSAEncryption": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "sha224": "4e0edbd811507777b492a9c4a458bbe6f100779e56f12156aab4bf79",
    "sha224WithRSAEncryption": "4e0edbd811507777b492a9c4a458bbe6f100779e56f12156aab4bf79",
    "sha256": "8a5e6e6cae30d4283fd70af96d9c53d8ea45ca48892d313981fe208b1384f0dc",
    "sha256WithRSAEncryption": "8a5e6e6cae30d4283fd70af96d9c53d8ea45ca48892d313981fe208b1384f0dc",
    "sha384": "4ceb6f484051006c78ddd5bbe1d81a9b04ac61a9145297e3ac8fc4b036ac040d6ec99b7eefa436c6a9710149876d7565",
    "sha384WithRSAEncryption": "4ceb6f484051006c78ddd5bbe1d81a9b04ac61a9145297e3ac8fc4b036ac040d6ec99b7eefa436c6a9710149876d7565",
    "sha512": "0edd3f9f6adf8642d20edad7a3d23b84990de8152534ffc375b4c7cf127b78fe5a7f578ec4f00c623b1aebb9255d6dff4f8df3b07b5c930de5319275a2e1c0e5",
    "sha512WithRSAEncryption": "0edd3f9f6adf8642d20edad7a3d23b84990de8152534ffc375b4c7cf127b78fe5a7f578ec4f00c623b1aebb9255d6dff4f8df3b07b5c930de5319275a2e1c0e5",
    "shaWithRSAEncryption": "bc1da92e3ea4a2685d5b058cf4e040c1d0436abc",
    "ssl2-md5": "1fa98cff485549d49799dc8cf987a8af",
    "ssl3-md5": "1fa98cff485549d49799dc8cf987a8af",
    "ssl3-sha1": "bcc2bd305f0bcda8cf2d478ef9fe080486cb265f",
    "whirlpool": "53f07694c682e20eb81ac3cd4422c503b79cedab4c76007ed42478ed4deffd2fe877596f4fe3a54f5a624a7779682ac196d732f73ff984a783343a75758aaf6e"
  },
  {
    "input": "///wD/g////gAAP//gAAP/+A////AAAA///4///wAA/x//8AAAAP//wAAAAf8AAAH/AD////4f/gAAAf/8H+AAAH//wAAAAf/j/AAAAB//wAAB///w/gAAH8AP4AAAB/4AAf///gfwAP8AD//gAA",
    "DSA": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "DSA-SHA": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "DSA-SHA1": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "DSA-SHA1-old": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "RSA-MD4": "656b67acbab69746b6f43ec4f8de0d5a",
    "RSA-MD5": "74013a076a786a26c7e04217bb51031d",
    "RSA-MDC2": "44d221209b40fde9ada4ef79fb1bd4e9",
    "RSA-RIPEMD160": "75e559295cf61fe1279a5714a124e8c417af718c",
    "RSA-SHA": "cf381a063825980458da131b5fb624ad847668ca",
    "RSA-SHA1": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "RSA-SHA1-2": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "RSA-SHA224": "65f17b1780d6f24816c595b95ca1d69169bf971b43b8921b7bd5463e",
    "RSA-SHA256": "880992dadfeccb31f289522214209eb87f41fea5fd3155ab274e9a6fdc6f9f64",
    "RSA-SHA384": "14df2839a8925774f0d65a9e9d717ea92d82cc053b948d45ba8ce4169fe491ca4f6604ca9840959c0141ca1e158752a9",
    "RSA-SHA512": "ff11746432697d38dbe59a2ae68a96ff29021d011cf9b4e8ca01313dfabf0b76169ff534dafafdd4f7c618988b54bd3b9eb427df15d82853aa37b44ccaa36b4d",
    "dsaEncryption": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "dsaWithSHA": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "dsaWithSHA1": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "dss1": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "ecdsa-with-SHA1": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "md4": "656b67acbab69746b6f43ec4f8de0d5a",
    "md4WithRSAEncryption": "656b67acbab69746b6f43ec4f8de0d5a",
    "md5": "74013a076a786a26c7e04217bb51031d",
    "md5WithRSAEncryption": "74013a076a786a26c7e04217bb51031d",
    "mdc2": "44d221209b40fde9ada4ef79fb1bd4e9",
    "mdc2WithRSA": "44d221209b40fde9ada4ef79fb1bd4e9",
    "ripemd": "75e559295cf61fe1279a5714a124e8c417af718c",
    "ripemd160": "75e559295cf61fe1279a5714a124e8c417af718c",
    "ripemd160WithRSA": "75e559295cf61fe1279a5714a124e8c417af718c",
    "rmd160": "75e559295cf61fe1279a5714a124e8c417af718c",
    "sha": "cf381a063825980458da131b5fb624ad847668ca",
    "sha1": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "sha1WithRSAEncryption": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "sha224": "65f17b1780d6f24816c595b95ca1d69169bf971b43b8921b7bd5463e",
    "sha224WithRSAEncryption": "65f17b1780d6f24816c595b95ca1d69169bf971b43b8921b7bd5463e",
    "sha256": "880992dadfeccb31f289522214209eb87f41fea5fd3155ab274e9a6fdc6f9f64",
    "sha256WithRSAEncryption": "880992dadfeccb31f289522214209eb87f41fea5fd3155ab274e9a6fdc6f9f64",
    "sha384": "14df2839a8925774f0d65a9e9d717ea92d82cc053b948d45ba8ce4169fe491ca4f6604ca9840959c0141ca1e158752a9",
    "sha384WithRSAEncryption": "14df2839a8925774f0d65a9e9d717ea92d82cc053b948d45ba8ce4169fe491ca4f6604ca9840959c0141ca1e158752a9",
    "sha512": "ff11746432697d38dbe59a2ae68a96ff29021d011cf9b4e8ca01313dfabf0b76169ff534dafafdd4f7c618988b54bd3b9eb427df15d82853aa37b44ccaa36b4d",
    "sha512WithRSAEncryption": "ff11746432697d38dbe59a2ae68a96ff29021d011cf9b4e8ca01313dfabf0b76169ff534dafafdd4f7c618988b54bd3b9eb427df15d82853aa37b44ccaa36b4d",
    "shaWithRSAEncryption": "cf381a063825980458da131b5fb624ad847668ca",
    "ssl2-md5": "74013a076a786a26c7e04217bb51031d",
    "ssl3-md5": "74013a076a786a26c7e04217bb51031d",
    "ssl3-sha1": "ce5223fd3dd920a3b666481d5625b16457dcb5e8",
    "whirlpool": "94e9f5158e107b743f84f506d20777591fc5549a3a494ee91c705339acc5d27298c5b358b59f0593439e3bba6e363d9996df3ab6a9a3db7cf8a3d3d65f0bdc4d"
  },
  {
    "input": "AH//wAf///+AB////gAAAH4AAAAP/4Af//4H///wA8f///4AAAB//gAAH//+AAAA//wAH//AAAA//wAeAAAD////gAAAf//4A//8AAH///4AD/8CAAf///4AAAD+Af//9///Gf//AAAH/8H/AAAH/w==",
    "DSA": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "DSA-SHA": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "DSA-SHA1": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "DSA-SHA1-old": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "RSA-MD4": "dd0488533c8571d3846931d475e1022b",
    "RSA-MD5": "a44ca9661e967bb2e98af65277dac72f",
    "RSA-MDC2": "cc5edaa9dd78e239ba0a57e8db368ce2",
    "RSA-RIPEMD160": "f5930c8404aa25fdd40d693196ba9e72333ba911",
    "RSA-SHA": "f489ac1c493db0bea73702f16f56bb0df1818929",
    "RSA-SHA1": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "RSA-SHA1-2": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "RSA-SHA224": "3d86293856486715354c82ca58c134718803a8479a3beaa2cfa63884",
    "RSA-SHA256": "ea7a2b0e780fc6dc8843643a2bc18a17226a1bb3d9e1467cf0be2201decce2c7",
    "RSA-SHA384": "db078ec07faf393f15a2cc309c30ab8ddc276cf4529f7438c22e4c6d893f13339c2b144aa4bb77c3f666ff5d6c677cf3",
    "RSA-SHA512": "e91363e3e5eaa25ffd8ea3ccf744bb9165ea22339995dd9e645eb1a12b10b6942262e0cea8df8eac080c7b334821780de2ace12b28174f28d7034ef2e826d2ef",
    "dsaEncryption": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "dsaWithSHA": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "dsaWithSHA1": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "dss1": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "ecdsa-with-SHA1": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "md4": "dd0488533c8571d3846931d475e1022b",
    "md4WithRSAEncryption": "dd0488533c8571d3846931d475e1022b",
    "md5": "a44ca9661e967bb2e98af65277dac72f",
    "md5WithRSAEncryption": "a44ca9661e967bb2e98af65277dac72f",
    "mdc2": "cc5edaa9dd78e239ba0a57e8db368ce2",
    "mdc2WithRSA": "cc5edaa9dd78e239ba0a57e8db368ce2",
    "ripemd": "f5930c8404aa25fdd40d693196ba9e72333ba911",
    "ripemd160": "f5930c8404aa25fdd40d693196ba9e72333ba911",
    "ripemd160WithRSA": "f5930c8404aa25fdd40d693196ba9e72333ba911",
    "rmd160": "f5930c8404aa25fdd40d693196ba9e72333ba911",
    "sha": "f489ac1c493db0bea73702f16f56bb0df1818929",
    "sha1": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "sha1WithRSAEncryption": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "sha224": "3d86293856486715354c82ca58c134718803a8479a3beaa2cfa63884",
    "sha224WithRSAEncryption": "3d86293856486715354c82ca58c134718803a8479a3beaa2cfa63884",
    "sha256": "ea7a2b0e780fc6dc8843643a2bc18a17226a1bb3d9e1467cf0be2201decce2c7",
    "sha256WithRSAEncryption": "ea7a2b0e780fc6dc8843643a2bc18a17226a1bb3d9e1467cf0be2201decce2c7",
    "sha384": "db078ec07faf393f15a2cc309c30ab8ddc276cf4529f7438c22e4c6d893f13339c2b144aa4bb77c3f666ff5d6c677cf3",
    "sha384WithRSAEncryption": "db078ec07faf393f15a2cc309c30ab8ddc276cf4529f7438c22e4c6d893f13339c2b144aa4bb77c3f666ff5d6c677cf3",
    "sha512": "e91363e3e5eaa25ffd8ea3ccf744bb9165ea22339995dd9e645eb1a12b10b6942262e0cea8df8eac080c7b334821780de2ace12b28174f28d7034ef2e826d2ef",
    "sha512WithRSAEncryption": "e91363e3e5eaa25ffd8ea3ccf744bb9165ea22339995dd9e645eb1a12b10b6942262e0cea8df8eac080c7b334821780de2ace12b28174f28d7034ef2e826d2ef",
    "shaWithRSAEncryption": "f489ac1c493db0bea73702f16f56bb0df1818929",
    "ssl2-md5": "a44ca9661e967bb2e98af65277dac72f",
    "ssl3-md5": "a44ca9661e967bb2e98af65277dac72f",
    "ssl3-sha1": "948886776e42e4f5fae1b2d0c906ac3759e3f8b0",
    "whirlpool": "1c289ba43ce458398eceb747eb14f86d1c1c08721a14105f164f18580c491c8476474f401091ef0ba91fa7f11c840851df3ccdbeb663b87d3b5e509faeea8765"
  },
  {
    "input": "AAAAQAAAB///+B///8AAPv//8AAAAH///gAAAP+AAAA/8f///+AAAAH///8AAB//+AAH///4AB//wf///+AB////4AAAB////8//4AA/4P//wAAH///gAf/8PwAB///+AAH/D////AAAAf//gAAAD/8=",
    "DSA": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "DSA-SHA": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "DSA-SHA1": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "DSA-SHA1-old": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "RSA-MD4": "fb830ecbdada506ba09c076b5ff372cb",
    "RSA-MD5": "d30897726b635548dbfa5cebffd9cd63",
    "RSA-MDC2": "182b91f8c6dd07b726a26ce338960442",
    "RSA-RIPEMD160": "7c14d04582b5cebe304cc4a75f8c58fa90ce11b2",
    "RSA-SHA": "0e504d2af7523cfad6a6f2e0f787428dcb1e4129",
    "RSA-SHA1": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "RSA-SHA1-2": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "RSA-SHA224": "d4432c88dc9a633cc218ad73b87d995ee68fc332c3e54582120ddeff",
    "RSA-SHA256": "2077395cd7562dd5e9965ea620cedf32c805f50f748c4ee6e82af960c5ce2d66",
    "RSA-SHA384": "ac279a379a46a7f2bcc9afebc3c39410816db167ad1319dc01a750b9d73c640b615930dfa114bc48be084710331ed075",
    "RSA-SHA512": "5fc80cf23b3ebac3a5d71f79c590fb62b0d8d09d6a87b43c6588cc1266f8895e4927422ae7561c5a9dabfa3bc7764d6d7f15ce192397138a00f22e46a50b56c8",
    "dsaEncryption": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "dsaWithSHA": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "dsaWithSHA1": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "dss1": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "ecdsa-with-SHA1": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "md4": "fb830ecbdada506ba09c076b5ff372cb",
    "md4WithRSAEncryption": "fb830ecbdada506ba09c076b5ff372cb",
    "md5": "d30897726b635548dbfa5cebffd9cd63",
    "md5WithRSAEncryption": "d30897726b635548dbfa5cebffd9cd63",
    "mdc2": "182b91f8c6dd07b726a26ce338960442",
    "mdc2WithRSA": "182b91f8c6dd07b726a26ce338960442",
    "ripemd": "7c14d04582b5cebe304cc4a75f8c58fa90ce11b2",
    "ripemd160": "7c14d04582b5cebe304cc4a75f8c58fa90ce11b2",
    "ripemd160WithRSA": "7c14d04582b5cebe304cc4a75f8c58fa90ce11b2",
    "rmd160": "7c14d04582b5cebe304cc4a75f8c58fa90ce11b2",
    "sha": "0e504d2af7523cfad6a6f2e0f787428dcb1e4129",
    "sha1": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "sha1WithRSAEncryption": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "sha224": "d4432c88dc9a633cc218ad73b87d995ee68fc332c3e54582120ddeff",
    "sha224WithRSAEncryption": "d4432c88dc9a633cc218ad73b87d995ee68fc332c3e54582120ddeff",
    "sha256": "2077395cd7562dd5e9965ea620cedf32c805f50f748c4ee6e82af960c5ce2d66",
    "sha256WithRSAEncryption": "2077395cd7562dd5e9965ea620cedf32c805f50f748c4ee6e82af960c5ce2d66",
    "sha384": "ac279a379a46a7f2bcc9afebc3c39410816db167ad1319dc01a750b9d73c640b615930dfa114bc48be084710331ed075",
    "sha384WithRSAEncryption": "ac279a379a46a7f2bcc9afebc3c39410816db167ad1319dc01a750b9d73c640b615930dfa114bc48be084710331ed075",
    "sha512": "5fc80cf23b3ebac3a5d71f79c590fb62b0d8d09d6a87b43c6588cc1266f8895e4927422ae7561c5a9dabfa3bc7764d6d7f15ce192397138a00f22e46a50b56c8",
    "sha512WithRSAEncryption": "5fc80cf23b3ebac3a5d71f79c590fb62b0d8d09d6a87b43c6588cc1266f8895e4927422ae7561c5a9dabfa3bc7764d6d7f15ce192397138a00f22e46a50b56c8",
    "shaWithRSAEncryption": "0e504d2af7523cfad6a6f2e0f787428dcb1e4129",
    "ssl2-md5": "d30897726b635548dbfa5cebffd9cd63",
    "ssl3-md5": "d30897726b635548dbfa5cebffd9cd63",
    "ssl3-sha1": "4c12a51fcfe242f832e3d7329304b11b75161efb",
    "whirlpool": "08c5c11459b385bdc9d943aa24294a5a26212701b8c5a79bdd182749f5771f80797472732c7792fcf0a5d4adc6c428360554587c8db0e1cc7582297e6adfce83"
  },
  {
    "input": "///w////wAOAAAEAAAP////x////4Af8AAAD//AAAAB+AAAABwA///wAD8f//wAAB///wAAAA//8AAD/4AAAAH/wAAD////9/wD/4P//4Af///h///4YAAAB8AAf//4BwAH////4AAH+////gAAAB///",
    "DSA": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "DSA-SHA": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "DSA-SHA1": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "DSA-SHA1-old": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "RSA-MD4": "21de0cf6735fba67828356bc87b9256e",
    "RSA-MD5": "4ad04a250b8029c9a7bf6529ee8793c3",
    "RSA-MDC2": "e7d6c96e07124f578d0b2a1e31e960ea",
    "RSA-RIPEMD160": "216575af7e6d135c6b19ff8fc4cf09c04ff29ff9",
    "RSA-SHA": "5370de0644f49356125239b6f0fda2333018586f",
    "RSA-SHA1": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "RSA-SHA1-2": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "RSA-SHA224": "defa097089b62f2f0620a45c2be83cbd8b17745b21c4a35435090cf2",
    "RSA-SHA256": "2dbdc632baa5d0831808518beb80e3737de5bbec3dd0438e75dd30b2ea7fbb90",
    "RSA-SHA384": "698e100a6a9e7d70045a8cb63162fb9132048b67d12ab4f4ae393c85aebbf88f0ac1f360b9e45bd31c69ce2bf0cdbd95",
    "RSA-SHA512": "a4b851e28dac17e2a71261e8a0c80325fab569746b542bf613351a74a68ed47c4bcd1c2170f2cebb0e99ef6d626dd33fb46cc61f10256fe202b6aefa8c90ebeb",
    "dsaEncryption": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "dsaWithSHA": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "dsaWithSHA1": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "dss1": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "ecdsa-with-SHA1": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "md4": "21de0cf6735fba67828356bc87b9256e",
    "md4WithRSAEncryption": "21de0cf6735fba67828356bc87b9256e",
    "md5": "4ad04a250b8029c9a7bf6529ee8793c3",
    "md5WithRSAEncryption": "4ad04a250b8029c9a7bf6529ee8793c3",
    "mdc2": "e7d6c96e07124f578d0b2a1e31e960ea",
    "mdc2WithRSA": "e7d6c96e07124f578d0b2a1e31e960ea",
    "ripemd": "216575af7e6d135c6b19ff8fc4cf09c04ff29ff9",
    "ripemd160": "216575af7e6d135c6b19ff8fc4cf09c04ff29ff9",
    "ripemd160WithRSA": "216575af7e6d135c6b19ff8fc4cf09c04ff29ff9",
    "rmd160": "216575af7e6d135c6b19ff8fc4cf09c04ff29ff9",
    "sha": "5370de0644f49356125239b6f0fda2333018586f",
    "sha1": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "sha1WithRSAEncryption": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "sha224": "defa097089b62f2f0620a45c2be83cbd8b17745b21c4a35435090cf2",
    "sha224WithRSAEncryption": "defa097089b62f2f0620a45c2be83cbd8b17745b21c4a35435090cf2",
    "sha256": "2dbdc632baa5d0831808518beb80e3737de5bbec3dd0438e75dd30b2ea7fbb90",
    "sha256WithRSAEncryption": "2dbdc632baa5d0831808518beb80e3737de5bbec3dd0438e75dd30b2ea7fbb90",
    "sha384": "698e100a6a9e7d70045a8cb63162fb9132048b67d12ab4f4ae393c85aebbf88f0ac1f360b9e45bd31c69ce2bf0cdbd95",
    "sha384WithRSAEncryption": "698e100a6a9e7d70045a8cb63162fb9132048b67d12ab4f4ae393c85aebbf88f0ac1f360b9e45bd31c69ce2bf0cdbd95",
    "sha512": "a4b851e28dac17e2a71261e8a0c80325fab569746b542bf613351a74a68ed47c4bcd1c2170f2cebb0e99ef6d626dd33fb46cc61f10256fe202b6aefa8c90ebeb",
    "sha512WithRSAEncryption": "a4b851e28dac17e2a71261e8a0c80325fab569746b542bf613351a74a68ed47c4bcd1c2170f2cebb0e99ef6d626dd33fb46cc61f10256fe202b6aefa8c90ebeb",
    "shaWithRSAEncryption": "5370de0644f49356125239b6f0fda2333018586f",
    "ssl2-md5": "4ad04a250b8029c9a7bf6529ee8793c3",
    "ssl3-md5": "4ad04a250b8029c9a7bf6529ee8793c3",
    "ssl3-sha1": "c54bdd2050504d92f551d378ad5fc72c9ed03932",
    "whirlpool": "715f992b3c91d6b3c9ffbc4715fc4e29b623eda154381717f37142fe512b0a53e01aab1e18c15e52aba25cd04788aa5899b499c24668a429782c8cd6727042dc"
  },
  {
    "input": "///wAB///wAAP//wAP//AAf///gD///n////gQAAAf8AAD////gAAADwB//AD/AAP//AAH/4AP/8AAAf/4Af/AAAAf//AAB////+AAAP/4AAAA////wAAAD///wAD/+AAD///gAAP+AP//8AAAH/8AAAAA==",
    "DSA": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "DSA-SHA": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "DSA-SHA1": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "DSA-SHA1-old": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "RSA-MD4": "2e11058f97e84c826967fd31f6c42dd5",
    "RSA-MD5": "de41e337d96fd23619121ea709861e1a",
    "RSA-MDC2": "39d64c13d93ece50c9a66d909e5d9fa5",
    "RSA-RIPEMD160": "1ba23820cf3a338b76b967ff31bc9fa4c5eb7b5d",
    "RSA-SHA": "8b29803a5d63be54c1f50b340bb359fe9bbaba51",
    "RSA-SHA1": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "RSA-SHA1-2": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "RSA-SHA224": "f714566b4ad79f0360c214a1881e60d4d0f65f431edb52d7ecaf253e",
    "RSA-SHA256": "ced4cf34982e0abbef40e876659544c4ed01f1975351490984aaa429fef321b0",
    "RSA-SHA384": "3e74d663e01b063b2565678d735c4e431f76cf2c243fecfdbb47c22020f5828187dd9053b9ceb496c5118f87dc4afa90",
    "RSA-SHA512": "78d1de348e5b71f0be5bfaf81c01f48988a340c6b1392401887e097627d0aa9117335202f0109cc34e5b7fd9b539e1d7dcc7f410a71b381a374a23380dff58a9",
    "dsaEncryption": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "dsaWithSHA": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "dsaWithSHA1": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "dss1": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "ecdsa-with-SHA1": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "md4": "2e11058f97e84c826967fd31f6c42dd5",
    "md4WithRSAEncryption": "2e11058f97e84c826967fd31f6c42dd5",
    "md5": "de41e337d96fd23619121ea709861e1a",
    "md5WithRSAEncryption": "de41e337d96fd23619121ea709861e1a",
    "mdc2": "39d64c13d93ece50c9a66d909e5d9fa5",
    "mdc2WithRSA": "39d64c13d93ece50c9a66d909e5d9fa5",
    "ripemd": "1ba23820cf3a338b76b967ff31bc9fa4c5eb7b5d",
    "ripemd160": "1ba23820cf3a338b76b967ff31bc9fa4c5eb7b5d",
    "ripemd160WithRSA": "1ba23820cf3a338b76b967ff31bc9fa4c5eb7b5d",
    "rmd160": "1ba23820cf3a338b76b967ff31bc9fa4c5eb7b5d",
    "sha": "8b29803a5d63be54c1f50b340bb359fe9bbaba51",
    "sha1": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "sha1WithRSAEncryption": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "sha224": "f714566b4ad79f0360c214a1881e60d4d0f65f431edb52d7ecaf253e",
    "sha224WithRSAEncryption": "f714566b4ad79f0360c214a1881e60d4d0f65f431edb52d7ecaf253e",
    "sha256": "ced4cf34982e0abbef40e876659544c4ed01f1975351490984aaa429fef321b0",
    "sha256WithRSAEncryption": "ced4cf34982e0abbef40e876659544c4ed01f1975351490984aaa429fef321b0",
    "sha384": "3e74d663e01b063b2565678d735c4e431f76cf2c243fecfdbb47c22020f5828187dd9053b9ceb496c5118f87dc4afa90",
    "sha384WithRSAEncryption": "3e74d663e01b063b2565678d735c4e431f76cf2c243fecfdbb47c22020f5828187dd9053b9ceb496c5118f87dc4afa90",
    "sha512": "78d1de348e5b71f0be5bfaf81c01f48988a340c6b1392401887e097627d0aa9117335202f0109cc34e5b7fd9b539e1d7dcc7f410a71b381a374a23380dff58a9",
    "sha512WithRSAEncryption": "78d1de348e5b71f0be5bfaf81c01f48988a340c6b1392401887e097627d0aa9117335202f0109cc34e5b7fd9b539e1d7dcc7f410a71b381a374a23380dff58a9",
    "shaWithRSAEncryption": "8b29803a5d63be54c1f50b340bb359fe9bbaba51",
    "ssl2-md5": "de41e337d96fd23619121ea709861e1a",
    "ssl3-md5": "de41e337d96fd23619121ea709861e1a",
    "ssl3-sha1": "8f53e8fa79ea09fd1b682af5ed1515eca965604c",
    "whirlpool": "49f806ad586a593f8400e27f94bed0e985f01e05c1e5ab2d56786f19f15af3b51f831d7ae0a702a54a206126e5b204c6133bd2ae3c6c55fe84289b57043b6c02"
  },
  {
    "input": "/8AAAAP///wA///8AAAAf///AAAAH+AAD//A8AAAf///4AAgH////wAAAB+AAAAH//H////AAAAf///wAD//+AA////+Af///n+eAB///AB/4H///+AAf//+AAAB////+AH/wAMAD//4AAAP8A//AAAAD/8=",
    "DSA": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "DSA-SHA": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "DSA-SHA1": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "DSA-SHA1-old": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "RSA-MD4": "496facc54329bd0338e538843511b156",
    "RSA-MD5": "18e070fd32cf732b9f37a0083320eec2",
    "RSA-MDC2": "e9fd94caa6936257b5998c4baf3cfc7d",
    "RSA-RIPEMD160": "c29caf4eb2f3ee9fdaa65b1dd11ca3015b6014a6",
    "RSA-SHA": "abc56d10e8abd96bd6eda4f0e2ee6222fb5e4c9a",
    "RSA-SHA1": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "RSA-SHA1-2": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "RSA-SHA224": "bb2cc8058724e0534e431fe08b02e8793158c759623e3c64d113deed",
    "RSA-SHA256": "69339b4534eecca329ef2af397ede2a882d7e315a871dd2b781b8e0f4277ee66",
    "RSA-SHA384": "5f934f91aed9b9f82f1d1ebf21d7c6a99fc4d2a9cb7e66f7a9e3c94ac571a22e516a2d9c6cb3afb5738e8da7df256f99",
    "RSA-SHA512": "bfb4090a392960e478cc33a9ee3af0d9f743d48621219af21920fb1c989bf6a8ea040ce156a0ba4b42bd2d8a3d3fe3a178b150c9b76452285ebf379e4c8a0713",
    "dsaEncryption": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "dsaWithSHA": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "dsaWithSHA1": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "dss1": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "ecdsa-with-SHA1": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "md4": "496facc54329bd0338e538843511b156",
    "md4WithRSAEncryption": "496facc54329bd0338e538843511b156",
    "md5": "18e070fd32cf732b9f37a0083320eec2",
    "md5WithRSAEncryption": "18e070fd32cf732b9f37a0083320eec2",
    "mdc2": "e9fd94caa6936257b5998c4baf3cfc7d",
    "mdc2WithRSA": "e9fd94caa6936257b5998c4baf3cfc7d",
    "ripemd": "c29caf4eb2f3ee9fdaa65b1dd11ca3015b6014a6",
    "ripemd160": "c29caf4eb2f3ee9fdaa65b1dd11ca3015b6014a6",
    "ripemd160WithRSA": "c29caf4eb2f3ee9fdaa65b1dd11ca3015b6014a6",
    "rmd160": "c29caf4eb2f3ee9fdaa65b1dd11ca3015b6014a6",
    "sha": "abc56d10e8abd96bd6eda4f0e2ee6222fb5e4c9a",
    "sha1": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "sha1WithRSAEncryption": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "sha224": "bb2cc8058724e0534e431fe08b02e8793158c759623e3c64d113deed",
    "sha224WithRSAEncryption": "bb2cc8058724e0534e431fe08b02e8793158c759623e3c64d113deed",
    "sha256": "69339b4534eecca329ef2af397ede2a882d7e315a871dd2b781b8e0f4277ee66",
    "sha256WithRSAEncryption": "69339b4534eecca329ef2af397ede2a882d7e315a871dd2b781b8e0f4277ee66",
    "sha384": "5f934f91aed9b9f82f1d1ebf21d7c6a99fc4d2a9cb7e66f7a9e3c94ac571a22e516a2d9c6cb3afb5738e8da7df256f99",
    "sha384WithRSAEncryption": "5f934f91aed9b9f82f1d1ebf21d7c6a99fc4d2a9cb7e66f7a9e3c94ac571a22e516a2d9c6cb3afb5738e8da7df256f99",
    "sha512": "bfb4090a392960e478cc33a9ee3af0d9f743d48621219af21920fb1c989bf6a8ea040ce156a0ba4b42bd2d8a3d3fe3a178b150c9b76452285ebf379e4c8a0713",
    "sha512WithRSAEncryption": "bfb4090a392960e478cc33a9ee3af0d9f743d48621219af21920fb1c989bf6a8ea040ce156a0ba4b42bd2d8a3d3fe3a178b150c9b76452285ebf379e4c8a0713",
    "shaWithRSAEncryption": "abc56d10e8abd96bd6eda4f0e2ee6222fb5e4c9a",
    "ssl2-md5": "18e070fd32cf732b9f37a0083320eec2",
    "ssl3-md5": "18e070fd32cf732b9f37a0083320eec2",
    "ssl3-sha1": "2d7e17f6294524ce78b33eab72cdd08e5ff6e313",
    "whirlpool": "0536b3f940f82f2a917e62131744281fb94eace0ace0fe815ed993cecd6b3901f07705b1eb078a34285b326bca57da049240e15b452e57ed2c220bc504f31f5c"
  },
  {
    "input": "AAP////P//h/j////AH///wAAB////+AAAAB///h//AAAAD////4A4AAP4AAD////8AAAAJ///gD/8AAAD//gAAAAf//4AAAA4AAAP/gf////AAAAf///AAAAP//gAAH/gAAB//wAAAfgAAAPh////+f////",
    "DSA": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "DSA-SHA": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "DSA-SHA1": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "DSA-SHA1-old": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "RSA-MD4": "2515d191b175e3c0d51227d9fcc84938",
    "RSA-MD5": "7dd4b27ca8906182f684d0ee4ddb98c4",
    "RSA-MDC2": "382eef43c990f669e5ac131e757f2894",
    "RSA-RIPEMD160": "8aad852c68ea8a7ab21a4c116a320cde84dcb3e8",
    "RSA-SHA": "1220bf109a2fb30a4c8ec2bd0180d8ee061b0a24",
    "RSA-SHA1": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "RSA-SHA1-2": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "RSA-SHA224": "8c12a206caf0a88a64c39dce1b307879d8a40c024f49bb07ac1ae796",
    "RSA-SHA256": "79cfbb9b52e573e22cd3427ec258d69e2d19fd27de15df96ca9006ccebe7b58e",
    "RSA-SHA384": "e7545372abe460b76d68df6ed6cbcd1db67f54e8f9597c2cb5a60eab890e1259cec61a143b9c8ea4e44b8f5c7368bc9d",
    "RSA-SHA512": "6019a0c6bc28bc3c3bdb637f24151b2556b34115dc7f1a20c3f3837104f186ca0ba29d5824c55e31096a39b2f01aa303a34a6ad144e77ce5bb2be42403f96466",
    "dsaEncryption": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "dsaWithSHA": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "dsaWithSHA1": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "dss1": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "ecdsa-with-SHA1": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "md4": "2515d191b175e3c0d51227d9fcc84938",
    "md4WithRSAEncryption": "2515d191b175e3c0d51227d9fcc84938",
    "md5": "7dd4b27ca8906182f684d0ee4ddb98c4",
    "md5WithRSAEncryption": "7dd4b27ca8906182f684d0ee4ddb98c4",
    "mdc2": "382eef43c990f669e5ac131e757f2894",
    "mdc2WithRSA": "382eef43c990f669e5ac131e757f2894",
    "ripemd": "8aad852c68ea8a7ab21a4c116a320cde84dcb3e8",
    "ripemd160": "8aad852c68ea8a7ab21a4c116a320cde84dcb3e8",
    "ripemd160WithRSA": "8aad852c68ea8a7ab21a4c116a320cde84dcb3e8",
    "rmd160": "8aad852c68ea8a7ab21a4c116a320cde84dcb3e8",
    "sha": "1220bf109a2fb30a4c8ec2bd0180d8ee061b0a24",
    "sha1": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "sha1WithRSAEncryption": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "sha224": "8c12a206caf0a88a64c39dce1b307879d8a40c024f49bb07ac1ae796",
    "sha224WithRSAEncryption": "8c12a206caf0a88a64c39dce1b307879d8a40c024f49bb07ac1ae796",
    "sha256": "79cfbb9b52e573e22cd3427ec258d69e2d19fd27de15df96ca9006ccebe7b58e",
    "sha256WithRSAEncryption": "79cfbb9b52e573e22cd3427ec258d69e2d19fd27de15df96ca9006ccebe7b58e",
    "sha384": "e7545372abe460b76d68df6ed6cbcd1db67f54e8f9597c2cb5a60eab890e1259cec61a143b9c8ea4e44b8f5c7368bc9d",
    "sha384WithRSAEncryption": "e7545372abe460b76d68df6ed6cbcd1db67f54e8f9597c2cb5a60eab890e1259cec61a143b9c8ea4e44b8f5c7368bc9d",
    "sha512": "6019a0c6bc28bc3c3bdb637f24151b2556b34115dc7f1a20c3f3837104f186ca0ba29d5824c55e31096a39b2f01aa303a34a6ad144e77ce5bb2be42403f96466",
    "sha512WithRSAEncryption": "6019a0c6bc28bc3c3bdb637f24151b2556b34115dc7f1a20c3f3837104f186ca0ba29d5824c55e31096a39b2f01aa303a34a6ad144e77ce5bb2be42403f96466",
    "shaWithRSAEncryption": "1220bf109a2fb30a4c8ec2bd0180d8ee061b0a24",
    "ssl2-md5": "7dd4b27ca8906182f684d0ee4ddb98c4",
    "ssl3-md5": "7dd4b27ca8906182f684d0ee4ddb98c4",
    "ssl3-sha1": "64582b4b57f782c9302bfe7d07f74aa176627a3a",
    "whirlpool": "61bead7140734f79d65b99501677e82311a519d48f567e4f714d09885273585117a0facbbdf8d063379ea31a2d4087f4b09f81c5a564772a836fd6acbd41beab"
  },
  {
    "input": "///+AAP///+AAf///6A///gAfwP//8AAD//D//gAA////8B/8B/gD///wAAf/g///+AAB////AAA/AA////wAAAAP/wAAAAP/8QAAP/AAAP///+AAAP8D///8AAAA///wAf///gMP//wAB//gAAAAf/+AAA//w==",
    "DSA": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "DSA-SHA": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "DSA-SHA1": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "DSA-SHA1-old": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "RSA-MD4": "f397b65fe86eab550b8d9d92e4131541",
    "RSA-MD5": "70a440a8bd06ff40f6e9135946eb174d",
    "RSA-MDC2": "c2b84ec8f753b6dfc3753633b0a00197",
    "RSA-RIPEMD160": "f518222f0d8d331a5212a11fc50f0313bb1e02ee",
    "RSA-SHA": "b6c47736fe155b27f509abb54b254e4a8b73b0fe",
    "RSA-SHA1": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "RSA-SHA1-2": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "RSA-SHA224": "973e0711260108e8fe9b17e26e595190bc08bc3e7bce2c49ace6bfbf",
    "RSA-SHA256": "1203d54626871bccfa8abb8bbd740b9af3c7266bc8490a210074d7f2b0806ae8",
    "RSA-SHA384": "5137d6e9f9d23ac64aa9fc858a7319f8f6ca78d5d5a5ebb84f7a2bed1605e3b6c0fde7b27e95c6bbb551e7933f7cb736",
    "RSA-SHA512": "d7f25152eb94d3fb0dee398ad8b38e9320cb484a51b7856f142462d2450e824c3f00ff18017aa86c876e0dfdea2d878f23fef17d4f84bcfc724bfbdfbdc5e480",
    "dsaEncryption": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "dsaWithSHA": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "dsaWithSHA1": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "dss1": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "ecdsa-with-SHA1": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "md4": "f397b65fe86eab550b8d9d92e4131541",
    "md4WithRSAEncryption": "f397b65fe86eab550b8d9d92e4131541",
    "md5": "70a440a8bd06ff40f6e9135946eb174d",
    "md5WithRSAEncryption": "70a440a8bd06ff40f6e9135946eb174d",
    "mdc2": "c2b84ec8f753b6dfc3753633b0a00197",
    "mdc2WithRSA": "c2b84ec8f753b6dfc3753633b0a00197",
    "ripemd": "f518222f0d8d331a5212a11fc50f0313bb1e02ee",
    "ripemd160": "f518222f0d8d331a5212a11fc50f0313bb1e02ee",
    "ripemd160WithRSA": "f518222f0d8d331a5212a11fc50f0313bb1e02ee",
    "rmd160": "f518222f0d8d331a5212a11fc50f0313bb1e02ee",
    "sha": "b6c47736fe155b27f509abb54b254e4a8b73b0fe",
    "sha1": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "sha1WithRSAEncryption": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "sha224": "973e0711260108e8fe9b17e26e595190bc08bc3e7bce2c49ace6bfbf",
    "sha224WithRSAEncryption": "973e0711260108e8fe9b17e26e595190bc08bc3e7bce2c49ace6bfbf",
    "sha256": "1203d54626871bccfa8abb8bbd740b9af3c7266bc8490a210074d7f2b0806ae8",
    "sha256WithRSAEncryption": "1203d54626871bccfa8abb8bbd740b9af3c7266bc8490a210074d7f2b0806ae8",
    "sha384": "5137d6e9f9d23ac64aa9fc858a7319f8f6ca78d5d5a5ebb84f7a2bed1605e3b6c0fde7b27e95c6bbb551e7933f7cb736",
    "sha384WithRSAEncryption": "5137d6e9f9d23ac64aa9fc858a7319f8f6ca78d5d5a5ebb84f7a2bed1605e3b6c0fde7b27e95c6bbb551e7933f7cb736",
    "sha512": "d7f25152eb94d3fb0dee398ad8b38e9320cb484a51b7856f142462d2450e824c3f00ff18017aa86c876e0dfdea2d878f23fef17d4f84bcfc724bfbdfbdc5e480",
    "sha512WithRSAEncryption": "d7f25152eb94d3fb0dee398ad8b38e9320cb484a51b7856f142462d2450e824c3f00ff18017aa86c876e0dfdea2d878f23fef17d4f84bcfc724bfbdfbdc5e480",
    "shaWithRSAEncryption": "b6c47736fe155b27f509abb54b254e4a8b73b0fe",
    "ssl2-md5": "70a440a8bd06ff40f6e9135946eb174d",
    "ssl3-md5": "70a440a8bd06ff40f6e9135946eb174d",
    "ssl3-sha1": "6d88795b71d3e386bbd1eb830fb9f161ba98869f",
    "whirlpool": "76aa430cf1dab949f04682f4b76794335380b8f6c90d62953bfcf0acb2600e5b431dca03bdbed6e57af04b825ffe08c1c8c17acccc800d1836a51c0c9d0eafa9"
  },
  {
    "input": "AAAAH//D//+AAAA////+AAAAD+AAf//gD/4A////4AP/+AAAAD/gAAAB///n////4AAAB///wAAf4AAAAf//AAAD////4AAAH+AD//8AAAAH//A/gAAAD////gAA////AAA///+AD//+Af////g////AAAD///8=",
    "DSA": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "DSA-SHA": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "DSA-SHA1": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "DSA-SHA1-old": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "RSA-MD4": "41142587b0254ef379396b0b30bfdf1b",
    "RSA-MD5": "b8d052366e752ce7c803abd24854e934",
    "RSA-MDC2": "0c6675bbaf1b773496ad2ac509e93e16",
    "RSA-RIPEMD160": "8a1eb1d6b63ba0f43d51f9786fce7fb7d24c69ac",
    "RSA-SHA": "2a92cbabccca87310ba606495c9783937b33889e",
    "RSA-SHA1": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "RSA-SHA1-2": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "RSA-SHA224": "ead9a5b95a9ec2f1aa11cd81ebed31ff108178fd9e6f70def032a4dc",
    "RSA-SHA256": "0c15140d3b5e4b180b0b1517a51fa08f82458c02185ef2bc59fae37543ef9011",
    "RSA-SHA384": "100087cc47052a9941d908c5907a069b22cab7bd3ed24446ab1c8dc2188187161ac4f2f3e267ad249797cafe6cd33a8b",
    "RSA-SHA512": "e000dadfc0fe9c13ba1cdebeca0a2a4e24f62f317d11a791153f7c5f59bf8f41d73e06db0d1b57c7938563116d74daf25a8b6a3215b51ead5da81e5d2005cf76",
    "dsaEncryption": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "dsaWithSHA": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "dsaWithSHA1": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "dss1": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "ecdsa-with-SHA1": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "md4": "41142587b0254ef379396b0b30bfdf1b",
    "md4WithRSAEncryption": "41142587b0254ef379396b0b30bfdf1b",
    "md5": "b8d052366e752ce7c803abd24854e934",
    "md5WithRSAEncryption": "b8d052366e752ce7c803abd24854e934",
    "mdc2": "0c6675bbaf1b773496ad2ac509e93e16",
    "mdc2WithRSA": "0c6675bbaf1b773496ad2ac509e93e16",
    "ripemd": "8a1eb1d6b63ba0f43d51f9786fce7fb7d24c69ac",
    "ripemd160": "8a1eb1d6b63ba0f43d51f9786fce7fb7d24c69ac",
    "ripemd160WithRSA": "8a1eb1d6b63ba0f43d51f9786fce7fb7d24c69ac",
    "rmd160": "8a1eb1d6b63ba0f43d51f9786fce7fb7d24c69ac",
    "sha": "2a92cbabccca87310ba606495c9783937b33889e",
    "sha1": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "sha1WithRSAEncryption": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "sha224": "ead9a5b95a9ec2f1aa11cd81ebed31ff108178fd9e6f70def032a4dc",
    "sha224WithRSAEncryption": "ead9a5b95a9ec2f1aa11cd81ebed31ff108178fd9e6f70def032a4dc",
    "sha256": "0c15140d3b5e4b180b0b1517a51fa08f82458c02185ef2bc59fae37543ef9011",
    "sha256WithRSAEncryption": "0c15140d3b5e4b180b0b1517a51fa08f82458c02185ef2bc59fae37543ef9011",
    "sha384": "100087cc47052a9941d908c5907a069b22cab7bd3ed24446ab1c8dc2188187161ac4f2f3e267ad249797cafe6cd33a8b",
    "sha384WithRSAEncryption": "100087cc47052a9941d908c5907a069b22cab7bd3ed24446ab1c8dc2188187161ac4f2f3e267ad249797cafe6cd33a8b",
    "sha512": "e000dadfc0fe9c13ba1cdebeca0a2a4e24f62f317d11a791153f7c5f59bf8f41d73e06db0d1b57c7938563116d74daf25a8b6a3215b51ead5da81e5d2005cf76",
    "sha512WithRSAEncryption": "e000dadfc0fe9c13ba1cdebeca0a2a4e24f62f317d11a791153f7c5f59bf8f41d73e06db0d1b57c7938563116d74daf25a8b6a3215b51ead5da81e5d2005cf76",
    "shaWithRSAEncryption": "2a92cbabccca87310ba606495c9783937b33889e",
    "ssl2-md5": "b8d052366e752ce7c803abd24854e934",
    "ssl3-md5": "b8d052366e752ce7c803abd24854e934",
    "ssl3-sha1": "86ad34a6463f12cee6de9596aba72f0df1397fd1",
    "whirlpool": "4a1f58d94270b530227c113e7463aeae772e779079e558651c21fdc1050e2d72139e7fb6b3802129dae7fb91035544e7dfa12147d8d74d95fb81648a8d79d0b1"
  },
  {
    "input": "////gAD////wAAAfAD///g/wHAD//+AAD8Af/8AAAAH/gPf/+AAAP//AAAAB//AAA+P8AAf4AAA////+AAAfAAAAGAA////4D+AAAABgAAf///4AYP////gAAD//gAAAP///8AAAD/AA///x/wA/////Af/gAAAA",
    "DSA": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "DSA-SHA": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "DSA-SHA1": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "DSA-SHA1-old": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "RSA-MD4": "1a6843d3e19c4149a8cff1125f536c72",
    "RSA-MD5": "8ab9dfff746ce3e62c6e04feb7b48528",
    "RSA-MDC2": "1b639b2bf66973922133d40a1a22a909",
    "RSA-RIPEMD160": "2ed1f23487d6e3b49884a7886b902bd06fb84ca9",
    "RSA-SHA": "68594f3e4ee694a6a9cc266e5e3dbf9481e24974",
    "RSA-SHA1": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "RSA-SHA1-2": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "RSA-SHA224": "135cb54748a681f3ddf56bac7d44ad97dd0d29717fb31cdb5eab34f0",
    "RSA-SHA256": "ab71b18daceecc7c8fde7cf5f77eacf118262d760bcd383dd7bfa2170895d518",
    "RSA-SHA384": "46c8fcf4f6ddf28ad65931d5d5ff79b44490dca090c230fa5ef5123f160a21b53763151416a48e9a5de4abcd55e8b761",
    "RSA-SHA512": "29c97533a23510ad29db92d4db332f35025dbd169ada5fd1686f1e9a538c17ea24389df08b59c060d458878ab2cbc0ce28d8f2572b8ca02efa9d7675c7e253a7",
    "dsaEncryption": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "dsaWithSHA": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "dsaWithSHA1": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "dss1": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "ecdsa-with-SHA1": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "md4": "1a6843d3e19c4149a8cff1125f536c72",
    "md4WithRSAEncryption": "1a6843d3e19c4149a8cff1125f536c72",
    "md5": "8ab9dfff746ce3e62c6e04feb7b48528",
    "md5WithRSAEncryption": "8ab9dfff746ce3e62c6e04feb7b48528",
    "mdc2": "1b639b2bf66973922133d40a1a22a909",
    "mdc2WithRSA": "1b639b2bf66973922133d40a1a22a909",
    "ripemd": "2ed1f23487d6e3b49884a7886b902bd06fb84ca9",
    "ripemd160": "2ed1f23487d6e3b49884a7886b902bd06fb84ca9",
    "ripemd160WithRSA": "2ed1f23487d6e3b49884a7886b902bd06fb84ca9",
    "rmd160": "2ed1f23487d6e3b49884a7886b902bd06fb84ca9",
    "sha": "68594f3e4ee694a6a9cc266e5e3dbf9481e24974",
    "sha1": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "sha1WithRSAEncryption": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "sha224": "135cb54748a681f3ddf56bac7d44ad97dd0d29717fb31cdb5eab34f0",
    "sha224WithRSAEncryption": "135cb54748a681f3ddf56bac7d44ad97dd0d29717fb31cdb5eab34f0",
    "sha256": "ab71b18daceecc7c8fde7cf5f77eacf118262d760bcd383dd7bfa2170895d518",
    "sha256WithRSAEncryption": "ab71b18daceecc7c8fde7cf5f77eacf118262d760bcd383dd7bfa2170895d518",
    "sha384": "46c8fcf4f6ddf28ad65931d5d5ff79b44490dca090c230fa5ef5123f160a21b53763151416a48e9a5de4abcd55e8b761",
    "sha384WithRSAEncryption": "46c8fcf4f6ddf28ad65931d5d5ff79b44490dca090c230fa5ef5123f160a21b53763151416a48e9a5de4abcd55e8b761",
    "sha512": "29c97533a23510ad29db92d4db332f35025dbd169ada5fd1686f1e9a538c17ea24389df08b59c060d458878ab2cbc0ce28d8f2572b8ca02efa9d7675c7e253a7",
    "sha512WithRSAEncryption": "29c97533a23510ad29db92d4db332f35025dbd169ada5fd1686f1e9a538c17ea24389df08b59c060d458878ab2cbc0ce28d8f2572b8ca02efa9d7675c7e253a7",
    "shaWithRSAEncryption": "68594f3e4ee694a6a9cc266e5e3dbf9481e24974",
    "ssl2-md5": "8ab9dfff746ce3e62c6e04feb7b48528",
    "ssl3-md5": "8ab9dfff746ce3e62c6e04feb7b48528",
    "ssl3-sha1": "7eb46685a57c0d466152dc339c8122548c757ed1",
    "whirlpool": "e21eb30c87e4fb60942603fdeed901a3847a3ff535c753fbed74fa388b8819495d2733b6c8c145a0febf1207d5f7956ffd50fce1a502e9aee462a227c136f54c"
  },
  {
    "input": "/////AAAAP//8AH///gAAP///+f/+AH4f///gAA///wAAAH//+AAP8AAAH///wAAD////8AAD//x////+AAP///8AAAH////gP//+AfwAAAAH////8AA////wAAO////wAAAA//4AAAD/4AAAADgAAAP+AAAP////w==",
    "DSA": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "DSA-SHA": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "DSA-SHA1": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "DSA-SHA1-old": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "RSA-MD4": "6a4c58ec3cfea46e65ee2550b993b138",
    "RSA-MD5": "ecfca8b371616efe78e9916dbf825f5b",
    "RSA-MDC2": "dd9957a17183cccaec74290baf658a10",
    "RSA-RIPEMD160": "db34ffa46a290567569b24da7d6e43285e9450f3",
    "RSA-SHA": "2223fb3f2cfbb882947b184b5e83502505d377fd",
    "RSA-SHA1": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "RSA-SHA1-2": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "RSA-SHA224": "e2f4c47a989fbf100442817e77d8150409508e0516544f68b0cda295",
    "RSA-SHA256": "fa3174d3432fe38241a34a8387811b54c3d0f183468cef5cd6d3fb325b270b66",
    "RSA-SHA384": "32f44654c6038c9fbbe671b0e2e96db31f236634eb9407b08836109678adcf31b0dde6fda83413cd068ef5486a2e61cb",
    "RSA-SHA512": "8489ab4c31995c0be48275d6d658fcdee8b57b9b03b801c3c0f02626b0999972001ab4dd1dbb3f633a2e59269ba5ed9e4aa0e9f9a87f56f082a300389d6833b6",
    "dsaEncryption": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "dsaWithSHA": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "dsaWithSHA1": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "dss1": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "ecdsa-with-SHA1": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "md4": "6a4c58ec3cfea46e65ee2550b993b138",
    "md4WithRSAEncryption": "6a4c58ec3cfea46e65ee2550b993b138",
    "md5": "ecfca8b371616efe78e9916dbf825f5b",
    "md5WithRSAEncryption": "ecfca8b371616efe78e9916dbf825f5b",
    "mdc2": "dd9957a17183cccaec74290baf658a10",
    "mdc2WithRSA": "dd9957a17183cccaec74290baf658a10",
    "ripemd": "db34ffa46a290567569b24da7d6e43285e9450f3",
    "ripemd160": "db34ffa46a290567569b24da7d6e43285e9450f3",
    "ripemd160WithRSA": "db34ffa46a290567569b24da7d6e43285e9450f3",
    "rmd160": "db34ffa46a290567569b24da7d6e43285e9450f3",
    "sha": "2223fb3f2cfbb882947b184b5e83502505d377fd",
    "sha1": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "sha1WithRSAEncryption": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "sha224": "e2f4c47a989fbf100442817e77d8150409508e0516544f68b0cda295",
    "sha224WithRSAEncryption": "e2f4c47a989fbf100442817e77d8150409508e0516544f68b0cda295",
    "sha256": "fa3174d3432fe38241a34a8387811b54c3d0f183468cef5cd6d3fb325b270b66",
    "sha256WithRSAEncryption": "fa3174d3432fe38241a34a8387811b54c3d0f183468cef5cd6d3fb325b270b66",
    "sha384": "32f44654c6038c9fbbe671b0e2e96db31f236634eb9407b08836109678adcf31b0dde6fda83413cd068ef5486a2e61cb",
    "sha384WithRSAEncryption": "32f44654c6038c9fbbe671b0e2e96db31f236634eb9407b08836109678adcf31b0dde6fda83413cd068ef5486a2e61cb",
    "sha512": "8489ab4c31995c0be48275d6d658fcdee8b57b9b03b801c3c0f02626b0999972001ab4dd1dbb3f633a2e59269ba5ed9e4aa0e9f9a87f56f082a300389d6833b6",
    "sha512WithRSAEncryption": "8489ab4c31995c0be48275d6d658fcdee8b57b9b03b801c3c0f02626b0999972001ab4dd1dbb3f633a2e59269ba5ed9e4aa0e9f9a87f56f082a300389d6833b6",
    "shaWithRSAEncryption": "2223fb3f2cfbb882947b184b5e83502505d377fd",
    "ssl2-md5": "ecfca8b371616efe78e9916dbf825f5b",
    "ssl3-md5": "ecfca8b371616efe78e9916dbf825f5b",
    "ssl3-sha1": "e7a98fb0692684054407cc221abc60c199d6f52a",
    "whirlpool": "2f1a73fb3288333aaed75202296b2ff67851f973459d98fc8442d07ba73500d9deb1e29bad56ddf686c3be609cac831bc2e149a116c997522ac91b61c2229aab"
  },
  {
    "input": "PwADwB8AAAAP8AAH///vAP4Af/4AAD/wAD/AAAAH/AAAA////w/////AB/gAAPgAAD+f///8AAA//8AAA///wAAA//wAH//gAAAH/+AHAAAAf//+AAAA///+AAAP/AAH//AAAAB/gAPP/4AAAf//4DwAAD////+AAAA=",
    "DSA": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "DSA-SHA": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "DSA-SHA1": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "DSA-SHA1-old": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "RSA-MD4": "aa0d6922061b664ba025acc5e1702ee9",
    "RSA-MD5": "5f76da828c37fc4edb4557953539c92a",
    "RSA-MDC2": "90c016d6c3662a740911559f6a18c9ab",
    "RSA-RIPEMD160": "7ca39b6a1c2b6f3e2ef1da5c14bfd881da85430c",
    "RSA-SHA": "64e30d2808850a61df7384c05820ead9eb2876fc",
    "RSA-SHA1": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "RSA-SHA1-2": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "RSA-SHA224": "88e6af8942768d761cc15610bea4154dd6d08def1bd47563f23a74fb",
    "RSA-SHA256": "c13fd9ed22d33aa45f73748782e4dbb835d180dc0662e160c0a6c445c76f0c72",
    "RSA-SHA384": "04b81b46c5dad6dac883881ed560c6f7d662400c10dce59d55a34d8d855b5f769fed118b48c22aaef55cdc2895b19c07",
    "RSA-SHA512": "7d6da87c8b9be034e95f641368cc4e8a1e01710d5728d7b0064b733c30d40834a7e35918ee2f3c4b4b3f1a88afa4abfb7325489d6ad3fcf2291f5cc38977fad2",
    "dsaEncryption": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "dsaWithSHA": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "dsaWithSHA1": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "dss1": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "ecdsa-with-SHA1": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "md4": "aa0d6922061b664ba025acc5e1702ee9",
    "md4WithRSAEncryption": "aa0d6922061b664ba025acc5e1702ee9",
    "md5": "5f76da828c37fc4edb4557953539c92a",
    "md5WithRSAEncryption": "5f76da828c37fc4edb4557953539c92a",
    "mdc2": "90c016d6c3662a740911559f6a18c9ab",
    "mdc2WithRSA": "90c016d6c3662a740911559f6a18c9ab",
    "ripemd": "7ca39b6a1c2b6f3e2ef1da5c14bfd881da85430c",
    "ripemd160": "7ca39b6a1c2b6f3e2ef1da5c14bfd881da85430c",
    "ripemd160WithRSA": "7ca39b6a1c2b6f3e2ef1da5c14bfd881da85430c",
    "rmd160": "7ca39b6a1c2b6f3e2ef1da5c14bfd881da85430c",
    "sha": "64e30d2808850a61df7384c05820ead9eb2876fc",
    "sha1": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "sha1WithRSAEncryption": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "sha224": "88e6af8942768d761cc15610bea4154dd6d08def1bd47563f23a74fb",
    "sha224WithRSAEncryption": "88e6af8942768d761cc15610bea4154dd6d08def1bd47563f23a74fb",
    "sha256": "c13fd9ed22d33aa45f73748782e4dbb835d180dc0662e160c0a6c445c76f0c72",
    "sha256WithRSAEncryption": "c13fd9ed22d33aa45f73748782e4dbb835d180dc0662e160c0a6c445c76f0c72",
    "sha384": "04b81b46c5dad6dac883881ed560c6f7d662400c10dce59d55a34d8d855b5f769fed118b48c22aaef55cdc2895b19c07",
    "sha384WithRSAEncryption": "04b81b46c5dad6dac883881ed560c6f7d662400c10dce59d55a34d8d855b5f769fed118b48c22aaef55cdc2895b19c07",
    "sha512": "7d6da87c8b9be034e95f641368cc4e8a1e01710d5728d7b0064b733c30d40834a7e35918ee2f3c4b4b3f1a88afa4abfb7325489d6ad3fcf2291f5cc38977fad2",
    "sha512WithRSAEncryption": "7d6da87c8b9be034e95f641368cc4e8a1e01710d5728d7b0064b733c30d40834a7e35918ee2f3c4b4b3f1a88afa4abfb7325489d6ad3fcf2291f5cc38977fad2",
    "shaWithRSAEncryption": "64e30d2808850a61df7384c05820ead9eb2876fc",
    "ssl2-md5": "5f76da828c37fc4edb4557953539c92a",
    "ssl3-md5": "5f76da828c37fc4edb4557953539c92a",
    "ssl3-sha1": "34df1306662206fd0a5fc2969a4beec4eb0197f7",
    "whirlpool": "59234d45350fd47a2fd1b6a26c65339676a0ad1c29f9281db1c596591ee7fe62e74713604ac89b4dc9d19d9f706f4a0f433fd498f4ef686d25dc3fcd3a34469e"
  },
  {
    "input": "MAAAAP/4AAD//AA///+AAAAPz//P///A////gAAAAf////AAAAAf/wAD//wAAAAH/4AAf////g//wAAAAH/wv///4AAA//gAAAH///gAAD4AAAf/4AAAAIAAA4AB////+GAAAAD/8AAf///H//BA///+AAAH/9//gAAA",
    "DSA": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "DSA-SHA": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "DSA-SHA1": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "DSA-SHA1-old": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "RSA-MD4": "de9833ccdae44a93f3acbb97ed477332",
    "RSA-MD5": "ecad54f76ce3bc233e02fc6fd7f94628",
    "RSA-MDC2": "5ac7d2cf9e4795bb068328baae99c1bb",
    "RSA-RIPEMD160": "60556f768eed549340ad2f18395e3ec494d67dd3",
    "RSA-SHA": "1232ac009f10ced2c2d212d94e2e6ae6deb06c95",
    "RSA-SHA1": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "RSA-SHA1-2": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "RSA-SHA224": "983288fb210551693b2079f8b4476be294241043578be7e9fcf184d5",
    "RSA-SHA256": "b88a842dc14c41c2b5bd74e48fdd2bd0d43cfeea1eb9b154bebfc4f03d8a102d",
    "RSA-SHA384": "7e8bd777ef907657128c522bc687fbf0383af341cac0a89cb0fd314a49df38cc1172d766c7e7601d858daf04b225f2ef",
    "RSA-SHA512": "fb619c19b30935c87e450e40e515bd41c0f6e755309978679bfde5b8ae1701883a157d39275ac69baf77d5e3874d706509d9946b709dead3701515c28c62b388",
    "dsaEncryption": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "dsaWithSHA": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "dsaWithSHA1": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "dss1": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "ecdsa-with-SHA1": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "md4": "de9833ccdae44a93f3acbb97ed477332",
    "md4WithRSAEncryption": "de9833ccdae44a93f3acbb97ed477332",
    "md5": "ecad54f76ce3bc233e02fc6fd7f94628",
    "md5WithRSAEncryption": "ecad54f76ce3bc233e02fc6fd7f94628",
    "mdc2": "5ac7d2cf9e4795bb068328baae99c1bb",
    "mdc2WithRSA": "5ac7d2cf9e4795bb068328baae99c1bb",
    "ripemd": "60556f768eed549340ad2f18395e3ec494d67dd3",
    "ripemd160": "60556f768eed549340ad2f18395e3ec494d67dd3",
    "ripemd160WithRSA": "60556f768eed549340ad2f18395e3ec494d67dd3",
    "rmd160": "60556f768eed549340ad2f18395e3ec494d67dd3",
    "sha": "1232ac009f10ced2c2d212d94e2e6ae6deb06c95",
    "sha1": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "sha1WithRSAEncryption": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "sha224": "983288fb210551693b2079f8b4476be294241043578be7e9fcf184d5",
    "sha224WithRSAEncryption": "983288fb210551693b2079f8b4476be294241043578be7e9fcf184d5",
    "sha256": "b88a842dc14c41c2b5bd74e48fdd2bd0d43cfeea1eb9b154bebfc4f03d8a102d",
    "sha256WithRSAEncryption": "b88a842dc14c41c2b5bd74e48fdd2bd0d43cfeea1eb9b154bebfc4f03d8a102d",
    "sha384": "7e8bd777ef907657128c522bc687fbf0383af341cac0a89cb0fd314a49df38cc1172d766c7e7601d858daf04b225f2ef",
    "sha384WithRSAEncryption": "7e8bd777ef907657128c522bc687fbf0383af341cac0a89cb0fd314a49df38cc1172d766c7e7601d858daf04b225f2ef",
    "sha512": "fb619c19b30935c87e450e40e515bd41c0f6e755309978679bfde5b8ae1701883a157d39275ac69baf77d5e3874d706509d9946b709dead3701515c28c62b388",
    "sha512WithRSAEncryption": "fb619c19b30935c87e450e40e515bd41c0f6e755309978679bfde5b8ae1701883a157d39275ac69baf77d5e3874d706509d9946b709dead3701515c28c62b388",
    "shaWithRSAEncryption": "1232ac009f10ced2c2d212d94e2e6ae6deb06c95",
    "ssl2-md5": "ecad54f76ce3bc233e02fc6fd7f94628",
    "ssl3-md5": "ecad54f76ce3bc233e02fc6fd7f94628",
    "ssl3-sha1": "56cf7ebf08d10f0cb9fe7ee3b63a5c3a02bcb450",
    "whirlpool": "67641bd47b1ebccf8fcc315625b2fe6912574aee63ba1479933c12eb5c1ebff67b2e560a81359a3e76e31d64e4fd02f513b24f95b2f26d5ee53d26fefe849bc7"
  },
  {
    "input": "////g//4H/8f//+AD///4AAAAD///8D4AAB4ABwAAAAf4AAAAP//4D////4AAAP///4AAAAf//wAf/8AAAAf//8AAgAAP//8AAAA//Af/v//wAH////wAAAA///+AAAAD//AAAB/f8AAAAH///4P////wAAPgAAAP////w==",
    "DSA": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "DSA-SHA": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "DSA-SHA1": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "DSA-SHA1-old": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "RSA-MD4": "45e5dd18ff36e9416db673feb605f431",
    "RSA-MD5": "e8a1cc06bfec7f677f36a693e1342400",
    "RSA-MDC2": "8a09d15aabfdc60f7e67edf5c08cf9f9",
    "RSA-RIPEMD160": "f97c17087d7f2a8e3879a54e553e2a52520b7f4d",
    "RSA-SHA": "1f5d610dae6d2c30bf2ec26316f96083c7225420",
    "RSA-SHA1": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "RSA-SHA1-2": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "RSA-SHA224": "b0a875f78b16b6c114b08c692cca5046272cf0fd4fd97a040fc01294",
    "RSA-SHA256": "45ba1056e49828a0385b0b5f9e4933905973f15b2713fee1c1755e2a7a3e8d79",
    "RSA-SHA384": "60184c2e97c958e942b0a148d56efb39e6549253338847d361a42f7505e87a4df8a28ed6758a09bca2d0920073d31368",
    "RSA-SHA512": "0fee2eac82a5539f49655d2ee5a8428f5f6158cecd3bb97a84d8cbf83bf3b57284d1ab4439183779641c2b50f4a1ff3c32444ceda889263b3b7b577a8d51cff9",
    "dsaEncryption": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "dsaWithSHA": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "dsaWithSHA1": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "dss1": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "ecdsa-with-SHA1": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "md4": "45e5dd18ff36e9416db673feb605f431",
    "md4WithRSAEncryption": "45e5dd18ff36e9416db673feb605f431",
    "md5": "e8a1cc06bfec7f677f36a693e1342400",
    "md5WithRSAEncryption": "e8a1cc06bfec7f677f36a693e1342400",
    "mdc2": "8a09d15aabfdc60f7e67edf5c08cf9f9",
    "mdc2WithRSA": "8a09d15aabfdc60f7e67edf5c08cf9f9",
    "ripemd": "f97c17087d7f2a8e3879a54e553e2a52520b7f4d",
    "ripemd160": "f97c17087d7f2a8e3879a54e553e2a52520b7f4d",
    "ripemd160WithRSA": "f97c17087d7f2a8e3879a54e553e2a52520b7f4d",
    "rmd160": "f97c17087d7f2a8e3879a54e553e2a52520b7f4d",
    "sha": "1f5d610dae6d2c30bf2ec26316f96083c7225420",
    "sha1": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "sha1WithRSAEncryption": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "sha224": "b0a875f78b16b6c114b08c692cca5046272cf0fd4fd97a040fc01294",
    "sha224WithRSAEncryption": "b0a875f78b16b6c114b08c692cca5046272cf0fd4fd97a040fc01294",
    "sha256": "45ba1056e49828a0385b0b5f9e4933905973f15b2713fee1c1755e2a7a3e8d79",
    "sha256WithRSAEncryption": "45ba1056e49828a0385b0b5f9e4933905973f15b2713fee1c1755e2a7a3e8d79",
    "sha384": "60184c2e97c958e942b0a148d56efb39e6549253338847d361a42f7505e87a4df8a28ed6758a09bca2d0920073d31368",
    "sha384WithRSAEncryption": "60184c2e97c958e942b0a148d56efb39e6549253338847d361a42f7505e87a4df8a28ed6758a09bca2d0920073d31368",
    "sha512": "0fee2eac82a5539f49655d2ee5a8428f5f6158cecd3bb97a84d8cbf83bf3b57284d1ab4439183779641c2b50f4a1ff3c32444ceda889263b3b7b577a8d51cff9",
    "sha512WithRSAEncryption": "0fee2eac82a5539f49655d2ee5a8428f5f6158cecd3bb97a84d8cbf83bf3b57284d1ab4439183779641c2b50f4a1ff3c32444ceda889263b3b7b577a8d51cff9",
    "shaWithRSAEncryption": "1f5d610dae6d2c30bf2ec26316f96083c7225420",
    "ssl2-md5": "e8a1cc06bfec7f677f36a693e1342400",
    "ssl3-md5": "e8a1cc06bfec7f677f36a693e1342400",
    "ssl3-sha1": "3bae5cb8226642088da760a6f78b0cf8eddea9f1",
    "whirlpool": "80f6ec2d62ee9769401387833aa9f1de09d3b9578380c1bf1591657a9a7b03426b949a204b08fb2d0a4d73fe170bf85ea8bb73671e33cd61f3d42e6cf43bbaac"
  },
  {
    "input": "/////gAAAP/4D///8AAAB///+//AAAf8B+AAAAH//+AAf///+AAAP//4AAAAD///AAAPwAAAP//wAAAB///+H//4AAAgAAAAP/+//5////w////wAAAHgAAA///n////8AAAP////wAAB///4P///+AB////+AAAAH////8=",
    "DSA": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "DSA-SHA": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "DSA-SHA1": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "DSA-SHA1-old": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "RSA-MD4": "349503c72dda30942bcc11f60c96ce53",
    "RSA-MD5": "9ad0fe040e44a8e7146c3dd8582b6752",
    "RSA-MDC2": "aaa1fefe12831022859358898f92ba5e",
    "RSA-RIPEMD160": "bbe84db46c82161f9777e2155160b7cdb9e3db7d",
    "RSA-SHA": "3d1d0397f2c3e37c9dbdd2aa72174f6be389a7c0",
    "RSA-SHA1": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "RSA-SHA1-2": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "RSA-SHA224": "336536803a28845506a16214603066598cf48f50f5c2fd14a9d0ceaa",
    "RSA-SHA256": "a0d7d4fda9435ef292b761aed2c9fea576519437a824e96150a4324dcc757605",
    "RSA-SHA384": "85aea3962c8f3401660806645041495f2b7d7896f28d030d1c28d2289ae11e216dbb22e6d896a634397eade7670ec404",
    "RSA-SHA512": "c88ebff861e4fe68f92b17536e70f4b22fe91b6730e7468d57f40f1d1c02f9e474da1027958b715acb6de5fc4da2453f40e93b40f97d137b9dfe39436d05cb20",
    "dsaEncryption": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "dsaWithSHA": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "dsaWithSHA1": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "dss1": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "ecdsa-with-SHA1": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "md4": "349503c72dda30942bcc11f60c96ce53",
    "md4WithRSAEncryption": "349503c72dda30942bcc11f60c96ce53",
    "md5": "9ad0fe040e44a8e7146c3dd8582b6752",
    "md5WithRSAEncryption": "9ad0fe040e44a8e7146c3dd8582b6752",
    "mdc2": "aaa1fefe12831022859358898f92ba5e",
    "mdc2WithRSA": "aaa1fefe12831022859358898f92ba5e",
    "ripemd": "bbe84db46c82161f9777e2155160b7cdb9e3db7d",
    "ripemd160": "bbe84db46c82161f9777e2155160b7cdb9e3db7d",
    "ripemd160WithRSA": "bbe84db46c82161f9777e2155160b7cdb9e3db7d",
    "rmd160": "bbe84db46c82161f9777e2155160b7cdb9e3db7d",
    "sha": "3d1d0397f2c3e37c9dbdd2aa72174f6be389a7c0",
    "sha1": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "sha1WithRSAEncryption": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "sha224": "336536803a28845506a16214603066598cf48f50f5c2fd14a9d0ceaa",
    "sha224WithRSAEncryption": "336536803a28845506a16214603066598cf48f50f5c2fd14a9d0ceaa",
    "sha256": "a0d7d4fda9435ef292b761aed2c9fea576519437a824e96150a4324dcc757605",
    "sha256WithRSAEncryption": "a0d7d4fda9435ef292b761aed2c9fea576519437a824e96150a4324dcc757605",
    "sha384": "85aea3962c8f3401660806645041495f2b7d7896f28d030d1c28d2289ae11e216dbb22e6d896a634397eade7670ec404",
    "sha384WithRSAEncryption": "85aea3962c8f3401660806645041495f2b7d7896f28d030d1c28d2289ae11e216dbb22e6d896a634397eade7670ec404",
    "sha512": "c88ebff861e4fe68f92b17536e70f4b22fe91b6730e7468d57f40f1d1c02f9e474da1027958b715acb6de5fc4da2453f40e93b40f97d137b9dfe39436d05cb20",
    "sha512WithRSAEncryption": "c88ebff861e4fe68f92b17536e70f4b22fe91b6730e7468d57f40f1d1c02f9e474da1027958b715acb6de5fc4da2453f40e93b40f97d137b9dfe39436d05cb20",
    "shaWithRSAEncryption": "3d1d0397f2c3e37c9dbdd2aa72174f6be389a7c0",
    "ssl2-md5": "9ad0fe040e44a8e7146c3dd8582b6752",
    "ssl3-md5": "9ad0fe040e44a8e7146c3dd8582b6752",
    "ssl3-sha1": "6475df681e061fa506672c27cbabfa9aa6ddff62",
    "whirlpool": "ac16fba5ba2cb44e046fe3a18e9f7618a3179aefe63f7e9893fe8a8170927bbc7ec57a775a46b29e140e93fae59b94fe3d359a13e1933ec098bb75982221ae20"
  },
  {
    "input": "AAAAH//AAA//wAAAH//AAB/AAAAD/4AAAAf////AAAAAgAA//ADAAA///wAABgA//B4AH///8AA+D///8AAAP//wAAAAH//AAAD////4AOAAAP////4AAA////4////8B/4AAADAAH////4A/////Af//+AAP+P//8AAAD//",
    "DSA": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "DSA-SHA": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "DSA-SHA1": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "DSA-SHA1-old": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "RSA-MD4": "2729c19da6b8bc7592dea9eccefdaf26",
    "RSA-MD5": "4e56f978f94cf72158fd4311831b4f9f",
    "RSA-MDC2": "9d755176d0e78bb54b229a09922d9a31",
    "RSA-RIPEMD160": "5d47f4ddfda6502f922c5c2bfbb8d61c3b5c7919",
    "RSA-SHA": "76de02e1d3383927467b914a5cdaefb425bb4321",
    "RSA-SHA1": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "RSA-SHA1-2": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "RSA-SHA224": "0a14fdb29b36a83114cdaa86de2224c9049481878e558c763af2ff35",
    "RSA-SHA256": "7906439843a1c1758c232182eaa66d5e6bd5ad2fbc0157fdc5438e1038966dc4",
    "RSA-SHA384": "d32b15389e12ed922e1569c92b20af57f564102c7a504726416872adb9a3c06bbf44afb255684aa2e3d2d913926b1471",
    "RSA-SHA512": "944d6522c69ffaee3033e3a933b2dcdfb05a3b5cc3bcf3b9d35cce08c496fedb6879a0a277c59a84e5b6d523d9f202e07a09e32a08e63f30269a060d4df81d01",
    "dsaEncryption": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "dsaWithSHA": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "dsaWithSHA1": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "dss1": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "ecdsa-with-SHA1": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "md4": "2729c19da6b8bc7592dea9eccefdaf26",
    "md4WithRSAEncryption": "2729c19da6b8bc7592dea9eccefdaf26",
    "md5": "4e56f978f94cf72158fd4311831b4f9f",
    "md5WithRSAEncryption": "4e56f978f94cf72158fd4311831b4f9f",
    "mdc2": "9d755176d0e78bb54b229a09922d9a31",
    "mdc2WithRSA": "9d755176d0e78bb54b229a09922d9a31",
    "ripemd": "5d47f4ddfda6502f922c5c2bfbb8d61c3b5c7919",
    "ripemd160": "5d47f4ddfda6502f922c5c2bfbb8d61c3b5c7919",
    "ripemd160WithRSA": "5d47f4ddfda6502f922c5c2bfbb8d61c3b5c7919",
    "rmd160": "5d47f4ddfda6502f922c5c2bfbb8d61c3b5c7919",
    "sha": "76de02e1d3383927467b914a5cdaefb425bb4321",
    "sha1": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "sha1WithRSAEncryption": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "sha224": "0a14fdb29b36a83114cdaa86de2224c9049481878e558c763af2ff35",
    "sha224WithRSAEncryption": "0a14fdb29b36a83114cdaa86de2224c9049481878e558c763af2ff35",
    "sha256": "7906439843a1c1758c232182eaa66d5e6bd5ad2fbc0157fdc5438e1038966dc4",
    "sha256WithRSAEncryption": "7906439843a1c1758c232182eaa66d5e6bd5ad2fbc0157fdc5438e1038966dc4",
    "sha384": "d32b15389e12ed922e1569c92b20af57f564102c7a504726416872adb9a3c06bbf44afb255684aa2e3d2d913926b1471",
    "sha384WithRSAEncryption": "d32b15389e12ed922e1569c92b20af57f564102c7a504726416872adb9a3c06bbf44afb255684aa2e3d2d913926b1471",
    "sha512": "944d6522c69ffaee3033e3a933b2dcdfb05a3b5cc3bcf3b9d35cce08c496fedb6879a0a277c59a84e5b6d523d9f202e07a09e32a08e63f30269a060d4df81d01",
    "sha512WithRSAEncryption": "944d6522c69ffaee3033e3a933b2dcdfb05a3b5cc3bcf3b9d35cce08c496fedb6879a0a277c59a84e5b6d523d9f202e07a09e32a08e63f30269a060d4df81d01",
    "shaWithRSAEncryption": "76de02e1d3383927467b914a5cdaefb425bb4321",
    "ssl2-md5": "4e56f978f94cf72158fd4311831b4f9f",
    "ssl3-md5": "4e56f978f94cf72158fd4311831b4f9f",
    "ssl3-sha1": "79d81991fa4e4957c8062753439dbfd47bbb277d",
    "whirlpool": "ee08fe5e47e4b5bae8697f3e989a7e2a24975cebea10b2a6b9526f684bcc547c4e93997ed742d2a338f1bf870fba5b80b7f60212623613f728cb8c0d13def88e"
  },
  {
    "input": "AAAAD//AAA/4AAAA//wAAA////4AAAAD/wD//Af/8B///g////3////wH//wAAf4//gAAAD//8A/////gAAAD////wAAA///8AAH//8AAD//8AH//8AB////AD//+B////4f////wAAAf+AAB////gAAAAPgB//AA/wAB////w==",
    "DSA": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "DSA-SHA": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "DSA-SHA1": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "DSA-SHA1-old": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "RSA-MD4": "ccc4c705c60b4bc1bdac69abd94f55c6",
    "RSA-MD5": "3b95686fe49f50006607d5978aaa3efc",
    "RSA-MDC2": "36eea7d5d7a461845af9dbf1a8470a9d",
    "RSA-RIPEMD160": "48ecd17bf0833bf878487b51ca62184e4d28b34d",
    "RSA-SHA": "730b8f6170b4e9fa52a392c7be070025d4241208",
    "RSA-SHA1": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "RSA-SHA1-2": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "RSA-SHA224": "1418176e47f3d1542ef62990925df680b941d60b33c7a2fd844443ea",
    "RSA-SHA256": "35e5a6c17906646cf15c2bed4884129b5134eb2b411400e4d8797126f51a4cb7",
    "RSA-SHA384": "c031380e2e4421d0436dc51d54706b909128d6ee9dba1e2605e15c67f7fae03f6f3dc5ff7695a0f2471f7140aae57dde",
    "RSA-SHA512": "c6a5f4bbdb075c17ebcf4131de0fe33d3e2bb6edb5af7c277b472ea7847b11d2aa2598cb7ca75e4fe94c264bd2942bd82fc60b5045bd7c5cbc31325954713dfc",
    "dsaEncryption": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "dsaWithSHA": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "dsaWithSHA1": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "dss1": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "ecdsa-with-SHA1": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "md4": "ccc4c705c60b4bc1bdac69abd94f55c6",
    "md4WithRSAEncryption": "ccc4c705c60b4bc1bdac69abd94f55c6",
    "md5": "3b95686fe49f50006607d5978aaa3efc",
    "md5WithRSAEncryption": "3b95686fe49f50006607d5978aaa3efc",
    "mdc2": "36eea7d5d7a461845af9dbf1a8470a9d",
    "mdc2WithRSA": "36eea7d5d7a461845af9dbf1a8470a9d",
    "ripemd": "48ecd17bf0833bf878487b51ca62184e4d28b34d",
    "ripemd160": "48ecd17bf0833bf878487b51ca62184e4d28b34d",
    "ripemd160WithRSA": "48ecd17bf0833bf878487b51ca62184e4d28b34d",
    "rmd160": "48ecd17bf0833bf878487b51ca62184e4d28b34d",
    "sha": "730b8f6170b4e9fa52a392c7be070025d4241208",
    "sha1": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "sha1WithRSAEncryption": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "sha224": "1418176e47f3d1542ef62990925df680b941d60b33c7a2fd844443ea",
    "sha224WithRSAEncryption": "1418176e47f3d1542ef62990925df680b941d60b33c7a2fd844443ea",
    "sha256": "35e5a6c17906646cf15c2bed4884129b5134eb2b411400e4d8797126f51a4cb7",
    "sha256WithRSAEncryption": "35e5a6c17906646cf15c2bed4884129b5134eb2b411400e4d8797126f51a4cb7",
    "sha384": "c031380e2e4421d0436dc51d54706b909128d6ee9dba1e2605e15c67f7fae03f6f3dc5ff7695a0f2471f7140aae57dde",
    "sha384WithRSAEncryption": "c031380e2e4421d0436dc51d54706b909128d6ee9dba1e2605e15c67f7fae03f6f3dc5ff7695a0f2471f7140aae57dde",
    "sha512": "c6a5f4bbdb075c17ebcf4131de0fe33d3e2bb6edb5af7c277b472ea7847b11d2aa2598cb7ca75e4fe94c264bd2942bd82fc60b5045bd7c5cbc31325954713dfc",
    "sha512WithRSAEncryption": "c6a5f4bbdb075c17ebcf4131de0fe33d3e2bb6edb5af7c277b472ea7847b11d2aa2598cb7ca75e4fe94c264bd2942bd82fc60b5045bd7c5cbc31325954713dfc",
    "shaWithRSAEncryption": "730b8f6170b4e9fa52a392c7be070025d4241208",
    "ssl2-md5": "3b95686fe49f50006607d5978aaa3efc",
    "ssl3-md5": "3b95686fe49f50006607d5978aaa3efc",
    "ssl3-sha1": "bae224477b20302e881f5249f52ec6c34da8ecef",
    "whirlpool": "74ecd1220ed2220bf407707c4de77c1563d82ccbe0b4296909578f2adf8293c9fcb8e12ae539b68186a067e61737686caf52609952b3a47668d461aa45301ea0"
  },
  {
    "input": "////AAADwAAAAf//+AAAAA////8AAA8AAP//+IAA+AAPwAAAAOAAAAD////4D////gAAGAAAf////wAAA////wB////8AAPAAAAP////8AAH//+AAf///+AAD//+B///+AD////AAAAD4AAH//AP//AAAP//+H/AA8A//+AAAAA=",
    "DSA": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "DSA-SHA": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "DSA-SHA1": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "DSA-SHA1-old": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "RSA-MD4": "9f087a499ffa01c8296b71259bd36b1a",
    "RSA-MD5": "fa354daecc45f14b82b0e7e567d24282",
    "RSA-MDC2": "1f3d3c85d0f8c126a21a0df7de24de67",
    "RSA-RIPEMD160": "bdee0dbbf5de0d1e1e3b82ae19725c959d2a6305",
    "RSA-SHA": "3bc9489fc869cd0249f1bf650ebebe65f6393824",
    "RSA-SHA1": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "RSA-SHA1-2": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "RSA-SHA224": "e1b6afbdb36b12e5f3b438a79b969055263713904445364c40bea416",
    "RSA-SHA256": "d19ddbd98476519a07cd8917b95eb609e5b50e8088ad68cd7426e8139d5bffc2",
    "RSA-SHA384": "ce5bc596b3d3a33a0466927fe3975937edac8cf910cb802ba7c1f7df13ad4b26cf9468a1627f8b80a9905b12dddfd475",
    "RSA-SHA512": "cc2a04b943fb4625e799ca7f7566110fd200040e8bc5e76b167fe95bf758dbe68a9eaa0a078445141cf547c417f6953872de8962f9ca06f5be1d777ba6f5d936",
    "dsaEncryption": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "dsaWithSHA": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "dsaWithSHA1": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "dss1": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "ecdsa-with-SHA1": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "md4": "9f087a499ffa01c8296b71259bd36b1a",
    "md4WithRSAEncryption": "9f087a499ffa01c8296b71259bd36b1a",
    "md5": "fa354daecc45f14b82b0e7e567d24282",
    "md5WithRSAEncryption": "fa354daecc45f14b82b0e7e567d24282",
    "mdc2": "1f3d3c85d0f8c126a21a0df7de24de67",
    "mdc2WithRSA": "1f3d3c85d0f8c126a21a0df7de24de67",
    "ripemd": "bdee0dbbf5de0d1e1e3b82ae19725c959d2a6305",
    "ripemd160": "bdee0dbbf5de0d1e1e3b82ae19725c959d2a6305",
    "ripemd160WithRSA": "bdee0dbbf5de0d1e1e3b82ae19725c959d2a6305",
    "rmd160": "bdee0dbbf5de0d1e1e3b82ae19725c959d2a6305",
    "sha": "3bc9489fc869cd0249f1bf650ebebe65f6393824",
    "sha1": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "sha1WithRSAEncryption": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "sha224": "e1b6afbdb36b12e5f3b438a79b969055263713904445364c40bea416",
    "sha224WithRSAEncryption": "e1b6afbdb36b12e5f3b438a79b969055263713904445364c40bea416",
    "sha256": "d19ddbd98476519a07cd8917b95eb609e5b50e8088ad68cd7426e8139d5bffc2",
    "sha256WithRSAEncryption": "d19ddbd98476519a07cd8917b95eb609e5b50e8088ad68cd7426e8139d5bffc2",
    "sha384": "ce5bc596b3d3a33a0466927fe3975937edac8cf910cb802ba7c1f7df13ad4b26cf9468a1627f8b80a9905b12dddfd475",
    "sha384WithRSAEncryption": "ce5bc596b3d3a33a0466927fe3975937edac8cf910cb802ba7c1f7df13ad4b26cf9468a1627f8b80a9905b12dddfd475",
    "sha512": "cc2a04b943fb4625e799ca7f7566110fd200040e8bc5e76b167fe95bf758dbe68a9eaa0a078445141cf547c417f6953872de8962f9ca06f5be1d777ba6f5d936",
    "sha512WithRSAEncryption": "cc2a04b943fb4625e799ca7f7566110fd200040e8bc5e76b167fe95bf758dbe68a9eaa0a078445141cf547c417f6953872de8962f9ca06f5be1d777ba6f5d936",
    "shaWithRSAEncryption": "3bc9489fc869cd0249f1bf650ebebe65f6393824",
    "ssl2-md5": "fa354daecc45f14b82b0e7e567d24282",
    "ssl3-md5": "fa354daecc45f14b82b0e7e567d24282",
    "ssl3-sha1": "ede4deb4293cfe4138c2c056b7c46ff821cc0acc",
    "whirlpool": "4babb00c5a0d0bb5af69d46c2e11a0485346e6a91d4728061b5965f8716fcab92fe7dea59652cc3973d08f23f5921662688f7e6689114d881eec282c356c3bbc"
  },
  {
    "input": "+P/gAD/8AAAD////+AAACB////5/gAAAAPwH////4P//4AAAP/wP+AAAAA///gAA////AAAAf//+B/+AAHAf8Af/AAAAB4AMH/8AAAAH/gAf////gAAAAH//4AAAAf//gAAADgAAAAeH///+B//AAAAAf/z/4D///8P//gAAAA//",
    "DSA": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "DSA-SHA": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "DSA-SHA1": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "DSA-SHA1-old": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "RSA-MD4": "2b6647c18ea7ce0868727632c9f7ac3c",
    "RSA-MD5": "b7c30cf902e74c10e3d5c3af7e854f6b",
    "RSA-MDC2": "236567aecf4d11a369714f8ad199787f",
    "RSA-RIPEMD160": "3ad1f7d953682ea24c61b51f6d9b5df0ac307b08",
    "RSA-SHA": "ec4aa3cbe617bcaecffcc71e13d6255e16d41c47",
    "RSA-SHA1": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "RSA-SHA1-2": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "RSA-SHA224": "4b5639709abaefa38b794a266a1374aa69d6fbe7f73be7257a3a5bf6",
    "RSA-SHA256": "cafea6a1183ca8934867692684194ce9903b375a8036c4c5deb8fb379c3423cb",
    "RSA-SHA384": "83edb88cace6e3273db3fced4e5f207afb376b428950954b00cadc55a5cc98b37a18955677b85bbb90fe1db213f85696",
    "RSA-SHA512": "7fdcd5fea3209c23797da291503bd224e948e48111e895cf2e033a436309373934cfc88d3c35d3fd31d0a917d6f9303adba0263ceb58fcddcb83aad6a606e479",
    "dsaEncryption": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "dsaWithSHA": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "dsaWithSHA1": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "dss1": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "ecdsa-with-SHA1": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "md4": "2b6647c18ea7ce0868727632c9f7ac3c",
    "md4WithRSAEncryption": "2b6647c18ea7ce0868727632c9f7ac3c",
    "md5": "b7c30cf902e74c10e3d5c3af7e854f6b",
    "md5WithRSAEncryption": "b7c30cf902e74c10e3d5c3af7e854f6b",
    "mdc2": "236567aecf4d11a369714f8ad199787f",
    "mdc2WithRSA": "236567aecf4d11a369714f8ad199787f",
    "ripemd": "3ad1f7d953682ea24c61b51f6d9b5df0ac307b08",
    "ripemd160": "3ad1f7d953682ea24c61b51f6d9b5df0ac307b08",
    "ripemd160WithRSA": "3ad1f7d953682ea24c61b51f6d9b5df0ac307b08",
    "rmd160": "3ad1f7d953682ea24c61b51f6d9b5df0ac307b08",
    "sha": "ec4aa3cbe617bcaecffcc71e13d6255e16d41c47",
    "sha1": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "sha1WithRSAEncryption": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "sha224": "4b5639709abaefa38b794a266a1374aa69d6fbe7f73be7257a3a5bf6",
    "sha224WithRSAEncryption": "4b5639709abaefa38b794a266a1374aa69d6fbe7f73be7257a3a5bf6",
    "sha256": "cafea6a1183ca8934867692684194ce9903b375a8036c4c5deb8fb379c3423cb",
    "sha256WithRSAEncryption": "cafea6a1183ca8934867692684194ce9903b375a8036c4c5deb8fb379c3423cb",
    "sha384": "83edb88cace6e3273db3fced4e5f207afb376b428950954b00cadc55a5cc98b37a18955677b85bbb90fe1db213f85696",
    "sha384WithRSAEncryption": "83edb88cace6e3273db3fced4e5f207afb376b428950954b00cadc55a5cc98b37a18955677b85bbb90fe1db213f85696",
    "sha512": "7fdcd5fea3209c23797da291503bd224e948e48111e895cf2e033a436309373934cfc88d3c35d3fd31d0a917d6f9303adba0263ceb58fcddcb83aad6a606e479",
    "sha512WithRSAEncryption": "7fdcd5fea3209c23797da291503bd224e948e48111e895cf2e033a436309373934cfc88d3c35d3fd31d0a917d6f9303adba0263ceb58fcddcb83aad6a606e479",
    "shaWithRSAEncryption": "ec4aa3cbe617bcaecffcc71e13d6255e16d41c47",
    "ssl2-md5": "b7c30cf902e74c10e3d5c3af7e854f6b",
    "ssl3-md5": "b7c30cf902e74c10e3d5c3af7e854f6b",
    "ssl3-sha1": "a771fa5c812bd0c9596d869ec99e4f4ac988b13f",
    "whirlpool": "9a9769133e866d68966e773a11e0bff3cf6c1447eeaf21a033f171ae1545c1feb092aa54df2e89a96d29f78a7436b816b94f52147bac14bb6d2ecbbbf0d18c01"
  },
  {
    "input": "AAAH//8AAAf///AB//////+AAAAABgAPf////8AAAP//AAAAH/D/////gABwAAAAP/+AD/////AAf//AAAAAAP////8Af/////4f/////gAD/////AAAAH//8AAAAAAD//8D/////8AAAP/AAAAB/+AAAA//////8AAf////AAAB////4AAAAHgH/wAAAP+AH////8AAAAP//////4AAAP//AAAAB/////wf/////+AAAAcAAB/+AAAAAB///////B/////8AAAAAB8AA/+AAAAAAAP/////gAB/4B/////h//wAAAAAf///5//////wAAA//////gAAB////+AAAAA=",
    "DSA": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "DSA-SHA": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "DSA-SHA1": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "DSA-SHA1-old": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "RSA-MD4": "1f04445c72c242626b9b38f61508ed7b",
    "RSA-MD5": "e9369a7ec98e63186bdae77025cb5519",
    "RSA-MDC2": "824ccd5cb696aae633116f460b9e38db",
    "RSA-RIPEMD160": "a3b0ecda8f15a6dd64677e975d3571ccdd563d15",
    "RSA-SHA": "5751360ddd96f2bec5749fbb96432d6668e57b09",
    "RSA-SHA1": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "RSA-SHA1-2": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "RSA-SHA224": "2623a90f5bc134c3ff0dfbf58a3e6b750fd4b202704e8be2c95e01aa",
    "RSA-SHA256": "7e4734ce7e22a515bfe60e296640dec121a089f75034240408fe7be2ed9e5c87",
    "RSA-SHA384": "09396174128d49b61ff435be0ec147dec1146cbd3b890087b8b01f24f0dfeb7c7608b035b4380dfaf1b3333d2d85a212",
    "RSA-SHA512": "8a006a0a1e2dd36ba57aa0325b2c9532db7649a4c3c6214ee0f004ecabcf1eef89a91b225ffc52a4f811791d20f6faddd900b863386da65daec18e00c48412d6",
    "dsaEncryption": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "dsaWithSHA": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "dsaWithSHA1": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "dss1": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "ecdsa-with-SHA1": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "md4": "1f04445c72c242626b9b38f61508ed7b",
    "md4WithRSAEncryption": "1f04445c72c242626b9b38f61508ed7b",
    "md5": "e9369a7ec98e63186bdae77025cb5519",
    "md5WithRSAEncryption": "e9369a7ec98e63186bdae77025cb5519",
    "mdc2": "824ccd5cb696aae633116f460b9e38db",
    "mdc2WithRSA": "824ccd5cb696aae633116f460b9e38db",
    "ripemd": "a3b0ecda8f15a6dd64677e975d3571ccdd563d15",
    "ripemd160": "a3b0ecda8f15a6dd64677e975d3571ccdd563d15",
    "ripemd160WithRSA": "a3b0ecda8f15a6dd64677e975d3571ccdd563d15",
    "rmd160": "a3b0ecda8f15a6dd64677e975d3571ccdd563d15",
    "sha": "5751360ddd96f2bec5749fbb96432d6668e57b09",
    "sha1": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "sha1WithRSAEncryption": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "sha224": "2623a90f5bc134c3ff0dfbf58a3e6b750fd4b202704e8be2c95e01aa",
    "sha224WithRSAEncryption": "2623a90f5bc134c3ff0dfbf58a3e6b750fd4b202704e8be2c95e01aa",
    "sha256": "7e4734ce7e22a515bfe60e296640dec121a089f75034240408fe7be2ed9e5c87",
    "sha256WithRSAEncryption": "7e4734ce7e22a515bfe60e296640dec121a089f75034240408fe7be2ed9e5c87",
    "sha384": "09396174128d49b61ff435be0ec147dec1146cbd3b890087b8b01f24f0dfeb7c7608b035b4380dfaf1b3333d2d85a212",
    "sha384WithRSAEncryption": "09396174128d49b61ff435be0ec147dec1146cbd3b890087b8b01f24f0dfeb7c7608b035b4380dfaf1b3333d2d85a212",
    "sha512": "8a006a0a1e2dd36ba57aa0325b2c9532db7649a4c3c6214ee0f004ecabcf1eef89a91b225ffc52a4f811791d20f6faddd900b863386da65daec18e00c48412d6",
    "sha512WithRSAEncryption": "8a006a0a1e2dd36ba57aa0325b2c9532db7649a4c3c6214ee0f004ecabcf1eef89a91b225ffc52a4f811791d20f6faddd900b863386da65daec18e00c48412d6",
    "shaWithRSAEncryption": "5751360ddd96f2bec5749fbb96432d6668e57b09",
    "ssl2-md5": "e9369a7ec98e63186bdae77025cb5519",
    "ssl3-md5": "e9369a7ec98e63186bdae77025cb5519",
    "ssl3-sha1": "e99d566212bbbceee903946f6100c9c96039a8f4",
    "whirlpool": "cdf7f5f2f9c09d598da59645bb8f938d6d510177dd257e00eee0680a5ca99264511a9e02b6b84101eca079f3c4dbde25772e3fb8b0a94668f77c126c3ef79259"
  },
  {
    "input": "///AAP///////+fgAAAAH////////AH////+AAAAAAAAf//////4AAAAAAAf///////8A/+AAAAAAAAD///////gAAAAAAAAP//ADgAAAAAAAB/gAAH//+AAAAAAAH///////gAP////8///////8AAAAAAAA///////gAAAP////////wB/////AAAABgAAAAAAA//4AAAAP///wAAAAAAB///////gAAf/////wAD////wAAAAAB/////+AAAAAAAf///////AAD////////AD///////AAAA////////+AAAAAD///wAAAAAA///wAB////////wAAA///AAAD//////8D////////8AAAAAAAB//////gAAD+AA/////AAD+AAAAAAAAH//gAAB//AAAAAAP4AP//////8AAAAAf8AAAB//AAAAAAf//////gAH///////AAAAAAAAB////+AAAAAAfAAAAfAAAAAB//////gAAB////4AAAAAAAAA==",
    "DSA": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "DSA-SHA": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "DSA-SHA1": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "DSA-SHA1-old": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "RSA-MD4": "9cdb316aa787ac067afc57a45dcb04d2",
    "RSA-MD5": "57b441e2f3397d2628657e636cd2fc80",
    "RSA-MDC2": "1a411507bf618413dc7390476e713be2",
    "RSA-RIPEMD160": "2a90379b7530d950db49614bbcfe252eca61307c",
    "RSA-SHA": "dc69cfc0efef50d0d6953ef101999dca917b9815",
    "RSA-SHA1": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "RSA-SHA1-2": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "RSA-SHA224": "7599cf5b41f1b4df0b787584e5537dedf8656f539c47ad8c3c119fac",
    "RSA-SHA256": "b09436c29cc3823c434a4689bb67a73a49164bd23ab40c4e04ed99320fd138d2",
    "RSA-SHA384": "1c0afadc2d1561b1ee7d024b203e2db3e093cf3bd7ea6c2a38c5907f7f490e8fd167e8fea3058bfa410483e1c62db710",
    "RSA-SHA512": "d0b336a283f47f0f6fb19e98df49730d802321f1ba993c760687a0469b72015d98dcf86db7b2b628ff03d690300ec827851f40e621cf6cf98a4b378d901735db",
    "dsaEncryption": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "dsaWithSHA": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "dsaWithSHA1": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "dss1": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "ecdsa-with-SHA1": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "md4": "9cdb316aa787ac067afc57a45dcb04d2",
    "md4WithRSAEncryption": "9cdb316aa787ac067afc57a45dcb04d2",
    "md5": "57b441e2f3397d2628657e636cd2fc80",
    "md5WithRSAEncryption": "57b441e2f3397d2628657e636cd2fc80",
    "mdc2": "1a411507bf618413dc7390476e713be2",
    "mdc2WithRSA": "1a411507bf618413dc7390476e713be2",
    "ripemd": "2a90379b7530d950db49614bbcfe252eca61307c",
    "ripemd160": "2a90379b7530d950db49614bbcfe252eca61307c",
    "ripemd160WithRSA": "2a90379b7530d950db49614bbcfe252eca61307c",
    "rmd160": "2a90379b7530d950db49614bbcfe252eca61307c",
    "sha": "dc69cfc0efef50d0d6953ef101999dca917b9815",
    "sha1": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "sha1WithRSAEncryption": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "sha224": "7599cf5b41f1b4df0b787584e5537dedf8656f539c47ad8c3c119fac",
    "sha224WithRSAEncryption": "7599cf5b41f1b4df0b787584e5537dedf8656f539c47ad8c3c119fac",
    "sha256": "b09436c29cc3823c434a4689bb67a73a49164bd23ab40c4e04ed99320fd138d2",
    "sha256WithRSAEncryption": "b09436c29cc3823c434a4689bb67a73a49164bd23ab40c4e04ed99320fd138d2",
    "sha384": "1c0afadc2d1561b1ee7d024b203e2db3e093cf3bd7ea6c2a38c5907f7f490e8fd167e8fea3058bfa410483e1c62db710",
    "sha384WithRSAEncryption": "1c0afadc2d1561b1ee7d024b203e2db3e093cf3bd7ea6c2a38c5907f7f490e8fd167e8fea3058bfa410483e1c62db710",
    "sha512": "d0b336a283f47f0f6fb19e98df49730d802321f1ba993c760687a0469b72015d98dcf86db7b2b628ff03d690300ec827851f40e621cf6cf98a4b378d901735db",
    "sha512WithRSAEncryption": "d0b336a283f47f0f6fb19e98df49730d802321f1ba993c760687a0469b72015d98dcf86db7b2b628ff03d690300ec827851f40e621cf6cf98a4b378d901735db",
    "shaWithRSAEncryption": "dc69cfc0efef50d0d6953ef101999dca917b9815",
    "ssl2-md5": "57b441e2f3397d2628657e636cd2fc80",
    "ssl3-md5": "57b441e2f3397d2628657e636cd2fc80",
    "ssl3-sha1": "b48ce6b1d13903e3925ae0c88cb931388c013f9c",
    "whirlpool": "a1e8a7b9946d85018867dc47f55d54e810387bfcdbe0a2744235c8db6456fb14baf48f1119fef25fc1206d9e8ddc3dd1c32c69bc4aaf1053f4c7488a7d05ac5c"
  },
  {
    "input": "AAAAAAAAAD/////4AAAAAAD////wf///+AAAAAAAAAAP8AD///+AP///////gAAAAAAAA////+AAAAAAAAAAfwAAAAAGP///////wf/gAAAAAAAAP////////8AAAAP/////gAf/////////8D/////////wAAAB////wAAAAAAAP//////8AAAAAH/+AAD///wAAAAAAAAD/wCAAH//AAAAAAA//////////4AB////////wAAAAAAAAB///AAAAAAB/AP////////8AAAAAAAH/////gAAAAAAAB///4AAAAAAAH/////////4AAAAAAD/v////////D///gAAAAAAAP/////////4AAH///////+AAAD/+AAAAAAAH/////////+AAAD///////gAAAAAAAAAH/AAAAAAAAAP//wAAAf////wD////8AAAAf/////gAP/////8P/////////AAAAAAAAB///////8AAAD//8AAAAAAH/////////gAAP/wAAP////////AAAAAAA////+AAAAAAAf//////8AAAA//////////4AAAAAf////4AAAAAAP//////////AAH///+AAAAAAAAA///n///////8D////8AAAAAAAAH/8AAAAAAAAD/8AAAAAAAAH/////8AD/////+AAAAAAA",
    "DSA": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "DSA-SHA": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "DSA-SHA1": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "DSA-SHA1-old": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "RSA-MD4": "a1236481492a6622b18ebe6d3ced1357",
    "RSA-MD5": "8ae3a1e880ffb884260ec26e8fcd71a5",
    "RSA-MDC2": "7d1307f4067bcd519a0f125a15f74aff",
    "RSA-RIPEMD160": "a6a7630848772bd089bd8448871fb227e4420035",
    "RSA-SHA": "3a776fa9f465eea5e4df129318183909feb12add",
    "RSA-SHA1": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "RSA-SHA1-2": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "RSA-SHA224": "769585a17115a116712119a2933c62bdfb881e0b7a0735e151003c24",
    "RSA-SHA256": "d6752f5e2738cbaa2e154b749216babc990297af411dfa2b66c9f942480ff4b9",
    "RSA-SHA384": "557e9592b0c5578786e1c5a66f71f023f1aeda6133104a764f8cffa19b140f2a20ba12c83532ebe99c0e219068002959",
    "RSA-SHA512": "525213a2b56a346a3e641b3f951b60df15dc35e56befc197fd7671d3fb955f27c4410f3aa07e4bf2dae05d2419e355a05cdecaf282d44471467c140610d4b495",
    "dsaEncryption": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "dsaWithSHA": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "dsaWithSHA1": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "dss1": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "ecdsa-with-SHA1": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "md4": "a1236481492a6622b18ebe6d3ced1357",
    "md4WithRSAEncryption": "a1236481492a6622b18ebe6d3ced1357",
    "md5": "8ae3a1e880ffb884260ec26e8fcd71a5",
    "md5WithRSAEncryption": "8ae3a1e880ffb884260ec26e8fcd71a5",
    "mdc2": "7d1307f4067bcd519a0f125a15f74aff",
    "mdc2WithRSA": "7d1307f4067bcd519a0f125a15f74aff",
    "ripemd": "a6a7630848772bd089bd8448871fb227e4420035",
    "ripemd160": "a6a7630848772bd089bd8448871fb227e4420035",
    "ripemd160WithRSA": "a6a7630848772bd089bd8448871fb227e4420035",
    "rmd160": "a6a7630848772bd089bd8448871fb227e4420035",
    "sha": "3a776fa9f465eea5e4df129318183909feb12add",
    "sha1": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "sha1WithRSAEncryption": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "sha224": "769585a17115a116712119a2933c62bdfb881e0b7a0735e151003c24",
    "sha224WithRSAEncryption": "769585a17115a116712119a2933c62bdfb881e0b7a0735e151003c24",
    "sha256": "d6752f5e2738cbaa2e154b749216babc990297af411dfa2b66c9f942480ff4b9",
    "sha256WithRSAEncryption": "d6752f5e2738cbaa2e154b749216babc990297af411dfa2b66c9f942480ff4b9",
    "sha384": "557e9592b0c5578786e1c5a66f71f023f1aeda6133104a764f8cffa19b140f2a20ba12c83532ebe99c0e219068002959",
    "sha384WithRSAEncryption": "557e9592b0c5578786e1c5a66f71f023f1aeda6133104a764f8cffa19b140f2a20ba12c83532ebe99c0e219068002959",
    "sha512": "525213a2b56a346a3e641b3f951b60df15dc35e56befc197fd7671d3fb955f27c4410f3aa07e4bf2dae05d2419e355a05cdecaf282d44471467c140610d4b495",
    "sha512WithRSAEncryption": "525213a2b56a346a3e641b3f951b60df15dc35e56befc197fd7671d3fb955f27c4410f3aa07e4bf2dae05d2419e355a05cdecaf282d44471467c140610d4b495",
    "shaWithRSAEncryption": "3a776fa9f465eea5e4df129318183909feb12add",
    "ssl2-md5": "8ae3a1e880ffb884260ec26e8fcd71a5",
    "ssl3-md5": "8ae3a1e880ffb884260ec26e8fcd71a5",
    "ssl3-sha1": "e647d5baf670d4bf3afc0a6b72a2424b0c64f194",
    "whirlpool": "2b9512461d9cad8a14c07ae8a12a403097871d51c4d52d02fc5a9f6ca1c1570608874c866ae41458e0f3bb5e1974d2313461451ee97b328aca65887a0abd3d23"
  },
  {
    "input": "AAAAAAAAAA8AAAAAAAAf///////AAAAAAAAAD//////AAB//////////wAAAAB///8AAAAP//////4AH///////////AAAAAAAAAAAD/////gAA//AAAAAAAAP//wAAP/////wAAAAAABgAAAAAAAAAAPAAAAAAAH//+H/////AAAAAAP////gAAAAAAD/AAAD/////////wAAAAAB///////////8AAAAAA/////wAAAAAAAAf/////AAAf////////AAAAAf////AAAAAAAAH/////w//////////4AAH/////AAAAP///////gAAAAAAAAAAB/wAAAAAAAAAA//////////wAAAAAAAAAB////+AAIAAAAAP////AAD//////wAAD//AAAAAAAAP////+AAA//////wAAAAP///+AAAAAAAAA/8AAP///////AAAAAAAB/AAAAAAAAAf/gAAAAAAAA////wAAAAAAAAD/////gAAAA/////////gAAAP//gAAAAAAAf//////wAAB///////AAA////AAAAAAAAAAH////AAAAAAAAAAAP///////AAAAAAP////+AAAAAD/wAAP/gAAAD4A/////////8AAAAAH///////////gAAAAAf/////gAAAAAD///////5/4AAAAAAAAAAH///////wf//gAAD///////AAAAAAAAAAAB////////wAAAAAAAABwAAA/gAAAAAAAAH////////8AAAAP///4AB//////4AAf///gAAAAAAAf/////wAAAAAAAAAAP///////8AAAD///////gAAf/////8AAAAAAAAH////////8=",
    "DSA": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "DSA-SHA": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "DSA-SHA1": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "DSA-SHA1-old": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "RSA-MD4": "0676c70c114e251aac52c6209a9a2999",
    "RSA-MD5": "eb7d8f9199945e8a1e5c3708da45e08b",
    "RSA-MDC2": "e10f165f6abd483ee02c56b51fc1e941",
    "RSA-RIPEMD160": "b29e66c47b15f9017cd6e5ee79e571315a70da08",
    "RSA-SHA": "30fba5748fdd390ee64ff622b906c48c1e7d1713",
    "RSA-SHA1": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "RSA-SHA1-2": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "RSA-SHA224": "036008a771af987275a004c5f2e7f6a7142f709634cd34ea3afce3f5",
    "RSA-SHA256": "0f0cc4994a2a88f58cc38afdf61ff43952473c437d235cec426139c8f43ffb5a",
    "RSA-SHA384": "a85ee3f3c6803416cc846ded8897435a3ef5dabcdfc68e937c976c097e2c11bb5b961ca6e6a231995764499a6d6fb277",
    "RSA-SHA512": "546e908100c06a32a98056236acab22e0ca59721f59271d783c8c9f64e39ba5b1de316a0433fe557f68238378cf340ab9f5ad3ebcccfc6eea518b71048eee75c",
    "dsaEncryption": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "dsaWithSHA": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "dsaWithSHA1": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "dss1": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "ecdsa-with-SHA1": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "md4": "0676c70c114e251aac52c6209a9a2999",
    "md4WithRSAEncryption": "0676c70c114e251aac52c6209a9a2999",
    "md5": "eb7d8f9199945e8a1e5c3708da45e08b",
    "md5WithRSAEncryption": "eb7d8f9199945e8a1e5c3708da45e08b",
    "mdc2": "e10f165f6abd483ee02c56b51fc1e941",
    "mdc2WithRSA": "e10f165f6abd483ee02c56b51fc1e941",
    "ripemd": "b29e66c47b15f9017cd6e5ee79e571315a70da08",
    "ripemd160": "b29e66c47b15f9017cd6e5ee79e571315a70da08",
    "ripemd160WithRSA": "b29e66c47b15f9017cd6e5ee79e571315a70da08",
    "rmd160": "b29e66c47b15f9017cd6e5ee79e571315a70da08",
    "sha": "30fba5748fdd390ee64ff622b906c48c1e7d1713",
    "sha1": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "sha1WithRSAEncryption": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "sha224": "036008a771af987275a004c5f2e7f6a7142f709634cd34ea3afce3f5",
    "sha224WithRSAEncryption": "036008a771af987275a004c5f2e7f6a7142f709634cd34ea3afce3f5",
    "sha256": "0f0cc4994a2a88f58cc38afdf61ff43952473c437d235cec426139c8f43ffb5a",
    "sha256WithRSAEncryption": "0f0cc4994a2a88f58cc38afdf61ff43952473c437d235cec426139c8f43ffb5a",
    "sha384": "a85ee3f3c6803416cc846ded8897435a3ef5dabcdfc68e937c976c097e2c11bb5b961ca6e6a231995764499a6d6fb277",
    "sha384WithRSAEncryption": "a85ee3f3c6803416cc846ded8897435a3ef5dabcdfc68e937c976c097e2c11bb5b961ca6e6a231995764499a6d6fb277",
    "sha512": "546e908100c06a32a98056236acab22e0ca59721f59271d783c8c9f64e39ba5b1de316a0433fe557f68238378cf340ab9f5ad3ebcccfc6eea518b71048eee75c",
    "sha512WithRSAEncryption": "546e908100c06a32a98056236acab22e0ca59721f59271d783c8c9f64e39ba5b1de316a0433fe557f68238378cf340ab9f5ad3ebcccfc6eea518b71048eee75c",
    "shaWithRSAEncryption": "30fba5748fdd390ee64ff622b906c48c1e7d1713",
    "ssl2-md5": "eb7d8f9199945e8a1e5c3708da45e08b",
    "ssl3-md5": "eb7d8f9199945e8a1e5c3708da45e08b",
    "ssl3-sha1": "65c1cd932a06b05cd0b43afb3bc7891f6bcef45c",
    "whirlpool": "3ea37ba95e713244051cf3cf883e30f7d4811a6d39909bfbe4a1bc94a08b532cd94b901d4e05286b5b45ed625827707e82f0b45969898d7a3e711e5cce034b9f"
  },
  {
    "input": "//4AAAAAAAAAB/////8AAAAH//AAAAAAD//+AAAAAAAAAAAAH//////////8PgAAAAAAAAAAA///////8AAAAAAAAAB////gH////////////wAAAAAAAIAAAP/wAAAAAAAAAP//////AAAA///////wAAAAB////8AAAAAAD///////////+AAAAAAAAAAB////////AAAAAAAAAAf//4AAAAEAAAAAAAAD////////wAAAAAAP/////+AAAAAAAAAAH///wAAAAAAAAAAf/////wAAAP//8AH///+AAAAAAAAAAB///4AAAAAAAAAAAAP///AAAAAAAAAH8AAAAAA/////////4AAAAA//////////gAAAAAAAAAAAP4AAAAAAAAAAQAAAAAAAH/////wAAAAAAAAAAAA//wAAAB///wAAAAAAB///////////gAAAAAH/////////gAAAAAAAAAAAP/4AAAAAAAAAAAH///////wAAAAAAAAAAAH/////AP//////////wAAAf/////4f////////4AAAAAAAAAAAAP///////gB///////////8AB///gAAAAP//////gf///////8f//gAA//////////gAAAAAAA//wAAAAAAAP////////////AAAAAAAD////wAAAAA///////v////////8P///4D//////////4AAAAAAIAAAAAf/////wAAAf/////////AAAAAAAAAB////wAAAD/+AAP/8AAAAAAAAAAAAf/////////gAEAAAAP/////////gAAAH//////////wAAAAAAAAAH//gAAA//+AAAAH4AADAAAAAB////////AAAAA////+AAAAAAABgAAAAAAAAAD///////////+AAAAAAAAACP////////////AAAAAAB/8AAB//+AAAAAAA/////////AAAAAAAAAAH//////////8AAAAAAAAeAP////////////wAAAAAAAAAP//////////w==",
    "DSA": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "DSA-SHA": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "DSA-SHA1": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "DSA-SHA1-old": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "RSA-MD4": "9f470f90fc581fa48d2cc01c5afea6eb",
    "RSA-MD5": "d7dd1997c20a1029f9bd0fd1e2d2ed92",
    "RSA-MDC2": "2c96bc851f2fc08a8f72b1df937fd924",
    "RSA-RIPEMD160": "0afdb968456c22c65179274e0324bca2f0c5e3a0",
    "RSA-SHA": "bc1902358e12259017413b274e921088ab002429",
    "RSA-SHA1": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "RSA-SHA1-2": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "RSA-SHA224": "4d5b734d6acc7e7266c4c4d674e14e703049a4c117196466b2705d60",
    "RSA-SHA256": "eb9dd875ecf9ec930b1482b8a50c337d48b31590f99cdfb80bbdd160ad4fb49b",
    "RSA-SHA384": "76a87af0ad2c96afa592fd0f6b038f4f8f776cf33b1bfe1a20b9c5e55d6405da84c999f944f89177729bc755eb786d67",
    "RSA-SHA512": "ea48c9e9245bf42c820385a6167afd3a8bb473645016ff4dba198d184ee0534bbc2d0ec07328be7b58c9a8e9d10c2379d69414ab2bfdddf99dafa8f92daf21af",
    "dsaEncryption": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "dsaWithSHA": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "dsaWithSHA1": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "dss1": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "ecdsa-with-SHA1": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "md4": "9f470f90fc581fa48d2cc01c5afea6eb",
    "md4WithRSAEncryption": "9f470f90fc581fa48d2cc01c5afea6eb",
    "md5": "d7dd1997c20a1029f9bd0fd1e2d2ed92",
    "md5WithRSAEncryption": "d7dd1997c20a1029f9bd0fd1e2d2ed92",
    "mdc2": "2c96bc851f2fc08a8f72b1df937fd924",
    "mdc2WithRSA": "2c96bc851f2fc08a8f72b1df937fd924",
    "ripemd": "0afdb968456c22c65179274e0324bca2f0c5e3a0",
    "ripemd160": "0afdb968456c22c65179274e0324bca2f0c5e3a0",
    "ripemd160WithRSA": "0afdb968456c22c65179274e0324bca2f0c5e3a0",
    "rmd160": "0afdb968456c22c65179274e0324bca2f0c5e3a0",
    "sha": "bc1902358e12259017413b274e921088ab002429",
    "sha1": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "sha1WithRSAEncryption": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "sha224": "4d5b734d6acc7e7266c4c4d674e14e703049a4c117196466b2705d60",
    "sha224WithRSAEncryption": "4d5b734d6acc7e7266c4c4d674e14e703049a4c117196466b2705d60",
    "sha256": "eb9dd875ecf9ec930b1482b8a50c337d48b31590f99cdfb80bbdd160ad4fb49b",
    "sha256WithRSAEncryption": "eb9dd875ecf9ec930b1482b8a50c337d48b31590f99cdfb80bbdd160ad4fb49b",
    "sha384": "76a87af0ad2c96afa592fd0f6b038f4f8f776cf33b1bfe1a20b9c5e55d6405da84c999f944f89177729bc755eb786d67",
    "sha384WithRSAEncryption": "76a87af0ad2c96afa592fd0f6b038f4f8f776cf33b1bfe1a20b9c5e55d6405da84c999f944f89177729bc755eb786d67",
    "sha512": "ea48c9e9245bf42c820385a6167afd3a8bb473645016ff4dba198d184ee0534bbc2d0ec07328be7b58c9a8e9d10c2379d69414ab2bfdddf99dafa8f92daf21af",
    "sha512WithRSAEncryption": "ea48c9e9245bf42c820385a6167afd3a8bb473645016ff4dba198d184ee0534bbc2d0ec07328be7b58c9a8e9d10c2379d69414ab2bfdddf99dafa8f92daf21af",
    "shaWithRSAEncryption": "bc1902358e12259017413b274e921088ab002429",
    "ssl2-md5": "d7dd1997c20a1029f9bd0fd1e2d2ed92",
    "ssl3-md5": "d7dd1997c20a1029f9bd0fd1e2d2ed92",
    "ssl3-sha1": "70ffae353a5cd0f8a65a8b2746d0f16281b25ec7",
    "whirlpool": "17ffcc71099ef4b28e00fecdc298482e3ee1d24ba16959807f57b3fe56bc556b898df011b98e191454e86fc21d55e62f28995a55bf08d498b645823efe380fd0"
  },
  {
    "input": "AAA///gAAAAAAAAAAAAAf//AA/8AAAAAAAAAf//gAAAAAAAAAAAA////////4AAAAAAAAf/+AAAAAAP///////////8AAAAAAAB////////4AAAAAAAAAA//////wAAAAAAAAAAAMAAf/////////+AAAAAAAAAAAAAD//////////AAAAAAAAf////////4AP///8AAAAAAAAAAA/////////8AAAAAAAAAAAAAH/////AAAB////////gAAAAAAAAAD///////////4AAAAAAAAP///+AAAAAAAAAAAAAB///4AAAAAA//////+AAAAAAAAH/////////gA//////////8B/////////+AAAAAAAP///////////AAAD4AAAAAAAAAAAD//////AAAAA/////AAAAAAAA///4AAAAAAAAAAAA/////////////wAAAAAA///4B////////8Af///4AAAAH/////gAAAAAAAAAAAAD///////////4AAAAAAAAAAAP///////+AAAD////////////gAAAAD//////4AAAP////8H+AAAAAAAAAAB//////4AAAAAAAAAAAH//////gAB//////////+AAAAAAAP/8AAAAAAAD/////wAAB//////8AAAAcAAAAAAAAB////wAAAAAH///wAAAAAAf//////////D/////////gAAAAAAAD////////////AAAD//+AAAAAAAAAAAAP//////wAA///gAAAAAAB//4Af///////gAAH//8AAAAAB//////8AA/////////4A//+AAAAAAAAA//////wf/////////gP///////AAAP//////4AAAAAH//////AAAAAAAAD///AD//////////AAAAAAAH///wAAAAAAA/gAAAAA////////////4AAAAP///////////AAAAAB/////+AAAAAH///8AD//gAAAAAAAAAAAAAf///4AfgAAAAAAAAAAA////+AAAAAAAAAAAAA/////4AAAAB////AAAAAAAAAB////////////4AAAAAAAAAAAAAf/////////+AAAAAAAAAH8A///gAAAAAA////////////z////////4AAAAAAAAAAP///3////////8AAAAAAAAf/////gAAD////////////+A",
    "DSA": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "DSA-SHA": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "DSA-SHA1": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "DSA-SHA1-old": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "RSA-MD4": "6ecb90bbde58b881e0d8563a4652977c",
    "RSA-MD5": "a986ef62ef378583985cf0d0a34d17d0",
    "RSA-MDC2": "04a6b56b96ffbaae2a2b6d3721831667",
    "RSA-RIPEMD160": "633b3b9afcad398dab2c70c2301ae8f6ec5f81c3",
    "RSA-SHA": "4c178ac8fe2c69ac56bd81bf7cb3efb6f978e05f",
    "RSA-SHA1": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "RSA-SHA1-2": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "RSA-SHA224": "618b2fbfd2b9d59db26008ab3108c6a584c194821495b1ee81d6165a",
    "RSA-SHA256": "ec7435c1c8e3eb1de2871cdc797bff6969b863e5b9fb005b3a7af4ff96680c63",
    "RSA-SHA384": "bcd9d31f3fb6bbb80a191a103554ab5c62774a588929dadf117c32e8361c8c9e958ae12bdcda3a2eb26bf63bcd9c3f05",
    "RSA-SHA512": "5b819d5210a41d738341328814cd091220e1fc61333d13fcaa1a0447bed04d48cce66de97573d3e724be1ab18bf0757a4a1fd0b2743fccd74b5cc6d4a7040861",
    "dsaEncryption": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "dsaWithSHA": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "dsaWithSHA1": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "dss1": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "ecdsa-with-SHA1": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "md4": "6ecb90bbde58b881e0d8563a4652977c",
    "md4WithRSAEncryption": "6ecb90bbde58b881e0d8563a4652977c",
    "md5": "a986ef62ef378583985cf0d0a34d17d0",
    "md5WithRSAEncryption": "a986ef62ef378583985cf0d0a34d17d0",
    "mdc2": "04a6b56b96ffbaae2a2b6d3721831667",
    "mdc2WithRSA": "04a6b56b96ffbaae2a2b6d3721831667",
    "ripemd": "633b3b9afcad398dab2c70c2301ae8f6ec5f81c3",
    "ripemd160": "633b3b9afcad398dab2c70c2301ae8f6ec5f81c3",
    "ripemd160WithRSA": "633b3b9afcad398dab2c70c2301ae8f6ec5f81c3",
    "rmd160": "633b3b9afcad398dab2c70c2301ae8f6ec5f81c3",
    "sha": "4c178ac8fe2c69ac56bd81bf7cb3efb6f978e05f",
    "sha1": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "sha1WithRSAEncryption": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "sha224": "618b2fbfd2b9d59db26008ab3108c6a584c194821495b1ee81d6165a",
    "sha224WithRSAEncryption": "618b2fbfd2b9d59db26008ab3108c6a584c194821495b1ee81d6165a",
    "sha256": "ec7435c1c8e3eb1de2871cdc797bff6969b863e5b9fb005b3a7af4ff96680c63",
    "sha256WithRSAEncryption": "ec7435c1c8e3eb1de2871cdc797bff6969b863e5b9fb005b3a7af4ff96680c63",
    "sha384": "bcd9d31f3fb6bbb80a191a103554ab5c62774a588929dadf117c32e8361c8c9e958ae12bdcda3a2eb26bf63bcd9c3f05",
    "sha384WithRSAEncryption": "bcd9d31f3fb6bbb80a191a103554ab5c62774a588929dadf117c32e8361c8c9e958ae12bdcda3a2eb26bf63bcd9c3f05",
    "sha512": "5b819d5210a41d738341328814cd091220e1fc61333d13fcaa1a0447bed04d48cce66de97573d3e724be1ab18bf0757a4a1fd0b2743fccd74b5cc6d4a7040861",
    "sha512WithRSAEncryption": "5b819d5210a41d738341328814cd091220e1fc61333d13fcaa1a0447bed04d48cce66de97573d3e724be1ab18bf0757a4a1fd0b2743fccd74b5cc6d4a7040861",
    "shaWithRSAEncryption": "4c178ac8fe2c69ac56bd81bf7cb3efb6f978e05f",
    "ssl2-md5": "a986ef62ef378583985cf0d0a34d17d0",
    "ssl3-md5": "a986ef62ef378583985cf0d0a34d17d0",
    "ssl3-sha1": "cc8221f2b829b8cf39646bf46888317c3eb378ea",
    "whirlpool": "9897356499427e3cb27e436c1c36239f7332db9fc112b66b1b956bbddef6d5d6cf68db7d5f2cc70b4656a7668e51337e517a3e87a287e763e63b6a4e45b3b84b"
  },
  {
    "input": "//////////AAAAAAAAAAA///////////A4A////////////gAfwAAAAAA///////////8AAD///////////4AAAAAAAAAAAf//////////AAAAAAAAH/+AAf///8AAAAAAAA/4AAAAAAAAAAAAAA/////////////4AAAAAAAB///4AAD//////wAAAAAH//gAAAAAAAAAAAAP/wAAAAA//////gAAAAAAAAAAAB/////////////4Af/////////wH/////////////AAAAAAAAf//////////wAAAD///////gAAAAAAAAAAAAB////////gAAAAAAAAAAAAD//////////gAAAAAAD///////////gAAAAP////4AAAAAAAAAAAAf///////8Af/////////AAAAAD////////gAAAAAAAAf////+AAAAAAAAAAAAAD/wAAAAB////////wAAAAAAAAAAAAAD/////////////gAAAAAAAAAAAAB///////////wAAP8AAAP//////////AAAf/////////////4AAAAAAAAAB/////////4AAAAA//////gAA/////8H////wAAAAAAAAAAAAAf//////gAAAAAAAAAAAB////////gAAAAAAAAf//////////gAAAAAD/v/////wAAAAAAH//wAAAAAAAAAAfgAAAAA/////////wAAAAAAAAAAAP///////////gAAAAAAAAAAAAA//////////////8AIB//////////////wAAA/AAAH////////////4AAAD//////////////4AAAAAAD//////////AAAAAAD////////+AAAAAAAAAAAAAA/////gAAAAAAAAAAAAAA////////////wAAAAAAAAAB///////4AAAAf///gAAAH////8AAH8A////4AAD/8AAAAAAAAAAAAAB//8AAA////4AAAAAAAAAAAAP/P////////wAAAAAAAAAAAAD//4AAAAAAAAf///////////4AAAAAAAAAAAAf//////////8AAAAAAAAAAAAD/4AAB/////////////h////8AAAD/////////////+AAAAAAAAAAAAP//wAAAAAB///8AAAAAAAAAAAP/////////////gAAAA/////////4AAAAAAAAAAD///////////8AAAAAAAAAAAP////+H//AAAAAAAD//////8///////////4AD////////4AAAAA///////////4AAAAAAAAAAf////8AAAAAAAAAAP/8AAAAAAP//////////+AAAAAAAAAD////////////8AAAAAAAAA=",
    "DSA": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "DSA-SHA": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "DSA-SHA1": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "DSA-SHA1-old": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "RSA-MD4": "186ba08380218e9ef2b308554bbe7c14",
    "RSA-MD5": "ad5bef0d6ad3434f871983ed09aaa43c",
    "RSA-MDC2": "45c2f961e2947b48e54a4bcf99a63135",
    "RSA-RIPEMD160": "56344a47517ad21fa46d0e4a2122a09882482d0f",
    "RSA-SHA": "baaabd3b735f68f1d870f08e4bb8b4a3648beea3",
    "RSA-SHA1": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "RSA-SHA1-2": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "RSA-SHA224": "5f9aa4bade340615d52d74394a05f6667a3a40e930e3103021d2d3f7",
    "RSA-SHA256": "e5afd502015d80bb43ab7f92f138b35ce5fafa980c5fba78412ffcfa281f9d8d",
    "RSA-SHA384": "9864444f578208835858904203ce122ca1306e570a663576385ba77fb03c6c27d40790c4322f73df6c7fb876d92e82b4",
    "RSA-SHA512": "c84d01e7de9caed0887563a40277c89b1c5544d821f3dfb42de262333465a5ab2d11012ace1c7eaf33cdd3a7cdd6710e7c7c645683495c71a0d1588af536b245",
    "dsaEncryption": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "dsaWithSHA": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "dsaWithSHA1": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "dss1": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "ecdsa-with-SHA1": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "md4": "186ba08380218e9ef2b308554bbe7c14",
    "md4WithRSAEncryption": "186ba08380218e9ef2b308554bbe7c14",
    "md5": "ad5bef0d6ad3434f871983ed09aaa43c",
    "md5WithRSAEncryption": "ad5bef0d6ad3434f871983ed09aaa43c",
    "mdc2": "45c2f961e2947b48e54a4bcf99a63135",
    "mdc2WithRSA": "45c2f961e2947b48e54a4bcf99a63135",
    "ripemd": "56344a47517ad21fa46d0e4a2122a09882482d0f",
    "ripemd160": "56344a47517ad21fa46d0e4a2122a09882482d0f",
    "ripemd160WithRSA": "56344a47517ad21fa46d0e4a2122a09882482d0f",
    "rmd160": "56344a47517ad21fa46d0e4a2122a09882482d0f",
    "sha": "baaabd3b735f68f1d870f08e4bb8b4a3648beea3",
    "sha1": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "sha1WithRSAEncryption": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "sha224": "5f9aa4bade340615d52d74394a05f6667a3a40e930e3103021d2d3f7",
    "sha224WithRSAEncryption": "5f9aa4bade340615d52d74394a05f6667a3a40e930e3103021d2d3f7",
    "sha256": "e5afd502015d80bb43ab7f92f138b35ce5fafa980c5fba78412ffcfa281f9d8d",
    "sha256WithRSAEncryption": "e5afd502015d80bb43ab7f92f138b35ce5fafa980c5fba78412ffcfa281f9d8d",
    "sha384": "9864444f578208835858904203ce122ca1306e570a663576385ba77fb03c6c27d40790c4322f73df6c7fb876d92e82b4",
    "sha384WithRSAEncryption": "9864444f578208835858904203ce122ca1306e570a663576385ba77fb03c6c27d40790c4322f73df6c7fb876d92e82b4",
    "sha512": "c84d01e7de9caed0887563a40277c89b1c5544d821f3dfb42de262333465a5ab2d11012ace1c7eaf33cdd3a7cdd6710e7c7c645683495c71a0d1588af536b245",
    "sha512WithRSAEncryption": "c84d01e7de9caed0887563a40277c89b1c5544d821f3dfb42de262333465a5ab2d11012ace1c7eaf33cdd3a7cdd6710e7c7c645683495c71a0d1588af536b245",
    "shaWithRSAEncryption": "baaabd3b735f68f1d870f08e4bb8b4a3648beea3",
    "ssl2-md5": "ad5bef0d6ad3434f871983ed09aaa43c",
    "ssl3-md5": "ad5bef0d6ad3434f871983ed09aaa43c",
    "ssl3-sha1": "26accc2d6d51ff7bf3e5895588907765111bb69b",
    "whirlpool": "1c5736898a3d2e2f776b4abd11a5cd37faac3b69024dcbc7d89bc395bd22bbc3bfe43d7720a9c80292e1693a15675c10b22b519a97f716d8ec6e534fd1424d03"
  },
  {
    "input": "///////////wAAAAAAH///////////////wAAAAAAAAf/////4AAAAAAAAAf////////wAAAA///wAA///////////gAAAAAAAf//AAAAAAAAAAAAAAP////8AAAAAAA///////////wAAAAAAAAAAH////gAB//gAAAAAAAAAAAAP///4AA////////////AAAAAAAAAAAf///////4AAAAAAAAAAAAB//+AAAAB/4AAAAAAAAAAAAgAAAAAAAAAf//////8AAAAAAAAAAAAAAf////////////gAAAB///////////////8AAAAAAAB//////////wAAAAAAAAAAA/////////+AAAAfgAAAAAAAD///////////+AAAAAAAAAB//////////8AAD////AP/////////////+D/////////wAAAAH///8AAAAAAAAAf/////+AAAAAAAH////////////4AAAAAAAAA/////8AAAAAAAAAAAAD/////////+AAAAAB//////////+AAAAAAAAAP/////8AAAAAAAAAAAAA///8AAAAA///////////wAAAAAAAAAAAf////gAAAAAAAAAAAH/////8AAAAAAAAAAAAAf//////////gAAAAAAAAAAAA///////////AAAAAAAAAYAAAAAAAA////AAAAAAAAAAAAAAAH/////////8AAAAAAP//////////8AAAAAAAf/////////wAP/////////+AAAB//////////////8AAAAAAAAAH////////gAAAAAAAAAAAf//////wAAD///AAAAAAAAAAAH/////4AAAAAAf/////////////+AAAAAAAH/AAAAAAAAAAP////////4AAAAAAAAAAAAP/////////////wAAD//8D////////////4AA////////8AAAAAAf///////////8f///4f/////////////wAAf/////////4AAAAP/gAAAAAAAAAAAAAAH///////gAAAAAAAAB////8AAAAAAAAAH////gAAAAAAf////////////4AAAAAAAAAAAP///////////////z///////+AAAAAAAAAAAAAA//////gAAAAAAAAADwAAAAAAAAAH/+f////////AAAAAAAAAAAAAAH///8AAAAAAAAAAAAAA/AAAAAAAAAAAAH////////////gAAAAAAAAAAAAAAD//////4AAAAAA///////////////4AAAAAAAAAAAAAAB//////+AAAAAAAAAf//////AAAAAAAAAAH///+AAAAH//4AAAAAAAAAAAAP/gAAAAAAAH////////////4AAAAAAAAAAAACAB/+AAAAAAAAAAAAAAA////+AA/////////8H////////+AAAAAAAAAAAAAAAf//////////gAAAAAAAAA8AAAAAAf///////AAAAAAAAAAAAAAAB8H/////////+AAAAAP/4AAAAAAAAAAAAB////w==",
    "DSA": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "DSA-SHA": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "DSA-SHA1": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "DSA-SHA1-old": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "RSA-MD4": "f66f4f84a9ced1f2d4febd1ce239c816",
    "RSA-MD5": "326f662a5c18a14d26c3d35131ea4b4e",
    "RSA-MDC2": "ab582354a247e089782e106d748d4806",
    "RSA-RIPEMD160": "8a4f9e3e3beba7eb9933c0df594e03fdacf7c036",
    "RSA-SHA": "cb676e93d91e9143aa610d4121f0fe6eb4c22488",
    "RSA-SHA1": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "RSA-SHA1-2": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "RSA-SHA224": "8a4b2dc13dfe760185ba69ab06645c6919b8d934d636d72a04440147",
    "RSA-SHA256": "14e7975021e84497b4daf367f6861c79820308883c4e1254c038a7458a3f2913",
    "RSA-SHA384": "50b57f134351a3697aec638940d2d276c288099e0e83c7b0fad435362cc68ba67436d33c2cf20be4937d7faf48ad9be3",
    "RSA-SHA512": "2d1cb26c944b0560e923417441191c87afbb204702c132e100973cf555fc532a6531bbd4addaeeaff13afa629fd30126643985eec68423bf74a643a592c11565",
    "dsaEncryption": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "dsaWithSHA": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "dsaWithSHA1": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "dss1": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "ecdsa-with-SHA1": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "md4": "f66f4f84a9ced1f2d4febd1ce239c816",
    "md4WithRSAEncryption": "f66f4f84a9ced1f2d4febd1ce239c816",
    "md5": "326f662a5c18a14d26c3d35131ea4b4e",
    "md5WithRSAEncryption": "326f662a5c18a14d26c3d35131ea4b4e",
    "mdc2": "ab582354a247e089782e106d748d4806",
    "mdc2WithRSA": "ab582354a247e089782e106d748d4806",
    "ripemd": "8a4f9e3e3beba7eb9933c0df594e03fdacf7c036",
    "ripemd160": "8a4f9e3e3beba7eb9933c0df594e03fdacf7c036",
    "ripemd160WithRSA": "8a4f9e3e3beba7eb9933c0df594e03fdacf7c036",
    "rmd160": "8a4f9e3e3beba7eb9933c0df594e03fdacf7c036",
    "sha": "cb676e93d91e9143aa610d4121f0fe6eb4c22488",
    "sha1": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "sha1WithRSAEncryption": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "sha224": "8a4b2dc13dfe760185ba69ab06645c6919b8d934d636d72a04440147",
    "sha224WithRSAEncryption": "8a4b2dc13dfe760185ba69ab06645c6919b8d934d636d72a04440147",
    "sha256": "14e7975021e84497b4daf367f6861c79820308883c4e1254c038a7458a3f2913",
    "sha256WithRSAEncryption": "14e7975021e84497b4daf367f6861c79820308883c4e1254c038a7458a3f2913",
    "sha384": "50b57f134351a3697aec638940d2d276c288099e0e83c7b0fad435362cc68ba67436d33c2cf20be4937d7faf48ad9be3",
    "sha384WithRSAEncryption": "50b57f134351a3697aec638940d2d276c288099e0e83c7b0fad435362cc68ba67436d33c2cf20be4937d7faf48ad9be3",
    "sha512": "2d1cb26c944b0560e923417441191c87afbb204702c132e100973cf555fc532a6531bbd4addaeeaff13afa629fd30126643985eec68423bf74a643a592c11565",
    "sha512WithRSAEncryption": "2d1cb26c944b0560e923417441191c87afbb204702c132e100973cf555fc532a6531bbd4addaeeaff13afa629fd30126643985eec68423bf74a643a592c11565",
    "shaWithRSAEncryption": "cb676e93d91e9143aa610d4121f0fe6eb4c22488",
    "ssl2-md5": "326f662a5c18a14d26c3d35131ea4b4e",
    "ssl3-md5": "326f662a5c18a14d26c3d35131ea4b4e",
    "ssl3-sha1": "01072915b8e868d9b28e759cf2bc1aea4bb92165",
    "whirlpool": "28f60df89966e84403fc099550f22c39b2377bf36583f5f63a1bbbdd5909849725d750ca02cf15276f4a0f71fb05583f1bd8546d2352df478451a24838cbcc62"
  },
  {
    "input": "/////+AAAAH/wH//+A//+OAAAAB//////////////8AB//////////8AAAAAAAAA///////////AAAAAAAAAAH///gAAAAAAAAAAAAB//4AAAAD////////+AAAAAAAAAf////////////AAAAAAAAAAAAAAAf//////////////wAAAAAAAAAAAf////////////////AAf+AAAAAAAAAAAAAA////////////////+AAAAAAAAAAAAAAAD//4AAAAAAAAAAAAAAAA////////////////wAAAAAAAAAAAAAAH/////AAP//8AAAAAAAD/////Af/////////+AAAAD//////AAAAAB////D///////////////4AAAP/////f/////////////wAAAAAAAAAAAAB///8AAAAB///////////////+AAAAAAAAAAAD/////////////8AAAAAAAA//4AAAAAAAAAAAAD///////4AAAD////////gAAAAAAD/////4AAAAAAAAAAH//8AAAAAAAAAB/////////+AP////4AAAAAAAAAAAAAAA//////////8AAAAAAAAAAAP////wAAAAAAP/////////////8AAAAAAAAEAAAAAAAAAAAH///////gAAAAAAf//+AAAAAAf///////////////gB////////////////wAAAAA////////////8AAAA/////////gAAAAAAAAAAAP/////////+AAAAAAAAAAP///////////////4AAAP//////////////8AAAAAAAAAAAAAf/////////+AAAAAAAEAAAAD////+AAAAAD//////////////AAAAAAAAAAAAAAAf/////////////+AAAAAAAAAAH//////////////AAD/////+AAAAAAAAAAAP/////////////wAAAAAAAAAAAAAAA//////////AAAAAAAAAAAAAAAADgAAAAAAA////////8A///////////+AAAAAAAAAAAAAAP////////+AAAAD////////////wAAAAAAH//4AAAAAAA///////8AAf//////////AA///////wAAAAAAP//////////wAAAAAAAAAP/+AAAAAAAAAAAf//wAAAAAAAAA//////4AAAAAAAAAB////////////4A///////////////wAAAAAAAAAAAAAAAAf////////8AAAAA8AAAAAP/+AAAAAAD//////////AAAAAP//////////////gAAAAAAAAAAA///////gAAAAA/////gAAAAAA///4AAP/////////////AAAAAH///////////////4AAAA//////////wAAAAf////////////+AAAAAAAAAP///////AAAAAAAAAAP/+AAAB////////////////wAAAAAH/////////////wAAAAAA////////8AAAAAAAP////////8AAAAAAAAAAAAA////////////////x///////////////AAAAAAAAAAAAPwAAAB/AAAAAAAAAD///////////////wA//////+AAAAAAAAAAAAA////////////////gAAAAAAAAAAAAAf////////////AAAAAAAAAAAAP///8AAAAAAAAAAAAAAAAf/////",
    "DSA": "3016115711d74236adf0c371e47992f87a428598",
    "DSA-SHA": "3016115711d74236adf0c371e47992f87a428598",
    "DSA-SHA1": "3016115711d74236adf0c371e47992f87a428598",
    "DSA-SHA1-old": "3016115711d74236adf0c371e47992f87a428598",
    "RSA-MD4": "6e59773936f6ed4d2521df5e5820af99",
    "RSA-MD5": "ea4bf919aebf4add0024d91ee6f640d0",
    "RSA-MDC2": "cc0675741035972e9408f0c8014d4698",
    "RSA-RIPEMD160": "49bfa2fd9617bf2f07863be95c2a94acc79714a3",
    "RSA-SHA": "050f17b5616fa86a20be65244fbce0f93f705543",
    "RSA-SHA1": "3016115711d74236adf0c371e47992f87a428598",
    "RSA-SHA1-2": "3016115711d74236adf0c371e47992f87a428598",
    "RSA-SHA224": "2d9e5e1f6a6b788c32cf2b05300e1656b89ea77364dc584734b2a1ed",
    "RSA-SHA256": "bcefd79629a6d7a8afbf0c8ccfc2c5889f627989e71c3a212d900e3015e460fa",
    "RSA-SHA384": "6b6963c749d0c8ebd14884e2626edc056e5fe9f299211a7c1034338db1de9842c28842cf55f736f849bbe65275112353",
    "RSA-SHA512": "7122401afdd5b9c033e721b0c6f321742ced26b680d80f55f1dfc6d0916e9fd96fab18752fa60a4f20b570ed8ede6688f151fd9bc18828ac99cb7afed54c787d",
    "dsaEncryption": "3016115711d74236adf0c371e47992f87a428598",
    "dsaWithSHA": "3016115711d74236adf0c371e47992f87a428598",
    "dsaWithSHA1": "3016115711d74236adf0c371e47992f87a428598",
    "dss1": "3016115711d74236adf0c371e47992f87a428598",
    "ecdsa-with-SHA1": "3016115711d74236adf0c371e47992f87a428598",
    "md4": "6e59773936f6ed4d2521df5e5820af99",
    "md4WithRSAEncryption": "6e59773936f6ed4d2521df5e5820af99",
    "md5": "ea4bf919aebf4add0024d91ee6f640d0",
    "md5WithRSAEncryption": "ea4bf919aebf4add0024d91ee6f640d0",
    "mdc2": "cc0675741035972e9408f0c8014d4698",
    "mdc2WithRSA": "cc0675741035972e9408f0c8014d4698",
    "ripemd": "49bfa2fd9617bf2f07863be95c2a94acc79714a3",
    "ripemd160": "49bfa2fd9617bf2f07863be95c2a94acc79714a3",
    "ripemd160WithRSA": "49bfa2fd9617bf2f07863be95c2a94acc79714a3",
    "rmd160": "49bfa2fd9617bf2f07863be95c2a94acc79714a3",
    "sha": "050f17b5616fa86a20be65244fbce0f93f705543",
    "sha1": "3016115711d74236adf0c371e47992f87a428598",
    "sha1WithRSAEncryption": "3016115711d74236adf0c371e47992f87a428598",
    "sha224": "2d9e5e1f6a6b788c32cf2b05300e1656b89ea77364dc584734b2a1ed",
    "sha224WithRSAEncryption": "2d9e5e1f6a6b788c32cf2b05300e1656b89ea77364dc584734b2a1ed",
    "sha256": "bcefd79629a6d7a8afbf0c8ccfc2c5889f627989e71c3a212d900e3015e460fa",
    "sha256WithRSAEncryption": "bcefd79629a6d7a8afbf0c8ccfc2c5889f627989e71c3a212d900e3015e460fa",
    "sha384": "6b6963c749d0c8ebd14884e2626edc056e5fe9f299211a7c1034338db1de9842c28842cf55f736f849bbe65275112353",
    "sha384WithRSAEncryption": "6b6963c749d0c8ebd14884e2626edc056e5fe9f299211a7c1034338db1de9842c28842cf55f736f849bbe65275112353",
    "sha512": "7122401afdd5b9c033e721b0c6f321742ced26b680d80f55f1dfc6d0916e9fd96fab18752fa60a4f20b570ed8ede6688f151fd9bc18828ac99cb7afed54c787d",
    "sha512WithRSAEncryption": "7122401afdd5b9c033e721b0c6f321742ced26b680d80f55f1dfc6d0916e9fd96fab18752fa60a4f20b570ed8ede6688f151fd9bc18828ac99cb7afed54c787d",
    "shaWithRSAEncryption": "050f17b5616fa86a20be65244fbce0f93f705543",
    "ssl2-md5": "ea4bf919aebf4add0024d91ee6f640d0",
    "ssl3-md5": "ea4bf919aebf4add0024d91ee6f640d0",
    "ssl3-sha1": "3016115711d74236adf0c371e47992f87a428598",
    "whirlpool": "99b23099d11571e575c7f47638986d0526f7e99f13aef9903da6588ca018fcf736f1d46af8ad1dbf92ee824ffdcaa72e8fd884645f9d934d89c107611fce958a"
  },
  {
    "input": "////wAAAAAAAAAAAAAAAAf//AAAAAAAAAAAAAAAf//////8AAAAAAAAAAAAAAAB/////////////gAAAAAAAAA/////////////////AAAAA///////////w//////////////gDwAAAAAB//4AAH/////////////8AAAAAAAAAAAP/gAAAAAAAAAAAAAD//////////AAAAAAAAAAAA/////////////AAAAAAOAAAAAAD////////4AAAAAAAAAAAAAf////////////+AAAAAD//8AB///////////////4AAAAAAAAAAf///////+AAAAAAP////////////gAAAAAAAAA////wB//////////8AAAAAAAP//////////AAAAAAAAAAAAAAAAP////8AAAAH/////////////+AAAAAAAAAAAAA//8AAAAAAAAAAf////////gAAAAAAAAAAAB/////////gAAAAAAAAAAAAAAAH//gAAAAAAAAAAAAAAAH////////////4AAAf///////////gAAAAD////////////////+AAAAAAAAAAAAAAAAAf///////+AAAAAAAAAAAAAB/+AAAAAAAAAAD//gAAAAAAAAAAAAAP////////////////gAAAAAAAAAAAAAAAP/////////////wAAAAH////////AAAAP////////////////AAAAAAAAAAAAAAAAD//////AAAAAAAAAAAAAP/5////////////+A////AAAAAAAP/////////////wAAAAAAAAAAAAAAAAH////Af///+AAH/////AAAAAAAAAAAAAAAAH///8AAAAAAAAAAAAAAAAB////////+AAf//////gAAAAAAAAAH//////////////AAAAAAAAAAAAAAAP///+AAAH//////4P////////AAAAAAAAAAAAAAAAD/////////////8AAAAAAAAAAAB///////////+AAAAAAAAAAP///wAAAAAAAP////////8AAAAAAAAP///g//+AAAAAAAAAAAAH////9///////////////8AAAAAAAAAP//////4AAAAAAAAAH///////+AAAAAAAAAAf////gAAA/////+AAAAAAAAAAAAA///wAAAAAcAAAAAAAAAAAD/////AAAAAAAH////////AAAAAAAAAAAAAAH//////wAAAAAAAAAAAAAP///+AAAAAAAAAAAAA////////////+AAAAAAAAAAAH////////////////4AA/////////AAH////////////////gH////////gAAAAAAAAAAD/////////////////j////8AAAAAAAAAAAAAD//////8AAAAAAAAAAAAAAAf//////////gAAAAAAAAAAAAAA///////////4AAAAAAAAAAAB///+AAAAAP//////wAAAAAAAAAAAAAAAHgAAAAAH////////////////AAAAAAAAAAAAAAAAAD/+AAAAAAAAAAAAAAAPwAAAAAAAAAAAAAAAAA////////////wAAAAAAAAAAAAAAAA/////////AAAAAAAH///AAAAAAAAAB/////////gAAAAAP+AAAAAAAAf////4AAAAAAAAAAAA/////////////gAAAAP////////////gD/////////+/wAAAAAAAAAAD8AAAAAAAAAD/////////////gP////////////////AAAAAAAAAAAAAAAAH/+AAAAAAAAAA////////AAAAf///////////wAAAD///////////wAAAAAAAAAAAP///////////////AAAAAA=",
    "DSA": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "DSA-SHA": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "DSA-SHA1": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "DSA-SHA1-old": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "RSA-MD4": "8b7bd763f7980fd430532ab2a5d50707",
    "RSA-MD5": "9cc49e156084d2c757bd6d502bae8309",
    "RSA-MDC2": "d9c43ac3b915b21078db14eef969f00f",
    "RSA-RIPEMD160": "e0d1b5b74ae15a0d9fc58235fbbba2ff51e94ca0",
    "RSA-SHA": "7ecb5f079615c156e602f2f05e8c104206d305fa",
    "RSA-SHA1": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "RSA-SHA1-2": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "RSA-SHA224": "6a4ab46af2b9fe5a8259df41a1448c9b093b837da7aceb968922bfde",
    "RSA-SHA256": "74661206cb19ec00619e1fcdcae443486adfa69a564672c9ee9f48f8ea35d5b2",
    "RSA-SHA384": "41365242333e728f87a9c7426509e78ef096d2d742a2021a7fc0393008f6180af62011cb169662b7d52d5137284eb51c",
    "RSA-SHA512": "9875b0bad0a3a1d841e6294559109d5717742a6566717a6f04ee18a34fa66100143695db036a2e1ef22f370487c6c23b6386c0f1eba1e1d1c348564dfffa7598",
    "dsaEncryption": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "dsaWithSHA": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "dsaWithSHA1": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "dss1": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "ecdsa-with-SHA1": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "md4": "8b7bd763f7980fd430532ab2a5d50707",
    "md4WithRSAEncryption": "8b7bd763f7980fd430532ab2a5d50707",
    "md5": "9cc49e156084d2c757bd6d502bae8309",
    "md5WithRSAEncryption": "9cc49e156084d2c757bd6d502bae8309",
    "mdc2": "d9c43ac3b915b21078db14eef969f00f",
    "mdc2WithRSA": "d9c43ac3b915b21078db14eef969f00f",
    "ripemd": "e0d1b5b74ae15a0d9fc58235fbbba2ff51e94ca0",
    "ripemd160": "e0d1b5b74ae15a0d9fc58235fbbba2ff51e94ca0",
    "ripemd160WithRSA": "e0d1b5b74ae15a0d9fc58235fbbba2ff51e94ca0",
    "rmd160": "e0d1b5b74ae15a0d9fc58235fbbba2ff51e94ca0",
    "sha": "7ecb5f079615c156e602f2f05e8c104206d305fa",
    "sha1": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "sha1WithRSAEncryption": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "sha224": "6a4ab46af2b9fe5a8259df41a1448c9b093b837da7aceb968922bfde",
    "sha224WithRSAEncryption": "6a4ab46af2b9fe5a8259df41a1448c9b093b837da7aceb968922bfde",
    "sha256": "74661206cb19ec00619e1fcdcae443486adfa69a564672c9ee9f48f8ea35d5b2",
    "sha256WithRSAEncryption": "74661206cb19ec00619e1fcdcae443486adfa69a564672c9ee9f48f8ea35d5b2",
    "sha384": "41365242333e728f87a9c7426509e78ef096d2d742a2021a7fc0393008f6180af62011cb169662b7d52d5137284eb51c",
    "sha384WithRSAEncryption": "41365242333e728f87a9c7426509e78ef096d2d742a2021a7fc0393008f6180af62011cb169662b7d52d5137284eb51c",
    "sha512": "9875b0bad0a3a1d841e6294559109d5717742a6566717a6f04ee18a34fa66100143695db036a2e1ef22f370487c6c23b6386c0f1eba1e1d1c348564dfffa7598",
    "sha512WithRSAEncryption": "9875b0bad0a3a1d841e6294559109d5717742a6566717a6f04ee18a34fa66100143695db036a2e1ef22f370487c6c23b6386c0f1eba1e1d1c348564dfffa7598",
    "shaWithRSAEncryption": "7ecb5f079615c156e602f2f05e8c104206d305fa",
    "ssl2-md5": "9cc49e156084d2c757bd6d502bae8309",
    "ssl3-md5": "9cc49e156084d2c757bd6d502bae8309",
    "ssl3-sha1": "bf30417999c1368f008c1f19feca4d18a5e1c3c9",
    "whirlpool": "a6124c1d99eadcbadf10c592ee0342c59a6d7b895e3dd4e422bb12901d2aa02951736a58fb42505bde547a0dd60de3ed53ff73aa5fe2a5bf0b120cab9ae02984"
  },
  {
    "input": "AB////////////////gAAAAAAAAAAAAAAAAAH//////////////gAAAAA//////////////////wAAAAAf/////////+AAAAAAAA//////////////8AAAAAAAAAAAAAAAf///+AAAAAAAAAAAAAA/AAAAAAAAAAAAA//////////+AAAAAAAAAAAAAAB////////4AAAH///////////////8AAAAAAAAf/////8AAAAAAAAf/////////AAABH///////8AAAAAf/AAAAAAAAAAAAA////4AAAAAP////////4AAAAAAAAAAfAAAAAAAAAAAAAAAAA8AAAAAAAAAAAP///4AAAAAAAAB/////////4AAAAAB//////////+AD////+AAAAAAAAAAAAAAAB//////////+AAAAAAAAAAAAAAAAAf/////////AAAAAAB//////////////gAAAAAAAAB////8AAAAAAAAAAAAB//////8AAAAAAP///////////wAAAAAAAB/+AAAAAAAAAAAAAAAf////+AAAAAAAAH//////+AAAAAAAAAAAP////////////////8AAAf///////////////wAAAAAAAAAAAAAAf///////////////gAAAAAAAf//8P/////////4AAAAAAf///+AAAAAAAAAAA/////8AAAH/////////////8AAAAAAA///8AAAAAAAAAA////////8AAAAAf/////////////gAAA/////AAAAAAAAAAAAf///////////4f////////////wAP////////////+AAAAAAAD/////////////AAAAAAAAB///////8AAAAAAAAAAAAAAH//////gAAP////////////8AAAAAAAAAA/////8AAAAAAAAAB////8AAAAAAH///////////////wAAAAAAEAAAAAAAAAAAP/////////+AAAAAAAAA////////+AAB///AAf///////gB///AAAAAAAAAAAAAAB////////D////////wAAAAAAAAf////////4AAAAAAAAAAAAf+Af////////////////4AAAAAAAAAAAAP/+AAAAH/////+AAAAAAAAAAAAP/////////////////4//////////////gAAAAAAAAAAAAAAf4AAAAAAf4AAAAAAAAAAAAAAA///////////////AAAAAAAf/////8AA//////////AAB/////+AAAAAAAAAAAAB/////////gAAAAAAAAAAAAAAAAD/////////////AAAAAB////////////wAAAAAP/////////AAAAAAAAAAAAAD////////AAAAAAAAAAAAAAAAD////////////////AAAAAAAH///////////+AA///////////AAAAAAAAAAAAAAAB///////////+AAAAAAAAAAAD///////////////4AAAAAf/4AAAAAAAAAAAAAAAB///////////+AAAAAP/////8AAAAAB////////4H/+AAAAAAAAAAAAAAAAAD/////////4////+AAAAAAAAAA///////////gAAAAAAAAAAAAAAAH//////////////+D///////////////gAA////////////////wAAAAAP/////////////+AAAAAAD////////////gAAAAAAAAAAA/////////4AAAAAAAAAAAAAAf//AAAAf//////////////wAAAAAAAAAAAAAOAAAAAAAAAH//+AAAAAAAAAAAAAAAf//////////8AAAAAAAAf///////4AAAAAH////8AA////gAAf////gAAQAAAAAAf////////////////4AAAAH/////////////gAAAAAAAAA//////////////4AAAAAAAAAAAf////+AAAAAAAAAAAAAAAB////4AAAAAAAP/////////8AAAAAAAAAAAAAf////////////////wAAAAAAAA==",
    "DSA": "62ba49087185f2742c26e1c1f4844112178bf673",
    "DSA-SHA": "62ba49087185f2742c26e1c1f4844112178bf673",
    "DSA-SHA1": "62ba49087185f2742c26e1c1f4844112178bf673",
    "DSA-SHA1-old": "62ba49087185f2742c26e1c1f4844112178bf673",
    "RSA-MD4": "cd5d1cf8469ba52621ba4052e7f483f0",
    "RSA-MD5": "9c18d4c75cc02337c277532ecea4b9fa",
    "RSA-MDC2": "bc3bdc0b53caaa42dd38ebeba670f8f1",
    "RSA-RIPEMD160": "539a5bced487507bdcdb2b1dee44b0306ee16813",
    "RSA-SHA": "823202f9d7d999256a346fcf29c5ea4111310ec4",
    "RSA-SHA1": "62ba49087185f2742c26e1c1f4844112178bf673",
    "RSA-SHA1-2": "62ba49087185f2742c26e1c1f4844112178bf673",
    "RSA-SHA224": "1889664dcf226dbb7d75965f0cde9487586956119d368c18ca3a4e14",
    "RSA-SHA256": "341bf4dff841088f3b902c2471b67b49498bda5c045e9befd58af93ade0a8df8",
    "RSA-SHA384": "cf15c1d2c91b93a2e10f664d1bcca36c6fc2e2ae819609a131d4eb86d51a66cfacf8b2d37afd6aaa539b1cd63bac1a13",
    "RSA-SHA512": "3bfeab5bee92507591f21f757765c8c09e1241812f8e51c200f6bc5703f7e15f057d9378f59fd4d50410e68b2451681df70c9c3bcb2be17fa80f2362284e31ff",
    "dsaEncryption": "62ba49087185f2742c26e1c1f4844112178bf673",
    "dsaWithSHA": "62ba49087185f2742c26e1c1f4844112178bf673",
    "dsaWithSHA1": "62ba49087185f2742c26e1c1f4844112178bf673",
    "dss1": "62ba49087185f2742c26e1c1f4844112178bf673",
    "ecdsa-with-SHA1": "62ba49087185f2742c26e1c1f4844112178bf673",
    "md4": "cd5d1cf8469ba52621ba4052e7f483f0",
    "md4WithRSAEncryption": "cd5d1cf8469ba52621ba4052e7f483f0",
    "md5": "9c18d4c75cc02337c277532ecea4b9fa",
    "md5WithRSAEncryption": "9c18d4c75cc02337c277532ecea4b9fa",
    "mdc2": "bc3bdc0b53caaa42dd38ebeba670f8f1",
    "mdc2WithRSA": "bc3bdc0b53caaa42dd38ebeba670f8f1",
    "ripemd": "539a5bced487507bdcdb2b1dee44b0306ee16813",
    "ripemd160": "539a5bced487507bdcdb2b1dee44b0306ee16813",
    "ripemd160WithRSA": "539a5bced487507bdcdb2b1dee44b0306ee16813",
    "rmd160": "539a5bced487507bdcdb2b1dee44b0306ee16813",
    "sha": "823202f9d7d999256a346fcf29c5ea4111310ec4",
    "sha1": "62ba49087185f2742c26e1c1f4844112178bf673",
    "sha1WithRSAEncryption": "62ba49087185f2742c26e1c1f4844112178bf673",
    "sha224": "1889664dcf226dbb7d75965f0cde9487586956119d368c18ca3a4e14",
    "sha224WithRSAEncryption": "1889664dcf226dbb7d75965f0cde9487586956119d368c18ca3a4e14",
    "sha256": "341bf4dff841088f3b902c2471b67b49498bda5c045e9befd58af93ade0a8df8",
    "sha256WithRSAEncryption": "341bf4dff841088f3b902c2471b67b49498bda5c045e9befd58af93ade0a8df8",
    "sha384": "cf15c1d2c91b93a2e10f664d1bcca36c6fc2e2ae819609a131d4eb86d51a66cfacf8b2d37afd6aaa539b1cd63bac1a13",
    "sha384WithRSAEncryption": "cf15c1d2c91b93a2e10f664d1bcca36c6fc2e2ae819609a131d4eb86d51a66cfacf8b2d37afd6aaa539b1cd63bac1a13",
    "sha512": "3bfeab5bee92507591f21f757765c8c09e1241812f8e51c200f6bc5703f7e15f057d9378f59fd4d50410e68b2451681df70c9c3bcb2be17fa80f2362284e31ff",
    "sha512WithRSAEncryption": "3bfeab5bee92507591f21f757765c8c09e1241812f8e51c200f6bc5703f7e15f057d9378f59fd4d50410e68b2451681df70c9c3bcb2be17fa80f2362284e31ff",
    "shaWithRSAEncryption": "823202f9d7d999256a346fcf29c5ea4111310ec4",
    "ssl2-md5": "9c18d4c75cc02337c277532ecea4b9fa",
    "ssl3-md5": "9c18d4c75cc02337c277532ecea4b9fa",
    "ssl3-sha1": "62ba49087185f2742c26e1c1f4844112178bf673",
    "whirlpool": "1147a4ae7ce95023090770d52a0c4e6bd0402547ef3069c451202f3266efef5e8b278e509c9571878cf2cbe9491367ed7315d52240bbd5c83ade80bdf57487b5"
  },
  {
    "input": "//////////4AAAAAAAAAAAAAAH/////////////////4AAAAAAAAAAAAAAAAAH////////////////4AAAAAAAAAAf////////////+AAAAAAAAAAAAAAHgAAAAAAAAAAAAAAAAAD////////////wAAAAAAAAAAAAAAAH///v/////////////////wAAAAAAf////+AAAAAAAAAAAAAAA/////4AAB////AAAA////wD/////////////4AP////4D/////////////+AAAAAAAAAAAAAAAAAA/////////////////8P////////////////+AAAAAAAAAAAAAA///////////wAAAA/////4AAAAAAAAAAAAAAAA////////+Af/+AB/8AAAAAAAAAAAA//+AAAAAAAAAAAAAD//////////8AAAAAAAAAAAP//AAAAA/4AAAAAAAAAAD///////////AAAAAD///8AAAAAAAAAAAAAf///////AAAAAAAAAAAAAAAP///////////wAAAAAAAf/////wAAAAB//////gAAAAAAAAAAAAAAH//wD////wAAAAAAAAAAAAAA///8AAAAAAAAAA///////////4AAAAB//////////////8AAAAAAAAAAAAcAAAAAAAAAAAD///////////////8AAAAAAAAAAAAAB//AAAAAAAAAAAAAAAAAH///4AAAAAB//////AAAAAAAAAAAAAAAD//////////////////+AAAAAAAAAAAAAD///////////8AAAAAAAAAAAAAAAAAD//////////////////8AAAD///////////////gAAAAAAAAAAAB/////////////////AAAAAAAAAA////////////////4AAAAAAAAAAAAAAAAH/AAAAAAAf+AAAAAAAAAD///////////////4AAAAAAAf////8AAAAAAAAAAAAAAAf/8AAAA///////////4AAAAAABgAAAAAAAAAAAAAH/////////////////wAAAAAAAAH///////AAAAAAAAAAf//////////AAAAAAAAAAAAAAAP//////////wB/////////AAAAAAH///////////gAAAAAAAAAAAAA////+AAAAAAAAAAAAAAAAf//////////wAH//////////////////AAH//+AAAAA//////////wDAAAAAAAAH//+AAA/////4AAAAAAB//gAAAAAAAAAAAAAAAAAAP///////////gAAAAAAAAAAAAAAAAAB////////////////AD//////4AAAAf////////AAAAAAAAH///+AAAAAAAAAP/+AAAAAAf///////////////4AAAAAAAAD/////////////////wAAA/////////wAAAAH///////+AAAAAAAAAAAAAAAD/////////////////4AAAAAAAAAAAAAAAAAB/////////////+AAAAAAAAAAAH/gAAAAAAAAAAAAAAAAAf///////////////gAAAAAAAAAAAP////////////////AAAAf/////gAAAAAAAAP//////////////AAAAAAAAAAAB//////////wAAAAAAAAAAAAAAAP////wAAAAAAAAAAAAAAP///////////////wAAAAAAAAAAAAH///gP////wAAAf///+AAAAAAAAAD//////////////4B////////wAAAAAAAAAAAAAAAB///////8AAAAAAAAAAAAAA/////8AAD//////+AAAAAAAAAAD////////////////AAAAAAAAAAAAAAAAAP/////////////////gAAAAAAAP4AAAAAAAAAAAAD///////////4B/////////wAAB////8AAAAAAAAAAAAAwAAAAAAAAAAAD////////////8AAAAAAA/////////4A//////////gAAB//AAAAAAAAAAAP////////AAAAAAAAAAAAAAAf///////////4AAAAAAAAAAAAAAAB///////AAAAA/////////8AAAAAAAAAAA///////////////+AAAAAAAAAAAAAAAAD///////////8AAAAAAAAAAAAAAAAD////////////wAAAAAAP///////////////+AAAAAAAAAA",
    "DSA": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "DSA-SHA": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "DSA-SHA1": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "DSA-SHA1-old": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "RSA-MD4": "b1c6f2c5bc7d0c12668ce471a6535775",
    "RSA-MD5": "4159a65b7db275742e998fb855e7b9f3",
    "RSA-MDC2": "b805fda09ca1a1ea301019916a4cd4fb",
    "RSA-RIPEMD160": "983e60f73a95406387b3cde76b785a1ba48f2d46",
    "RSA-SHA": "98928984b28f3095736ba953010b4f7209f0e7fa",
    "RSA-SHA1": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "RSA-SHA1-2": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "RSA-SHA224": "6e6ecfc06a7ca207f0e8bc455da5861ba83f7467e3c4a789f97b80a5",
    "RSA-SHA256": "e5239ecec9ea7737f614ebab502df1248c0a9a0183fc70441fd9ac88040846ce",
    "RSA-SHA384": "b971825991214be8f94fda522823c7ca5eaca06a2283d562749f3bb7c9ddd300f8f108ad2d02785f8fa5e7cf952ba955",
    "RSA-SHA512": "7d701e5945751e112f57304fecd6be22e60b85367b14df5b79514ea731d5183f563212fa4ba3ac148b0e96617ab2fc2d9d2b32ff675b8a8344f9c8c102c80896",
    "dsaEncryption": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "dsaWithSHA": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "dsaWithSHA1": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "dss1": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "ecdsa-with-SHA1": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "md4": "b1c6f2c5bc7d0c12668ce471a6535775",
    "md4WithRSAEncryption": "b1c6f2c5bc7d0c12668ce471a6535775",
    "md5": "4159a65b7db275742e998fb855e7b9f3",
    "md5WithRSAEncryption": "4159a65b7db275742e998fb855e7b9f3",
    "mdc2": "b805fda09ca1a1ea301019916a4cd4fb",
    "mdc2WithRSA": "b805fda09ca1a1ea301019916a4cd4fb",
    "ripemd": "983e60f73a95406387b3cde76b785a1ba48f2d46",
    "ripemd160": "983e60f73a95406387b3cde76b785a1ba48f2d46",
    "ripemd160WithRSA": "983e60f73a95406387b3cde76b785a1ba48f2d46",
    "rmd160": "983e60f73a95406387b3cde76b785a1ba48f2d46",
    "sha": "98928984b28f3095736ba953010b4f7209f0e7fa",
    "sha1": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "sha1WithRSAEncryption": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "sha224": "6e6ecfc06a7ca207f0e8bc455da5861ba83f7467e3c4a789f97b80a5",
    "sha224WithRSAEncryption": "6e6ecfc06a7ca207f0e8bc455da5861ba83f7467e3c4a789f97b80a5",
    "sha256": "e5239ecec9ea7737f614ebab502df1248c0a9a0183fc70441fd9ac88040846ce",
    "sha256WithRSAEncryption": "e5239ecec9ea7737f614ebab502df1248c0a9a0183fc70441fd9ac88040846ce",
    "sha384": "b971825991214be8f94fda522823c7ca5eaca06a2283d562749f3bb7c9ddd300f8f108ad2d02785f8fa5e7cf952ba955",
    "sha384WithRSAEncryption": "b971825991214be8f94fda522823c7ca5eaca06a2283d562749f3bb7c9ddd300f8f108ad2d02785f8fa5e7cf952ba955",
    "sha512": "7d701e5945751e112f57304fecd6be22e60b85367b14df5b79514ea731d5183f563212fa4ba3ac148b0e96617ab2fc2d9d2b32ff675b8a8344f9c8c102c80896",
    "sha512WithRSAEncryption": "7d701e5945751e112f57304fecd6be22e60b85367b14df5b79514ea731d5183f563212fa4ba3ac148b0e96617ab2fc2d9d2b32ff675b8a8344f9c8c102c80896",
    "shaWithRSAEncryption": "98928984b28f3095736ba953010b4f7209f0e7fa",
    "ssl2-md5": "4159a65b7db275742e998fb855e7b9f3",
    "ssl3-md5": "4159a65b7db275742e998fb855e7b9f3",
    "ssl3-sha1": "e1f6b9536f384dd3098285bbfd495a474140dc5a",
    "whirlpool": "e326e40eb521915d515149e43492af5896153bf01c24c573349ff642128030ebfae924fc88244a14ad5090d71f66f556f70c93c847a4edb3f446bea72b4097c6"
  },
  {
    "input": "AAAAH///////////////////AAAAAAAH///////////////////wAAAAAAAAAAAADAAAAAAAAAB////////4B////////////4AAB///////////////4AAAAAAAAAAAAAAAAH///////////AAAAAAAAAAAAAAAA///////AAAAAAAD/////////////////wAAAAAAAAAAH/AAAAAAAAAAAAAAAAAAP//////////////gAAAAAAAAAAA///////////4AAAAAf////wAB//////////////AAD////4AAAAAAAAAAAAAAAAf////////////+AAAAAA//////////wAAAAAAAAAAD///////////////4AAAAAAAAAAAAAAAAAH//////+AAAD//////////////////8AAAAAP/////wAAAAAAAAD///////////////gA/////AAAAAAAAAAAAAAAA//AAAAAf//////////wAD//////////////////8AA///////////AAAAAAAAAAAD////8AAAAAAAAAAAAAf//////+AAAAAAAAD///////////////////4AAAAAAAAAAAAAD8AAAAAAAAAAAAAAAAA///////+AAAAAAAAAAAAAAAf///////////gAAAAAAAAAAB8AAAAAAAAAAAP/+AAAAAAAAAAAAAAAAAAA///////////wAAAAAAAAAAAAAAAAB/////wAAAAAAAAAAAAAAAH/8AAAAAAAAAAAAAB/////////////////4AB//////////AAAAB///4AAAAAAAAAAAAAB///////wAAAAAAAAB///////////wAAAAAAAAAAAAAAH/////+AAAAAAf///+AAAAAAAAAAB//AAAAAAAAAA///////////////+AAAAAAAAAAAAAAAAA4AA+AAAAAAAAAAAAAAAAAAD//////AAAB//////////g//////////+AAAAAAAAAAAAAAAH/////////////////wAAAAAAAAAAAH////////////////+AAAAAA///////+AAAAAAAAAAAAAAAAB///////////////////x////////////+AAAAAD+AAAAAAAAAAAAAAAD/////////AAAAAAAAAAAAA///////4AAAAAAAAf///+AAAAAAAH//////8AAAAAB/////gAAAAAAAA///gAAAAAAAAP////gAAAAAAA////////////////gAAAAAAAAAAAB///////////////////AAAAAAAAAAAAAB///////////8AH///////AAAAAAAAAAP///////////4AAAAAAAAAAAAAAAA///////////////////z///8AAAAAAAAAAAAAAAAAAA/gAAAB//////8////+AAAAAA////////8AAAHwAAAAAAAAAAAAAAAAAAA/////////////gAAAAP////////+AAAAAAAAAAAAAAD/////////+AAAB////////////////8AAAAAAAAAAAAD////////AAAAAAAAAAAAAAAH///////////8AAAAAAH8AAAAAf//////8AAAAAAAH///7///////8AAAAAAAAAAAB/////+P///4AAAAAAAAAAAAAA///////8AAAAP/////////////////wAAAAAAAAP//////////8AAAAAAAAH//////////8AAAAAAAAAAAAAAAAAAAH////gAAAAAf//////////////////+AAAAAAAAAAAAAAAAAf//////gAAAAAAAAAAAAAB////wAAAAAAAAAAAAAAAAAA8AAAAAAAAAAAA//////////////v/////////+AAAAAAP///////////////4AAAAAAAAAAAP///////////8AAAAAAAAAAAAf///////////+AH///////8AD////////////+AD////////AAAAAAAAAAAAAAAAAf//////////////////+AAAAAAAAAAAAAAAH///////////////////AAAAAAAAAAAAAAAAAAAD/////+AAAAP/wAAAAAAAAAAAAAAA//////////AAAAD////////gAAAAAAA/////////////8AAAAAAAAAAAAAAAAAA//+AAP////////////////+AAAD////////wAAAAAAH/4AAA///8AAAAAAAAAAAAAf//////AA////////////wAAAAAAAAAAAAAAP//////wAAAAAAAAAAAAAAAAAP//////////////////+AAAAAAAAAAAAAAAAf//////////w///////////4AAAAAAAAAAAAAA=",
    "DSA": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "DSA-SHA": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "DSA-SHA1": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "DSA-SHA1-old": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "RSA-MD4": "6731fed7311b993f725548d477117da9",
    "RSA-MD5": "df34d37f6b4ef078bd9570efdd8fd2e2",
    "RSA-MDC2": "a4fed7363add791b3c3139a2ef4389db",
    "RSA-RIPEMD160": "7dd8c9666ce02b878e57e9ba4d01f5aa5d84627b",
    "RSA-SHA": "30114eff874ec1e22a517764247e54c23f0881e4",
    "RSA-SHA1": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "RSA-SHA1-2": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "RSA-SHA224": "8551ca25febf9b10a58efec1f72bafc0050ec6d2c7727a5db3ccde7c",
    "RSA-SHA256": "58e09b4047770bc998b86a4191b7a11eec6fc65bd5e5d0fb6f30d4b7ee0cd683",
    "RSA-SHA384": "d5daa8f149b51e36e56d8b9955fb49bec8d77fb2fd2231d46358c044b1321eb9f62d88a94d3496177d303869844963f9",
    "RSA-SHA512": "bd274fcdd48554e5406076d795e5029945d23894ffa4da150a203b8caaccf3fc8dabf8177995c7965822f920c62574b4f65216f3d807b5bb766843ced496343d",
    "dsaEncryption": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "dsaWithSHA": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "dsaWithSHA1": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "dss1": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "ecdsa-with-SHA1": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "md4": "6731fed7311b993f725548d477117da9",
    "md4WithRSAEncryption": "6731fed7311b993f725548d477117da9",
    "md5": "df34d37f6b4ef078bd9570efdd8fd2e2",
    "md5WithRSAEncryption": "df34d37f6b4ef078bd9570efdd8fd2e2",
    "mdc2": "a4fed7363add791b3c3139a2ef4389db",
    "mdc2WithRSA": "a4fed7363add791b3c3139a2ef4389db",
    "ripemd": "7dd8c9666ce02b878e57e9ba4d01f5aa5d84627b",
    "ripemd160": "7dd8c9666ce02b878e57e9ba4d01f5aa5d84627b",
    "ripemd160WithRSA": "7dd8c9666ce02b878e57e9ba4d01f5aa5d84627b",
    "rmd160": "7dd8c9666ce02b878e57e9ba4d01f5aa5d84627b",
    "sha": "30114eff874ec1e22a517764247e54c23f0881e4",
    "sha1": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "sha1WithRSAEncryption": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "sha224": "8551ca25febf9b10a58efec1f72bafc0050ec6d2c7727a5db3ccde7c",
    "sha224WithRSAEncryption": "8551ca25febf9b10a58efec1f72bafc0050ec6d2c7727a5db3ccde7c",
    "sha256": "58e09b4047770bc998b86a4191b7a11eec6fc65bd5e5d0fb6f30d4b7ee0cd683",
    "sha256WithRSAEncryption": "58e09b4047770bc998b86a4191b7a11eec6fc65bd5e5d0fb6f30d4b7ee0cd683",
    "sha384": "d5daa8f149b51e36e56d8b9955fb49bec8d77fb2fd2231d46358c044b1321eb9f62d88a94d3496177d303869844963f9",
    "sha384WithRSAEncryption": "d5daa8f149b51e36e56d8b9955fb49bec8d77fb2fd2231d46358c044b1321eb9f62d88a94d3496177d303869844963f9",
    "sha512": "bd274fcdd48554e5406076d795e5029945d23894ffa4da150a203b8caaccf3fc8dabf8177995c7965822f920c62574b4f65216f3d807b5bb766843ced496343d",
    "sha512WithRSAEncryption": "bd274fcdd48554e5406076d795e5029945d23894ffa4da150a203b8caaccf3fc8dabf8177995c7965822f920c62574b4f65216f3d807b5bb766843ced496343d",
    "shaWithRSAEncryption": "30114eff874ec1e22a517764247e54c23f0881e4",
    "ssl2-md5": "df34d37f6b4ef078bd9570efdd8fd2e2",
    "ssl3-md5": "df34d37f6b4ef078bd9570efdd8fd2e2",
    "ssl3-sha1": "b522dae1d67726eba7c4136d4e2f6d6d645ac43e",
    "whirlpool": "a42c98a588c8ab42618da176885cd4850ffa516d59b38cfa34af8292060a19c2e541637e79249fa4eace1b77be955766fa7f6a9c63d42607feb36d4a72a03f27"
  },
  {
    "input": "AAAAAAAAAAAAD/////////////gAAAH////////////////wAH//////////+AAAAAAAAAAf////////////////+AAAAAAAAAAAAAAP//4AAAAAAAAAAAAAAAB/////gAAAAAAAAAAAAD//////////gAAAAAAAAAAAAP//////////////+AAAAA////////////////////gAAAAAAAAAAAAAAAAAAAD////////////gAAAAAAAB/8AAAAAAAAAAD//////4AAAAAAAAH//////////////AAAAAAPgAAAAAAAAAAAAAAAAH/////////+AAAAAAAAP/////8AAAAAAAAB////8AAAAB///////////////////+AAAAAAAf/+AAAAAAAB///////////////4AAAAAAAf////////////////8AAAAAAAAAAAAAAB//////////+AAAAAAAAAAAAB////wAAAAAAH4AAAAAAAAAAYAAAAAAAAD////////////+AAAAAAAAAAAAP/////////////wAAAAAAAAAAAAAAAAAAf//+H//////////////////wAAAAAAAAAAAAAAAAAH////8AAAAAf//AAAAAAAAAAAAAAAA/+AAAAD//////////gAAAAAAAAAAAAAAAH////////////////8AAAAAAAAAAAAAAAAAH//////////////////+AAAAAH/+AP///////////////gAAAAAH//4AAAAAAAA////////////4AAAAA//////////////////gAAAAAAAAAAAAAAAAAAB/////////AAAAAAAAAAA8AAAAAAAAAAAAP4AAAAAAAAAAAA///////////8AAAAAAAAAAAAAP///////////8AAAEAAAA///////////4AAAAAAf/////////////////+AAAAAAAAAAAAAAAAP///////gAAAAAAAAAA/////gAAAAAAAAAAB///////////////////8AAAAAAAAP////////////////4AAAAAAAAAAAAAAf/////////////wAAAAAAAAAAAAAD////wAA//AAAAAAAAAAAAD///+AAAH////////////4AAAAAAAAAAf//8AAAAAAAAAAAAAA////4AAAAAAAAAD////////////4AAAAAAAAAAAH/////////////////5//+AAAAAAAAAAAAAAAAAH///////////////////wAAAAAAAAAAAAAAAAAAAH////////4AAf/////////////wAAAAAAAAAAAMAAAAAAAAAAAB////gAAAAAAAAAAAAAB//////////+AAAAAAAAAB/////////////gAAAAA////AAAAAAAAAAAAAAAAAAAH//////////AAAA///////wAAAAAAAAAAH////////gAAAAAAAAAAAAAAAAAAAH///////////////////wAAAAB///////////+AAH////////////////AAAAAAAAAAAAAAAAP//////////+AAAAAAAAB///AAAAAAA////8AAAAAAAAH//////////////////4AAAAB///////////////////wAAAAAAAAAAAAB////////////////4AAAAAAAAA////////gAAAAAAAAAAAAAAAAAAAD/////////AAAH//////////+AAAAAAAAAAAAAf////////AAAAAAAAAAAAAAABAAAAAAAH///////////////wAAAAAAAAAAAAAAAAAf///////////////4AAAAAAAAAAAAAAgAAAD///8AAAAAAAAAAAAAAAAf//////////////////4AAf//////////3//////////////////wAAAAAAAAAAAAAAH/////////////4AAAD//////wAAAH///////////4////8AAAAAAAAAAAAAAD//////////////gAAAAAAAAAAAAAAAAAB/////////////gAB///////////////////wAAAAAAB////////////8AAAAAD//////////////8AAAAAAAAAAAAAAAAAf/////////AAAAAAAAAAAAAAD////////////////////AAAAAAAAAAD/////////////////8AAAAAAAAAAAAAAAAAD///////////4AAAAAAAAAAAAAAAB//+AAAAAAAAf//////////////////wAAAAAAAAAAAAAAB/////////////////wAAAAAAAAAAAAf/////A///////8AAAAAAAAB///////8AAAAAAAAAAAAAAAADwAAAD//////////////gAAAAAAAAAAAAAAAAAD///////////////////8AAAAAAAAAAAAAf//////////////////D/////////gAAAAAAAAAAAAAAAADgAAAAAAAAAAAAAf//////////////+AAAAAAAAAAAAAAAAAAA//////////gAAAAAAAAAAAA==",
    "DSA": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "DSA-SHA": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "DSA-SHA1": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "DSA-SHA1-old": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "RSA-MD4": "6eee1232fd46ecfd1167cbdf13be971f",
    "RSA-MD5": "84d2c12c4f0c28d288464d33a23f227c",
    "RSA-MDC2": "9151c8c48457be975c29ad4f50f1c865",
    "RSA-RIPEMD160": "ae3eb73d016d0f958fa3a5e7f90224bcd150b03d",
    "RSA-SHA": "12799f8e31af62fad760372e341c578ee62c7f4c",
    "RSA-SHA1": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "RSA-SHA1-2": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "RSA-SHA224": "963aedf392ced119789999d3588a495b505343f49ea355170612b8a1",
    "RSA-SHA256": "9e01666f3284aec585338d0b452aa1712b9d1392c4a265a2ecfc9dc4cadd002b",
    "RSA-SHA384": "770c8472f92f459f1a1aa759e1ee87193245dfd61cb237ea222d3bd89d2f26b734398dfa494b57a496927935fceee3af",
    "RSA-SHA512": "f6aeb80185c567f9c51ae74741c800dda109d0d64e0f8b0dbad115d9513564e61e8520baec3a04c98546443c60ee79d1d0d5596d4aac33384a530d7d37518752",
    "dsaEncryption": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "dsaWithSHA": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "dsaWithSHA1": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "dss1": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "ecdsa-with-SHA1": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "md4": "6eee1232fd46ecfd1167cbdf13be971f",
    "md4WithRSAEncryption": "6eee1232fd46ecfd1167cbdf13be971f",
    "md5": "84d2c12c4f0c28d288464d33a23f227c",
    "md5WithRSAEncryption": "84d2c12c4f0c28d288464d33a23f227c",
    "mdc2": "9151c8c48457be975c29ad4f50f1c865",
    "mdc2WithRSA": "9151c8c48457be975c29ad4f50f1c865",
    "ripemd": "ae3eb73d016d0f958fa3a5e7f90224bcd150b03d",
    "ripemd160": "ae3eb73d016d0f958fa3a5e7f90224bcd150b03d",
    "ripemd160WithRSA": "ae3eb73d016d0f958fa3a5e7f90224bcd150b03d",
    "rmd160": "ae3eb73d016d0f958fa3a5e7f90224bcd150b03d",
    "sha": "12799f8e31af62fad760372e341c578ee62c7f4c",
    "sha1": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "sha1WithRSAEncryption": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "sha224": "963aedf392ced119789999d3588a495b505343f49ea355170612b8a1",
    "sha224WithRSAEncryption": "963aedf392ced119789999d3588a495b505343f49ea355170612b8a1",
    "sha256": "9e01666f3284aec585338d0b452aa1712b9d1392c4a265a2ecfc9dc4cadd002b",
    "sha256WithRSAEncryption": "9e01666f3284aec585338d0b452aa1712b9d1392c4a265a2ecfc9dc4cadd002b",
    "sha384": "770c8472f92f459f1a1aa759e1ee87193245dfd61cb237ea222d3bd89d2f26b734398dfa494b57a496927935fceee3af",
    "sha384WithRSAEncryption": "770c8472f92f459f1a1aa759e1ee87193245dfd61cb237ea222d3bd89d2f26b734398dfa494b57a496927935fceee3af",
    "sha512": "f6aeb80185c567f9c51ae74741c800dda109d0d64e0f8b0dbad115d9513564e61e8520baec3a04c98546443c60ee79d1d0d5596d4aac33384a530d7d37518752",
    "sha512WithRSAEncryption": "f6aeb80185c567f9c51ae74741c800dda109d0d64e0f8b0dbad115d9513564e61e8520baec3a04c98546443c60ee79d1d0d5596d4aac33384a530d7d37518752",
    "shaWithRSAEncryption": "12799f8e31af62fad760372e341c578ee62c7f4c",
    "ssl2-md5": "84d2c12c4f0c28d288464d33a23f227c",
    "ssl3-md5": "84d2c12c4f0c28d288464d33a23f227c",
    "ssl3-sha1": "e9a021c3eb0b9f2c710554d4bf21b19f78e09478",
    "whirlpool": "c1b1aa5378f8ada9d47cba8a1ddd2fd12d3e7232c796ef742d1c220172837527a2e0e2820f6e83d8a00558f6d0463fc8b2b8f9005924ff61e75885720263a107"
  },
  {
    "input": "///////////////gAAAAAAA////////4A/////////4A/////////gAAAAAAAAAAAAAAB//////////AAAAAAAAAAf//////////4AAAAAAAf/////////////////A/////+AAAAAAAAAAAAAP//////////////////wAAAAAAAAAAAAP///////////////wAAAAAAAAAAAD//AAAAAAAAAAAAAAB////////////AAAAAAAAAAAf//////////wAAAAAAAAAAB//////////////////8AAAAAAAAAAAAAAAAAH/wAAAAAAAAAAAAAAAD//////////////////4AAAAAAAAAAAAAAAAAD///AAAAAAAAAAAAAAAP//gAAAAAAAAAAP///////////AAAAAAAAAAAAAAD/////////gB////////////////////4A//////////AAAAAAAAAAAAAAAAAAAAP//////////////+AAAAAAAAAAAAAAA///////4D//gAAAf///////8H///////////////+AAAAAAAAAAAAAAAAAAA////AAAAAAAAf//////////////gAAAAAAAAAAAAAAAAH///////////////////AAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAA//AAAAAAAf//////////////wAAAAAAA//////////////////4AAAAAAAAAP/////////AAAAAAAAAAAAB////+AAf/////////////+AAAAAAAAAB////////////////////wAAAAAAAAAAD//////4AAAAAAB///////////gAAAAAB/////////////////gAAAAAAAAAAAAAAAAAAB//////8AAAAAAB///////////////wAAAAAAAAAAAAAAP////////////////+AAAAAAAAAAAAAAAf/+AAAAAAAAAAAAAAAAAAAAA////wAAAAAAAAP////////////////////gAAAAAAAAAAAAAAAAAAf////////////wAAAAAAAAAAAf///gAAAAAAAf//8AAAB///////////////////4AAAAAAf////////////////wAAAAAAAH//////////////8AAAAAAA///////////gAAAAAAAAAA////gAAAAAAAAAAAAAAAAAAA//////////////////gAAf///////gAAA///////////4AAAAAAAAAAAAAAAAAAf/////4AAAAAAAAAD//////////wAAAAAAAAAAAAAB/////////////+AAAAAAAAAAAAAAAAAf///////////////////AAAAAAAAAAAAAAAAAAP///////////////////8AAAAAAAAAAAAAAA///9/gAAAAAAAAAAAAA/////8AAAAAAAAAAAAAAAAP////8AAAAAAAAAA//////+AAAAAAAH//////////////////gAAAAB////////////////+AAAAAAAAAAAAH////////+AAAAAAPAAAAAAAAAAAAAAAAAAAAAf////gAP//4AAAAAAAAAAAAAAAAAB////////////////////4D//wAAAAAAAAAAAAAAAAAAAAD///////////////4f///////////////////+AD/////////////////AAAAAAAAAAAAAAAAAAAP////////////////////wAAAAAAAH///////////////x/////////AAAAAAAAAAAAAAAA///////////8AAAAAAAAAAAAAAD////////////////4f///////////////////4AAAAAAAAAAAAAAAH////////////AAAAAAAAAAAAAAAAAAAD//////gAAAAAAAAAAAAAAAAAAAAH////////////////AAAAAAAAAAAAAAAP//wAAAAAAP//8AAAAAAAAAAAAAAf/////////////AAAAAB////////////wAAAAAAAAAAAAAAAAAB//////////AAAAAAAAAAAf///////////AAAAD////////////////4A/////////wAAAAA/////////////////4AAAAAAAAAAAAAAAP///////////gAAA////////////gAAAAAAAAAAA////wAAAAAAAAB//wAAAf///////////+AAAAAAAAA////////////////4AAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAA///////////////////4AAAAAAAAAAB///////AAAAAAAAAAAAAAD//////////AAAAAAP/////////8AAAAAAYAAAAAAAAAAAAAP/////wAB////gAAAAAAAAAf////////////////////4AAAAAAAAAAAAAAAH///////////8AAAAAAAAAAAA/9/+AAAAAAB///5////////////8AAAAAf////8AAAAA/////////4AD//AAAAAAAAAAAAAD/////////gAf/////8f////////+AAAAAAAAAAAAAf/4AAAAAAAAAAAAAA//////////////gAAAAAAH///////////AAAAAAAAAAAAAAAAAAf///////////////////",
    "DSA": "df13573188f3bf705e697a3e1f580145f2183377",
    "DSA-SHA": "df13573188f3bf705e697a3e1f580145f2183377",
    "DSA-SHA1": "df13573188f3bf705e697a3e1f580145f2183377",
    "DSA-SHA1-old": "df13573188f3bf705e697a3e1f580145f2183377",
    "RSA-MD4": "ee35eaade52fe84b3565b71b97e2c004",
    "RSA-MD5": "17b55bbd4222066960e54182e1e95f0b",
    "RSA-MDC2": "11ba7321a73d95f5994c95fc2f78d6cd",
    "RSA-RIPEMD160": "a87eb3deb5da5e5aae1e2e36307321ae794ef0e5",
    "RSA-SHA": "afe6b8cb63f9a1f82c5caf4664442cd551bb59c0",
    "RSA-SHA1": "df13573188f3bf705e697a3e1f580145f2183377",
    "RSA-SHA1-2": "df13573188f3bf705e697a3e1f580145f2183377",
    "RSA-SHA224": "d52df79c03c2c84ba8f8a0de1657dfb14c41b09cbd7748137469010e",
    "RSA-SHA256": "33aa52b6be6991965ae18124232f108ec7b400528e848e5d8a8d7cf75783ee19",
    "RSA-SHA384": "97552e81dc847f71a7aedad578fcf02b345c844850964ce4a60fd46b5099c54572ee72e15af6ff8a59ac6dc7ed3000a9",
    "RSA-SHA512": "bd17c744c4f7cdc4b44cd83262754196d8f11750136ca16f93661f8381df351eeff4829e52c4eca7ea8215c0ee54341663633f0c2aa5d820ed3ca0f2cdcd1f6a",
    "dsaEncryption": "df13573188f3bf705e697a3e1f580145f2183377",
    "dsaWithSHA": "df13573188f3bf705e697a3e1f580145f2183377",
    "dsaWithSHA1": "df13573188f3bf705e697a3e1f580145f2183377",
    "dss1": "df13573188f3bf705e697a3e1f580145f2183377",
    "ecdsa-with-SHA1": "df13573188f3bf705e697a3e1f580145f2183377",
    "md4": "ee35eaade52fe84b3565b71b97e2c004",
    "md4WithRSAEncryption": "ee35eaade52fe84b3565b71b97e2c004",
    "md5": "17b55bbd4222066960e54182e1e95f0b",
    "md5WithRSAEncryption": "17b55bbd4222066960e54182e1e95f0b",
    "mdc2": "11ba7321a73d95f5994c95fc2f78d6cd",
    "mdc2WithRSA": "11ba7321a73d95f5994c95fc2f78d6cd",
    "ripemd": "a87eb3deb5da5e5aae1e2e36307321ae794ef0e5",
    "ripemd160": "a87eb3deb5da5e5aae1e2e36307321ae794ef0e5",
    "ripemd160WithRSA": "a87eb3deb5da5e5aae1e2e36307321ae794ef0e5",
    "rmd160": "a87eb3deb5da5e5aae1e2e36307321ae794ef0e5",
    "sha": "afe6b8cb63f9a1f82c5caf4664442cd551bb59c0",
    "sha1": "df13573188f3bf705e697a3e1f580145f2183377",
    "sha1WithRSAEncryption": "df13573188f3bf705e697a3e1f580145f2183377",
    "sha224": "d52df79c03c2c84ba8f8a0de1657dfb14c41b09cbd7748137469010e",
    "sha224WithRSAEncryption": "d52df79c03c2c84ba8f8a0de1657dfb14c41b09cbd7748137469010e",
    "sha256": "33aa52b6be6991965ae18124232f108ec7b400528e848e5d8a8d7cf75783ee19",
    "sha256WithRSAEncryption": "33aa52b6be6991965ae18124232f108ec7b400528e848e5d8a8d7cf75783ee19",
    "sha384": "97552e81dc847f71a7aedad578fcf02b345c844850964ce4a60fd46b5099c54572ee72e15af6ff8a59ac6dc7ed3000a9",
    "sha384WithRSAEncryption": "97552e81dc847f71a7aedad578fcf02b345c844850964ce4a60fd46b5099c54572ee72e15af6ff8a59ac6dc7ed3000a9",
    "sha512": "bd17c744c4f7cdc4b44cd83262754196d8f11750136ca16f93661f8381df351eeff4829e52c4eca7ea8215c0ee54341663633f0c2aa5d820ed3ca0f2cdcd1f6a",
    "sha512WithRSAEncryption": "bd17c744c4f7cdc4b44cd83262754196d8f11750136ca16f93661f8381df351eeff4829e52c4eca7ea8215c0ee54341663633f0c2aa5d820ed3ca0f2cdcd1f6a",
    "shaWithRSAEncryption": "afe6b8cb63f9a1f82c5caf4664442cd551bb59c0",
    "ssl2-md5": "17b55bbd4222066960e54182e1e95f0b",
    "ssl3-md5": "17b55bbd4222066960e54182e1e95f0b",
    "ssl3-sha1": "df13573188f3bf705e697a3e1f580145f2183377",
    "whirlpool": "a3b8403793122d5a0cf2c1ee1bff3ecbe68d3758eeaeb56fdf0eb7c1d5249a99dc4072ff6c44b35687dcdefed8ef7d415afeedfd4a9f1bb8629013e5a108ecf2"
  },
  {
    "input": "AAAAAAAAAAAAAAAAA/////////gAAAAAAAA//////+AAAAAAAAAB//////////////4AAAD//////////+AAAAAAAAAH////////////gAAAAAAH///gAAAAAAAAAAH///////////////////gAAAAAAAAAAAAAAAAAf/////+AAAAAAAAAAAAAAAD///////////////8AAAAAAAAAAAAAf//////////////gAAAAAAAAAAAAAP////AAAAAAAAAAAAB//+AD/////+AAAAAAAAAAAB///////////////wAAAAAAAAAP/////////////////8AAAAAAAAAAAAAAAAAAAAP///////////////////gAAAAAAAAAAAAAAA/////////////////////+AAAAAAAAAAAAAAA//////gAAAAAAAAAAAAAAAAAP////////////////////wD///////////+AAAAAAAAAAAP///////////wAAAAAAAAAAAAD//4AAAAAAAAAAAAAPgAAAAAAAAAAAB///gAAAAH//ACAAAAAAAAAAAAAAAAA///AAAD///////////////////AAAAAAAAAAAAAAAAP+AAAAAAAAP////////////////8AAAAAAAAAAAAAAAAD///////AAAAAH//AA////AAAAAf//////////////fgAAAB////////////////8A//////////8AAAAAAAAAAAD/////////////////wAAAAPgAAAAAAAB//////////////8AAAAAAAAAAAAAAAAAAf/////8AAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAH//wAAAAAAAAB////////////////////4AAAf////////////////8AAAAAAAAAAAAD//////////////////+P//////AAAAAAAAAAAAAAAAAA///////////AAAAAAAAAAAAAAAAAA////////////+AAAAAAAAAAAAAAAAAAAAAf////////////////wAAAAAAD/////4AAAAAB//AAAAAAAAAAAAAAAB/4AAAAAAAAAAAAAAAAAA//////////4AAAAAAAAAAAAAAAB///////////////////wAAAAAAAAAH////////AAAAAAAAAAAAAAAAAAAAA///////////4AAAAAAAAAAAAAAAH///////////gAAAAAAAAAAB/////////8AAAAAAf/wAAAAAAAAAAAAAAAH/////AAAAAAAAAAAAAAAAAADAAAAAAAAAAAAB/AAAAAAAAAAAAAAAAAAAAH///////////gAAAAAAAAAAAAA////+AAAAAAAAAAB///////////AAAAAAAAf////////////wAAH////////////////+AAAAAAAAAAAAAAAAAAA//wAAAAAAAAAMAAAAAAAAB//////4AAAAAAAAAAAP////+AAAAH//////////////////4AAAAAAAA///////////////gAA///////8AAAAAAAf////////////////////4AAAAAAAAA//////////////4AAAAAAAAAB////AAAAAAAAAAAAAAAAAAAf/////4AAAAAAAB/////////AAAAAAAAAAAAAAA////////////wD////////gAAAAAAAAAAAAAAAAf////////////wAAAAAAH///////////////gAAAAAf///////////////////4AAAAAAAAAAAAAAAf/gAAAAAA//////AAAAf////////////////4AAAAAAAAAAAAAAD///8B////////////////wAAAAAAAAAAAAD////8AAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAH///////////////////+AAAAAAAAAAAAAAAAAD//////////////////8AAAAf///+AAAAAAAAAAAAA//////+AB/////8AAAAAAAAf//////////////////wAAAAAAAAAAAAAAAAAAAD///////////wAAA/////////////gAAAAAAAAAAwAAAAAAAAAAAAAA////4AAP/////////gAD///4AAAAAAB/////////wf//////////A////wAAAAAAAAAAAAP////////////8AAAAAAAAAAAAAAAAAAAAH///////////////AAAAAAAAAAAAAA////////////////8AAAAAAAf//+AAAAAAAAAAAAAAAAAAAAAP//////////8AAAAAD//////////////////gAAAAAAAAAAAH///////////////////gA////////wAAAAAAP///////////////////wAAAAAAAf//8A//////////////wAAAAAAAAAAAAAAAAAA////wAAAAAAAAAAH/////////4AAAAAAAAAAAAAAAA///////4AAAAAAAAAAAAAAA///////+Af/////4AAAAAAAAAP////////AAAAAAAAAP////////////////////AAAP/////////////AAA///////////////////4AAAH//4AAAAAAAf////////////////+AAA///////////////////4AAAB//////8AAAAAAAH///////AAAAAAAAAAAAAAAAAAAAAD+AAIfAAAAAAAAAAAAAAAAD/wAAAAAAAAAAAAAH///////+AAAAAAAf/AAAAAAAA///////////////wAAAAAAAAAAAAAAAAAAAf/////////////////gAAAAAAf//////////////////+AAAAAAAAAAAAAAAAAAAAA=",
    "DSA": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "DSA-SHA": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "DSA-SHA1": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "DSA-SHA1-old": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "RSA-MD4": "6812984ffb6bc6d6a9d8ca4eb16b6d72",
    "RSA-MD5": "75eb69b22793852bc892ce264c421a1e",
    "RSA-MDC2": "7d5292756e7b30489c001b37d8aaadc0",
    "RSA-RIPEMD160": "b54c0aa4ab99dc64c97aaf57ad573ddeeb478886",
    "RSA-SHA": "6c754b84bf708f830a7e98992114e9ab0df17ea6",
    "RSA-SHA1": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "RSA-SHA1-2": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "RSA-SHA224": "e81f598d40f0a91cd4f10efb78763b0ebee72af785d391af0de9e2fa",
    "RSA-SHA256": "f854ce37a0821dee06b616d2e86383271c91e09328f884dfef2107712d267601",
    "RSA-SHA384": "ba2fc23d19aabdd48145c206f01a317e2f8f2cd596a2ce2278e2d387d80e10c908c2a9523d9979207287f5cd01cf5975",
    "RSA-SHA512": "60f8f46caeed82fa1afe2e1a8c27d490f3cdcfc6e0d29010813e36a1acf6c0aa64f9f03823bc60cd48162db49adf4ef8d42be2fd5ee6948ef6e9ec83d8784c51",
    "dsaEncryption": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "dsaWithSHA": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "dsaWithSHA1": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "dss1": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "ecdsa-with-SHA1": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "md4": "6812984ffb6bc6d6a9d8ca4eb16b6d72",
    "md4WithRSAEncryption": "6812984ffb6bc6d6a9d8ca4eb16b6d72",
    "md5": "75eb69b22793852bc892ce264c421a1e",
    "md5WithRSAEncryption": "75eb69b22793852bc892ce264c421a1e",
    "mdc2": "7d5292756e7b30489c001b37d8aaadc0",
    "mdc2WithRSA": "7d5292756e7b30489c001b37d8aaadc0",
    "ripemd": "b54c0aa4ab99dc64c97aaf57ad573ddeeb478886",
    "ripemd160": "b54c0aa4ab99dc64c97aaf57ad573ddeeb478886",
    "ripemd160WithRSA": "b54c0aa4ab99dc64c97aaf57ad573ddeeb478886",
    "rmd160": "b54c0aa4ab99dc64c97aaf57ad573ddeeb478886",
    "sha": "6c754b84bf708f830a7e98992114e9ab0df17ea6",
    "sha1": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "sha1WithRSAEncryption": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "sha224": "e81f598d40f0a91cd4f10efb78763b0ebee72af785d391af0de9e2fa",
    "sha224WithRSAEncryption": "e81f598d40f0a91cd4f10efb78763b0ebee72af785d391af0de9e2fa",
    "sha256": "f854ce37a0821dee06b616d2e86383271c91e09328f884dfef2107712d267601",
    "sha256WithRSAEncryption": "f854ce37a0821dee06b616d2e86383271c91e09328f884dfef2107712d267601",
    "sha384": "ba2fc23d19aabdd48145c206f01a317e2f8f2cd596a2ce2278e2d387d80e10c908c2a9523d9979207287f5cd01cf5975",
    "sha384WithRSAEncryption": "ba2fc23d19aabdd48145c206f01a317e2f8f2cd596a2ce2278e2d387d80e10c908c2a9523d9979207287f5cd01cf5975",
    "sha512": "60f8f46caeed82fa1afe2e1a8c27d490f3cdcfc6e0d29010813e36a1acf6c0aa64f9f03823bc60cd48162db49adf4ef8d42be2fd5ee6948ef6e9ec83d8784c51",
    "sha512WithRSAEncryption": "60f8f46caeed82fa1afe2e1a8c27d490f3cdcfc6e0d29010813e36a1acf6c0aa64f9f03823bc60cd48162db49adf4ef8d42be2fd5ee6948ef6e9ec83d8784c51",
    "shaWithRSAEncryption": "6c754b84bf708f830a7e98992114e9ab0df17ea6",
    "ssl2-md5": "75eb69b22793852bc892ce264c421a1e",
    "ssl3-md5": "75eb69b22793852bc892ce264c421a1e",
    "ssl3-sha1": "188835cfe52ecfa0c4135c2825f245dc29973970",
    "whirlpool": "943964f01afbd2f55bb9f185b775f17c0fcdca046e75a7c79511865ef2e9257e7d3dc4d1991b3a597b18534c0c6c8de8b2a33aab2d1db98b0522e29b24348810"
  },
  {
    "input": "AP/////////4AAAAAAAAAAAAAAAA///////////8AAAAAAAAAAAAAAAD///AAAAAAAAAAAAAAH////////////////////AAAAAAAAAAAAAAAAAAAAAAP/////////////AAADAAAAAAAAAAAAAAAAAAP///////////////////AAAAAH/////////////+D+D///////////////wAAAAAAAAD//gAAAAAAAAAf///////////////gAAAAAAAAf/wAAA/////////gAAAAAAAAAAAAAAADwAAAH/////////////////AAB//////AAAAAAAAAAAH/gAAAAAH///////////////////AAAAAAAAAAAAAAAAAAAH////4AAAAAAAAAAAf/wB//////////////////AAAAAAAAAAAAAAAAAAAf/////////4AAAAAAAAAAAAAAAf///////+AAAAAAAAAAB///////////////////wAAAAAAAAAAAAAAAA//////////////////////4D////////////gAAA+AAAAAAAAAAAAAP/////////////////8AAAAB///////////////////4AAAAIAAAAAAAAAB/8AAAAAAH//////////////gAAAAAAAAAAAAAAAAAP///////////////////gAAAAAAAAAAAAAAAAf/////x////+AAAAAAAAAAAAAAAAAAAAP///////gAAAAP////////8AAAAAAAAAAAAAAAAAAAAAA////+AAAAAAAAAAAAAAAAAAAAH//////////////////+AAAAAAAAAAAAAAAAAAAH////////////////AAAH////////+AAAAAAAAAAAAD//////////////+AAAD/////+AAAAAAAAAAAAAAAAAAAAAAP////////////+AAAAAAAf///////8AAAAAAAAAAB///////////////8AAAAAAAAf/////////////////////wAAAAP////////+AAAAAAAAAAA///////////////////wAAAAAAAAAAAAAAAAAAAD///////8AAAAAAAAAAAAAAAAP4AAAAAAAAAAAAAAAAAAAAAH///////////////8AAAAAAAAAAAAAAAAAP//////////+AAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAB////////////////////8AAAAAAAAAAAAAAAAD////////////////+AAAAAAAAAAAAAAAAAAAD/////////////gAAAAAAAAD/////////////////////+AAAAAAAAAAAAAAAB//////AAAAAAAAAAAAAAAAAAAD////////AAAAAAAAAAAAAAAAAAAH//////////////////wAAAAAAAAAAAAB/////////////////////AAB///////wAAAAAAAAAAAAAAAAH////+AAAAAAAAAAAAAAAAAAAA/////////////////////4AAAAAAAAAH//////8AAAAAAAAAAH////////////////////8AAAAD/////8AAAAAAAAAAAAAAAAAAAAAD//////////////////AAAAAAAAD////////4AAAAAP///////////gAf///////////+AAAH///////////4AAAAAAAAAAAAAAAAAAAAAf/////////////////+AAAAAAAAAAAAAAAAP////////////AAAAP//+AAAAAAAAAAAA//////////4AAAAAAAAAA////////////////gAAA/////////8AAAAAAAAAAAAAAAAAAB/////////////////////+AAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA/////gAAAAA///AAAB////////+AAAAB////////8AAAAAAAAAAAAAAAAAAAP/////4AAAAAP/////////////wAAAAAAAAAAAAAAA//////////AAAAAAAAAAAAAAAADgAAAAAAA///AAAAAAAAAAAAAAAAAAP////////////////+AAAAAAAAAAAAAAP////////+AAAAAAAAAAP////////////AAAAAAAf///////+AAAAAAAP///////AAAAAAAAf//////////AA/8AAAAAAD//////////8AAAAAAAAAD///////////////////gAAAAB///AAAAAAAAAAAAAAAPgAAAB////////////4A/////////////////////AAAAAAAAAAAAAAAAB////////////////////8AAAAA//////wAAAAA//4D//////////AAAAAP//+P//////4AAAAAAAAAAA/////gAAAAAAAAAAAAAAAAAP///////////////////+AAAAAAAAP//////////////////8AAAAAAAAAAAAAAAAAAAAAAf////////////////////+AAAAAAAAAAAAAAAAAAAAAP/////////////////////AAAAAAAAAAH/+AAAAAAAAAP////////////8AAAAAAAAAA//4AAAAAAAAAAAAAAAAAAAAH////8AAAAAAAAAAAAAAAAAf/////////////AAAAAAAAAAAAAAAAAA////////////////////AAAAAAAAAAAAAP////////////////////AAAAAAAD////////////////AAAAAAAAAAAAAAAAAH//////////////8D8AAAAfwAAAAAAAAA/////////////////////wAAAAAAAAAAAAP4AAAAAAAAAAAAD//////////gAAAAAAAAAAAAAf////////////AAAAAAAAAAAAP////////////////////8AAAAAAAAAAH/////////8AAAAAAAAAAAAAAAH///////////////////8AAH///4AAAAAAAAAAAAAAAAAAAA///////////////////4AAAAAAAA////////////////////w==",
    "DSA": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "DSA-SHA": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "DSA-SHA1": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "DSA-SHA1-old": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "RSA-MD4": "c54bf4d23537e39f59f02af870cd74c1",
    "RSA-MD5": "de4abe78e28e2718200c76237f2ed42f",
    "RSA-MDC2": "5986ab248d3c97b6e48fc7aff796530a",
    "RSA-RIPEMD160": "85b0f0bfbe6551919c10dae363059b101fb9b7b0",
    "RSA-SHA": "cbd5c695adc25d5be7b0fc326cea08fcf00116b4",
    "RSA-SHA1": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "RSA-SHA1-2": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "RSA-SHA224": "9d9617991608176ee5e071dca52aafe20bd958e911c9bb9ed27e6d33",
    "RSA-SHA256": "a58035c4921e7114b97fde8d4cf04224971d49fc6b23ed5d61a29e133684c809",
    "RSA-SHA384": "77658d867c935d257845772ba93576ddf37d12c685568eaab83cff0e3dd1295f9f2c0cccc455a9b415c90da45277fe08",
    "RSA-SHA512": "9dfd23daa0e8c6660c0f3bbd1187451b862fb3476ff7725d4f502150bf0a827deb1cbfcd055129f1c0a493d6f71c87380776f2d260cbe39d9bdb4259202f55d9",
    "dsaEncryption": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "dsaWithSHA": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "dsaWithSHA1": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "dss1": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "ecdsa-with-SHA1": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "md4": "c54bf4d23537e39f59f02af870cd74c1",
    "md4WithRSAEncryption": "c54bf4d23537e39f59f02af870cd74c1",
    "md5": "de4abe78e28e2718200c76237f2ed42f",
    "md5WithRSAEncryption": "de4abe78e28e2718200c76237f2ed42f",
    "mdc2": "5986ab248d3c97b6e48fc7aff796530a",
    "mdc2WithRSA": "5986ab248d3c97b6e48fc7aff796530a",
    "ripemd": "85b0f0bfbe6551919c10dae363059b101fb9b7b0",
    "ripemd160": "85b0f0bfbe6551919c10dae363059b101fb9b7b0",
    "ripemd160WithRSA": "85b0f0bfbe6551919c10dae363059b101fb9b7b0",
    "rmd160": "85b0f0bfbe6551919c10dae363059b101fb9b7b0",
    "sha": "cbd5c695adc25d5be7b0fc326cea08fcf00116b4",
    "sha1": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "sha1WithRSAEncryption": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "sha224": "9d9617991608176ee5e071dca52aafe20bd958e911c9bb9ed27e6d33",
    "sha224WithRSAEncryption": "9d9617991608176ee5e071dca52aafe20bd958e911c9bb9ed27e6d33",
    "sha256": "a58035c4921e7114b97fde8d4cf04224971d49fc6b23ed5d61a29e133684c809",
    "sha256WithRSAEncryption": "a58035c4921e7114b97fde8d4cf04224971d49fc6b23ed5d61a29e133684c809",
    "sha384": "77658d867c935d257845772ba93576ddf37d12c685568eaab83cff0e3dd1295f9f2c0cccc455a9b415c90da45277fe08",
    "sha384WithRSAEncryption": "77658d867c935d257845772ba93576ddf37d12c685568eaab83cff0e3dd1295f9f2c0cccc455a9b415c90da45277fe08",
    "sha512": "9dfd23daa0e8c6660c0f3bbd1187451b862fb3476ff7725d4f502150bf0a827deb1cbfcd055129f1c0a493d6f71c87380776f2d260cbe39d9bdb4259202f55d9",
    "sha512WithRSAEncryption": "9dfd23daa0e8c6660c0f3bbd1187451b862fb3476ff7725d4f502150bf0a827deb1cbfcd055129f1c0a493d6f71c87380776f2d260cbe39d9bdb4259202f55d9",
    "shaWithRSAEncryption": "cbd5c695adc25d5be7b0fc326cea08fcf00116b4",
    "ssl2-md5": "de4abe78e28e2718200c76237f2ed42f",
    "ssl3-md5": "de4abe78e28e2718200c76237f2ed42f",
    "ssl3-sha1": "41b615a34ee2cec9d84a91b141cfab115821950b",
    "whirlpool": "6c6a9e71e3be4946d24bb0e49a57b50aeda335139ad496822e0c27ee8a647c9fa708b1039d94c28387b6be7132251c45a28ba31971770bd0ecaafa10fe1f210f"
  },
  {
    "input": "AAAAAAAP///////////gAAAAAAP//8AAAAAAAAAAAAAAAAAAAAD/////////wAAAAAAAAf///////AAAAAAAAAAAAAAAAP//wAAH///////////////////wAAAAAAAAAAAAAAB////8AAAAAAAAAAAP/////+AAAAAAAAAAAAAAAH//////////////////gAAAAAAH//////////////////8AAAAAAAAAAAAAAAAAAAAAAf///////////////4AAAAAAAAAAAAAf+AAAAAAAAAAA////+AAAAAAAAAAAAAAAAB//////////////////8AAAAAAAAAAA/////////////wAAH////////////f//////////////wAAAAAAAAAAAAAAAAAAP/////////////+AAAAAAAAAAAAAfwAAAAAA//////gAAAAAAAAAAAAAH///////////////////4AAf////////////////4AAAAAAAAAAAAAAAAAAAAAAf//////////////////8AAAAAAAAAAAAAP//////////////////////wAAAAD//////////4AAAAAAAAAAAAAAAAAAH///////////////////wAAAAAAAAAAAAAAAAAAAAAAf///////////////////wD/8AAAAAAAP////////////////////wAAAD///////////////////4AAAAAAAAAAAD/////////////////////wAAAAAAAAAP////////////AAAAAAAAAAAAAAAAAAB////////////////4AB//////////////////////AAAAP//////////////////8AAAAAP///////////////////wAAAAAAAAAAAAD///////////////4AAAAAAAAAAAAAH////////wAB///+AAAAAAAf///////8P/AAAB////////////8AAAD////////////////gAAAAAAAAAAf/////wAAAAAAAAP/////////+AAAAAAB//////////////////////4AAA/////8AAAAAAAAAAAAPgAA/////////////////////wAAAAAAAAAAAAAAAAQAAAAAAAAAf/////+AAAAAAAAAAAAAAAAAAD//////////////////wAAAAD///////////////+AAAAA///////////////4AAAAAAAAAAAAAAAAA/////////////gAAAAAAAAAAAAAAP//wAAAAABAAAAAAAAAAAAAAAAAf/////////////////////gAAAAAAAD///////////AAAAAAAAAAAAAAAAAAAAD//////////////////gAP///////////////4AAAAAAD/////////////////////AAAAAAAAAAAH/////////////4AAAAAAAAAAAAAD///////////8AAf/gAAAH//////////////AAD//wAAAAAAAAAAAAAAD////////////////4AD////////////4f//////////////////+AAAAAAAAAAAAAAD////////////////+AAAAAAAAAf//////gAB/////////+AAAAAAAf/////8AAAAAAAAAAAAAAAAAAAAD///////wAAP/////////////gAAAAAAAAAAAAAAD//////4AAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAf////////////////+AAAAAAAAAAAAAAAAAAA///////////////geAAAAAAAAB///////////////////AAH///////////////////4AAAAAAAAAAAAAAAAAD//////////////////4AAAAAAAH//////wB///////////////8AAA//////////wAAAAAAAAAAH/////////////////AAAAAAAAAAAAAAAAAAH///8AAAAAAAAAAAAAAAAAAAAAD+AAAAAAAAAAAAAAAAAAAf//////+AAAAAAAAAAAAAAAAAAAAAAB///////gAAAAAAAAAAAAA//////////gAAAAAAAAAAAAAAAAAAAB/////////////////////8AAAAAH/////////////////wP/////////////////4AAAAAAAAAAAAA///////////////////AAAAAAAAAAAf//////AAAAAAAAAAAAAAAAAAAAAAB////////////8AAAAAAAAA////////////wAAAAAAAAAAAH/////gAf/4AAAAAAAAAAA////////8AH///////////////+AAAAAAAD////////8AAAAAAAAAAAAAH/////////////AgAD//////////////wAAAAAf//////////////////////wAAAAAAAAAAAAD/////////////4AAAAAAAD//////////////4AAAA///////+AAAAAAAAAAAAAAAAAAAAAH//////////////+AAAAAAAAAAAAAAAAAAAAAA//////////////4AAAAAAAA//////////////////8AAAAAAAAAAAAP///////4AAAAAAAAAAAAAAAAAD///////+AAAAAAAAAP//////////////+AAAAAAAAAAAA///8AAAAAAAAAAAAAAAAAAAf///////4AAAAAAAAAAf////////+AAAAAAAAAAAAAAAA///////////////////////gAAAAAf/////////////////////AAAAAAAAAAAAAAAAAAH/////////////////////8AAAAAAAAAP////+Af/////////////+AAAAAAAAA//////wAAAAAAAAAAAAAAP///////AAAAA///////////////////8AAAAAAAAAf////AAAAAAAAAAAAAD////////////AAAAAAB///////////////////wAAAAAD///////wAAAAAAAAAAAAAAA///////////////wf////////////////8AAf//////////////////8AAAAAAAAAAAP////////////////4AAAAAAAAAAB/////////+AAAAAAAAAAAAAAAAAAAB///////+AAAP/////////////////8AAAAAAAAAAAAAB//////4AAAAAAAAAAAAA///////////",
    "DSA": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "DSA-SHA": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "DSA-SHA1": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "DSA-SHA1-old": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "RSA-MD4": "5cdebaaaae4a5022bce4e83b66b489f1",
    "RSA-MD5": "1149c8fc988799f43f6e5069355e108b",
    "RSA-MDC2": "7880837aef2ab72eec654aaaf31d5456",
    "RSA-RIPEMD160": "5b48ac1980cc2ce9256fea3e39758189912951d6",
    "RSA-SHA": "5494bdecd5ab6fc01c532190a7850b275160b657",
    "RSA-SHA1": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "RSA-SHA1-2": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "RSA-SHA224": "a29361eac82a2c318f2f6de642ea72a664ded2783653f3fe0a58b652",
    "RSA-SHA256": "4d8963b832c44bab059a206f162890fff4eafd71e535a03609a67fe3c31de9e3",
    "RSA-SHA384": "fe798718bb620d38444c3f43f17604b68a08f6c28635a094e48b6144bc49b7fbc7c82463e3834a80f3ea541d81b274d7",
    "RSA-SHA512": "1b627ee9d88d2c8ef7f883f7ca84d888e7fedfda36c32b2e2e2f066e29bb0b42938f4ae7e12b18840050a8f7494caa1699836ba921bc17d6708d503b893281f0",
    "dsaEncryption": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "dsaWithSHA": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "dsaWithSHA1": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "dss1": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "ecdsa-with-SHA1": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "md4": "5cdebaaaae4a5022bce4e83b66b489f1",
    "md4WithRSAEncryption": "5cdebaaaae4a5022bce4e83b66b489f1",
    "md5": "1149c8fc988799f43f6e5069355e108b",
    "md5WithRSAEncryption": "1149c8fc988799f43f6e5069355e108b",
    "mdc2": "7880837aef2ab72eec654aaaf31d5456",
    "mdc2WithRSA": "7880837aef2ab72eec654aaaf31d5456",
    "ripemd": "5b48ac1980cc2ce9256fea3e39758189912951d6",
    "ripemd160": "5b48ac1980cc2ce9256fea3e39758189912951d6",
    "ripemd160WithRSA": "5b48ac1980cc2ce9256fea3e39758189912951d6",
    "rmd160": "5b48ac1980cc2ce9256fea3e39758189912951d6",
    "sha": "5494bdecd5ab6fc01c532190a7850b275160b657",
    "sha1": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "sha1WithRSAEncryption": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "sha224": "a29361eac82a2c318f2f6de642ea72a664ded2783653f3fe0a58b652",
    "sha224WithRSAEncryption": "a29361eac82a2c318f2f6de642ea72a664ded2783653f3fe0a58b652",
    "sha256": "4d8963b832c44bab059a206f162890fff4eafd71e535a03609a67fe3c31de9e3",
    "sha256WithRSAEncryption": "4d8963b832c44bab059a206f162890fff4eafd71e535a03609a67fe3c31de9e3",
    "sha384": "fe798718bb620d38444c3f43f17604b68a08f6c28635a094e48b6144bc49b7fbc7c82463e3834a80f3ea541d81b274d7",
    "sha384WithRSAEncryption": "fe798718bb620d38444c3f43f17604b68a08f6c28635a094e48b6144bc49b7fbc7c82463e3834a80f3ea541d81b274d7",
    "sha512": "1b627ee9d88d2c8ef7f883f7ca84d888e7fedfda36c32b2e2e2f066e29bb0b42938f4ae7e12b18840050a8f7494caa1699836ba921bc17d6708d503b893281f0",
    "sha512WithRSAEncryption": "1b627ee9d88d2c8ef7f883f7ca84d888e7fedfda36c32b2e2e2f066e29bb0b42938f4ae7e12b18840050a8f7494caa1699836ba921bc17d6708d503b893281f0",
    "shaWithRSAEncryption": "5494bdecd5ab6fc01c532190a7850b275160b657",
    "ssl2-md5": "1149c8fc988799f43f6e5069355e108b",
    "ssl3-md5": "1149c8fc988799f43f6e5069355e108b",
    "ssl3-sha1": "ab3dd6221d2afe6613b815da1c389eec74aa0337",
    "whirlpool": "2cb869fdc28019d68b2e5eb970d84ef87d9124e36df34c05716511c72926f3395396c7a4dc93c8ce31287befd7fd1f79c951a9a335056b57b965d18640137622"
  },
  {
    "input": "AAAAAAAD//////////////////4AAAAAAAAf/////////////////////4AAAAAAAAAAAAD////////////AAAAAAAAAAD/////////gAAf///AH////////gH//gAAAAAAAAAAAAAAAAP////////+AAAAAAAAAAAAAAAAAAAAAAB/////////8AAAAAAAAAH//////////wAAAAAAAAAAAAAADAf////////////////////+AAAAAAAAAAAAAAAf4AAAAAf/////+AAAAAAAAAAAAAAf/////////////////////AAAAAAAAAAAAAAAAAAAAAAAP////////////////AAAAAAAAAAAAAAAAAADwAAAAAAIAAAAAAAAAAAAAAAAAB/////////////////+AAAAAAA//////gAD//////////+AAA/////+AAAAAAAAAAAAAAAH/////////8AAAAAAAAAAAAAAAAAAAAAP///////////////8AAAAAH//////////////gAAAAB//////////8AAAAAAAAAAAAAAAAA/////////wAAAAAAAAAAAAAAAAAAAAP///////////////////AAAAAAAAP/////////////+AH/////////////AAAAAAAAAAAAAAAAAAf//////////////gAAAAAAAAAAAAAH///////////////////gAAAAH4AAAAAAAAAAAAAAAAAAH//////////////gAAAAAD//////AAAAAAH/////////+P/wAAAAAAAAAAAAAAAAAAAAAD///////////8AAAAAAAAAAAAAAAAAAAAAAH/////wAAAAAAAAAAAB/////////////wAAAAAAAAAAAAAAAAAAH/////////////////gAAAAAAAAAAAAAAAAAAAAAAH//////////////////gA////////////////////4AAAAAAP////////////////4AAAAAAA///////////////+AAAAAAAAAAAAAB///////////8AAAAAAAAAAAAAAAAAH/8AAAA//////////////////wAAAAAAAAAAAAAAAP/////////8AAP/////////////////4AAAAAAAAAAAAAH/////////wAAAAAAAAf/////4AAAA/wAAAA//gAAAAH//////////////////////wAAf//////////////////////gAAAAAA////////////////////wAAAAAP///////////////+AAAAAAAAAAD////////////////gAAAAAAAAAAAAA//////AAAAAAAAAAAAAAAAAAD////4AAAAAAAD///////////wAAAAAAAAAAAAAAAP////////////////////wAAAAAAAAAAAAAAAAAAAAAA/////////////////////+AAAAAAAAAAAAAAAAAAAcAAD//4AAAAAAAAAAAAAAAAAAAAH///////////////////////gAH/////8AAAAAAAAAAAAAAAAAAAAAAAf//////////////////////8AAAAAAAAAAAAAAAAAAAAf//////gAP//8AAAAAAAAAAAAAH//////4AAAAAAAAAAAAAAAAAAAAAAD/////////////4AAAAAAAAH///////8AAAAAAAAAP//////wH//////////////////////wAAAAf///////gAB////////////////////AAAAAAAAAAAAAAAAAAAAAf////+AAAAAAAAH//////////////////////+AAAAAAAAAAAAAAAAAH////////////////////+AAAAAAAAAH/////4AAAAAAAAAAAAAAAAAAAAf/////////////AAAA///////////4AAAAAAAAH/////////8AAAAAAAAAAAAAAAAAAP//gf///////////////AAAAAAAAAAAAAAAAf///gAAAAAAAAD//////////////AAAAAAAAAAAAAAAAAAAAD/////////4AAAAAAAAAAAP///////////////////gAAAAAAAAAAIAAAAAAAAAAAAAAAAAD////////8AAAAAAAAAAA////////gAAAAAAAAD/////////////////////8AAAAA+AAAAAAAAAAAD//////////////////4AAAAAAf////////////4AAAAAAAAAAAAAAAAB////////////wAAAAAAAAAAAAAAAAA//////////////////////gAAAAP////////////////////wAAAAAAAAAAAAAAAAAAAAA/////////////////wAAAAAAAAAD/gAAAAAD///////AAAAAAAAAAA///////////////////wAAAAAAAAAAAAAAAAAAAAAAB//////////////////////wAAAAAAAAAAAAAAAP/////////////////////wAAH//////wAAAAAAAAAAAAAAAAAAAH////////////////////4AAAAAAAAAAAAAAAAAAAAf////////////APAAAAAAAAAA/////////////8D////////////////4AAAAAAAAAAAAAAAAAAAAf//////////////AAAAAAAAH////////////////////AAAAAAAA//////8AAAAAAAAAAAAAB////////////8AAAf/////////////////+AH///////////AAAAAAAAAAA///////////////////gAAAAAAAAAAAAAD//wAAAAAAAAAAAAAAAAAP////wAAAAAAAAAAAAAP//////////gAAAAAAAAAAAAH////////////////8AAAAA/////////////////////+AAAAAAAAAAAAAAAAAAAAAAf///////////wAAAAAAAf+AAAAAAAAAAP/////+AAAAAAAAf//////////////8AAAAAB//////////////////////wAAAAAAAAAAAAAAAAAAP//////////+AAAAAAAB/////4AAAAAAAAAf///AAAAH/////////////////////8AAAAAB/wAAAAAA////////////////wAAAAAAf//////////////////wAAAAAAAAAAAAAAAB///////////4AAAAAAAAAAAAAP////gAAAAAAf//////////wAAAAAAAAAAAAAAAAAAAAAH////////8AAAAAAAAAAAAB/////////////gAAAAAAAAAAAAAAP///////////////////8ADAAAAAAAAAAAAAAAAAAAf/////////////////+AAAAAAAA=",
    "DSA": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "DSA-SHA": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "DSA-SHA1": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "DSA-SHA1-old": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "RSA-MD4": "f7cb5e6e54cac8107cc3af4ba9f63ea2",
    "RSA-MD5": "4129891ff13ddd62820f6f3cdbfa95da",
    "RSA-MDC2": "04a5d8697c894898bd92a7588f14a7be",
    "RSA-RIPEMD160": "41987e239a937f420a323d696efbc730f276cbee",
    "RSA-SHA": "ee2a1fc86530939c3487529b90ce66783750c566",
    "RSA-SHA1": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "RSA-SHA1-2": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "RSA-SHA224": "5d0dfeae80140c02dbc13963740787551048288d93fb7de3fe932ac6",
    "RSA-SHA256": "6ebf98b52fc3c4e77257d176b47d10729baeec4066a9bc78a89d7d02af7ab2cf",
    "RSA-SHA384": "946f233f6c9ac9581384e13395f91088774edfce52a408ecc440ebf64ac3279298d392687726f56cf3b78ac2c0775259",
    "RSA-SHA512": "29bcfa8101e8288470c5bd0cf671f52dfc7e8a4fe0026d6d3b6bb86a84d995d9f684dcf6e5a6870cec74f2fa252fa99f5e38144033f105c723d6256199e143f9",
    "dsaEncryption": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "dsaWithSHA": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "dsaWithSHA1": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "dss1": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "ecdsa-with-SHA1": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "md4": "f7cb5e6e54cac8107cc3af4ba9f63ea2",
    "md4WithRSAEncryption": "f7cb5e6e54cac8107cc3af4ba9f63ea2",
    "md5": "4129891ff13ddd62820f6f3cdbfa95da",
    "md5WithRSAEncryption": "4129891ff13ddd62820f6f3cdbfa95da",
    "mdc2": "04a5d8697c894898bd92a7588f14a7be",
    "mdc2WithRSA": "04a5d8697c894898bd92a7588f14a7be",
    "ripemd": "41987e239a937f420a323d696efbc730f276cbee",
    "ripemd160": "41987e239a937f420a323d696efbc730f276cbee",
    "ripemd160WithRSA": "41987e239a937f420a323d696efbc730f276cbee",
    "rmd160": "41987e239a937f420a323d696efbc730f276cbee",
    "sha": "ee2a1fc86530939c3487529b90ce66783750c566",
    "sha1": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "sha1WithRSAEncryption": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "sha224": "5d0dfeae80140c02dbc13963740787551048288d93fb7de3fe932ac6",
    "sha224WithRSAEncryption": "5d0dfeae80140c02dbc13963740787551048288d93fb7de3fe932ac6",
    "sha256": "6ebf98b52fc3c4e77257d176b47d10729baeec4066a9bc78a89d7d02af7ab2cf",
    "sha256WithRSAEncryption": "6ebf98b52fc3c4e77257d176b47d10729baeec4066a9bc78a89d7d02af7ab2cf",
    "sha384": "946f233f6c9ac9581384e13395f91088774edfce52a408ecc440ebf64ac3279298d392687726f56cf3b78ac2c0775259",
    "sha384WithRSAEncryption": "946f233f6c9ac9581384e13395f91088774edfce52a408ecc440ebf64ac3279298d392687726f56cf3b78ac2c0775259",
    "sha512": "29bcfa8101e8288470c5bd0cf671f52dfc7e8a4fe0026d6d3b6bb86a84d995d9f684dcf6e5a6870cec74f2fa252fa99f5e38144033f105c723d6256199e143f9",
    "sha512WithRSAEncryption": "29bcfa8101e8288470c5bd0cf671f52dfc7e8a4fe0026d6d3b6bb86a84d995d9f684dcf6e5a6870cec74f2fa252fa99f5e38144033f105c723d6256199e143f9",
    "shaWithRSAEncryption": "ee2a1fc86530939c3487529b90ce66783750c566",
    "ssl2-md5": "4129891ff13ddd62820f6f3cdbfa95da",
    "ssl3-md5": "4129891ff13ddd62820f6f3cdbfa95da",
    "ssl3-sha1": "0706d414b4aa7fb4a9051aa70d6856a7264054fb",
    "whirlpool": "74784784f3813eeea466ba58d7299eaec37930a54ec9003ce90f44dc935b75a00291e333e94064885e1b7fb25cccae6076cb7ea5496e107d38456af7ed180b4d"
  },
  {
    "input": "/////4AD////////////////gAAAAAAAAAAAAAAAAAAAAAAQAAAAAAP//////////////gAAAAAAAAAAAAAAAAAAB//////////////wAAAAAAAAAAAAAAAAAAf///////////////8AD//////////////////////AAAAAAAAAAAAAAAAAAAAAAAD////////////////wAAAAAD4AAAAAAAAD////////////gAH/////////////////+AAAAAAAAAAAAAAAAAB//////+AAAAAAAAAAH/////////////////////gAAAAAAAAAAAAP//////////////////////wAAAAAAAAAD//////////wAAAAAAAAAAB/////////wAf///////////////////8AAAB/////////8AAP/////////////////+AAAAAAAAAAAAAAAH///4AAAAAAAAAAP////wAAAAAAAB///////////////////8AAAAAAAD/////////////////4AAAAAAAAAAAAAAB/////////////+AAAAAAAAAAAP////AAAAAAAAAAAAAAAAAAAAAAD///////////////////////4AAAAAAAAH//+B///////////4AAAAAAAP///////////////////////AAAAAAAAAADwAAAAAAAAAAf/////////AAAAAAAAAAAAf///////////////8AAAAAAAAAAAAAAAAAAAAAA////////////////////////wAAAAAAAAAAAAAAAAP////////////////////gAAAAAAAAAAAAAAAAAAH/////////AAAAAAAAAAAAAAAAAAAAAAB//////////////////////8AAAAAAAAAAAD///////8AAAAAAAAAAAAAAAAAAAAA/////////////B/////////////gAAAAAAAAAD////////8AAAAAAAAAAAAAB////+AAAH/////////////////////AAAAAAAAAAAP//+AAAP///////////8AAAAP////////////////////8AAAAAAAAAAAAAAAAAH////AAAAAAAAAAwAAAAAAAAAAAAAAB///////////////8AAAAAAAAAAAH/////8AH/////8AAf/////8AAAAAAAAAAAAAAAADgAAAAAAAAAAAAAAAAH//////////wAAAAAAAAAAAAD/////////4AAAAAAAAf//////////////////AAAAAD///AAAAAAAAAAAf/////////gAAAD/////////////gAAAAAAAAAAAAAAAAAAAAAD///////wAAAAAAAAAAAAAAAAA/////////////////8AAAAAAAAAAAAAAAAD///////////AAAAAAAAAAAAAAAAAAAAAP//gAD////////////////wAAAAAAAAAAAAAAAAAAAA//4AAAAAAD//////////////////////wAAAAAAAAAAAAAAAAAAAD////////////////wAAAAAAAAAAH///////////////////////gAAAAA//wAAAAAAAAf///////////////////n//////////////wAAAAAAAAAAAAAAB////////////////wAAAAAAAAAAAH/AAAAAAAAAAAAAAAAAAAAP/////+AAAAAAAAAAAAD//gAAAAAAAAAAAAAAAf//////////////gAAAAAAP////////////4AAAAAAAAAAAAAAAAAAAAAB/////////+AAAAAAAAAAAAAAAf////////////////8AAAAAAAAB///////////////+AAAAA///////////////////+AAAAAAAAAAAAD///////////////+AAAAAAAAAAAB///8AAAAAAAAAAAAAAAAAAAAAAA//////wAAAAP//////4AAAAAAAAAAAAAP//////////////////////AAAAAAAAAAAAAAD/////////////////4AAAAAAAAAAAAAAAAAAA////////////AAAAAAAAAAAAAAAAAAf//////////////////+AAAAAAAAAH//////////////8AAAAAAAAAAAAAAAAAAAH///////////8AAAAAAAAAAAAAAAH////////////////gAAAAAAAAA///////////////////////AAAAAAAAAAAAAAAAAAAAH////////4AAAAAAAD///////////////////////4AAAAAAAB//////////////////////AAAAAAAAAAA/////////////////8AAAAAAAf////////////4AAAAAAAAAAAAAAf//////gAAAAAAAAAAAAAAD4AAAAAAAAAP////////////gAAAAAAAAAAAAAAAA////////////wAAAAAAAAAAAAAAAAAD/////////////////AAAAAAD///////////////AAAf////////////AAAAAAAAAAAAD//////////////AAAAAAAAAAAAAAAAA/////////////////////4////////////////////////AAAAAAAAAAAAAAAAB///////////////////////AAAAAAAAAAAAAAAAAAAAAAP////////8AAAAAAAAAAAAAAD//8AAAAAAAAAAAAAAB///////////////4AAAAAAAAAAAAAD////////+AH//////////////////////wAf////////+/////////////////+AAAAAAAAAAAAAAAAAAD///////////wAAA/gAAAAAAAAH////wAAAAAAAAAAAAAAAAAAAAAAAf/////////////////8A///////8AAAAAAAf//////////////////4AAAAAAAAAAAAAAAAAAAB/////////////////////wAAAAAAAAAAAAAAfwAAAAAAAAAAAAAAAAAAAH////////wAAAAAAAAAAAAAAAf/4AAAAAAAD///////////////////wAAAAAAAAAD////////////////////4AAAAAAAAAAAAAAD/////+AAAAAAAAAAAAAAAA//4AAAAAP////////////////AAAAAAAAAAH//////////////////////+AAAAAAAAAAP///////8AAAAAAAAf////////+AAAAf////////////////////wP//////+AAAAAAAAAD////////////////8AAAAAAAAAAAAAAAAAAAB//////////////////+AAAAAAAAAAAAAA///////////////////////4AAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAAAAD//+AAAAAAAAAAAAAAAAAH//////////4AAAAAAAAAAH//////wAAAAAAAAf/wAAAAACAAAP////////////////4AAAAAAAB/////////////////+AAAAAAAH///////////////////w==",
    "DSA": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "DSA-SHA": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "DSA-SHA1": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "DSA-SHA1-old": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "RSA-MD4": "8d80f6efa5a33bfc364c29860f6c2e25",
    "RSA-MD5": "c8758df3c9ad4d311516ea39fe734052",
    "RSA-MDC2": "719abf1d4baacdcc5cc747328b7231d6",
    "RSA-RIPEMD160": "6ee029c2ffb38ece99bedc4e6e32cfea24bd1d9a",
    "RSA-SHA": "033cf8ed34dba8f75bb281ba68d864ed597eff88",
    "RSA-SHA1": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "RSA-SHA1-2": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "RSA-SHA224": "3d27689a41ba35dfa6e8504f64cd306d541a1d4694043290bea2b0f6",
    "RSA-SHA256": "366cd811c075198d1749db7075c4c333b6f347b64e44b3744ef28a3957a0feb1",
    "RSA-SHA384": "6139eb7aa8011ddaab07af0503b889c8ab9331438b08407408802bc2df5b732dd0d710a3f1d175d1e270baa1c78e1ca1",
    "RSA-SHA512": "d275f1f6410bf258738b02db1348af55ec1fa524240e9516e5b4ba9066a930e781d7236d7257c998800e64349fa1ffa78d168bf8a626dade502af7472f3f3298",
    "dsaEncryption": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "dsaWithSHA": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "dsaWithSHA1": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "dss1": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "ecdsa-with-SHA1": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "md4": "8d80f6efa5a33bfc364c29860f6c2e25",
    "md4WithRSAEncryption": "8d80f6efa5a33bfc364c29860f6c2e25",
    "md5": "c8758df3c9ad4d311516ea39fe734052",
    "md5WithRSAEncryption": "c8758df3c9ad4d311516ea39fe734052",
    "mdc2": "719abf1d4baacdcc5cc747328b7231d6",
    "mdc2WithRSA": "719abf1d4baacdcc5cc747328b7231d6",
    "ripemd": "6ee029c2ffb38ece99bedc4e6e32cfea24bd1d9a",
    "ripemd160": "6ee029c2ffb38ece99bedc4e6e32cfea24bd1d9a",
    "ripemd160WithRSA": "6ee029c2ffb38ece99bedc4e6e32cfea24bd1d9a",
    "rmd160": "6ee029c2ffb38ece99bedc4e6e32cfea24bd1d9a",
    "sha": "033cf8ed34dba8f75bb281ba68d864ed597eff88",
    "sha1": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "sha1WithRSAEncryption": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "sha224": "3d27689a41ba35dfa6e8504f64cd306d541a1d4694043290bea2b0f6",
    "sha224WithRSAEncryption": "3d27689a41ba35dfa6e8504f64cd306d541a1d4694043290bea2b0f6",
    "sha256": "366cd811c075198d1749db7075c4c333b6f347b64e44b3744ef28a3957a0feb1",
    "sha256WithRSAEncryption": "366cd811c075198d1749db7075c4c333b6f347b64e44b3744ef28a3957a0feb1",
    "sha384": "6139eb7aa8011ddaab07af0503b889c8ab9331438b08407408802bc2df5b732dd0d710a3f1d175d1e270baa1c78e1ca1",
    "sha384WithRSAEncryption": "6139eb7aa8011ddaab07af0503b889c8ab9331438b08407408802bc2df5b732dd0d710a3f1d175d1e270baa1c78e1ca1",
    "sha512": "d275f1f6410bf258738b02db1348af55ec1fa524240e9516e5b4ba9066a930e781d7236d7257c998800e64349fa1ffa78d168bf8a626dade502af7472f3f3298",
    "sha512WithRSAEncryption": "d275f1f6410bf258738b02db1348af55ec1fa524240e9516e5b4ba9066a930e781d7236d7257c998800e64349fa1ffa78d168bf8a626dade502af7472f3f3298",
    "shaWithRSAEncryption": "033cf8ed34dba8f75bb281ba68d864ed597eff88",
    "ssl2-md5": "c8758df3c9ad4d311516ea39fe734052",
    "ssl3-md5": "c8758df3c9ad4d311516ea39fe734052",
    "ssl3-sha1": "3cbf8151f3a00b1d5a809cbb8c4f3135055a6bd1",
    "whirlpool": "030e9a17c45329df995ea0cb972fa1bd8a2a50b620630acf876437c55a285a76f861b86d3640cf1e1c37368c53a80ba2cbc1504404aaacc82857bbc4095d647c"
  },
  {
    "input": "///////8AAAAB/////////////////////+AAAAAAAAAAAAAAAAAAH////gAAAAAAAAAD////////////////////wAAAAAAAAAAAAAAAH/////////////////////AAAAAAAf/////+AAAAAAAAAAAB////////////////wAAAAAAAAAAAAAAAAAf/////////////////////gAAAAAAAAAAAAAAAAAAAAAA////////////////AAAAAAAAAAAAAAAAAAAAAAAf///////////////8AAAAAAAAAAAAAAAAAAAAAAAB////////////////////AAAAAAAAAAAAAAAAAAAAAAAA///////////////////8AAAAAB/////////////wAAAAAB///////////////4AAAAAAAAAH////////8AAAAAAAAAAAAAAAAAB///////8AAAAAAAAAAAAAAAAAB//////////////////gAAAAAAAAAAAD//////8AD//////////////////////+AAAAAAAAAAAAAAAAAAAAAAD//////+AAAAAAAAAAAAAAAAAAAAAf////////////////+AAAAAAAAAAAAAAAAAD//+AAAAAAAAAAAAAAAAAAAAB/+AAAAAAAAAAAAAAAAD////////////////////////wAAAAAAAAAAAAAAAAAAAAH//AAAAAAAAAAAAAAAAAAAH////////////////////wAAAAAAAAAAAAAAAAAAAAf/////////4AAAAAAAAAAAAAAAH/8AAAAAAAAAAAAP///////////AAAAAAAAAAAAAAAA////////////////+AAAAAAAAAAAAAAAAAAf//////////////////////gH///////////////wAAAAAAAAAAAA///////////////////////+AAD/////AAAAAAAAAAAAAAAAf////////////wAAAAAAAAAAAAAAAAAAAAAAAAf/////8AAAAB///////////////4AAAAAAAAAAAAAAAAAAAA///4AAAAAAP/////////////////////+AAAAAAAAA//////////////AAAAAAAAAAAD/////gAAAAAAAAAAAAAAAAAAAAAD///////////////////wAAAAAAAD//////////AAAAAAAAAAAAAAAAAAAAf////////////9///////wAAAAAAAAAAAAAAAAAAAAAAAP//////////////+AAAAAAAAAB8AAAAAAAAAAP//////////////////////gH/////////////////AAAAAAAAAAAAAAAf////////////+AAAAAAAAAAA////4AAAAAAAAAAAAAAAAAAP///////////////////gAAAAAAAA///AAAAAAAAAAAAAAAAP////////////4AAAAAAAH/////////////4AAAAB//////////////////////wAAAAAAAAAAAAAAAAAAAAD7///AAAAAAAAAAAAD//4AAAAAAAAAAAAAD/////////////////8AAAAAAAAAAAD/////8AAAAAAAAAAAAAAAAAAAAAAAf//////////////////////4AAAAAAAD////////////////////////8AAAAAAAAAAAAAAAAAf////////////////4////////////////////////+AAf////////gAAf///////////////////////+AAAAAAAAAAH///////8AAAAAAAAAAAAAAAAAAAAH/////8AAAAP////AAAAAAAAAAAAAAAAB///4AAAAAAAAAAAAAAAAB///////////////AAAAAP/////////////AAAAAAAAAAAAAAAAAAAH/4AAAAAAAAAAAAAAAAAAH///////////AAAAAAAAADAAAAAAAAAD//////////////////+AP/////////////////wAAAAAAAf/////////AAAAAAAAAAB//gAAAAAAAAAAAAAAH8P/////////////8AAAAAAAAAAAAAAAA//8AAAAAAAAAAAAAP//////////////8AAAAAAAAAAAAAAAH/////+AAAAAAAAAAAAAAAH/gB///////+AAAAAAAAAAAAAAAA/////////////////wAAAAAAAAAAP//////////////////4AAAAAAAAAAAAAAAD///////////////////////wAAAAAAAAAAAAAAAAAAH///////////////////+AAAAAAAAAAAAAAAAAAAD//////wAAAAAAAAAAAAAAAH//gAAAAH///////wAAAAA//////////////8AAAAAAAAAAAAAAH///+AAAAAAAAf/gAAAAAAAAAAAB/////////////gAAAAAAAD//////wB//////////////////////AAAA///////wAAAAAA////////////////////wAAAAAAAAAAAAAP/////////////////wAAA///////////////////////8AAAAAAAAAAAAAAAAAAAAAAA////////////////4AAAAAAB//wAAAAAAAAP8AAAAAAD////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////gAAD////////////+AAAAAAAAAAAAAAAAAAAAH/////////+AAAAAAAH///////////////////wAB////8AAAAAAAAAAAAAAB/////////wAAAAAAAAAAAAAAAAAAAAAAAAP//////wAAAAAAAAAAAAAAAAAAAAAAP///////////gAAAAAAAAAP//////////8AAAAAAAAAAAAA///////////////////AgAAAAAAAAAAB////////////////////AAA/////+AAAAAAAAAAAAAAAAAAD/////////AAAAAAAAAAAAAAH/////////////+AH///////////8AA////+AAAAAAD///////////8AAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAB//////////////wAAAAAAAAAAAAAAAAf///////////////////8AAAAAAAAAH//////////////4AAAAAAAAAAAAAAAAAAAAAAAf////////////AAAAAAAAAAAAAAAAAAAAAAf///////+AAAAAAAAAAAAB///////+AAAAAH//////////////////////4AAAAAAAAAAAAAAAAAAAAAB////wAAf/////////gAAAAAAAAAAAAAAAAAAAAA////////////////////////4AAAAAAAAAD///////////////gAAAAAAAAAAAAAAAAAAAAAAAB//////wAAAAAAAAAAAAAAAAAAAAAP///////4AAAAAAAAAB///////////8AAAAAD//////////////+H//////////////////////8AAAAAAAB////////////////4AAAAAAAAAAAAAAAAAAAH//////8AAAAAAAAAAAAAAAAAAH///////////////////////4AAAAH///////////////gAAAAAAAAAAAP////////////////////4AAAAAAf////////////////////",
    "DSA": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "DSA-SHA": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "DSA-SHA1": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "DSA-SHA1-old": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "RSA-MD4": "6546fda809b5e5fa4b38b86c3f08843f",
    "RSA-MD5": "360ddf0b658fd764ef5ae9bf7a8a1a12",
    "RSA-MDC2": "2ff8e73b38b235c5ae4b3bfcb7e030d7",
    "RSA-RIPEMD160": "03f065c687b56eb6bdd5f488c4b8a2bdc55a28f3",
    "RSA-SHA": "b02770779defe28faf4284b94c11a13087ced56f",
    "RSA-SHA1": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "RSA-SHA1-2": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "RSA-SHA224": "7f0f3f16f5d0175266c387e8d0f29bad99dfd4c94d0a8fb956a21084",
    "RSA-SHA256": "712157d7d59011c4bf1ee690217f4b0f855816e9bbee6b6aff277b9645340c9a",
    "RSA-SHA384": "71affb53c90f2e80fe33cd5072bb64a2f597d6a5c7d694a46bd8c188863d8a66c7403218706656c4e58245716097bd47",
    "RSA-SHA512": "9892c6d0f13e39f870d42d1bec54a4cd1823c502026f891227fecf7cd262f10a5b35f3d9b96831ebc4801ffa864ace05b1ba80b31eb91f7031ba8e07f6a91204",
    "dsaEncryption": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "dsaWithSHA": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "dsaWithSHA1": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "dss1": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "ecdsa-with-SHA1": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "md4": "6546fda809b5e5fa4b38b86c3f08843f",
    "md4WithRSAEncryption": "6546fda809b5e5fa4b38b86c3f08843f",
    "md5": "360ddf0b658fd764ef5ae9bf7a8a1a12",
    "md5WithRSAEncryption": "360ddf0b658fd764ef5ae9bf7a8a1a12",
    "mdc2": "2ff8e73b38b235c5ae4b3bfcb7e030d7",
    "mdc2WithRSA": "2ff8e73b38b235c5ae4b3bfcb7e030d7",
    "ripemd": "03f065c687b56eb6bdd5f488c4b8a2bdc55a28f3",
    "ripemd160": "03f065c687b56eb6bdd5f488c4b8a2bdc55a28f3",
    "ripemd160WithRSA": "03f065c687b56eb6bdd5f488c4b8a2bdc55a28f3",
    "rmd160": "03f065c687b56eb6bdd5f488c4b8a2bdc55a28f3",
    "sha": "b02770779defe28faf4284b94c11a13087ced56f",
    "sha1": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "sha1WithRSAEncryption": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "sha224": "7f0f3f16f5d0175266c387e8d0f29bad99dfd4c94d0a8fb956a21084",
    "sha224WithRSAEncryption": "7f0f3f16f5d0175266c387e8d0f29bad99dfd4c94d0a8fb956a21084",
    "sha256": "712157d7d59011c4bf1ee690217f4b0f855816e9bbee6b6aff277b9645340c9a",
    "sha256WithRSAEncryption": "712157d7d59011c4bf1ee690217f4b0f855816e9bbee6b6aff277b9645340c9a",
    "sha384": "71affb53c90f2e80fe33cd5072bb64a2f597d6a5c7d694a46bd8c188863d8a66c7403218706656c4e58245716097bd47",
    "sha384WithRSAEncryption": "71affb53c90f2e80fe33cd5072bb64a2f597d6a5c7d694a46bd8c188863d8a66c7403218706656c4e58245716097bd47",
    "sha512": "9892c6d0f13e39f870d42d1bec54a4cd1823c502026f891227fecf7cd262f10a5b35f3d9b96831ebc4801ffa864ace05b1ba80b31eb91f7031ba8e07f6a91204",
    "sha512WithRSAEncryption": "9892c6d0f13e39f870d42d1bec54a4cd1823c502026f891227fecf7cd262f10a5b35f3d9b96831ebc4801ffa864ace05b1ba80b31eb91f7031ba8e07f6a91204",
    "shaWithRSAEncryption": "b02770779defe28faf4284b94c11a13087ced56f",
    "ssl2-md5": "360ddf0b658fd764ef5ae9bf7a8a1a12",
    "ssl3-md5": "360ddf0b658fd764ef5ae9bf7a8a1a12",
    "ssl3-sha1": "da5d6a0319272bbccea63acfa6799756ffda6840",
    "whirlpool": "e64a7eada9c6be478bcc285e8ad70c6e90e216ec90af849d5e2b2ca7b5e221c2f301e9ef240f7abb7f56f9d5554727ea332202958bf2dc8fa15cf985f83f1a5e"
  },
  {
    "input": "/////+AAAAAAAAAAAAAAAA///////////////+AAAAAAAAAAAAH/////////////////AAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAAAAAA/////AAAAAAAAAAAH/////////8AAAAAAP///////gAAD/////////////////4H//////AAAAAAAAAAAAAH//////////////////4AAAAAAAAP////////////////////gAAAAAAAA////////////////////////4AB4AAAAAAAAAAAD////////////////////////AAAAAAAAAAAAAAAA////////////////wAH//////////////////////gA////////////////wAAAAAAAAAAAAAAAAAAB//////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAP//////////4AAAAAAAAAAAAAAAAAAAAAAAB///////////8AAAAAAAAAAAAAAAAf/////////////+A///////////////////////gAAAf/wAAAAAf///////AAAAAAAAAAAAAAAAf///////////////////////wAAAAAAAAAAAD/////8AAAAAAAAAAAAAAAAAAAHAAAAAAAAH/////////////4AAAAAAAH///////////////////wAAAAAAAAf///////wAB/////////////AAB///////////////////+AAAAAAAAAAAAAAAAA////////////////////////8AAAAAAAAAAP////wAAAAAAf///////////////wAAAAAAAAAAAAAAAAAAAP///////////+AAAAAAAAAAAAAAAAAAP/////////+AAAAAAAAAH/////////////////////wAAAAAAAAAAAAAAAAAAAAAD//8AB/4AAAAAAAH//4AAf///////gAAAAAAP/+AAAAAAAAB//+AAAAAAD///////4AAAAAAAAAAAAAAAAAAAB///////////////////////+AAAAAAAAAAAAAf//////////////4AAAAAAAAAAAAAAAAAAAAAAAD////////////7/////gAAAAAAAAAAAAAA/////////AAAAAAAD////////////8AAAAAAAD///gAAAAAAAAf//////wAAAAAA////////+AAAB//4AAAAAAAAAAAD//////8AAAAAAAAAAAAAAAP////gAAAAAAH/////gAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////8AAAH////////////////////AA///////////////////////8AAAAAAAAAAAAAAAAAAAAAAA///////gAAAAAP//////////////AAAAB///AAAAAB///////////+AAAAAAAAAAAAAAAB/////////////////////////AAAAAAAAAAAAAAAAAAAAAD//////////AAAAAAAAAAAAAAAAAAD/////wAAAAAP//////////////4AAAAAAAAAAAAAAAAAAAH///////+AAAAAAAAAAAAAAAAAAH//////////////////////5/////////////////wAAAAAAAAAP//////////8AAAAAAAAAAAAAAAAAAAAAAH/////////////////////wf//AAAf//////////////////////wAAAAAAAAAAAD/4AAAAAAAAAAAAAAAAAAAH////////////4AAAAAAAAAAAAAAAAAAAAAAAAP/////////AAAAAAAAAAAAAAAAAAAAAP/+AAAAAAAAAAAAAAAAAf/+AAAAAAAAAAAAAAAAAAAAB////////////+AAAf////////8AAAAAAAAAAAAAAAAAAAAAA///////////+AAAAAAAA///////////////AAAAAAAAAAAAD/////////////////8AAAAAAAAAAAAAAAAAAAAD////////////////wAAAAAAAAP//////////8AAAAAAf/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAD//////8AAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////4AAAAAAAAAAAAAAAAAAAAf/////////4AAAAAAAAAAAAAA/////+AAAAAAAAAAAAP/////////4AAAAAAAAAAP///////AAAAAAAAAAAAAAAAD/////////////wAAAAAAAAAAAAAAAAB//////////////////8AAAAB//////////wf///////////////AAAAAAAAA///////////+AAAAAAAAAAAAD////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAB/////////////gAAAAAf///////////////////////n/////////////////////gAAAAAAAAA////////////wAAAAABwAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////+AAAAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAAD/8AAAAAAAAAAAAAAAAAAAf//////////////////////8AAAAAAAAAAAAAAAAAAAP/////////////////////+AAAAAAAAAAf/////gAAAAAAAAAAD4AAAAAA////////+AAAAAAAAAAAAAAAAAAAAAAAAB////////4AAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////+AAAAB//////////+AAAAAAAAAAAAAAAB////////////////////+AAAAAAAAAAAAAAAAAAAAAD/////////AAAAAAAAAAAAAAAAAAAAAAB/gP/////////////8AAAAAAAAAAAAAAAAAAAAAAAP/8B//////////////////wAAAAAAAAAAAAAAAAAAAAAAB///////////////wAAAAAAAAAAAAAAAAAAAAAA//////////////////////+AAAAAAAAAAAAAAAAAAAAAAf//////wAP//////////////gAAA///////wB/////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAH///////////////////8AAAAAAAAAAAAAAAB///AAAAAAP/////////////////8AAAAAAAAAAAAAAB///////////AAP////8AAAAAAAAAAAAAAAAAA///////////AAAAAAAAAAAP8AAAAAAAAAAAAAAAAAAAAAP/////////////wAAAAAAAAAAAH///////////////////gAAAAAAAAA////AAAAAAB///////////+AAAAAAAAAAAAAAAAAAAA/////////////////////////AAAAAAAAAf/////wAAAAAAAAAAAAAAAAAAAAAAP///+AAAAAAAAAAAAAAAAAf//////////gAAAAAAAAAAAAAAAAAAAB/wAAAAAAAB//////////////////AAAAAAAB////////////////////8AAAAAAAAAAAAAAAAAB////////////////////////4B////8AAAAAAAH///////////4AAAAAAAAAAAAAAAAAAAAAAAB////////////////////////8AAAAAAAAAB///////////////wA///wAAAAAAAAP/+AAAAAAAAAAAAH/////////////////////8AAAAAAAAAAAAAAAAAAAAH/////////////////gAAAAAAAAAAAAAAAAAH//////////8=",
    "DSA": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "DSA-SHA": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "DSA-SHA1": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "DSA-SHA1-old": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "RSA-MD4": "2bc7fb69124709e4b8cef5e7712f0bb8",
    "RSA-MD5": "ad054e0e84e2b8e2b02ce4dee7688226",
    "RSA-MDC2": "17eee41c2c589421a9401a40401b3ebf",
    "RSA-RIPEMD160": "301d89c7e32a0b04aa270f1f0cfef5fe58e991fa",
    "RSA-SHA": "815900828bfe76a949b4e5e6199e54b416bce6cd",
    "RSA-SHA1": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "RSA-SHA1-2": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "RSA-SHA224": "fb5ac6df4aa6ee0a1e2169e7ed664d5c5bbde1c2252ad5e2f8f9b2e3",
    "RSA-SHA256": "1dc0a697f2a7c1da301b256e6822879f212beb56fbc7fe1b8e877ccd964c132a",
    "RSA-SHA384": "5a144d494964339214820a98f54a8b461eb9ee47dceb866dad4c9f6002d08d93eddceaf3abe250aa35e33dccc115fdd4",
    "RSA-SHA512": "7408a856c2075aae53b77304272161cf6847cef3d4ae8ba3d12c9c9e51ad345049800b7e663e9e75d8e9f8728bea66d2ad46c292625ac850554b3faf605f9956",
    "dsaEncryption": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "dsaWithSHA": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "dsaWithSHA1": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "dss1": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "ecdsa-with-SHA1": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "md4": "2bc7fb69124709e4b8cef5e7712f0bb8",
    "md4WithRSAEncryption": "2bc7fb69124709e4b8cef5e7712f0bb8",
    "md5": "ad054e0e84e2b8e2b02ce4dee7688226",
    "md5WithRSAEncryption": "ad054e0e84e2b8e2b02ce4dee7688226",
    "mdc2": "17eee41c2c589421a9401a40401b3ebf",
    "mdc2WithRSA": "17eee41c2c589421a9401a40401b3ebf",
    "ripemd": "301d89c7e32a0b04aa270f1f0cfef5fe58e991fa",
    "ripemd160": "301d89c7e32a0b04aa270f1f0cfef5fe58e991fa",
    "ripemd160WithRSA": "301d89c7e32a0b04aa270f1f0cfef5fe58e991fa",
    "rmd160": "301d89c7e32a0b04aa270f1f0cfef5fe58e991fa",
    "sha": "815900828bfe76a949b4e5e6199e54b416bce6cd",
    "sha1": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "sha1WithRSAEncryption": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "sha224": "fb5ac6df4aa6ee0a1e2169e7ed664d5c5bbde1c2252ad5e2f8f9b2e3",
    "sha224WithRSAEncryption": "fb5ac6df4aa6ee0a1e2169e7ed664d5c5bbde1c2252ad5e2f8f9b2e3",
    "sha256": "1dc0a697f2a7c1da301b256e6822879f212beb56fbc7fe1b8e877ccd964c132a",
    "sha256WithRSAEncryption": "1dc0a697f2a7c1da301b256e6822879f212beb56fbc7fe1b8e877ccd964c132a",
    "sha384": "5a144d494964339214820a98f54a8b461eb9ee47dceb866dad4c9f6002d08d93eddceaf3abe250aa35e33dccc115fdd4",
    "sha384WithRSAEncryption": "5a144d494964339214820a98f54a8b461eb9ee47dceb866dad4c9f6002d08d93eddceaf3abe250aa35e33dccc115fdd4",
    "sha512": "7408a856c2075aae53b77304272161cf6847cef3d4ae8ba3d12c9c9e51ad345049800b7e663e9e75d8e9f8728bea66d2ad46c292625ac850554b3faf605f9956",
    "sha512WithRSAEncryption": "7408a856c2075aae53b77304272161cf6847cef3d4ae8ba3d12c9c9e51ad345049800b7e663e9e75d8e9f8728bea66d2ad46c292625ac850554b3faf605f9956",
    "shaWithRSAEncryption": "815900828bfe76a949b4e5e6199e54b416bce6cd",
    "ssl2-md5": "ad054e0e84e2b8e2b02ce4dee7688226",
    "ssl3-md5": "ad054e0e84e2b8e2b02ce4dee7688226",
    "ssl3-sha1": "fb4429c95f6277b346d3b389413758dfffeedc98",
    "whirlpool": "489a476b2183c672c1dd57d981d54730c64f6c185c1443919d6a2375b67dc9e45772ab3bb6c55d5933ee348c4b623f9505d1c69e472299e79eb0d0fd8bb3d9c6"
  },
  {
    "input": "AAAB/wAAAD//////////////////////wAAAB////////wAAAAAAAAAAAAAAAAAAH///////////////////+AAAAAAAf////////////////+B////////////////////////gAAAAAAAAAAAAAAAAAf//////////////////AAAAAAAAAAAAAAf///////8A////////////////AAAAAAAB/////////gAAAAAAAAAAAAAAAAAAAAAA//////////wAAAAAAAAAf//////////////AAAAAAAAAAAAAAAAAAAAAAAB///////////8AAAAAAAAAAAAAAAAAAAAAAA//wAAAAAAAAAAAAAH/////////////////////////4AAAAAAAAAAAAAAAAAAAAAAD////////////////gAAAAAAAAAAAAAAAAAAAAAAAAB////+AAAAAAAAD//////////////////+AAAAAD////////////////////////gAAAAAAAAAAAAAAAAAf///////////////////////+AAAAAAAAAH////////gAAAB/////////////////AAAf//////////////4AAAAAAAAAAAAAAAP////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAA/8AH/8AAAAAAAAAAAAAAAAAAAAAAAAAH//////////8AH/////////////wAAAAAAAAAAAAAAAAf//////////8AAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////4AAAAAAA///////////////////////4AB///////////////////+AAAAAAAAAAAAAAAAAAAAAP//////////////////////8AAAAAAAAAAAAAAAAAAAH/////////z//////////////4AAAAAAAAAAAD///////////wAAAAAAAAAAAAAf////AAD//////////+AAAAAAAAAAAAAP////v////////wAAAAAAAAAAf///////////////gAAAAAAAAAAAAAAAAAADAAAAAAf///////AAAAAAAAAAAAAAAAAAAAAP////+P//////////////gAAAAAAAAAAAAAAAAAf///////////////4AAAAAAAAAAAAAAAAAAAAAAD///////+AAAAAAAAAAAAB////wAAAAAAAAAAAAAAAAH//////AAAAAAAAAAAAAAAAAAAB///////////////4AAAAAAAAAAAAAAAAAAAAAH//////////////4AAAAAB/////////////////////+AAAAAAAAA//////////+AAAAAAAAAAAAAAAAAAAAAD//////////////8AAAAAAAAAMAAAAAAAAD////////////////wAAAAAAAAAAB///////////////////4AAAf//////4AAD+AAAAAAAAAAAAAAAAAAAAAAAAH///////////////AAAAf////AAAAAAAAAAAAAAAAAAAAH/////////////AAAAAAAAAAD/////////////////////4AAAAAAAAD////9//////////////8AAAAAA////////////////gAAAAAAAAAAAAB//////////4A////8AAAAAAAAAAAAAA////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAH//////gAAAAAAAAAAAAAAAAAAAAAAAAB////////////////+H//////////////////AAAAAAAAAAB/wAAAAAAAAAB/////////8AAAAAAAAAAAAAAAAAAAAP//////////////////8AAAAAAAAAAAD/////////////////gAAAAAAAAAAAB/////////wAAAAAAAAAAAAAAAAAAAAAAf///////////////wAAAAD///////////////////////+AAAAAAAAAAAAAAAAAB////////////+AAAAAAAAAAAAAAAAAAH///////+AAAAAAA/////8AAAAAAAAAAAAf//4AAAf////////////////////8AAAAAAAAAAA/+AAAAAAAAAAAAAAAAAAAH///////////+AAAAAAAAAAAAAAAAAAAAD///////////////////wAAAAAAAAB//8AAA/////////////////////4AAAAAAAAP//////////gAAAAAAAAAP///////////////////////3//wAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////AAAAAAAAD////////////////wAAAAAAAAP/+AAAf/////////AAAAAAAAD//////////gAAAAAAAAAAAAAAAAAAAAA///wAAAAAAAAB////////////////////4AAAAD////////////////////4AAAAAAAf////////////////+AAAAAAAAAAAAH//////////////+Af///////////////4AAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////4AAAAAAAAAAAAB//////////////////+AAP//////////////////////8AAAAAAAAAAAAAAAAAAAAAAP//////////////////AAAAAAAAAAAAAAAAD//4AAAAAAAAAAAAAAB////AAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////gAAAAAAAAAAAAH////////////////AAAAAAAAAAAH/////////////wAAAAAAAH//////8AAAAAAAAAAAAAAAAAAAAAAAAAD////////////////8AAB/////////wAAAAAAAAAAAAAAAAAAAD///////////////8AAAADgAAAAAD//////////////////////AAAAAAD/////AAAAAAAAAAAAHwAAAAAAAAAAAA/////////////////////gAAAAAAAAAAAAAAAAAAAAAAf///////////////8AAH/////////AAAAAAAAD////////////////////////8AAAAAAAAAAAAAAAAAAAAAP//wAAAAAAAAAAAAAAAAAAAAH/////AAAB///////////////////gAAAAAAAAAAAAAAAAA/////////////AAAAAAAAAAAAB////////////8AAAAAAD///////////gAAAAAAAAAAH///////4AAAAAAP//////////+AAAAAP///////////+AAAAAAH///////8AAAAAAAAAAAAAAAAAAAAA/////////////////h////////////////////////gAAAAAAAAAAAAAAD/wAAAAAAAAAAAAAf//////////gAAAAAAAAAAAAAAAf////////////////////////4AAAAH/////+AB/////wf/////8AAAAAAAH//////wAAAAA//////////AAAAAAAAAAAAP//8AAAAAAD/////////////////////////8AAAAAAAAAAB///////4AAAAAAAAB////////////////+AAAAAAAAAAAAAADgAAAAAAAAAAAAAAAAAAAB/////////////wAAAAAAAAAAAAAAAB/////////////////gAAAAAAAAH///////+Af/////////wAAAAAAAAAAAD////////+AAP/////////////+AAAAAAAAAAAAAAAAAB////4AAAAAAAAAAAAAAAAAAAAAAH///////wAAAAAAAAAAAAAAB/////////+f///////////////////+AAAAAAAH////////////////////4AAAAAAAAAAAAAAAAD//////////////+AAAAAAAAAAAAAAAAAAAAAAAA//////AAAAf//////////////////4AAAAAAAAAAAAAAAAAAAB////////w==",
    "DSA": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "DSA-SHA": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "DSA-SHA1": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "DSA-SHA1-old": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "RSA-MD4": "fe9d13ec54cf0573d1468ee1581530aa",
    "RSA-MD5": "cb434f8c5fad9793ed142805afa861a0",
    "RSA-MDC2": "456888fafa2c19d1ea569f25636b509d",
    "RSA-RIPEMD160": "d823d5f6d68abcafac352520d2a5a177bd01df75",
    "RSA-SHA": "5753c25555e8784edf30519ea754df4f2300507c",
    "RSA-SHA1": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "RSA-SHA1-2": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "RSA-SHA224": "a7ebbedd41d6c7bec669b4caae19545a83644a3fc6758158bbf5d3c1",
    "RSA-SHA256": "6fb0514a46f06be4bc3798ae82fa6cf14103926f1969b3d70910a9c5d9589e58",
    "RSA-SHA384": "c77eee233bea537b97a91d4c661b47e400ce1ce1a9d1c486f9cb08f557b11aa9914f0cf6b22748609dd39378c29db50b",
    "RSA-SHA512": "2e132f775423970174eff2ccad923875865ae6b92f1c5d24630dd494c3b8d3fb367ec1e00a67ed63b902338be4ecd4ddcd4a211d0015508d5a1e272a67a9716d",
    "dsaEncryption": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "dsaWithSHA": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "dsaWithSHA1": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "dss1": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "ecdsa-with-SHA1": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "md4": "fe9d13ec54cf0573d1468ee1581530aa",
    "md4WithRSAEncryption": "fe9d13ec54cf0573d1468ee1581530aa",
    "md5": "cb434f8c5fad9793ed142805afa861a0",
    "md5WithRSAEncryption": "cb434f8c5fad9793ed142805afa861a0",
    "mdc2": "456888fafa2c19d1ea569f25636b509d",
    "mdc2WithRSA": "456888fafa2c19d1ea569f25636b509d",
    "ripemd": "d823d5f6d68abcafac352520d2a5a177bd01df75",
    "ripemd160": "d823d5f6d68abcafac352520d2a5a177bd01df75",
    "ripemd160WithRSA": "d823d5f6d68abcafac352520d2a5a177bd01df75",
    "rmd160": "d823d5f6d68abcafac352520d2a5a177bd01df75",
    "sha": "5753c25555e8784edf30519ea754df4f2300507c",
    "sha1": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "sha1WithRSAEncryption": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "sha224": "a7ebbedd41d6c7bec669b4caae19545a83644a3fc6758158bbf5d3c1",
    "sha224WithRSAEncryption": "a7ebbedd41d6c7bec669b4caae19545a83644a3fc6758158bbf5d3c1",
    "sha256": "6fb0514a46f06be4bc3798ae82fa6cf14103926f1969b3d70910a9c5d9589e58",
    "sha256WithRSAEncryption": "6fb0514a46f06be4bc3798ae82fa6cf14103926f1969b3d70910a9c5d9589e58",
    "sha384": "c77eee233bea537b97a91d4c661b47e400ce1ce1a9d1c486f9cb08f557b11aa9914f0cf6b22748609dd39378c29db50b",
    "sha384WithRSAEncryption": "c77eee233bea537b97a91d4c661b47e400ce1ce1a9d1c486f9cb08f557b11aa9914f0cf6b22748609dd39378c29db50b",
    "sha512": "2e132f775423970174eff2ccad923875865ae6b92f1c5d24630dd494c3b8d3fb367ec1e00a67ed63b902338be4ecd4ddcd4a211d0015508d5a1e272a67a9716d",
    "sha512WithRSAEncryption": "2e132f775423970174eff2ccad923875865ae6b92f1c5d24630dd494c3b8d3fb367ec1e00a67ed63b902338be4ecd4ddcd4a211d0015508d5a1e272a67a9716d",
    "shaWithRSAEncryption": "5753c25555e8784edf30519ea754df4f2300507c",
    "ssl2-md5": "cb434f8c5fad9793ed142805afa861a0",
    "ssl3-md5": "cb434f8c5fad9793ed142805afa861a0",
    "ssl3-sha1": "2c6e30d9c895b42dcccfc84c906ec88c09b20de1",
    "whirlpool": "e7ba79b56b7cb722f54f12af1b993710cb65e200fb4d8433ad530ec61b3373c50cace38d35db414a7b116053bfb7d39891ea7b9c3f1b77b621978ac8b3dd1296"
  },
  {
    "input": "AAAAAAAAAAAAH8AAAAAAAAAAAAAAAAAH/////////////////////////+AAAAAAAAAAAAAP////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAH//////////////4AAB////////////////////8AAAAAAAAAAAAH//////////////////4AAAAAAAAAAA///////////////wH/////////gAAD////////////////AAAAAAAAAAAAAAAAAAAAAAAAAD////////AAAAAAAAAAAAAAAAAAAAAP////////////////////////gAAAAAAAAAAAAAAAAAAD////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAP//////+P//wAAAAAAAAAAAAAAAAAAAH/////////////+AAAAD///////////4AAAAAAAAAAAAD////////////////58AAAP///////////////////////gB////wAAAAAAAAf///////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////wAAAAAAAAAAAAAAAAAA/////4AAAf////////////4AAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAP/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAH//////////AAAAAAAAAAAAP///////////////4AAAAAAAAAAAAAAAAAD/////gAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAH//////////////AAAAAAAAAAAAAAAAAAAAAA///////////////////4AAAAAAAf////////////////////8AAAAAAAAAH//////////////////8AAAAAAAAAAAAAAB//////////////////+AAAAAAAAAAAAAAAAAAAH/////8AAAf8AAAAAAAAAAAAAAAP/////////wAAAH//////////////wAAAAAAAf////////////wAAAAAAAAAAAAAAAAAD////////+AB///////////////////////8AAAAAAAAAAAAAAAAf/////////////8AAAAAAB//////////////4AAAAAAAAB/////////wAAAAAAAAAAAAAAAAAAAAAAAAAA////////////8AD///////////4AAAAAAAAAAAAAAAAAAAAB////////////8AAAAAAAAAAAAAAAAAAAAAAAA///////////////////4AAAAAAAAAAAAAAAP////////////////+AAAAAAB//////////+P////////////AAAP////////////AAAAAAAAAAAAAAAAB////////////////4AAAAAAAAAAAAAAAAAAAf////////////////////////AAAAAAAH///+AAAAAAAAAAAAAAAAAAAAAAAD////////////////////////wAAAAD/////////gAAAAAD/////////////////////gAAP////4AAAAAAAAAAAAAH////////////////////f////////////////////////4AAAAAAAAAAAAAAAAAAAAAA+AAAAAAAAB////+AA////////////////////+AAAAAAAAAAAf////gAAAAAAAAAH////////////////wAAAAAAAB///////////////////////4P///////////////AAAAAAAAAAAAAB///gAAAAAAAAAAAAAAAAAAH///4AAAAAAAAAAAAAAAAAP/////////////////4AAAAAAAAAAAAAAAAA///////////////gAAAAAAf//AAAAH///////////////AAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAAAAAf//////////4AAAAAAAAAAAAD//////AAAAAAAAAAAAAAwAAAAAAAAAAAAAH////////////////////+AAAAAAAAAAAAAAAAAAAAB////////////////////gAAAAAAAAAAAAAAAAAAAAA///////8AAH/////wAAAAAAAAAAAAAAAD//////8AAAA//////////////////4AAAAAAAAAAAAAAAAf////AAAAAAAAAAAAAAAAAAAA/////////gAAAAAAAAAAAAAf//////////////////gAAAAAAAAAAAAAAAAAP///////////////////////4AB//+AAAAAAAAAAAAAAAAAAAAAAB//gD/////////////+A///AAAAAAAAAAAAAAAAAAAAAH//////////////8///////////////8AAAAAAAAf/////////////////////wAAAAAAAAAAAAA//////////////4AAAAAAAAAAAAAAAAAAAA//////////8AAAAAAf4AAAAAAAAAAAAAAAAD//////AAAAAAAAAAAAH/////////////////+AAAAAAAAAAAAB/AH///////AAAAAAAAAAAAAAAAAAAf//////gAAAAAAAAAAAAAAAAAAAAAAf/////////////////////8AAAAAAAAAAAAAA/////////////AAD//////////AAAAAAAAD////////////gAAAAAAAAAAAAAAAAAAAAAAAAAD////////8AAAAAAAAAAAAAAAAAAAAAAAAB////////////////////AAAAAAAAAAAAAAAAAAAAAAAAB////////////8AAAAAAAAAAAA//8AAAAAAAAAAAAAB///////8AAAAAAAAAAAAAAAAD/////////////////gAAAAAAAAAAAAB///////////////////8AP//////////4AAAAAAAAAAAAAAAAAAAAAAP////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////AAAAD///////+AAAAf////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAB/////+AAAAAAAAAAAAAf/AAAAAAAAAAAAAAAAAAAAAD//////////////////4AAAH//////+AAAAB////////////////+AAAB/////////4AAAAAAAAAAAAAAAAAAAAAD////////////////////AAAAAAAAAAAAAAAAAAAAAAAP///////////////+AAAB/////////////////////////+AAAAAAAAB///////////////////8AAAAAAD//////////////////+AAAAAAAAAAAAAAAAAAAAAAAf//////////////gAAAAAAAAAAAAAAAAAAAAAf//wAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////AAAAAAAAAAAAAAAAAAAAAAD//+AAAAAAAAAAAD+AAAAAAAAAAAAAAAAAAAAAH/////////////////////////AAAAAAAAAAAAAAAAAA////////4AAA/////////8AAAAAAAAAAAP///////////8AAAAAAAAAAAAAAAAAAAAAAEAAAAAAP/////////////////+AAAAAAAAAAAAAAAAAAAAAAAAD4AAAAAAAAAAAAAAAAD8AAAAf///////////+AAAAAAAAAAAAAAAAAAAAAAAP///gAAAAAAAAAAAAAAAAAAAA///////////////////////3///////////4AAAAP////////////////////////8AAAAAAAAAAAAAAAAB//////////////wAAAAAAAB///////////////wAAAAf////////////4AAAAAAAAAAAAAAAAAAAAAH////////////wAAAAAAAAAAAAAAAAAAAB/////////////////////////wAAAAAAAAAAD//////////////////////////gAH///////////////+AAAAAAAAAAAAAAAAAAB//////////////////////////gAAAAAAAAAAAAAAAAAAAP/////////////////////////8AAAAAAAAAAAAAf/////////////////////",
    "DSA": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "DSA-SHA": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "DSA-SHA1": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "DSA-SHA1-old": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "RSA-MD4": "cc9eaca055d9a3bccca522703fcd9b85",
    "RSA-MD5": "83a3d5436f96cb2cb31d929794425f31",
    "RSA-MDC2": "ce30391a222a325afee9b989207dfb40",
    "RSA-RIPEMD160": "2706cbc929cbc1297a42d07cf222ce18a5e5b809",
    "RSA-SHA": "29e11c3e7067f5251a3e04e46b6cbf3370ed9b56",
    "RSA-SHA1": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "RSA-SHA1-2": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "RSA-SHA224": "f1a44dbd2238d00500012323c1ad7e7c3a127fd9fb38daa304be7a40",
    "RSA-SHA256": "9731a6c8ef6c4d601781f231e5b17c0a5194495d5b01b27aefbb4cd857c0c7d1",
    "RSA-SHA384": "cfb3a4d8f3fc42886929a2676de1b510692e82058765c06383230a1a7dec82d7b9ab8918a27b983a654decefcd64dad1",
    "RSA-SHA512": "5039be6bc422543c53be17b8045b5290b8b337fc20273d1e0da6ca37f8688d17b8b6f60ad9b9065b8d698e0497a3e9d8ce9c5b1e3e572d0b153dc48cb8581cd5",
    "dsaEncryption": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "dsaWithSHA": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "dsaWithSHA1": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "dss1": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "ecdsa-with-SHA1": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "md4": "cc9eaca055d9a3bccca522703fcd9b85",
    "md4WithRSAEncryption": "cc9eaca055d9a3bccca522703fcd9b85",
    "md5": "83a3d5436f96cb2cb31d929794425f31",
    "md5WithRSAEncryption": "83a3d5436f96cb2cb31d929794425f31",
    "mdc2": "ce30391a222a325afee9b989207dfb40",
    "mdc2WithRSA": "ce30391a222a325afee9b989207dfb40",
    "ripemd": "2706cbc929cbc1297a42d07cf222ce18a5e5b809",
    "ripemd160": "2706cbc929cbc1297a42d07cf222ce18a5e5b809",
    "ripemd160WithRSA": "2706cbc929cbc1297a42d07cf222ce18a5e5b809",
    "rmd160": "2706cbc929cbc1297a42d07cf222ce18a5e5b809",
    "sha": "29e11c3e7067f5251a3e04e46b6cbf3370ed9b56",
    "sha1": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "sha1WithRSAEncryption": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "sha224": "f1a44dbd2238d00500012323c1ad7e7c3a127fd9fb38daa304be7a40",
    "sha224WithRSAEncryption": "f1a44dbd2238d00500012323c1ad7e7c3a127fd9fb38daa304be7a40",
    "sha256": "9731a6c8ef6c4d601781f231e5b17c0a5194495d5b01b27aefbb4cd857c0c7d1",
    "sha256WithRSAEncryption": "9731a6c8ef6c4d601781f231e5b17c0a5194495d5b01b27aefbb4cd857c0c7d1",
    "sha384": "cfb3a4d8f3fc42886929a2676de1b510692e82058765c06383230a1a7dec82d7b9ab8918a27b983a654decefcd64dad1",
    "sha384WithRSAEncryption": "cfb3a4d8f3fc42886929a2676de1b510692e82058765c06383230a1a7dec82d7b9ab8918a27b983a654decefcd64dad1",
    "sha512": "5039be6bc422543c53be17b8045b5290b8b337fc20273d1e0da6ca37f8688d17b8b6f60ad9b9065b8d698e0497a3e9d8ce9c5b1e3e572d0b153dc48cb8581cd5",
    "sha512WithRSAEncryption": "5039be6bc422543c53be17b8045b5290b8b337fc20273d1e0da6ca37f8688d17b8b6f60ad9b9065b8d698e0497a3e9d8ce9c5b1e3e572d0b153dc48cb8581cd5",
    "shaWithRSAEncryption": "29e11c3e7067f5251a3e04e46b6cbf3370ed9b56",
    "ssl2-md5": "83a3d5436f96cb2cb31d929794425f31",
    "ssl3-md5": "83a3d5436f96cb2cb31d929794425f31",
    "ssl3-sha1": "3de3189a5e19f225cdce254dff23dacd22c61363",
    "whirlpool": "ffa9f3a57a22d5fec6837f82a2a787b381eaed9988d17e36cf3d81f5fd8b3d9e40fa6e9d769374d202c42369548451183e408b69e2f36f5dbe59454357875f31"
  },
  {
    "input": "AAAAAB///////////////wAAAAAAAAAAAAAAAAAH////////////////////wAAAAAAAAAAAAAAAAAAAf+AH//8AAAAAAAAAAAAAAAAAAAAAAf///4f///////////4AAAAAAAAAAAAAAAAAAAAAA/////+AAAAAAAAAAAAAAAAAAAB/////////////////////wAAAAAAAAAAAAAAAAAAf//////////////4AAP////gAAAAAAA//////////////8AA//////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAP/////////////+AAAAAAAP/////wAAAAAAAAAAAB///////////gAAB//////////////////////+AAAf/////////AAAAAAAAAAf///////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAP/gAAAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAH/////////////AAAAAAAAAAAAAAAAAAA///////gAAAAAAAAAAAAAP/////////////////////////4AAAAAAAAAAAAAAAD////////////////////////wAAAAAAAAAAAAAAAAAAA////////////gAAAAAAAAAAAAAAAAAAAAf////////4AAAAAAAAAf//////////////////////AAAAAAAAAAAAAAAA/+AAAAAAAAAAAAAAAAf//////////wAAAAAAAAAAAAAAAD////////////////+AAAAAAAAAP///////////////////////8AAAf/////////AAAAAAAAAAAAAAD////////////////////////+AAAAAAAAAAAAAAAAAAAAAAA////////////////////////8AAAAAAAAAAAAAAAAAAAAB////AAB///////8AAAAAAAAAAAAAAAAAAB/////4AAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////wAAAAAAAAAAAAAAAAAf///////8AAAAAAAAAAP////AAAAAAAAAAAH/8AAAAAAAB////////////////////////8AAAAAAAAAAAf//////////////////////8AAAAAAAAAAAAAAD///////////////gAAAAAAAAAAAAAAAAAAB//////////4AQAAAAAAAAAAH////////////+AAAAAD//////////////////gAP/////////AAAAAAAAAAAAAAAAB////////////////////4AAAAAAAAAAAAAAAAAAAAAH////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAD//8AAAAAAAAAAAAAAAAAAAAAAAAAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAD/////g/////8AAAAAAAAAAAAAAAAAAAAAAAP//////gAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////8AAAAAAAAAAAAAAAAAAD///////////wAAAAAAAAAAAAAAD///////////////////////+AAAAAAAAAP/////////////////////////gAAAAAAAAAAAAAAAAAAAAAA///////////////////AAAAAAAAAAAAAf//////4AAAAAH///////4AAAAAAAH///AAP/4AAAAAAf////8AA/////////////////////////AAAAAH////+AAAAAAAAB///////////////////////8AA8AAAAAAAAAAAAAAAAH///////////////////////gAAA///////////////4AAAAAAAAAAAAAAAAAAAAAAf/////////////////////gAAAAAAAAAAAAAAAAAAAf///////////////////////8AAH/////+AAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////+D////////wAAAAAAA/////////////////////////gAAAAAAAAAAAAAAAAAAAAB/////gAAAAAAAAAAAf////+AAAAAAAAAAAAAAAAAAAAH////////////////////////4AAAAAAAA////////////////8AAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAD//////////4Af///+AAAAAAAAAAAAAAP////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////gAAP///////////////+AAAAAAAAB////////////////////8AAAAAAAAAAAAAAAAAA/////////8AAAAAAAAAAAAAAAAAAAH////gAAAAAAAAAAAAf////////////////////8AAAAAAAAAAAAAAAAA///////////////////////wAAAAAAAAAAAAAAAAAAAAP/////8AAAAAAAAAAAAAAAAAAAAAAAAAP///+AAAAAAAAAAAAAAAAAAB//////////AAAAAAAAAAAAAAAAAAAAAAAAAH//////////////4AAAAAAAAAAH///////////////+AAAAAAAAAAAAH///////+AAAAAAAAAAAAAAAAAAAAAAAAAAf///////gAAAAAD/////////////wAAAAAAAAAAAAAAAAAAAB///4AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////8AAAAAAAAAAAAAAAAAAD////////wAAAAAH/////wAAAAAAAAAAAB//////8AAf////////////////////////gAAAAAAAAAf///////+AAAAAAAAA/////////////////gAAD///4AAAAAAAAAAAAAAAAAAAAA///////////////+AAAB///////////8AAAAAAAH///////////////8AAAAAAAAAAAAAAAAAAAAAP///////8AAAAAAAAAAAAAAAAAAAAAAA////////////////////////AAAAAAAAAAAAAAAAAD////////////////wB//////////4AAD///////////////////gAAAAAAAAAAAAAAAAAAAH///////////wAAAAAAAAAAAAAAD/AAAAAAAAAAAAB/////////////////////////+AAAAAAAAAAAAAAAA////////////////////gAAAAAAAAAAAAAAAH/////////////8//////AAAAAAH/////////////////8AAAAAAAAAAAAAAAAAAAAAAAH///wAAAAAAAAAAAAAAAAAAAP/////////////////////////wAAAAAAAAAAAAAAAAAAAAAH///////////////AAAAAAAAAAAAAAAAAAAAAAAAAD/////8AAAAAAAAAAD///////////////////AAAAAAAAAAAAAAAAAAAAAB//////////////////////////4AAAAAAAAAAAAAAAAAAAAD//////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAH///////gAAAAAAAAAAAAAAAAAAAAAAB//gAAAAAAAAAAAAAAAAAAAAAAD/////////////gAAAAAAAAAAAAAAAAAAAAAAD//////////gAAAAAAAAAAAAAH///////////////////AAAAAAAAAAAAAAAAAOAAAAAAAAAAAAAAAAAAAAAAAAf/////8AAAAAAAAAAAAAAAAAAAAB/////4AAAAAAAAAAAAAAAAAAAAAD////////////////8AAAAAAAAAAAAAAAAAP//////////////4AAAAAAAAA/4AAAAf/////////gAAAAAAAAAP4AAAAAAAAAAAAAAAAAAAAAAAAAB/+AAAAAAAAAAAAAf///4B////////////////////gAAAAAAAAAAAAH//////+AAAAAAAAAAP//////////8AAAAAAAB//////////////////////////gAAD/////AAAAAAAAAAAAAH////////////////////////4AA///////////////////////4AAAAAAAAAAAAAAAAAH//////////////////////////wAAAAAAAAAA///////8AAAAAAAAAAAAAAAAAAAAP///////////////////+AAAAA////////////////4AAAA/////////////////4AAAAAAAAAAAAAAAAAD////////////////AAAAAAAAAAAAAAAAAAD///////////////////////8=",
    "DSA": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "DSA-SHA": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "DSA-SHA1": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "DSA-SHA1-old": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "RSA-MD4": "259c1a09ee92b39d8df0449663386ec1",
    "RSA-MD5": "34dde0f0fe7d4fdb359df1fccbf5fcde",
    "RSA-MDC2": "02f465cb106c551eb5b9c23add402655",
    "RSA-RIPEMD160": "3d0dec385e0e8c4bc6ec928839565424e6d48890",
    "RSA-SHA": "1e8d5a6256149cb9a837a39c5602e3252b8e7625",
    "RSA-SHA1": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "RSA-SHA1-2": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "RSA-SHA224": "a8111e8da272aefd94a6898f229cb0b45fbdcceb59cb7b7439b4c43b",
    "RSA-SHA256": "b18a49b7c4114fb94d16ffdce1e1677e6bde99bba443936af10cbedca6eeaf2a",
    "RSA-SHA384": "fb47294aa3cd9670b0c9ba313e248acc6b36a6a2556c356836a24035194e5626e0e09ed39348f6f2d34ab67cab6a4bbf",
    "RSA-SHA512": "ea52123ba216899ff9f5c61241108ef555ac322f69ad0fe48ad57364591b360695cfbdb5682c04fd7f333a902f13d2bd2c2702400738e2f62b1fa02e730a07c0",
    "dsaEncryption": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "dsaWithSHA": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "dsaWithSHA1": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "dss1": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "ecdsa-with-SHA1": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "md4": "259c1a09ee92b39d8df0449663386ec1",
    "md4WithRSAEncryption": "259c1a09ee92b39d8df0449663386ec1",
    "md5": "34dde0f0fe7d4fdb359df1fccbf5fcde",
    "md5WithRSAEncryption": "34dde0f0fe7d4fdb359df1fccbf5fcde",
    "mdc2": "02f465cb106c551eb5b9c23add402655",
    "mdc2WithRSA": "02f465cb106c551eb5b9c23add402655",
    "ripemd": "3d0dec385e0e8c4bc6ec928839565424e6d48890",
    "ripemd160": "3d0dec385e0e8c4bc6ec928839565424e6d48890",
    "ripemd160WithRSA": "3d0dec385e0e8c4bc6ec928839565424e6d48890",
    "rmd160": "3d0dec385e0e8c4bc6ec928839565424e6d48890",
    "sha": "1e8d5a6256149cb9a837a39c5602e3252b8e7625",
    "sha1": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "sha1WithRSAEncryption": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "sha224": "a8111e8da272aefd94a6898f229cb0b45fbdcceb59cb7b7439b4c43b",
    "sha224WithRSAEncryption": "a8111e8da272aefd94a6898f229cb0b45fbdcceb59cb7b7439b4c43b",
    "sha256": "b18a49b7c4114fb94d16ffdce1e1677e6bde99bba443936af10cbedca6eeaf2a",
    "sha256WithRSAEncryption": "b18a49b7c4114fb94d16ffdce1e1677e6bde99bba443936af10cbedca6eeaf2a",
    "sha384": "fb47294aa3cd9670b0c9ba313e248acc6b36a6a2556c356836a24035194e5626e0e09ed39348f6f2d34ab67cab6a4bbf",
    "sha384WithRSAEncryption": "fb47294aa3cd9670b0c9ba313e248acc6b36a6a2556c356836a24035194e5626e0e09ed39348f6f2d34ab67cab6a4bbf",
    "sha512": "ea52123ba216899ff9f5c61241108ef555ac322f69ad0fe48ad57364591b360695cfbdb5682c04fd7f333a902f13d2bd2c2702400738e2f62b1fa02e730a07c0",
    "sha512WithRSAEncryption": "ea52123ba216899ff9f5c61241108ef555ac322f69ad0fe48ad57364591b360695cfbdb5682c04fd7f333a902f13d2bd2c2702400738e2f62b1fa02e730a07c0",
    "shaWithRSAEncryption": "1e8d5a6256149cb9a837a39c5602e3252b8e7625",
    "ssl2-md5": "34dde0f0fe7d4fdb359df1fccbf5fcde",
    "ssl3-md5": "34dde0f0fe7d4fdb359df1fccbf5fcde",
    "ssl3-sha1": "93530a9bc9a817f6922518a73a1505c411d05da2",
    "whirlpool": "ae8ca1864b632383bcbb7c6692465331a54a3c6322b3282254e315336bca9552a1c4b25bb391b7616b2338ca1aeda26a56370d48442963b22aa5dd6c9a168efa"
  },
  {
    "input": "/////8AAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////wAAAAAAAAAAAAAAAAAAAAAAAAf///////gAAAAAAAAAAP//////////////////////wAAAAAAAAAAAAAAAAAH/////////////////////////4AAAAAAAAAAAAAAAAB//////AAAAAAAAAAAAAAAAAAAAAAf/////////gAAAAAAAAAAAAH/////////////4AAAAAAAAAAAAA//////////////////////////8Af/+AAAAAAAAAAAAAAAB///////////////////////////v///////////////gAAAAAAAAAAAAAAAAAB4AAAAAAAAAAAAAB///////////////////////////AAAAAAAAAAAAAAAAAAAP///////////////8AAAAAAAAAAAAAAAAB/////////AAAAAf4AAAAAAAAB//////AAAAAA/////////////////////gAAAAH/AAAAAAAAAAAAAAB/////////////////AAAAAf///////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////+AAAAAAAAAAAAAAAAAH///////////////////wAAAAAAAAAAAAAAf////////////////////////+AAAAAAA///////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////AAAAAAAAAAAAAAAAAA/////////////////////wAAAAAD//////8AAAAAAAAAAAAAAAAAAAAAAAAAH////////////////8Af/////////4AAAAAAAAAAP////////////////wAAAAAAAAAAAAAAAAAAAD/wAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////AAAAAAAAAAAAAAAAAAAAB///////8AAAAAAAAAAAAAAAAAAAAAAAAAA///////gAAAAAAAAAAAAAAP//////////+AAAAAAAAAAAAAAAAAAAAP/////////////////////wAAAAAf///////////////////w//////////////////wAAAAAAAAAAAAAAf////////////////////+AAAAAAAAAAAP////gAAAAAAAAAAAAAAAAAAAAAAP//////////+AAAAAAAAD///////////wAAAAAAAAAAAAAf////AAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////wAAAAAAf8AAAAAAAAAAAAAAAAAD/////wAAAAAAB////////////4AAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////8AAAAAAAAAAAAAAAA/////4AAAAAAAAAAAAAAAAAAAAAAAAAAf////////////wAAAAAAAAAAAAP///////wAAAAAAAAAAAAAAf8AAAAAA//////////////////////wAAAAAAAAAAAAAAB////////////////////////gAAAAAAAAAAAAP////////wAAAAAAAAAAAAAAAAAAAD/////////////AAAAAAP//////////////////AAAAAAAAAf////////wAAAAAAAAAAAAAAAAf//////////+Af////////////////////8AAAAAAA///////////8AAAAAAAAAH///////////////+AAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAP////////////////////AAAAAAAAAAAAAAAAAAAAAAA//////////4AAAD///////////////////////////wAAAAAAAAAAAAAf///////8AAAAAP//////////////4AAAAAAA/////AAAAAAAAAAAAAAAAAAAD/////////4AAAAf/////////////8AAAAAAAAAAAD///////AAAAAAAAAAAAAAAAAAAP////AAAAAA/////////////////gAAAAAAAAAAAAAAAA//////////////////+AH//////////////////4AAAAAAAAAB//////////////////wAAAAAAAAAAAf//////////AAAAAAAAAAAAAAAAAAAAA////////+AAA///////////////////AAAAAAAAAAAAAAP//////wAAAAAAAAAAAAAH/////4AAAAAAAAA//////////////////////+AAAAAAAAAP/////////////////////////+AAAAAAAAAAAAAAAD//////////////wAAAAAAAAAAAAP///////////wAAD///4AB//////////8AP///AAAAAAAAAAAAAAAAAAAAAH//////////+///////////wAAAAAAAAAAAD////////////gAAAAAAAAAAAAAAAAAfwH////////////////////////AAAAAAAAAAAAAAAAAAf/wAAAAAf///////8AAAAAAAAAAAAAAAAA//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////AAAAAAAAAAAAAAAAAAAAAwAAAAAAADwAAAAAAAAAAAAAAAAAAAAAP////////////////////4AAAAAAAAAP////////AAf////////////8AAA///////+AAAAAAAAAAAAAAAAAD////////////AAAAAAAAAAAAAAAAAAAAAAAAD//////////////////+AAAAAAAH/////////////////gAAAAAAB/////////////4AAAAAAAAAAAAAAAAAAD///////////AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////8AAAAAAAAAD/////////////////AAH//////////////4AAAAAAAAAAAAAAAAAAAAAAf////////////////gAAAAAAAAAAAAAAAB//////////////////////gAAAAAAf/8AAAAAAAAAAAAAAAAAAAAAAAf///////////////+AAAAAAH///////8AAAAAAAB////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAD/+AAAAAAAAAAAAAAAAAAAAAAAAAB/////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAf/////wAAAAAAAAAAAAA////////////////AAAAAAAAAAAAAAAAAAAAAAB/////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////4AAB///////////////////////AAAAAAAH///////////////////+AAAAAAAAAf/////////////////AAAAAAAAAAAAAAAAP////////////4AAAAAAAAAAAAAAAAAAAAf//AAAAAP/////////////////////AAAAAAAAAAAAAAAAAAAA///////////////////////////4AAAAAAAAAAAAP///gAAAAAAAAAAAAAAAAAAAAB///////////////+AAAAAAAAAAA///////////wAAAAAAAf/////wAP////gAAf/////4AAAAAAAAAAAAAAAAAAAAAAAAAB///AAAAAAAAAAAAAAAAAAAAAAAAAAD////////+AAAAAAAAAAAAAAAAAAAAAAAAP/////+AAAAAAAAAAAAAAAAAAAH/////////////wAAAAAAAAAAAAAAAAAAAH///////////////4AAAAAAD//////////////////////4AAAAA///////////AAAAAAAAAAAAAAP//////////////////AAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////4P//4AAP////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAB/4AAAAAAB//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAD/////////gAB////gAAAAAAAAAAAAAAAAf///////x/////////////////gAAAAAAAAAP/////////gAAAAAAAAAAAH////////+AH///////////////////////////AAAAAf////////gAAAP///////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAf/////wAAAAAAAAA///////////////////////////4AAAAAAAAAAAAAAAAAAAAB/////////////////////////4AAAAAAAAAAAD////////AAAAAAAAAAAAAAAAAAAAAAAAB///////////////4AAAAAAAAAAAAAAAAAAAAAAA==",
    "DSA": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "DSA-SHA": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "DSA-SHA1": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "DSA-SHA1-old": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "RSA-MD4": "608770df7c1f2b15f7e3bb65ef5f23bf",
    "RSA-MD5": "7b77219e9549fad49e97c380f7e1f362",
    "RSA-MDC2": "d96bac7b7138b39e324473fdcb3974dd",
    "RSA-RIPEMD160": "da4aaf7529ddf37eedf3eaa47243e4422b3700c9",
    "RSA-SHA": "85e59ebb4b9c14f7777f046e136bcbdd736fb459",
    "RSA-SHA1": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "RSA-SHA1-2": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "RSA-SHA224": "79b796772c826f1c2eed627948e9d2c7f973f0353d68b1cf5d2ed40e",
    "RSA-SHA256": "ce197d61ddae42c8b8447aa698b3e7e5d51d9f0cd2034bc64f1a9d1b2b18e3cd",
    "RSA-SHA384": "d688f9cd1c0d531e32a1ac5ec5ac9117e4ce90de9c2ca6c1e01f7a99d1168c996997a052aa3a277e759e866a1fd6c248",
    "RSA-SHA512": "10d2eaa4eb9814ebd114aeb9168793b24109d16d3e9e6fab8182623ba2a13f09ee4a1756733a7c3d084a8ea1d75532b1d65fb2156ac13eae4241273548468f96",
    "dsaEncryption": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "dsaWithSHA": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "dsaWithSHA1": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "dss1": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "ecdsa-with-SHA1": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "md4": "608770df7c1f2b15f7e3bb65ef5f23bf",
    "md4WithRSAEncryption": "608770df7c1f2b15f7e3bb65ef5f23bf",
    "md5": "7b77219e9549fad49e97c380f7e1f362",
    "md5WithRSAEncryption": "7b77219e9549fad49e97c380f7e1f362",
    "mdc2": "d96bac7b7138b39e324473fdcb3974dd",
    "mdc2WithRSA": "d96bac7b7138b39e324473fdcb3974dd",
    "ripemd": "da4aaf7529ddf37eedf3eaa47243e4422b3700c9",
    "ripemd160": "da4aaf7529ddf37eedf3eaa47243e4422b3700c9",
    "ripemd160WithRSA": "da4aaf7529ddf37eedf3eaa47243e4422b3700c9",
    "rmd160": "da4aaf7529ddf37eedf3eaa47243e4422b3700c9",
    "sha": "85e59ebb4b9c14f7777f046e136bcbdd736fb459",
    "sha1": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "sha1WithRSAEncryption": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "sha224": "79b796772c826f1c2eed627948e9d2c7f973f0353d68b1cf5d2ed40e",
    "sha224WithRSAEncryption": "79b796772c826f1c2eed627948e9d2c7f973f0353d68b1cf5d2ed40e",
    "sha256": "ce197d61ddae42c8b8447aa698b3e7e5d51d9f0cd2034bc64f1a9d1b2b18e3cd",
    "sha256WithRSAEncryption": "ce197d61ddae42c8b8447aa698b3e7e5d51d9f0cd2034bc64f1a9d1b2b18e3cd",
    "sha384": "d688f9cd1c0d531e32a1ac5ec5ac9117e4ce90de9c2ca6c1e01f7a99d1168c996997a052aa3a277e759e866a1fd6c248",
    "sha384WithRSAEncryption": "d688f9cd1c0d531e32a1ac5ec5ac9117e4ce90de9c2ca6c1e01f7a99d1168c996997a052aa3a277e759e866a1fd6c248",
    "sha512": "10d2eaa4eb9814ebd114aeb9168793b24109d16d3e9e6fab8182623ba2a13f09ee4a1756733a7c3d084a8ea1d75532b1d65fb2156ac13eae4241273548468f96",
    "sha512WithRSAEncryption": "10d2eaa4eb9814ebd114aeb9168793b24109d16d3e9e6fab8182623ba2a13f09ee4a1756733a7c3d084a8ea1d75532b1d65fb2156ac13eae4241273548468f96",
    "shaWithRSAEncryption": "85e59ebb4b9c14f7777f046e136bcbdd736fb459",
    "ssl2-md5": "7b77219e9549fad49e97c380f7e1f362",
    "ssl3-md5": "7b77219e9549fad49e97c380f7e1f362",
    "ssl3-sha1": "e31354345f832d31e05c1b842d405d4bd4588ec8",
    "whirlpool": "a8071ce7eb93aad56daefc8e750a3d4b017226b7669550dd43db2704fcbc4eb5d5424d5eff9955ed13c48ccf9c8d9a5a04652c4c8c4148b1918610047ec2d354"
  },
  {
    "input": "//////////gAAAAAAAD//////////4AAAAAAAAAAAAAAAAAAAAAH///wAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////+AAAAAAAAAAAAAAAAAAAAf/4AAAAAAAAAAH8AAAAAAAAAAAAAAAA/////////////////////+AAAAAAAAAAAB///////////wAAAAAAAAAAAAAAAAAAAAH///////////4AAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////4AAAAAAAAAAB///////////wAAAAAAAB///////8AAAAAAAAAAAAAAAAAAAAAAAAAAf////wAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////4AAAAAAAAAAAAAAAAAAAf///////4AAAAAAAAAAAAAP//////////////////gAAAAAAAAAAAAD////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAP//////+AAAAAAAAAAAAAAAAAAAAAAD//////////////////////AAAAAAAAAAAAAAAAAAAAf//////////4AAAAAAAAAAAAAAAAAAAAAAAAAAD////AAAAAAAf//////////AAAAAAAAAAAAAAAAAAAAAf//////////////////////////+AAAAAAAAAAAAAAAAAAAAAAB////////////////gAAAAAAAAAAAAAAAAAAAAAAAf//gAAAAAAAA//////////////////////+AAAAAAAAAAAAAAAAAAAAAAA////////////////////////8AAAAAAAAAAAAP/////////////////////////8P/////////8AAAAAAAAAAAAD///////////////////////////4AAAAAAAAAAAAAAAAH///////////////////////4AAAAAAAAAAAAAAAf////////wAAAAAAAAAAAAAAAAAAAAAAB//////////wAAAAf///////////////wAAAAAAAAAAAAAAH///4AAAAAAAAAAAAAAAAAAD///////////////////////////wAAAAAAAAAAAAD///////////gAAAAAAAAAAAAAAAAAAAAAf///////////////9///////////////////+AAAD//////////////wAAAAAAAAAA//////////////4AAAAAAAAAAAAAAAAAAAf/////wAAAAAAAAAAAAAAAAAAAAAAf////////////////////////4AAAAAAAAAAAAAAAf/////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////AAAAAAAB////////4AAAAAAAAAAAAAAAAAB//////AAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////8AAAAAAAAAAf//////gAAAAAAP////////AB/+AAAAAAAAAAAAAAAAAAAAAAAAA/////gAf//////4AAAAAAAAAAAAAAAAAB/////gAAAAAAAAAAAAAAAAAAAAH///////////////////AAAAAAAAAAAP/////////////+AAAB//////wAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////wAAAAAAAAAAAAAAAAAAAAAAAH/////////gAAAAAAAAAAAAAAAA///////////////gAAAAAAAAAAAAAAAB///////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////gAAAAAAAAAAAAAAAAAAAAB/////gAADgAAAAAAAAAAAAAAAAACAAAAA////////////4AAAAAAAAAAAAAAAAAAAA/////////////////////////4AAAAAAAAAAAAAAAAAAB//////////////////////wAAAAAAAAAAAAAAAAAAAAA////4AAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////////wAAAAAAAAAAAAAAAAAAD///4AH/////////+AAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAB///////////////////////AAAAAAAAf///////////4AAAAAAAAAAAAAAAAAAAAAAAAAf////////////4AAAAAAAAAAAAAAAAAAAAAAAAAB/////////////gAAAAAAAAAB/////////////////wAAAAAAAAAAAAAAH4AAAAAAAAAAAAAAAAAAAAAAAf///8AAAAAAAAAAAAf///gAAAAAAAAAAAAAAAAAAAAH//////////////////gAAAAAA/////////////gAAAA//////////////AAAAAAAAAAAAAAAAAAAAAAAAf/////+AAAAAAAAAAAAAAAAAAAAAf///////////////8AAAAAAAAAAAAAAAH///////////////wAAH//wAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////+AAP//gAAAAAAAAAAAAAf/////////+AD///////////////gB//////////+AAAAAAAAAAAAB////////////AAAAAAAAAAAAAAAAAAAAAf///////////////////////+AAB/////////////////////wAAAAAAAAAAAAAAAAAAAAAAH///////////////////////wAAAAAAAH////////////////////////4A//////////////AAAAAAAAAAAAAD/////////////////////////wAAAAAAAAAAAAAH//AAAAAAAAAAAAAAD/////////////wAAAAAAAAAP/////////////+AAA//AAAAAAAAAAAAAAAAAAAAAAf////////+AAAf/////8AAAAAAAAAAH////////AAAAAAAAAAAAAAAAAAAAAAAH/////////////////////+AAAAP///////////AAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////+AAAAAAAAAAAAAAAAAAAP/////////////8AAAAAAAAAD//wAAAAAAD//wAAAAAAAAB/////////////////////+AAB///////////////////////4AAAAAAAAAAAAAD/////////////////AAAAAAAAAB///////8AAAAAAAAAAAAAAAAAAAAAAAf////////+f//////////gAAAAAAAAAAAAAAAf//////+AAAAAAAAAAAAAAAAAAAD/////////////////////////gAAAAAB//////////////////gAAAAAAAAAAAAAAAAAAAAf////////////////wAAAAAAAAAAAAAAP///////////////////////wAH///+AAAAAAAAAAAAAAAAAH///////////////////////4AAAAAAAAAAAAB////////////////////////AAAAAAAAAAAAAAAAAAAAAAP////////////////4AAAAAAAAAAAAAAAP///wAAAAAAD///gAAAAAAAAAAAAAf//////////////////////4AD///////////////+AAAAAAAAAAAAAAAAAf//////////////////////4AAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAAAAAH////////4AAAAAAAAAAAAAP//////wAAAAAAAAAAAAAAAAA/////////////////////+AAAAAAAAB///////////////+AAAAAAAAAAAAAAAAAAAAAAP//////////4AAAAAAAAAAAAAAAAAAAf///////////////////wAAAAAAAAAAAAB//////////////////AD////////4AAAAAAAAAAAAAAAAAAAAAH//////////////////gAAAAAAAAAAAAAAAAAAD/////////////gAAAAD/////////////////////////4AAAAAAAD/////////+AAAAAAf///////////////////f/wAAAAAAAAAAAAAAAAP/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAB///////////////4AAAAAAAAAAAAAAAAAAAAAP///////////////////////gAAAAAAAAAAP///////////////////+AAAAAAAAAAAAAAAAAAAAAAAAH//////////////wAAAAAAAAAAAAAAAAD//////////////////////gAAAAAAAAAAAf///////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAD////////////wAAAAAAAAAAAAAB+AAAAAAAAAABgAAAAAAAAAAA////////////////////4AAAAAAAAAAAAP//////////////////wAAAAAAAAAAAAAAAAAP/////////gAAAAAAAAAAAAAAAAAAAD///////////////////////////wAAAAAAAAAD///////////////8AAAAAAAAAAAAAAAAAAAAAAA///////////////8AAAAAAAAAAAAAAAAAAAAAAAAH//////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAA",
    "DSA": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "DSA-SHA": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "DSA-SHA1": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "DSA-SHA1-old": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "RSA-MD4": "af3ae1603912f594bc9eefff46fc9ca9",
    "RSA-MD5": "053f4e89ae2355c5cb259d21e85eb9cd",
    "RSA-MDC2": "b27b2b16febbc9d67290b17f4a7cf759",
    "RSA-RIPEMD160": "6fcb64e414649cd43862ebb5a2a31e5e691e8854",
    "RSA-SHA": "cc02efffa6b5939026bfe3815c7bd6e473881a4a",
    "RSA-SHA1": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "RSA-SHA1-2": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "RSA-SHA224": "fa33144c6182f9b72e5af9f57bb4f9f7ff382b38a14b1f987e9b8e00",
    "RSA-SHA256": "7d9a3aebb470990abb92303f0c2ce5d6c38f9a2198d8f1ae8ab7fbbbf007cc7d",
    "RSA-SHA384": "e0dc798fdc3a726fa9af40486d93eab2277efdd2beb6866b533d3741c944c6b466ce08e1fe6f08d64a8208f45fe5c15c",
    "RSA-SHA512": "cc60cf4c4aae634201325ea053e3890b3868b5a8aec71b1a5b764111edbe9c75bf5ce0a1eb1b3886b416c644dc3fdc4da93a4ce37611f08edf430b5bc6b91fd9",
    "dsaEncryption": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "dsaWithSHA": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "dsaWithSHA1": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "dss1": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "ecdsa-with-SHA1": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "md4": "af3ae1603912f594bc9eefff46fc9ca9",
    "md4WithRSAEncryption": "af3ae1603912f594bc9eefff46fc9ca9",
    "md5": "053f4e89ae2355c5cb259d21e85eb9cd",
    "md5WithRSAEncryption": "053f4e89ae2355c5cb259d21e85eb9cd",
    "mdc2": "b27b2b16febbc9d67290b17f4a7cf759",
    "mdc2WithRSA": "b27b2b16febbc9d67290b17f4a7cf759",
    "ripemd": "6fcb64e414649cd43862ebb5a2a31e5e691e8854",
    "ripemd160": "6fcb64e414649cd43862ebb5a2a31e5e691e8854",
    "ripemd160WithRSA": "6fcb64e414649cd43862ebb5a2a31e5e691e8854",
    "rmd160": "6fcb64e414649cd43862ebb5a2a31e5e691e8854",
    "sha": "cc02efffa6b5939026bfe3815c7bd6e473881a4a",
    "sha1": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "sha1WithRSAEncryption": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "sha224": "fa33144c6182f9b72e5af9f57bb4f9f7ff382b38a14b1f987e9b8e00",
    "sha224WithRSAEncryption": "fa33144c6182f9b72e5af9f57bb4f9f7ff382b38a14b1f987e9b8e00",
    "sha256": "7d9a3aebb470990abb92303f0c2ce5d6c38f9a2198d8f1ae8ab7fbbbf007cc7d",
    "sha256WithRSAEncryption": "7d9a3aebb470990abb92303f0c2ce5d6c38f9a2198d8f1ae8ab7fbbbf007cc7d",
    "sha384": "e0dc798fdc3a726fa9af40486d93eab2277efdd2beb6866b533d3741c944c6b466ce08e1fe6f08d64a8208f45fe5c15c",
    "sha384WithRSAEncryption": "e0dc798fdc3a726fa9af40486d93eab2277efdd2beb6866b533d3741c944c6b466ce08e1fe6f08d64a8208f45fe5c15c",
    "sha512": "cc60cf4c4aae634201325ea053e3890b3868b5a8aec71b1a5b764111edbe9c75bf5ce0a1eb1b3886b416c644dc3fdc4da93a4ce37611f08edf430b5bc6b91fd9",
    "sha512WithRSAEncryption": "cc60cf4c4aae634201325ea053e3890b3868b5a8aec71b1a5b764111edbe9c75bf5ce0a1eb1b3886b416c644dc3fdc4da93a4ce37611f08edf430b5bc6b91fd9",
    "shaWithRSAEncryption": "cc02efffa6b5939026bfe3815c7bd6e473881a4a",
    "ssl2-md5": "053f4e89ae2355c5cb259d21e85eb9cd",
    "ssl3-md5": "053f4e89ae2355c5cb259d21e85eb9cd",
    "ssl3-sha1": "3ff76957e80b60cf74d015ad431fca147b3af232",
    "whirlpool": "f7b1a5d069709e2673901d9e26ebb335f2b25d40992c3a9f26b770711dcf5578b73ab834d352706f09fb3c12ca42fec753de945a20654044af001b3cfe8385a4"
  },
  {
    "input": "AAAAAAAAAAAAAAAAAAAAB//8AAAAAAAAAAAAAAAf////////////+AAAAAAAAAAAAAf/////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAA////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAeAAAAD//////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////+AAAAAAAAAAAAAB//////////////////8AAAAAAAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAH////wAAAAAAAAAH///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAf//////////////////AAAAAAAAAAAAA////////AAAAAAAAP/4AAAAAAAAAAAAAAAAAAAAAAH/wAAAAAAAD/////////+AAAAAAAAAAAAAAAAP/////////////////P/////////////////gf//////////////////8AAAAAAAAAAAAAf//////////////////gAAAAB////////AAAAAAAAAAAAAAAAAAD////////wAAAAAAAAAAAAAAAAAAAAA/////////////8AAAAAAAAAAAB/////////////////+AAAf//+AAAAAAAAAAAAAAAAAAf/////////gA////////////////wAAA//////////wAAAAAAAAA////////AAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////gAAA//////////////8AAAAAAAAAAAAAAAAAAAAAAAP//////////////////////4AAAAAAAAAAAAAAAAAAAD//////////////+AAH//////////////////////////8//////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////wAAAAAAAAAAAAAAAA//////////wAAAAAAAB///////4Af///gAAAAAAAAAAAAAAAAAAAAAAAAf///////wAAAAAAAAAAAAAAAAAAAAAf/////////gAAAAAAAAAAAAAAAAAAf/////////8AAAAAAAAAAAAAD//////////////+AAAAAAAAAAH///////////////////////////AAAAAAAAAAAAAAAAAAAAAAA//////8AAAAAAA////////////////////////////8AAAAAAAAAAAAAAAAAAf//////////////////////8AAAAAAAAAP///////////8AAAAAAAAAAAAAAAAAAB///////////////+AAAAAAAAAAAAAAAAAAAAAP///////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////8AAAD///////////////////////////+AAH//////////////////8AAAAAAH////////////////////wAAAAAAA//////////////4AAAAAAAAAD///////////////AAAAAAAAAAAAAAAAAAAAAAAAf/////8AAAAAAAAAAAAAAAAAAAAAAAAAH//////////////+AAAAAAAAAAAAB///////////4AAAAAP///+AAAP///////wAAB/////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAH//////gAD4AAAAAAAAAAAAAAAAAAAAAH///////////////////////////+AAAD//8AAAAAAAAAAAAAAAAAH//////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAf////////4AAAAAAAAAAAAAAAAAAAAAD///4AAAAAAAAAAH/////////////////8AAAAAAAAAAAAAAAAAAAAf////////////////gAAAAAAAAAAAAAAAAf///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////8AAAAAAAAAAAAAAAAAAA/////////////////////////gAAAABAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////+D/////8AAAAAP///////////////4AAAAAAAAAAAAAAAAAAH//AAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAD///////////////////4AAAAAAAAAAAAAAAA////+AAAAAAAAAAAAAAAAAAAAAAB///////////////////////////wAAAAAAP/////wAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////8AAB//////////wAAAAAP//////////////gAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAgAAAAD///////////////gAAAAAAAAAAAAAAAAH//////////////////wAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAP///////////////wAAAAAAAA//////////////////AAAAAAAAAAAAAAA/////////4AAAAAAAAAAAAAAP////4P//////////////////gAAAAf/////8AAAAAB///////////////+H////////////////////////AAAAAAAAAAAAAAAAAAAAAf////////////////8AAAAAAB///////////////////////////wAAAAAf///////////8AAAH///////////////////////wAAAAAAAAAAAAAAAAB///+AAAA/8AAAAAAAAAAAAAAAP/wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////AAAAAAAAAAAAAAAB////////////////////////////gAAAAAAAAAAA///wAAAAAAAAAAA//////////////////8AAAH///////////////wAAAAAAAAAAAAAAAAAAAAAAAP/////////4AAAAAAAAAAAD//////////////////////4AAAAAAAACAAAAAAAAAAAAAP///////////////gAAAH//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////+AAAAAAAAAAAAAAAAAAAAAAAAP////////////4AAAAAAAAAAAAAAAAD/////////////AAAAAAD///////////////////+AAAAAB/+AAAAAAAAAAH///////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////4AAAAAAAAAAAAAAAAAA///////////////////gAAAAAAAf////////////////////wB//////wAAAAAAAAAAAAAAAAAf/////////////////////AAAAAAAAAAAAAAAAAAAf//////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////8AP///////////////////////AAP///////////////////+AAAAAAAAB///////////////////////wAAAAAP//////gAAAAAAAAAAAAAAAD////////////4AAAAAAAAAAAAAAAAAAAAAAB/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////8AAAB/////////////////4AAAAAAAAA///////////8AAAAAAAAAAP//+AAA//4AAAAAf////////////////////gAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////+AAAAAAAAD//////////////////////////+AAAAAAAAAAAAAAAAAAAAA//////////////wAAAAAf4AAAAAAAAH///wAAAAAA///////////////////////x////////////////////////////AAAAAAAH////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAB///////////////+AAAAAAAAAAAAAP///////////////////////gAAAB////4AAAAAAAAAAAAAAAAAAAAf/////////////8AB//////////////+AP/////////////+AAAAAAAAAAAAAAAAAA////////+AAAAAAAAAAA///////////////////////////wAAAA/////////////////////+AAAAAAAAAAAAAAD////////////////////////4AAAAAAH////////8AAAAAAAAAAAAAAAAAAAAD////////////+AAAAAAAAAAAAAAAAAAAAAB////////////gAAP/////////////////////4AAAAH//////////+AAAAAAAAAAAB////////////wAAAAAAAAAAAAAAAAAAAAAAAA/4Af///////////gAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////4AAAAAAAAAAAAAP/////////////////AAAAAAAAAAAAAAAAAAAAAAAAAH///////////+AAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////wAAAAAAAAAAAAAAAAAAAAAAAAA=",
    "DSA": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "DSA-SHA": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "DSA-SHA1": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "DSA-SHA1-old": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "RSA-MD4": "32cc32110ffdcf48d1097d21126ca826",
    "RSA-MD5": "fc45c5118f642cc479e6a550756f1a4e",
    "RSA-MDC2": "51ea813430c9ff72e5a17799b0a33250",
    "RSA-RIPEMD160": "36551631e11751f6fe7eef4a796a74abaf37d6bd",
    "RSA-SHA": "33fed74802eef71b5fcab7ff08fc293d1d9c172b",
    "RSA-SHA1": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "RSA-SHA1-2": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "RSA-SHA224": "265d4f6edc21bf86df95fc5765827531fec0f855d322d3bbd76ee2f1",
    "RSA-SHA256": "e52d8c79b31f45d4894e0948089da5fc236d33dd79a80d2304043e8c234cf88c",
    "RSA-SHA384": "a5bb0a21d45162d7869e6075b807afa8a0dcd087925927a35e0c242edabb8474b5bdccab856881102f2b039d73fb5540",
    "RSA-SHA512": "d86d8aa698c70e574e1e88a28e1666302b56f5dfae559cb13470944d4a424830dfa9d05527652330891be236caf2a02b2772a7e8411b065027fe83e03145b0a7",
    "dsaEncryption": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "dsaWithSHA": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "dsaWithSHA1": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "dss1": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "ecdsa-with-SHA1": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "md4": "32cc32110ffdcf48d1097d21126ca826",
    "md4WithRSAEncryption": "32cc32110ffdcf48d1097d21126ca826",
    "md5": "fc45c5118f642cc479e6a550756f1a4e",
    "md5WithRSAEncryption": "fc45c5118f642cc479e6a550756f1a4e",
    "mdc2": "51ea813430c9ff72e5a17799b0a33250",
    "mdc2WithRSA": "51ea813430c9ff72e5a17799b0a33250",
    "ripemd": "36551631e11751f6fe7eef4a796a74abaf37d6bd",
    "ripemd160": "36551631e11751f6fe7eef4a796a74abaf37d6bd",
    "ripemd160WithRSA": "36551631e11751f6fe7eef4a796a74abaf37d6bd",
    "rmd160": "36551631e11751f6fe7eef4a796a74abaf37d6bd",
    "sha": "33fed74802eef71b5fcab7ff08fc293d1d9c172b",
    "sha1": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "sha1WithRSAEncryption": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "sha224": "265d4f6edc21bf86df95fc5765827531fec0f855d322d3bbd76ee2f1",
    "sha224WithRSAEncryption": "265d4f6edc21bf86df95fc5765827531fec0f855d322d3bbd76ee2f1",
    "sha256": "e52d8c79b31f45d4894e0948089da5fc236d33dd79a80d2304043e8c234cf88c",
    "sha256WithRSAEncryption": "e52d8c79b31f45d4894e0948089da5fc236d33dd79a80d2304043e8c234cf88c",
    "sha384": "a5bb0a21d45162d7869e6075b807afa8a0dcd087925927a35e0c242edabb8474b5bdccab856881102f2b039d73fb5540",
    "sha384WithRSAEncryption": "a5bb0a21d45162d7869e6075b807afa8a0dcd087925927a35e0c242edabb8474b5bdccab856881102f2b039d73fb5540",
    "sha512": "d86d8aa698c70e574e1e88a28e1666302b56f5dfae559cb13470944d4a424830dfa9d05527652330891be236caf2a02b2772a7e8411b065027fe83e03145b0a7",
    "sha512WithRSAEncryption": "d86d8aa698c70e574e1e88a28e1666302b56f5dfae559cb13470944d4a424830dfa9d05527652330891be236caf2a02b2772a7e8411b065027fe83e03145b0a7",
    "shaWithRSAEncryption": "33fed74802eef71b5fcab7ff08fc293d1d9c172b",
    "ssl2-md5": "fc45c5118f642cc479e6a550756f1a4e",
    "ssl3-md5": "fc45c5118f642cc479e6a550756f1a4e",
    "ssl3-sha1": "34ae3b806be143a84dce82e4b830eb7d3d2bac69",
    "whirlpool": "8438cc5c19ba9e8779aa76dad0169f38a2dd35e6d88205111635a0f596439ddbb78bc8f291bf84f76ab9e1c2bfe3b18526706530abf3862350d9a4a12a3d8614"
  },
  {
    "input": "///////////////8AAAAP/4B///gAAAB//+AAAAAAAAAAAAAAAAAAAHwAAAAAAAAAAAAAAAAAAAAAAD//////////////4AAAAAAAAAAD////////////////////////////gAAAAAAAAAB/////////////////////////gAAAAAAAAAAAAAP/////////4AAAAAAAAAAAAAAAAP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////gAAAAB///////////////////AAAAAAAAAAAAAAAAAAAAAAH////////////////////+AAAAAAAAAAAAAAAAAB//////////////////gAAH/////AAAAAAAAAAAAAAAAAAAAAP////////////////4AAAAAP/////8AAAAAAAAAf///////////////AD//////////////////gAAAAAAAAAAAAAAAAAAAAAAAAP///////////////8AAAAH////////////////////////wH/////////////gAAAAAAAAAAD///////////////8AAAAAAAAAAAAAAAAAAD////AAAAAAAAAAAAAAAAAf///////////////////////////8AAAAAAAAAAAAAAAAH////////wAAAAAAAAAAAAAAAAAAAH///5////////////////////AAAAAAAAH/////wAAAAAAAAAAA/////////////+AAAAD/////////////////////////wAAAAAAAAAAHwAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////8AAP///+AAAAAAAAAH/////////5////////////////wAAAAAAAAAAAAAAAAAAAAD///////////4AAAAA//////////////////////////8AAAAAAAAAAAP///////+P//////8AAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAD/////////////8AAAAAAAAAAAAAAAAH//////8AAD//////////////////4AAAAAAAAAAAP/////8AAAAAAAAAAAAAAAP////////4AAAAAAAf///////////4AAAAAAAAf//////////////////////wAAAAAAAAAAAAAAAAP/////gAAAAAAP///////8AAAAAAAAAAAAA////////////////////wP////////////////AAAAAAAAAAAAAAD/////////////////////gAAAAAf///wAAAAAAAAAAAAAAAAAAAAAAAA///////+AAAB/AAAAAAAAAf/////gAAAAf////////////+AAAAAf//wAAAAAAAAAAAAP/////////+AAAAf///////////AAAAD///////////////////////////4AAAAAAAAAAAAAD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAf////////////gAAAH//////////4AAAAAP//////////gAAAAAAAAAAAAAAf//////4AAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////4AAAAAAAAAP/+AAAAAAAAAAA/////////4AAAAAAAAAAAAAAAAAAAAAAP//+AAAAAAAAAAAAAAAAAAAAAB////////gAAAAAAAAAAB////////////+AAAAAB////////////////////////////B////////////////////////////4AAAAAAAABAAAD/////////////////////gAAAAAAAAAAH///////////////////////////4AAAP///////////8AAAAD////////////////gAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////gAAAAAAAAAAAAAAAAAAAf//////////////wAAAAAAAAAAAAAAAAAAAAAAAAB/gAAAAAAf//////////4AAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////8AAAAAAAAAAAAAAAAA////////////////4AAAAAAAAAAAAAAAAAAAAAD4AAAAAAAAAAAAAAAAAAAAAA////////////////AAAAAAAAAAAAAD/////////4AAAAAAAAf///////////////////////gAAAAAf//4AAAAAB//////////gAAAA//////////////////8AAAAAAAAAAAAAAAAAP///////AAAAAAAAAAAAAAAAAD//+AAAAAAAAAAAA///////////8AAAAAAH//////////////////////AAAAAAAAAAAAAAAAAAAAAAf//////gAAAAAAAAAAAAAAA//4AAAAAAA//////////////////////8AAAAAAAAAAAAAAAf///////////////+AAAAAAAAAAAAAAAAf////////////////////////////A//////////////////////AAAAAAAAAeH////8AAAAAAAAAAP/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////AAAAAAAAAAD/////////////////////////+AAA///////8AAAAAAAAAAAAAAAD///////////////AAAAAAAAAAAAAAAAAf//////////////////////wAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAD//8AAAAAAAAAAAAAA//////wAAAAAAAAAAAAAAf/////////4AAAAAAAAAD////////////+AAAAAAAAAAAAAAAAAAAAAAAAAA//wAAAAAAAAAAAAAAAAAA//////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAH////+AAf/////////////wAAAAAAAAAAAAP////4AAAAAAAAAP//9//////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////8AAAAH///////////////////+AAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////AAAAAAf////////////////gAAAAf/////////////////wAAAAAAAAAAf/////////////wAAAAAAAB////////////////////////////+AAAAAAAAAAAAAAAAAAf//////////////////////////4AAAAAAAAAAH////////////wAAAAAAAAAAAA//////////////////4AAAAAAAAAAAAAAAAAAAP/////////////////////gAAAAAAAAAAAAAAA+///////////////////////////8AAAAAAAAAAAAAAAAB//////////////////////gAAAAAAAAAAAAAAAAAAAAAAD//4AAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////wAAAAAAAAAAAAAAAAAAAAAAf///////gAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////+AAAAAAAAAAAAAAAAB//H/////////////+AAAAAAA///+AAAAAAAD/////////AAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////4f/////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////4AD////////////////////////gAAAAAAAAAAAAAAAAAAA//////////////////gAAAAAAAAP//////gAAAAAAAAAAAAAAAAAAAAAAH//////////8AAAAf////wAAAB////////8AAAAAAAAAAAAAAAAAAAAD//4AAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////AAAAAAAAAAAAAAAAAAAAP//////////////////////////AAAAAAAAAA/gAAAAAAAAAAAAAAH//////////////////wAAAAAAAAAAP//////+AAAAAAAAAAAAAAAAAA//////////AAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////AAAAAAAAAAP/////+AAAAAAP//gAAAAAAAAAAAAAAAAAAAAAAAAD/+AAAAAAAAAAAAAAAAAAAAAAAAAf////////AAAAAAAAAAAAAAAD////////AAAAAAAAB//////////////8AAAAAAAAAf////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAB///////wAAAAAAAAAAAAAAAAAAAf////////////////4AAAAAAAAAAAAAAAAAAAD/////////AAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////+AAA//////+AAAAAAAAAAAAAAAAA///////////////////////////8AAAAAAAAAAAAAAAAAD///////////AAAAAAAAAAAAAAAAAAAAA//AAAAAAAAB/////////////////////8AAAAAAAAAAAAAAAAAAAAB////////////////////////4AAAAAAAAf/////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAH///////+AAAAAAAB/////////////////////////8AAAAAAAAAAAD/////////////////////8AAAAAAAAAAAAAP/////4AAAAAAAAAAAAAAAAAAAAA//////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////w==",
    "DSA": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "DSA-SHA": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "DSA-SHA1": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "DSA-SHA1-old": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "RSA-MD4": "042abcbbf1dbea3a7ec62422c95daf52",
    "RSA-MD5": "0138351089a87a2ddc2d98255ce6b8cc",
    "RSA-MDC2": "56db34cf44f8c027390ee03357f13a0b",
    "RSA-RIPEMD160": "5df362b8f40bc08360c39931bc38ad5911ddc1a9",
    "RSA-SHA": "10aa8186596e5b0473e1e8691ca32ce3f6c3afd8",
    "RSA-SHA1": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "RSA-SHA1-2": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "RSA-SHA224": "2ba34b2d79ab45d358ac4149f3e955828caf60afa3d721b05ec4490d",
    "RSA-SHA256": "b1870cae9e54cbe8ddd74782c98f6c9ec6eeb835e2765252530d71779685d4ea",
    "RSA-SHA384": "b9f70aca302029cae4ed7881ca535bcdc1fbd208e4d9c2f35e69e9c76fed7acdb6e4bc147b9a07332d45439ef4e96d16",
    "RSA-SHA512": "3d994a9ab4b95d6622f464dbf2ec8725fafe25988bb108cf9bd09b4c07ad0c3d1b3f6a2500b881f2bfd3b323894898014b4b1eab3956854b8ef1a6c991f73a5f",
    "dsaEncryption": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "dsaWithSHA": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "dsaWithSHA1": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "dss1": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "ecdsa-with-SHA1": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "md4": "042abcbbf1dbea3a7ec62422c95daf52",
    "md4WithRSAEncryption": "042abcbbf1dbea3a7ec62422c95daf52",
    "md5": "0138351089a87a2ddc2d98255ce6b8cc",
    "md5WithRSAEncryption": "0138351089a87a2ddc2d98255ce6b8cc",
    "mdc2": "56db34cf44f8c027390ee03357f13a0b",
    "mdc2WithRSA": "56db34cf44f8c027390ee03357f13a0b",
    "ripemd": "5df362b8f40bc08360c39931bc38ad5911ddc1a9",
    "ripemd160": "5df362b8f40bc08360c39931bc38ad5911ddc1a9",
    "ripemd160WithRSA": "5df362b8f40bc08360c39931bc38ad5911ddc1a9",
    "rmd160": "5df362b8f40bc08360c39931bc38ad5911ddc1a9",
    "sha": "10aa8186596e5b0473e1e8691ca32ce3f6c3afd8",
    "sha1": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "sha1WithRSAEncryption": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "sha224": "2ba34b2d79ab45d358ac4149f3e955828caf60afa3d721b05ec4490d",
    "sha224WithRSAEncryption": "2ba34b2d79ab45d358ac4149f3e955828caf60afa3d721b05ec4490d",
    "sha256": "b1870cae9e54cbe8ddd74782c98f6c9ec6eeb835e2765252530d71779685d4ea",
    "sha256WithRSAEncryption": "b1870cae9e54cbe8ddd74782c98f6c9ec6eeb835e2765252530d71779685d4ea",
    "sha384": "b9f70aca302029cae4ed7881ca535bcdc1fbd208e4d9c2f35e69e9c76fed7acdb6e4bc147b9a07332d45439ef4e96d16",
    "sha384WithRSAEncryption": "b9f70aca302029cae4ed7881ca535bcdc1fbd208e4d9c2f35e69e9c76fed7acdb6e4bc147b9a07332d45439ef4e96d16",
    "sha512": "3d994a9ab4b95d6622f464dbf2ec8725fafe25988bb108cf9bd09b4c07ad0c3d1b3f6a2500b881f2bfd3b323894898014b4b1eab3956854b8ef1a6c991f73a5f",
    "sha512WithRSAEncryption": "3d994a9ab4b95d6622f464dbf2ec8725fafe25988bb108cf9bd09b4c07ad0c3d1b3f6a2500b881f2bfd3b323894898014b4b1eab3956854b8ef1a6c991f73a5f",
    "shaWithRSAEncryption": "10aa8186596e5b0473e1e8691ca32ce3f6c3afd8",
    "ssl2-md5": "0138351089a87a2ddc2d98255ce6b8cc",
    "ssl3-md5": "0138351089a87a2ddc2d98255ce6b8cc",
    "ssl3-sha1": "d7447e53d66bb5e4c26e8b41f83efd107bf4adda",
    "whirlpool": "5b754bcf0ecbf9875f2b1c09d852d59d25c636110ececd531ecc1fd939010a7965ea9bbc7321c107d6a473c16bd6a90fae6bdd3497c2c588c37ac73f0297b836"
  },
  {
    "input": "////////////gAD////////////+AAAAAAAAAAAAAAAAAAAAAAA///////////+AAAAAAAAP/////////////////////wAAAAAAAAAAAAB//////////////////////wAAAAAAAAAAAAAAAAAB///////////////////////////4AAAAAAAAAD/////+AAAAAAAAAB///////////////////4AAAAAD///////////////AAAAAAAAAAAAAAAAAAAAAAP///////////////AAAAAAAAAA/////////////////////////AAAAAAAAB///////8AAAB//////////////////gAAP//////////////////////gAAAAAAAAAAAAAAAAA////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////AAD///////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAP/wAAf//////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////4AAAAAAAAAAAAAAAAAAA//////+AAAAAAAAAAAPwAP//////////////////////////8AAAAAAAAAAAAP/////////////////4AAAAAAf////////////////AAAAAAAAAAAAAD/////////////wAAAAAAAAAAAAAAAAAAAAAf/////////////////////4AAAAAAAAAAAAAAAAAAD///////////////////////4AAAAAAAAAAAAAAAAAAf////4AAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////gAAAAAAAAAAAAAAD//////////////////////////8AAAAB//////////+AAAAAAAAAAAAAAAAAAAAP///////////////////////wAAAAAAAAAAAAD//////////////////////gAAAAAAAAAAAAAAB//////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////4AAAAAAAAAB//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////8AAAAAAAAAAAAAAAAAAPAAAAAAAAAAB/////////////////////AAAAAAAP/////////////////////gAAAAAAAA///gAAAAAAAAAAAAAAAAD//////////////+AAAAAAAAAAAAAAAAAAAAAAAAD/////////////////wAAAB/////////wAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////AAAAAAAAAAAAAAf/4AAAAAAAAAAAAD///AAAAAAAAAAAAAA/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////4AAAAAAAAAAAH//////////+AAAAAAAAAD////////////////////////////gAA////////////////////8AAAAAAAAAAAAA///////////////////////////+Af////////8AAAAP////////////////////////////AAAAAAAAAAA////////////////////////AAAAAAAA///////AAAAAAf/////////////////wAAAAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAAAAAH////////////////8AAAAAAAAAAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAAAAf/////8AAAAAAAAAAAB////////////////////////AAAAAAAAAAAAD//////////////////////////AAAAAAAf////////////+AAAAAP///////+AAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////8AAAAAAAAAAAAAAAB//OAAAf///gAAAAAAAAAAAAAAAAAAf///////////////4A////gAAAAAAAAAAAAAAAAAAAAA/////////////////AAAAAAAAAAAAAAAAH/////////////+AAAAAAB//4AAAB//////////////////////////wAAAAAB/////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////wAAAAAAAH/////////wAAAAAAf//4AAAAAAAAAAAAAAAAA/////gAAAAAAAAAAAAAAAAAAAAAB////+AAAAAAAAAAAAAAP/AAAAAAAAAAAAAAAAAAAB//////////////////////wAH/////////////wAAAAAAAAAAAAAAAB/////////4AAAAAAA////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAH///+AAAAAAAAAA//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAP////////////8AAAAAAAAAAAAAAAAAAAP/////////////////gAAAAAAAAAAAB////////////8AAAD///////AA///////////AAAAAAAAAAAAAAAB////////////////////////wAAAAAAAAAH/////////////+AAAAAAAAAAAAAAAAAAAAAAAf///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////4AAAAAAAAH///////wAAAAAAP///////////////4AAAAAAAAAAAAAAAAAAAB//+AAAAAAAAAB//////////////+AAAAAAH///////////8AAAAAAAAAAAAAB//////////wAAAAAAAAAAAAAgAAAAA////////////////AAAAAAAAAAAAAAAD/////////////gAAAAAAAAf/8AAAAAAAAAAAAAAAAAAAAA//////8AAAAAAAAMAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////8AAAAAAAAAAAAAAAAAAH/////////////////////gAAAAAAAAAAAAAP///////////////gAAAAAAAAAAAAAAAH/////////gAAAAAAAAAAAAAAAAD//////////////////wAAAAAAAAf//////////4AAAAAAAAAAAAAAAAAH///////////4AAAAAAAAAAAAAAAAf////////////////////////4AAAAAAAD//////////////gAAAAAAAAAAAAAAAAAAAAAAH//////AAAAAAAAAAAAAAAAAAAAAAAAAD//////////AAAAAAAAAAAAAAAAAAA////////////+AAAAAAAAAAAAAAAAAP/////////+AAAAAAAAf/////////////8AAAAAAAAAAAAAAAAAAAAAAAAAB////gAAAAAAAAAAAAf///////////////////4AAAAAAAAAAD///////////////////////AAAAAAAAAAAB////////////////////////////gAAAAAAAAAAAAAAAAAAA+AAAAAAAAAAAAAAAP//////////AAAAAAAAP////////////////8AAAAAAAAAAAAAAAAAAAAAAAD/////////////////////gAAAAAAAAAAAAAAAAAAAAAAf///////////8AAAAAAAAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////8AAAAAAAAAAAAAAAAAAAAAAB///////////////////+AAAAAAAAB//////////////////8AAAAAwAAAAAAAAAAAAAAAAAAAAAH//wAAAAAAH//////////////////////////8AAAAAAAAAAAAAAAAAAAAAf//////////////AAAAAAAAAAAA////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAD////8AAAAAA/gAAAAAAAAAAAAAAAAAAAAAAfAAAAAAAP/////////4AAAAAAAAAAA////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////8D///////////////gAAAAAAAAAAAAD//////////////////8AAAAP///4AAAAAAAAAAAAAf//+AAAAAAAAAAAAAAAAAAAH/////////gAAAAAAAAAAAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////////AAAAAAAAAAAAAAAP/////wAf///////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////wAAAA///////AAAAAAAAAAAAAAAAAAAAAAAAP////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////4AAAAAAAAAAAAAAAAAAAAAAf//////////////////////wAAAAAAAAAAAAAAAAH//////////8AP////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAD///////////wAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////AAAAAAAAAAAAAAAD/////AAAAAAAAH/////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////4AAAAAAAAAAAAAAAAAAAAAH///////8AAAAAAAAAAAAAAAAAAAH////////4AAAAAAAAAAAAAAAH///////AAAAAAAAAAAAA////////////gAAAAAAAAAB//////////////////////////wAAAAAAAAAAAAAAAAAAAP///AAAP/////////////////////////AAAAAAAAAAAAAAAAAAH///////////////////AAAAAAAAAD/////////AAAAAAAAAAAAAAAAAAf///////////gAAAAAAAAAAAAAAAAAAAAAAA",
    "DSA": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "DSA-SHA": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "DSA-SHA1": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "DSA-SHA1-old": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "RSA-MD4": "ae8734be0f8339853232db5dabbf8814",
    "RSA-MD5": "1f3e42daa4b315f2a0e6a530e0cc6976",
    "RSA-MDC2": "02082f9c2402be9ef01c712d90d4e117",
    "RSA-RIPEMD160": "f19b7624ca276bf25f44fbc8144dc4e39bbbb9bb",
    "RSA-SHA": "3d2ea12085151a9f73efd3a1c403a884344b7cf5",
    "RSA-SHA1": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "RSA-SHA1-2": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "RSA-SHA224": "e6109631bd6ca82801e934e567d5ca78338eb64eff9cc187141a9bc0",
    "RSA-SHA256": "69850fe71261572f61d56863a7dc12aeda7931225d0eafb5b7b45aef7b6c8586",
    "RSA-SHA384": "5edcbc3e49ce513ce5b60bc8f369001a9d3a8d996ff350d0e222aad8e9ab407426758bfe962a45bf800dbbe297c731c6",
    "RSA-SHA512": "19f812d6a96e6062a71928bc5ed95d84659a4d70f6d47aebdd5eb19be1a8c163a121005228b8eae2fccced12c26b3a295a5c349daed623743b8602364cc2ee2c",
    "dsaEncryption": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "dsaWithSHA": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "dsaWithSHA1": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "dss1": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "ecdsa-with-SHA1": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "md4": "ae8734be0f8339853232db5dabbf8814",
    "md4WithRSAEncryption": "ae8734be0f8339853232db5dabbf8814",
    "md5": "1f3e42daa4b315f2a0e6a530e0cc6976",
    "md5WithRSAEncryption": "1f3e42daa4b315f2a0e6a530e0cc6976",
    "mdc2": "02082f9c2402be9ef01c712d90d4e117",
    "mdc2WithRSA": "02082f9c2402be9ef01c712d90d4e117",
    "ripemd": "f19b7624ca276bf25f44fbc8144dc4e39bbbb9bb",
    "ripemd160": "f19b7624ca276bf25f44fbc8144dc4e39bbbb9bb",
    "ripemd160WithRSA": "f19b7624ca276bf25f44fbc8144dc4e39bbbb9bb",
    "rmd160": "f19b7624ca276bf25f44fbc8144dc4e39bbbb9bb",
    "sha": "3d2ea12085151a9f73efd3a1c403a884344b7cf5",
    "sha1": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "sha1WithRSAEncryption": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "sha224": "e6109631bd6ca82801e934e567d5ca78338eb64eff9cc187141a9bc0",
    "sha224WithRSAEncryption": "e6109631bd6ca82801e934e567d5ca78338eb64eff9cc187141a9bc0",
    "sha256": "69850fe71261572f61d56863a7dc12aeda7931225d0eafb5b7b45aef7b6c8586",
    "sha256WithRSAEncryption": "69850fe71261572f61d56863a7dc12aeda7931225d0eafb5b7b45aef7b6c8586",
    "sha384": "5edcbc3e49ce513ce5b60bc8f369001a9d3a8d996ff350d0e222aad8e9ab407426758bfe962a45bf800dbbe297c731c6",
    "sha384WithRSAEncryption": "5edcbc3e49ce513ce5b60bc8f369001a9d3a8d996ff350d0e222aad8e9ab407426758bfe962a45bf800dbbe297c731c6",
    "sha512": "19f812d6a96e6062a71928bc5ed95d84659a4d70f6d47aebdd5eb19be1a8c163a121005228b8eae2fccced12c26b3a295a5c349daed623743b8602364cc2ee2c",
    "sha512WithRSAEncryption": "19f812d6a96e6062a71928bc5ed95d84659a4d70f6d47aebdd5eb19be1a8c163a121005228b8eae2fccced12c26b3a295a5c349daed623743b8602364cc2ee2c",
    "shaWithRSAEncryption": "3d2ea12085151a9f73efd3a1c403a884344b7cf5",
    "ssl2-md5": "1f3e42daa4b315f2a0e6a530e0cc6976",
    "ssl3-md5": "1f3e42daa4b315f2a0e6a530e0cc6976",
    "ssl3-sha1": "77dd2a4482705bc2e9dc96ec0a13395771ac850c",
    "whirlpool": "25419001a614e178b0a8e9e3755b8cc9bf36392e862eba8be7b774431ee9045bfafa7491c66f8ade25a705f9656b41eee3377fb55e6dd1363f7d22e21634fc45"
  },
  {
    "input": "//////////////////////8AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////wAB////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8AAAAAAH//////////////wA//////////AAAAAAAAD///////////////AAAAAAAAAAAAAAAAAAAAAAAAf//8AAAAAAAAAAAAAAAAAAAAAAAAAH///////wAAAAAAP/////////4AAAB//+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////gAAD////////////////////wAAAAAAAAAAAAAAAAAAAAAAB//////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////AAAAAAAAAAAAAAAAAAA///////////////////////+AAf//////////////////////////4AAAAAAAAAAAP///////////////////////AAAAAAAAAAAAAAAAAAAAAA/+AAAAAAAAAAAAAAAAAAAAH///wAAAAAB/////////////4AAAAAAAAAAAAAAAAAAH/////////////4AAAAAAAAA///////////////////////////gAAAAAAAAAAAAAAAAAAAAB/////////////////////AAAAAAAAAAAAAAB//////////////////////AAD//////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAf////+AAAAAAAAAAAH////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAP//////////////////AAAAAAAAAAAAAAAAAAP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////4AAAAAAAAAAAAAAAAAAAAAAH/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////////8AAAAAAAAAH//8AAAAf//gAAAAAAAA///////////////wAAA//////////+AAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////////gAAAAAAAAD/////////////////AAAAAAAAAAAAAAP////////////////////wAAAAAAAAAAAAAAAAAAAAAAAA///////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAH////////////4AAAAAAD//////////gAAAAAAAAAAAAAAf///////gAAAAAAAAAAAAH///////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAf//////////4AH//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////AAAAAAAAAAAAAAAAAAAD///////////////8AAAAAP////////////////////+AAAAAD////////////g/////////////////+AAAAAAAAAB////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////8AAAAAAAAAAAAABwAAAAAAAAAAAAAAAAAAAAAH////////////AAAAAAAAAAAAAAAB/////////////////////////gAAAAAAAAAAA/////////////////////////////gAAAAAAP///////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////AAAAAAAAAAAAAAAAAAAAAAAA//8AAAAAAAP////////////////gAAAAAAB///////////////////////////wAAAAAAB///////////gAAAAAAAAAAAAAAAAAAAAAAAAAAP/////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAPgAAAAAAAAAAAAAAAAAAAAAAf/////////wAAAAAAAAAAAAAH/////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////AAAAAA///////////////////////////+AAA////////+AAAAAAAAAAAAAAAAAAAAAAAAA///////////AAAAAAAAAAA////////////////j////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAD/8AAAAAAAAAAAAAAAA/////////////////////+AAAAAAAAAAAH/////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////gAH/////////////////AAAAH///////////////////////AH/////////////////////////////gAAAAAAAAAAAAD////////AAAAAAAAAAAAAAAAAAB//////////////////gAAAAAAAAAAAAAAAAAAAAA//////gAB/////////////AA/////8AAAAAB///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAH/gAAAAAAAAAAAAAAAAAAAAAAAAH8AAAAAAAAAAAAAf//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAB////gAAAAAAAAAAAAAAAAAAAAAB/////////////4AAAAAAAB////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAf//////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////4AAAAAAAAAAAAAAAAAAAB///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAP+AAAAAAAAAAAAAAAAAAAAAAAAB////////////////////8AAAAAAAAf////////gAAAAAAAAAAAAAAAAAAAA/////////////////////////////AD////////////////////wAAAAAAAB/////////////////////////////wAAAAAAAAAAAAB////////////////////////////8AAAAAAAAAAAf/////////////////wD///wAAAAAAAAAAAAAAAAAAAAAAAAAf//wAAAAAAAAAAAAAD//////////AAAAAAAAAAAAAAAAAAAAAAAAB/////wAAAAAH/////////////////4AAAAAf///////////////gAAAA/////////////////////////////AAAAAAAAAAAAAAAAAAAAAAf///////////////////////////AAAAAAAAP////////wAAAAAAAAAAP/////////////////////AEAAAAAD//////////////////////AAAAAAAAAAAAAAAAAA//////////+AAAAAAAAAAAAAAAA/////////////////////AAAAAAAAAP//////////////////////////4AAAAAAAAAAAP/////////////gAAAAAAAAAAAAAB/7/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///wP//////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////4AAAAAAAAAAAAAAP//////4AAAAAAAAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAA//////////////gAAAAP//////////////gAAAAAAAAAAAH/////////////////////////gAAAAAAAAAAAAAAAAAAAAAA////8AAAAAAAAAAAAAAAAAAB///////////////////wAAAAAAAAAAAAAAAAAAAD/////////////////8AAAAAAAAAAAAAAAA/wAAAB//////////////////gAAAAAAAAAAAAAAAAP////////////////////////////8AAH//+AAAAP////////////gB///////////////wAAAAAAAAAAAAAAAAAAAAAAAH////////////+AAD///////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAA////////////8AAAAAAAAAAAf////////////gAAAAAAAAAAAAAAAAf//4AAAAAAAAAAAAAAD////////////////////////////gAAAAAAAAAAAAAAA////+AAAAAAAAAAAAAAAAAAA/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////gAAAAAD///4AAAAAAAAAAAf/////////////AAAAB////////////////////////4AAAAAAAAAAD//////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAD/////h//wAAAAAAA///////P//////////+AAAAAAAAAAAAAAAAAf////////AAAAAH//////////////////////////gAAAAAAAAAB/////wAAAAAAAAAAAAAAAAAAAAAAAAAf/4AAAAAAAAAAAAAAAAAAAAAP//////////////////////////AAAAAAAAAB////////////+AAAAAAAAAAAD//+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////AAAAAAAAAAB//////gAAAAAAAAAAAAB/////////AAAAAAD/////////AAAAAAD//////////////////+AAAAAAAAAAAAAB////8AAAB///////gAAAAAAAAAAH////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////+AAAAAAAAAAH////////////////////AAA////gAAAAAAAAAAAAAAAAAAAAAB///8D////////////////////////////gAAAAP////wAAAAP/////////AAP/4AAAAAAAAAAAH/////////AAP//////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
    "DSA": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "DSA-SHA": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "DSA-SHA1": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "DSA-SHA1-old": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "RSA-MD4": "ddb4e44343de924cea9716cde25b2e50",
    "RSA-MD5": "aec4974f238a6e04dcb07e20ad861230",
    "RSA-MDC2": "3bcd8868917aaeb6ce3d650810444b96",
    "RSA-RIPEMD160": "ec5285128e058ab15294da535610674c5eaa55b8",
    "RSA-SHA": "939cb03f381c9c0cac95828646240d7572be5e30",
    "RSA-SHA1": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "RSA-SHA1-2": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "RSA-SHA224": "dd0c60a39cc66be93457d6c0ef0bcf6cac1e9f42fd10d48afcef3bf4",
    "RSA-SHA256": "18fdfb38e4f516734cef5de8cba84a54a17cdaf13228621dfcd806c5e822eccd",
    "RSA-SHA384": "69c7b211d24476e00f399749b348673edee6f98e96cfb3e2d42115e91e1f3498988baf8d3d52593712a7b9ab92332bfb",
    "RSA-SHA512": "c5fa614fa377b61b8e0b6f98367108cae2b599cb6a5ca4ee8917fa8c61589dc67c0c8cc898688845dc992c218477def295ce231200eedb8de65696882f62c163",
    "dsaEncryption": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "dsaWithSHA": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "dsaWithSHA1": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "dss1": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "ecdsa-with-SHA1": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "md4": "ddb4e44343de924cea9716cde25b2e50",
    "md4WithRSAEncryption": "ddb4e44343de924cea9716cde25b2e50",
    "md5": "aec4974f238a6e04dcb07e20ad861230",
    "md5WithRSAEncryption": "aec4974f238a6e04dcb07e20ad861230",
    "mdc2": "3bcd8868917aaeb6ce3d650810444b96",
    "mdc2WithRSA": "3bcd8868917aaeb6ce3d650810444b96",
    "ripemd": "ec5285128e058ab15294da535610674c5eaa55b8",
    "ripemd160": "ec5285128e058ab15294da535610674c5eaa55b8",
    "ripemd160WithRSA": "ec5285128e058ab15294da535610674c5eaa55b8",
    "rmd160": "ec5285128e058ab15294da535610674c5eaa55b8",
    "sha": "939cb03f381c9c0cac95828646240d7572be5e30",
    "sha1": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "sha1WithRSAEncryption": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "sha224": "dd0c60a39cc66be93457d6c0ef0bcf6cac1e9f42fd10d48afcef3bf4",
    "sha224WithRSAEncryption": "dd0c60a39cc66be93457d6c0ef0bcf6cac1e9f42fd10d48afcef3bf4",
    "sha256": "18fdfb38e4f516734cef5de8cba84a54a17cdaf13228621dfcd806c5e822eccd",
    "sha256WithRSAEncryption": "18fdfb38e4f516734cef5de8cba84a54a17cdaf13228621dfcd806c5e822eccd",
    "sha384": "69c7b211d24476e00f399749b348673edee6f98e96cfb3e2d42115e91e1f3498988baf8d3d52593712a7b9ab92332bfb",
    "sha384WithRSAEncryption": "69c7b211d24476e00f399749b348673edee6f98e96cfb3e2d42115e91e1f3498988baf8d3d52593712a7b9ab92332bfb",
    "sha512": "c5fa614fa377b61b8e0b6f98367108cae2b599cb6a5ca4ee8917fa8c61589dc67c0c8cc898688845dc992c218477def295ce231200eedb8de65696882f62c163",
    "sha512WithRSAEncryption": "c5fa614fa377b61b8e0b6f98367108cae2b599cb6a5ca4ee8917fa8c61589dc67c0c8cc898688845dc992c218477def295ce231200eedb8de65696882f62c163",
    "shaWithRSAEncryption": "939cb03f381c9c0cac95828646240d7572be5e30",
    "ssl2-md5": "aec4974f238a6e04dcb07e20ad861230",
    "ssl3-md5": "aec4974f238a6e04dcb07e20ad861230",
    "ssl3-sha1": "eaa1465db1f59de3f25eb8629602b568e693bb57",
    "whirlpool": "dfd7448a75b44a7ec92b2776331b1f6fffe8132f9228a52eda76b4161372ef19e3928a8b07e26857b9f8f6416475838a0981d9e6adcc4a22a0a088584521783c"
  },
  {
    "input": "AAAAAAAAAAAAAAAAAAAAAAH///////////AAD///////////////////////////4AAAAAAAAAAAAD///////////////////////4AAAAAAAf////////////////////////////+AAAAcAAAAAAAAAAH/////////gAAAAAf/////////////////////8AAAAAAAAAAAAAAAB/////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////wAAAAAAAAAAAAAAAAAAAAAAAAD/////////gAAAAAAAAAAAAAAAAAAAAAA////////////////////////////+AAAAAAAAAAAAAAAAAB/4AAAAAAAAH////////////4f////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////+AAAAAAAB/////////////////////////////wAAA/////////////////////4AAAAAAAAAAB///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////gAAAAAAAAAAAAAAAAB////////////////////////////+AAAAAAAAAAAAAAAB////////////wAAAAAAAAAAAAAAAAAAAAB///////////////////////////+AAAAAH/////4AAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////wAAAAAAAAAAAAAA////////////4AAAAAAAAAAAAAAAAP////////////////////////gAAAAAAAAAAAAAAAAP//////////AAAAAAA/////////+AAAAAAAAH//////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//4AAAAH///gAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wAAAAAAAAAAAAAAAD///////wAAAAAAAAAAAAAAAAA/////////////////////////////+AAAAAAAAAAD////8AAH////////////////////8AAAAAAAAAAAAAAAAAAAAH///+AAAAAAAAAAAAAAP/+D//////////////////////wAAAAAAAAAAAAAH////////////////gAAAAAAAAAAf//////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////8AAf/////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAB//wAAAAAAAAD////////////////AAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////wAAAAAAAP////////////////////////j//AAAAAAAAAAAAAAAA////////8AAAAAAAAAAAAB///////////////////AAAAAAAAAAAAAAAAAAAAAAP///////////////////////////8AAAAAAAAD/////////////////////////////wAAAAAAAAP///AAAAAAAAAAAAf////gAAAAAAD//////gAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////8AAAAAAAAAAAAAAAD////////////////+AAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////////+B///////wAAAAAAAAAD//////////////////////////////gAAAAAAAD/////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////wAAAAAAAAAAAAAAAAAAAAAAAH///////////////////AAAH//////////////4AAAAAAAAAAAAAAAAAAAf/////////////////wAAB//////////gAAB////////////////8AAAAAAAB////////8AH///////////////////////gAAAAAAAAAAAAAH/////////////////////4AAAAAAAAAAH///////////AAAAAAAP////////////4AAAAAAAAAAAAAA///////////////////gAAAAAAAAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////wAAAAAAAAAB//////////////////gAAAAAAAAAAAAAAAAAP////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAB///////////////AAAAAAAAAAAAAAAAAAAAAH//////gAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////4AAAAAAAAAAAAAAAAH///////////////////////////H///////////gAAAD////////////////////////////+AAAD/////////AAAAAAAAAAAAAAAAAAAAA///////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAB///gAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////8AAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////4AAAAAAAAAAAAAAAAAA///////////4AAAAAA/////4AAAAAAAAAAAAAAAAAAAAAH//////8AAB/////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////AAAAAAAAAAAAAAAAAAAD/gAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////wAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAD+AAAAAAAAAAAAAB//////////////8AAAAAAAAAP/4AAAAAAAAAAAAAD///////AAAAAAAAAAAAAAAAAAAAAAH////////////////////wAAAAAAAAP/////////////////////////////+AAAD//////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAf////AAAAAAAAAAP///////8AB/////////wAAAH////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAf//////8AAAAAAAAAAAAAAAH//////////gAAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAf//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAA/4AAAAAAAAAAAP///////////////////////////AAAAAAAAAAAP////AAAAAAAAAAAAAAAAA8AAAAAAAAH////////////////////AAAAAAAAAAAAAAAAAAH////////////////////////gAAH////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAf////+Af//////////////////////wAAAAD///////////////////AAAAAAAAAAA//gAAAAAAAAAAAAAAAAAA//////////4AAAAAAAAAAAAAAAAAAAAAAAP///////////////4AAAAAAAAAA/8AAAAAAAAAH////////////////////gAAAAAAAAAAf//////AAAAAAAAAAAAAAAAAAAAAA///////////+AAAAAAAAAAAAAAAAAAA/////////////////8AAAAAAAAAAAAAAAAAAAAAAAAB///////4AAAf//////8AAAAAAAAAAAAAAAAAAAP/////4AAAAAAAAAAD////////////////////wAAAAAAAAAAAAAAA//////////AAAAAAAAAAAAAAAAAAAAAAAP//////4AAAAAAAP/AAAAAAAAAAAAAAAAAAP+AAAAAAAAAAAAAAAAAAAAA////////////////gP/////////////////////////wAAAAAAH/////////////////////////////4AAAAAAAAAAAAAAAAAAAAP////////////////////wAAAAAAAAAAAAAAAAAAAAAAf///////////////////////wAMAAAAAAAAAAAAAP///////////////////////8AAAAAAAAAAAAAAAAP//////////////////+AAAAf/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////gAAAAAAAAAAAAAA/////AAAAAAAAAAAAAAAAB////////////8AAAAAAAAAAAD////////////////////8AAAAAAAAAAAAAAAAAAD///////////////4AAAAAAAAAAAAAAAAAAAAAAAP////////////////wAAAAD////////////////////////4AAAAAAAAAAAAAAAAAAAAAP/////////////gAAAAAAAAAAAAAAAAAAAAAAAAAP////4AAAAAAAAAD////////////////////gAAAAAAAAAAAAAAAAAAAAAAP/////////wAAAAAAAAAAAAAAAAAAAAAB////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////8AAAAAAAAAAAAAAAAAAAAAAAAB////////////////+AAAAAAAAAAAAAAAAAAAAAAD///////////////////////////8AAAAAAAAAA/////////gAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////8AAAAAAAAAAAAAAAB///////////////////////////AAAAAAAAAA//////////////////8AAAD///////////////////AAAAAAP/////////////////////////////AAAAAAAAAAAAAAAAAH//////////////8AAAAAAAAAAAAAAAAAAAAAA//////////////wAAAB///////8AAAAAAAAAAAAAAAAAAAAAAD///////////8AAAAAAAAAAAP/////////////////////////////+AAAAAAAAAAAAA//4AAAAAAAAAAAAAH///////////////////AAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAH////////wAAAAAB//////////////////////////8AAAAAAAAAAAAAAA==",
    "DSA": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "DSA-SHA": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "DSA-SHA1": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "DSA-SHA1-old": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "RSA-MD4": "5e008b0f5ccfa99983f8b7ff27a70377",
    "RSA-MD5": "7a27fedaeec41b5832bda3169d76cd05",
    "RSA-MDC2": "96990504fa79232e36fb4abb89758d46",
    "RSA-RIPEMD160": "9953571d53d3afe746b72759b9906a40ec9eef7d",
    "RSA-SHA": "4b0109732a726af4e36a6a76b693dfc2cc50079a",
    "RSA-SHA1": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "RSA-SHA1-2": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "RSA-SHA224": "562ea42fd84074c05d95efdc297e754bc70984e8ac4afb320cefca0e",
    "RSA-SHA256": "9db6e6591134181c2c19bbc57f24e11ea161165cde584e1f58c4df2fb5ee8c88",
    "RSA-SHA384": "7a1a7bcd84311b53d905028331f617b66825919f33312fd014bca69725350eb04bc9ef19c452e49cf8c1d684198e1a9e",
    "RSA-SHA512": "ebf031e509ce9143cd427c92df91c3e744aec4d4455eb69ec80d2dac4aaf1fbb699174d2d2a11f08f118f7f4cabc2ccfc6686eb5ba9a81843e223ce3f6f2d336",
    "dsaEncryption": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "dsaWithSHA": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "dsaWithSHA1": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "dss1": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "ecdsa-with-SHA1": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "md4": "5e008b0f5ccfa99983f8b7ff27a70377",
    "md4WithRSAEncryption": "5e008b0f5ccfa99983f8b7ff27a70377",
    "md5": "7a27fedaeec41b5832bda3169d76cd05",
    "md5WithRSAEncryption": "7a27fedaeec41b5832bda3169d76cd05",
    "mdc2": "96990504fa79232e36fb4abb89758d46",
    "mdc2WithRSA": "96990504fa79232e36fb4abb89758d46",
    "ripemd": "9953571d53d3afe746b72759b9906a40ec9eef7d",
    "ripemd160": "9953571d53d3afe746b72759b9906a40ec9eef7d",
    "ripemd160WithRSA": "9953571d53d3afe746b72759b9906a40ec9eef7d",
    "rmd160": "9953571d53d3afe746b72759b9906a40ec9eef7d",
    "sha": "4b0109732a726af4e36a6a76b693dfc2cc50079a",
    "sha1": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "sha1WithRSAEncryption": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "sha224": "562ea42fd84074c05d95efdc297e754bc70984e8ac4afb320cefca0e",
    "sha224WithRSAEncryption": "562ea42fd84074c05d95efdc297e754bc70984e8ac4afb320cefca0e",
    "sha256": "9db6e6591134181c2c19bbc57f24e11ea161165cde584e1f58c4df2fb5ee8c88",
    "sha256WithRSAEncryption": "9db6e6591134181c2c19bbc57f24e11ea161165cde584e1f58c4df2fb5ee8c88",
    "sha384": "7a1a7bcd84311b53d905028331f617b66825919f33312fd014bca69725350eb04bc9ef19c452e49cf8c1d684198e1a9e",
    "sha384WithRSAEncryption": "7a1a7bcd84311b53d905028331f617b66825919f33312fd014bca69725350eb04bc9ef19c452e49cf8c1d684198e1a9e",
    "sha512": "ebf031e509ce9143cd427c92df91c3e744aec4d4455eb69ec80d2dac4aaf1fbb699174d2d2a11f08f118f7f4cabc2ccfc6686eb5ba9a81843e223ce3f6f2d336",
    "sha512WithRSAEncryption": "ebf031e509ce9143cd427c92df91c3e744aec4d4455eb69ec80d2dac4aaf1fbb699174d2d2a11f08f118f7f4cabc2ccfc6686eb5ba9a81843e223ce3f6f2d336",
    "shaWithRSAEncryption": "4b0109732a726af4e36a6a76b693dfc2cc50079a",
    "ssl2-md5": "7a27fedaeec41b5832bda3169d76cd05",
    "ssl3-md5": "7a27fedaeec41b5832bda3169d76cd05",
    "ssl3-sha1": "9329d5b40e0dc43aa25fed69a0fa9c211a948411",
    "whirlpool": "ba8b0e75aa317eef75ff85f595dad2723d93accba038be982efb5f7ca72eabd9cdc3eb39f40eef00c1330c8a1dd205749b488e71dbaa5d884519b9ce28a15f1d"
  },
  {
    "input": "///////////////wAAAAAAAAAAAP////////////////////////4AAAAA//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAB//////+AAAAAAAAAAAAAAAAAAH////+AHwAAAAAAAAAAAAAAB////////////////AAA//////////////////8AAAAAAAAAAAH//////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////////AAAAAAAAAAB//////////////////////8AAAAAAAAAAA//////////////////////x/////////////4A///gAAAAAAAAAAAAAAAAAAAP////////////////////////AAAAAAAAAAB//////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////4AAAAAAAAAAH/////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////8AAAAAAAAAAAAAA/////////////+AAAAAAAAAAAAAAf///4AAf+AAAAAAAAAAAAAAAAAAAAAAP///gAAAAAAAAAAAAD//////////////////////4AAAAAAAAAAAAAAAAAAAAP//gAAP///4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////gP////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////AAAAAAAAAAAAAAAAAAAB/////////////////////////////gAAAAAAAAA////////////4AAHwAAAAAAAAAf/////////////////////gAAAH///AAAAAAAAAAAAAAAAAAAAAf///////////////////AAAAAAAAAAAAAP///////////////AAAAAAAAAAAAAB////////4AAAAAAAAAD///8AAAAAAA8AAAAAAAA/////////gAAAAAAAAAAAAAAAAAAP////gAAAAAAAAAAB///////////////////////gAAAAAAAAAAAAAAAD//////////////////////////gAAAAAAAAAAAAAAAAAAAAB////////+AAP//////wAAAAAAAAAAAAAAf//////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAA////8AAAAAAAA//8AAAAAf////////AAAAAAAB/////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//8AAAAAAAAAAP////////////wAAAAAAAH////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////+AAAAAf//////4AAAAAAAAAAAAAAAAAAAAAAAAAD/////////////+////////////////////////+AAAAAAAAAAAAAA////////////////gAAAAAAAAAAAAAAAAAAf////////////AAAAAAAAAAH/////////gAAAAAAAH//////////////wAAAAAAAAAAAAD///gAAAAAf/////////////gAAAAAAAAAAAf/////////gAAAAAAAAAAAAAAAAAAAAAAAAH///8AAAAAAAAAAAAAAf/////////////////gAD//////////////////////8AAAAAAAAD/////////////////wAAAAAAAAAAAAf///////////////wAAAf//////gAAAAAAAAP////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////8AAAAAAAAAAAAAAAAAP//////4AAAAAAAAAAAAAAAAAAAAAH////8AAAAAAAAAAAAAAAAAAAAAAD//////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////AAAAAAD/wAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAf//////////////////gAAAAAAP///////////////8P///////////////////////8AAA/////////////////+AAAAAAAAAAAAAAAAAAAB//gAAAAAAAAAAAAAAAAAA//////////////////////////////gAAAAAAAAAAAAAAAAgAAP/////////////////////////gAAAAAAAAAAAAAAAAAA/////////4AAAAAAAAAAf//////////////////8AAAAAAAAAAAAAAAAAAAAAH4AAAf//////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAf/////////////////////////////+AAAAAB//////////AAAAB/////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////+B//////////AAAAAAAAAAAAAH//////////////////4AAB/////////////////////////////+AAAAAAB////////////////////////////AAAAAAAAAAAAAAAAA////wAAAAAAAAAAAH////////////+AAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////4AAAAAAAAAAB4AP///////////////8AAAAAAAAAAAAAAAAAAAAAAB+AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////8AAAAAAAAAAAAAAAAAAAAAAAA///////////////4AAAAAAAAAAAAAAAAAAAAAAAAAf/////////////+AAAAAAAAAAAAAAAAAAAAAf//////////////////////wAAAAAAAAAAAAH/////z//////////////////////gAAAAAAAAAAAAAAAAAAA///////8AAAAAAAAAAAAAAAAAAAAAf//////////////wAAAAAAAAAAAAAD/////////////////////////////4AAAAAAAA///AAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////8AAAAAAAAAAAAAAAAAD///////+AAAAAAAAAAAAAAAAA///////8AAAAAAAAAAAD///gAAAAAAAAAAB////////AAAAAAAAAAD////////////////////////+AAAAAAAAAAAAAAAB//////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////4AAAAAAAAAAAAAAAAAA//////////////gAAAAAAAAB/////gAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAH/////////////////////wAAAAAAAAAAAAAAAAAAAAAA///////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////gB////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////wAAAAAAf//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////8AAAAAAAH//////////////+AAAAAAAAAAAAAAAAAAAAAAAA/+AAAAAAAAAAAAAAAAAAAAAAAAAD///wAAA/////////wAAB//AAAAAAAAAAAAAAAAAAAAAAAAAAAD///////8AAAf/////////////////wAAAAAAAAAAAAAAAAAAAAAf/////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////////4AAAAAAAAAAAAAAAAB/////////////////////gD////////////////////////4AAAAAAAA//////////////////////AAAAAAAAAAAAAAAAAAAAP////////////////////////////gAAAAAAAAAAAAAAAAAAA///+AAAB///////////AAAAAAAAAAAAAAAAAAf///////////4AAAAB//////////////////////////gAAAAAAAAAAAAAAAAAH///////////////////AAAAAAAAAAAAP///////////////////+B///////////////////4AAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////gAAAAB/////////AAAAAAAAAD////////////////////////AAAAAAAAA////////////AAAAAAAAAAAAAAAAAAD/////////////////gAAAAAAAAD//////////////////////////wAAAAAAAAAAAAA////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAA//////4AAD+Af////8AAAAAAAAAAAAAAf/gAAAAAAAH///////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAB//////AAAAAAAAAAAAAAAAAP///////////gAAAAAAAAAAAAAAAAAAAAf/////////////////////wAAAAAAAAAAAAAAAAAP///////////////////////4AAAAAAAAAAB//////gAAAAAH//////////////4AAAAAAD////////////gAAAAAAAAAAAAAAAAAAAAAAAB////////////////////gAAAAAAMAAAAAAf////////////////////////+AAAAAAAAB///////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAH//////////////////wAAAAAAAAAAAAAAH////wAAAAAAAAAAAAAAAAAH/////wAAAAAAAAAAAB//////////////////////////////gAAAAAAAAAAAAAD/////4AAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////8AAAAAAAAAAAAAAAAAAAAB/////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////8AAAAAAAAAD///////////////4AAAAAAAAAAAAAAAAAAAAAAAf///////////AAAAAAAAAAAAAAAAAAAAAAAAAAAH////gAAAAAAAAAAAAAf///////////////////////////gAAAP///////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////gAAAAAAAAAAAAD//////4AAAAAAAAAAAAAAAAAAAAAAAAAAf///wAAAAAAAAf///////////////////////",
    "DSA": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "DSA-SHA": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "DSA-SHA1": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "DSA-SHA1-old": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "RSA-MD4": "960ac5e5ef8876b2d0e4060574d1de06",
    "RSA-MD5": "154bd1371ae66ad3ab9a9ee6b1324e36",
    "RSA-MDC2": "975365f58fc3ccf0451de8fb53161da9",
    "RSA-RIPEMD160": "4ecaadcd2d2f2af988045fddf25fe197e780af6f",
    "RSA-SHA": "f12963c823ab1357312a4581526658c1a1acc65a",
    "RSA-SHA1": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "RSA-SHA1-2": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "RSA-SHA224": "64d671725e8f7219ab06aaa2421947fe0b6297c192d430885ff56c91",
    "RSA-SHA256": "86eafcaf23edfef66753d664eaa7813b5a16d1abc01a95f74ae88a02e42cadfb",
    "RSA-SHA384": "1f1123751c9ded759d24d012da1b26a062475373da22f9e1681f8392b4ed5bd1c303b4e26240309b524c510b40421a0f",
    "RSA-SHA512": "c5fc8a78f9106a42da273a6e95894cae0ebe9814a7e4df178c7962eebf251f285cef64a62546220c9a531233cd1d0a886957441ccbcd6ef3849493d1387870a6",
    "dsaEncryption": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "dsaWithSHA": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "dsaWithSHA1": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "dss1": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "ecdsa-with-SHA1": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "md4": "960ac5e5ef8876b2d0e4060574d1de06",
    "md4WithRSAEncryption": "960ac5e5ef8876b2d0e4060574d1de06",
    "md5": "154bd1371ae66ad3ab9a9ee6b1324e36",
    "md5WithRSAEncryption": "154bd1371ae66ad3ab9a9ee6b1324e36",
    "mdc2": "975365f58fc3ccf0451de8fb53161da9",
    "mdc2WithRSA": "975365f58fc3ccf0451de8fb53161da9",
    "ripemd": "4ecaadcd2d2f2af988045fddf25fe197e780af6f",
    "ripemd160": "4ecaadcd2d2f2af988045fddf25fe197e780af6f",
    "ripemd160WithRSA": "4ecaadcd2d2f2af988045fddf25fe197e780af6f",
    "rmd160": "4ecaadcd2d2f2af988045fddf25fe197e780af6f",
    "sha": "f12963c823ab1357312a4581526658c1a1acc65a",
    "sha1": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "sha1WithRSAEncryption": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "sha224": "64d671725e8f7219ab06aaa2421947fe0b6297c192d430885ff56c91",
    "sha224WithRSAEncryption": "64d671725e8f7219ab06aaa2421947fe0b6297c192d430885ff56c91",
    "sha256": "86eafcaf23edfef66753d664eaa7813b5a16d1abc01a95f74ae88a02e42cadfb",
    "sha256WithRSAEncryption": "86eafcaf23edfef66753d664eaa7813b5a16d1abc01a95f74ae88a02e42cadfb",
    "sha384": "1f1123751c9ded759d24d012da1b26a062475373da22f9e1681f8392b4ed5bd1c303b4e26240309b524c510b40421a0f",
    "sha384WithRSAEncryption": "1f1123751c9ded759d24d012da1b26a062475373da22f9e1681f8392b4ed5bd1c303b4e26240309b524c510b40421a0f",
    "sha512": "c5fc8a78f9106a42da273a6e95894cae0ebe9814a7e4df178c7962eebf251f285cef64a62546220c9a531233cd1d0a886957441ccbcd6ef3849493d1387870a6",
    "sha512WithRSAEncryption": "c5fc8a78f9106a42da273a6e95894cae0ebe9814a7e4df178c7962eebf251f285cef64a62546220c9a531233cd1d0a886957441ccbcd6ef3849493d1387870a6",
    "shaWithRSAEncryption": "f12963c823ab1357312a4581526658c1a1acc65a",
    "ssl2-md5": "154bd1371ae66ad3ab9a9ee6b1324e36",
    "ssl3-md5": "154bd1371ae66ad3ab9a9ee6b1324e36",
    "ssl3-sha1": "e94c0b6aa62aa08c625faf817ddf8f51ec645273",
    "whirlpool": "dc07e70fd4b9aaca80e3189e3699fe70514ebe1e7cb6887bb6d862d9a6f7e9151a281cf639c5f95c3af3a90248b264b3fa8169dcf85c6ce889c7e038fe6b7386"
  },
  {
    "input": "//wAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////gAAAAAAAAAAAAAAAAAAAAB///////wAAAAAAAAAAB///////4AAAAAAAAAAAAAAAAAAAAAAAD/////8AAAAAD////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAAAAD//////8AAAA/////////////4AAAAAAAAAAAAAAAAAAAAAAAAA////////////8AAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////AAAAAAAAAAAAAAA/////////////////////+AAAAB////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////4AAAAAAAAAAAAAAAAAAAAAH///////////////////////gAH//////////////x///////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////+AAAAAAAAAAD////AAAAAAAAAAAAAAB///////////////4AAAAAAAAAAAAAAAA///////////////////////////////gH////////8AAAAAAAAAAAAAAAAAAAAAAAAAADAAf///////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAf////////////////////////////AAAAAAB/////////////////////+AAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAB//////+AAB///////////////////////gAAAAAAAAAAAAAAAAAAAAB//////AAAAAAAAAAAAAAAAAAAAAP///gAAAAAAAAAAAAAAAAB//////////////////////////wAAAAAAAAAAAAAAAAAAA///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAB////////////////8AH////4AAAAAAAAAAAAAAAAAD////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////AAAf///////////////////////////wAAAAAAAAAAAH///////////////////////////AAAAAAAAB//////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAH/wAAAAAAA//////wAAAAAAAAAAAAAAAAAAAAAAAAf///wAAB///////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////8AAAAAAAAAAAAAAAAAAAAAB//////////////////////wAAAAA//////wAAAAAAAAA///////////////////AH//////////////////////////////D///////////////////wAAAAAAAAAAAA////////gAAAAAAAAAAAAAA/////////////////AAAAAAD//////////////////////////+AAAAAAAD////////////gAAAAAAAAAAAAH////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAAAAAAAAAAAAAAAAAAAAAAA//wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAf/////////////gAAAAAAAAAAAAAA/+AAAAAAAAAAAAAAAAAAAAAP8AAAAAAAAAAAAAAAAAAAAAAD/////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////gAAAAAAAAAAf////////////////////////+AAAAAAAAAAAAAAAAAAAA///wAAAAAAAAAAAAAAAAAAH///////////////AAAAAAAAAAAAAAAAAAA//////////////////AAAAAAAAAAAAAD//////////////////////////////AAAf/////////////4AAAAAAAAAAAAAAAAD/////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////+AH///////////AAAAAAAAAAAAAAAAAAAAAAB/////////v/////////////////////+AAAAAAAAAAAAAAAAAAAAAAAP//////////8AAAAAAAAAAAf////////gAAAAAAAAAAAAAH/4AAAAAAAAAAAA////////////////////////////4AAAAAAAAAAAAAA///////////////////////////////gAAAAAAAAAAAAAAAAA////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAA///////////////4AAAP4AAAAAAAAAAAf/////////////AAAAB///////////////////////gAAAAAAAAAAP//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////////8AAAAD//8////+AAAAAAAAAAAB////8AAAAAf/////////////////////////+AAAAAAAAAf8AAAAAAAAAAAAAAAAAAAAf//////////////////////////4AAAAAAAAAAAAAAAAAP//////////////////////AAAf//////////+AAAAA/////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAB////////////////wAAAAAAAAB//////gAAAAAAAAAAf////////wAAAAD/////AAAA/////////////+AAAAAAAAAB///3/////4AAAAAAAAf////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAH//////+AAAAAf//////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////gAAAAAAAAAAAAAAAAAAAf/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///AAAAA////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPgAAAAAAAAAB////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAf/////////////////8AAAAAAAAAf////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////4AAAAAAAAAAAAAAAAAAAAAP///AAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////8AAAAAP////wAAAAAAAAAAAAAAAAAAB///////////////AAB///////////////////////////AAAAAAH/////////////////////+AAAAAAAAAP//////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAA///////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////wAAAAAAAAAAAAP///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAP//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///4AAAAAAAAAAAAAAAAAAAAA///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////gAAAAAAAAAAAH////////////////////////4AAAAAAAAAAAAAD/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////wAAAAAAAAAB//////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAP////AA//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAB////////////4AAAAAAAAA////////////+AAAAAAAAAAAAAAAAAAAAD////////////+AAAAAAH/4AAAAAAAAAP////////AAAAAAAAAAAAAAD/////////////////////////8AAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////gAAAAAAAAH//////////////+AAAAAAAH/////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////4AAAAAAAAAAAAAAAAAAAP/8AAAAAAAAAAAAAf/8AAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////+AAAAAAAAAAAAA////////////////8AAAAAAD///////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////wAAAAAAAAAAAAAAAAAAAA4AAAAAAAB////////////gAAAAAAAAAAAAAAAAAAAAAH/////////////////////////4AAAAAH///////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////////4AAAAAAAAAAAAAAAH///gAAAAAAAAAP///////////////4AAAAAAAAAAAAAAAAAAAAAB///////////////////////////gAAAf//////////////////////////+AAAAB/4AAAAAAAAAD8AAAAAf8AAAAAAAAAAAAAAAAAAB/////////////////////////////gAAAAAAAAAAAAAf///////////////wAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////wAB////////gAAAAAAAAAAAAAAAAAAAAAAAAAAD///////gAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////8AAAAAAAAAAAAAAAAAAAAAB/////////////////////AAAAAAAAAAAAAAAH//AAAAAAAAAAA///////////////8AAAAAAAAAAAAAAB/wAAAAD//wAAAAAAAAAAAAAAAf/////wAAAAf///////////////////////////8AAAAAAAAAAAAAAAAAAAP//////////8AAAAAAAAAAAAAAAAAD//////////8AAAAAAAAAAf//4AAAAAAAAD//////////////////////////////8=",
    "DSA": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "DSA-SHA": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "DSA-SHA1": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "DSA-SHA1-old": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "RSA-MD4": "4391a0d57bc22a817bd921e4a4ca2e6c",
    "RSA-MD5": "a4594c9e974eed1fc159cc306dd7378a",
    "RSA-MDC2": "f0cd130ff4918647d28e2aa51d125b65",
    "RSA-RIPEMD160": "e9787fbc7cf6d8831b8f25210d902806aa9b5a3c",
    "RSA-SHA": "f83f55c5afec00a4e67063932324bc1033261a73",
    "RSA-SHA1": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "RSA-SHA1-2": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "RSA-SHA224": "7723da0766d08cfa5aa94138f6c8101bc75e52a409ccc0468483515e",
    "RSA-SHA256": "7be29e433c7e17875c71eea08d10ada5a17eea25ead94d41cb1711e8fd204c06",
    "RSA-SHA384": "452826a3740b00a70e570982fda86daa0e8d4a76d92000b73a049a0f91d56e9bb266a716ebd0098595936604cb3115c1",
    "RSA-SHA512": "4ed3534e84d10d48d7723a6446962fb2f00b977adcce7fc0f59660663961b932133f4c48e3725c2c3e745b6566252d99dd308a8967e67195c1750981d52e61bf",
    "dsaEncryption": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "dsaWithSHA": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "dsaWithSHA1": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "dss1": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "ecdsa-with-SHA1": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "md4": "4391a0d57bc22a817bd921e4a4ca2e6c",
    "md4WithRSAEncryption": "4391a0d57bc22a817bd921e4a4ca2e6c",
    "md5": "a4594c9e974eed1fc159cc306dd7378a",
    "md5WithRSAEncryption": "a4594c9e974eed1fc159cc306dd7378a",
    "mdc2": "f0cd130ff4918647d28e2aa51d125b65",
    "mdc2WithRSA": "f0cd130ff4918647d28e2aa51d125b65",
    "ripemd": "e9787fbc7cf6d8831b8f25210d902806aa9b5a3c",
    "ripemd160": "e9787fbc7cf6d8831b8f25210d902806aa9b5a3c",
    "ripemd160WithRSA": "e9787fbc7cf6d8831b8f25210d902806aa9b5a3c",
    "rmd160": "e9787fbc7cf6d8831b8f25210d902806aa9b5a3c",
    "sha": "f83f55c5afec00a4e67063932324bc1033261a73",
    "sha1": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "sha1WithRSAEncryption": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "sha224": "7723da0766d08cfa5aa94138f6c8101bc75e52a409ccc0468483515e",
    "sha224WithRSAEncryption": "7723da0766d08cfa5aa94138f6c8101bc75e52a409ccc0468483515e",
    "sha256": "7be29e433c7e17875c71eea08d10ada5a17eea25ead94d41cb1711e8fd204c06",
    "sha256WithRSAEncryption": "7be29e433c7e17875c71eea08d10ada5a17eea25ead94d41cb1711e8fd204c06",
    "sha384": "452826a3740b00a70e570982fda86daa0e8d4a76d92000b73a049a0f91d56e9bb266a716ebd0098595936604cb3115c1",
    "sha384WithRSAEncryption": "452826a3740b00a70e570982fda86daa0e8d4a76d92000b73a049a0f91d56e9bb266a716ebd0098595936604cb3115c1",
    "sha512": "4ed3534e84d10d48d7723a6446962fb2f00b977adcce7fc0f59660663961b932133f4c48e3725c2c3e745b6566252d99dd308a8967e67195c1750981d52e61bf",
    "sha512WithRSAEncryption": "4ed3534e84d10d48d7723a6446962fb2f00b977adcce7fc0f59660663961b932133f4c48e3725c2c3e745b6566252d99dd308a8967e67195c1750981d52e61bf",
    "shaWithRSAEncryption": "f83f55c5afec00a4e67063932324bc1033261a73",
    "ssl2-md5": "a4594c9e974eed1fc159cc306dd7378a",
    "ssl3-md5": "a4594c9e974eed1fc159cc306dd7378a",
    "ssl3-sha1": "7ff02b909d82ad668e31e547e0fb66cb8e213771",
    "whirlpool": "d6c1ea8778d99ea4e9901339749e9d22bcdf1718ce22a8a43ca0da524994348aff320108f8d11435133c8d449395ef18ae607021d84d77d83ef2d572802a5c7f"
  },
  {
    "input": "////////////////gB8AAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////wAAP/////////////gAAAAAAAAAAAP/////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAP////////4AAAAAAAAAAAAAAAAAAAH////8AAAAAAAAAAAAAAAAAAAAAH///////////////////////AAAAAAAAAAAAAAAAA///////////////////////H////////gD////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////gAAAAAAAAAAAAAAAD///////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAf/////////+AAAAAAAAAAAAAAAAAAAAAAAAAA////////////////8AAAAAAAAAAAAAAAAAAAB//////////////////8AAAAAAAAAAAAAAAAD///8AAAf///gAAAAAAAAAAAAAAAAAAAD//wA///////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAH//8AAAAAAAAAAAAAAAAAB////////////////////////gAAAAAAAAAAAAAAAAAAH///////////////////+AAAAAAAAAAAAAAAf//////wH////////////AAAAAAAAAAP///////4AAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////4AAAB///////////////////wAAAAAAAAAAAAAAAAAAAAf//////8AAAAAAAAAAAAAAAAAAAAAAAAfAAAAAAAAAAAAAAAAAAAAB//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////P///8AAAAAAAA//////////////////////////+AAAP/////////////////////////////8AAAAAAAAAAAAAAAAAAAAB/////////////////////////wAAAAAAB///////////gAAP///////////////////4AAAf//////////////+AAAAAAAAAAAAAAAAAf///////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAB/////8AAAAAAAAAAAAAAAAAAAAAAAAAAAP///gAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////gAAAAAAAAAAAAAAAAAAf//////////////8AAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////+AAAAAAAAAAB/////////////////////////AAD/////////////////////////8AAAAAAAAAAAAAAAAAAAB/////////////////////////////+AAAAAAAAAAAAAAAAf///////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////+AAAAAAAAAAP/////////////////gAAAAAAAAAAAAAAAP//////+///+AAAAAAAAAAAAAAAA/////////4AAAP/////////////////////wAAAAAAAAf////////////wAAAAAAAAAAAAAAAH////////////////////gAAP//////////////////////////////8AAD///////////////////wAAAAAH///gAAAAAAAAAAAAAAAAB///////////////4AAAAAAAAAH///////////////////+AAAA///////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////wAAAAAAAAAAAAH//////////////////////////+AAAAAAAAAAAAAAAAAAAB///////AAAAAAAAAAAAAAAAAAAAAAAAAH//////////////wAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAB/+AAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////4AAAAAAAAAAAAAAAAAB/////////////4AAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAAAB////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////+AAAAAAAAAAAAH////////wAP////////////////gAAAAAAAAAAH////////4AAAAAAAAAAAAAAAAAAA/////////////AAAAAAAAAB///////////////////////8AAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAAAP////////////////8AAAAAAAAAAH////////////////////////gAAAAP////////AAAAAAAAAAAAAAAAAAAAH/////////////////////gAAAf/////////////////////8AAAAAA/////////////////////////gAAAAAAAAAAAAAAA///////////////////////8AAAAAAAAAAAAAAAf////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAH/////////+AAAAAA////////////////////////8AAAAAAAAAAAAAAAAAA///////////8AAAAAAAAAAAAAAAAAAAAB////////wAAAAAAAAAAAAAH/////////////////////////////8AAAAAAAAAAAAAAH/wAAAAAAAAAAAAAAAAAAAAAAA/////////////////4AAAAAAAAAAAAAAD/////////////////4AAAAAAAB////wAAAAf////////////////gAAAAAf//////wAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////A//////////////AAAAAAAAAAAAAAAAH///////////////////gAAAAAAAAAAAAAAAAAAAAH////4AAABwAAAAAAAAAAAAAAAAAAAAAAAf//AAAAAAAAAAAP//////////wAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////8AAf//////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAD///AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////////+AAAAAAAAAAAAAP////////////4AAH/////////////////gAAAAAAA////////////wAAAAAAAAAAAAAAAAAAAAAAAAP////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////4AAAAAAAAAP/////////////////////gAAAAAAAAAH//////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////////////gAAAAAAAAAAAAAAAP//////////////////////AAAAAAB//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////8AAAAAAAAAAAAAAAAAAAAAAAH////////////////////////////8AAAAAAAAAAAD//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////wAAAAAAAAAAAB////////////gAAAAAAAAAAA//////////////wAD//wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////8AH//////////AAAAAAAAAAAAAAAAAAAB///////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////AAf///////////////////////////8AAAAAAAB//////////////////////////////gAAAAAAAAAAAAH///////////////////////////wAAAAAAAAAAAH////////////////////////AAAAAAAAAAAAAAAAAAAB/////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAA//////+AAAAAAAAAP/////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAH////wAAAAAAAAAAAAAAAAAAP///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////4AAAAAAAAAAAAAAAAP////////////8AAAAAAAAAAAAP//////////gAAAAB////////AAAA///////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////4AAAD//////////////+D/////////wAAAAAAAAAAAAAAAAAAAAAAD////////////////gAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////wAAAAAAAAP//////////////////////////////AAAAAAA/////////////+AAAAAAAAAAAAAAAAAB/////////////////////////8P//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAB/////8AAAAAAP/////////////////////////////wH//////gAAAAAAAAAAf///wAP/////////////////////////////wAAAAAAAAAAAAAD////AAAAAAP//////////////////////4AAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAD////////////+AAAAAAAAAAAAAA/////////////////AAAAAAAAAAAB//////wAAAA///////wAAAAAAAAAAAAf////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/gAAAAAAAAAAf///////////gAAAAf////////////////////////4D//////////////gAAAAAAAAAAAAAf//////////////////////////////+AAAAAAAAAAAAAAAAAAAAB///////+AAAAAAAAAAAAAAAAH////////////wAAAAAAAAAAAAAAH//////////////////////////////4AAAAAH////8AAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////8AAAAAAAA///////////////8AAAB////////////////////+///////////////////AAAAAAAAAAAAAAAAAH///////////////////////////+AAAAAAAAAAAAAAAP///AAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////+AAAAAAAAAAAAAAAAAAAf/////////////8AAAAAAAAAAAAAAAD//+AAAAAAAAAAAAeAAAAAAAAAAAAAAAAAAAAf/////////////////////////////8AAAAAAAAAAAAAH///////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////gAAAAAAAAAAAA//////////////////////////////3////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
    "DSA": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "DSA-SHA": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "DSA-SHA1": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "DSA-SHA1-old": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "RSA-MD4": "6b4ba7bb0803768331cc9b1266be7aee",
    "RSA-MD5": "431acd1a4a4d6036057c9906da8add5e",
    "RSA-MDC2": "7103c0d2de5f349c99c9b93fc919cf32",
    "RSA-RIPEMD160": "69c982f713bdac312732b964f7f15c911c024eff",
    "RSA-SHA": "51d758af0a7e61726b0ce9f3400dd208db25a851",
    "RSA-SHA1": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "RSA-SHA1-2": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "RSA-SHA224": "35dcdaf8f7760c994500e25f4b42e6c78e8bd8286a750fd68360aa91",
    "RSA-SHA256": "c1f98aac0cfc98f30c3fa13fb8011b2a1d553e6c03edb8e2a35f47574237fc64",
    "RSA-SHA384": "f4c39312fafc8a6eadf1c99359274e6a712b27474de052c56ec0a1b66c875d54228ace4e1e395b674d451c5a9c9a0002",
    "RSA-SHA512": "1263ee50dddda760e3cd1aae4834fcee248b28d18012c45611f30c2f239d267f8d3e6945015a6c739abac78137e1f9f68c0df04a91ffc5616d4b8c8b2fb65e2f",
    "dsaEncryption": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "dsaWithSHA": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "dsaWithSHA1": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "dss1": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "ecdsa-with-SHA1": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "md4": "6b4ba7bb0803768331cc9b1266be7aee",
    "md4WithRSAEncryption": "6b4ba7bb0803768331cc9b1266be7aee",
    "md5": "431acd1a4a4d6036057c9906da8add5e",
    "md5WithRSAEncryption": "431acd1a4a4d6036057c9906da8add5e",
    "mdc2": "7103c0d2de5f349c99c9b93fc919cf32",
    "mdc2WithRSA": "7103c0d2de5f349c99c9b93fc919cf32",
    "ripemd": "69c982f713bdac312732b964f7f15c911c024eff",
    "ripemd160": "69c982f713bdac312732b964f7f15c911c024eff",
    "ripemd160WithRSA": "69c982f713bdac312732b964f7f15c911c024eff",
    "rmd160": "69c982f713bdac312732b964f7f15c911c024eff",
    "sha": "51d758af0a7e61726b0ce9f3400dd208db25a851",
    "sha1": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "sha1WithRSAEncryption": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "sha224": "35dcdaf8f7760c994500e25f4b42e6c78e8bd8286a750fd68360aa91",
    "sha224WithRSAEncryption": "35dcdaf8f7760c994500e25f4b42e6c78e8bd8286a750fd68360aa91",
    "sha256": "c1f98aac0cfc98f30c3fa13fb8011b2a1d553e6c03edb8e2a35f47574237fc64",
    "sha256WithRSAEncryption": "c1f98aac0cfc98f30c3fa13fb8011b2a1d553e6c03edb8e2a35f47574237fc64",
    "sha384": "f4c39312fafc8a6eadf1c99359274e6a712b27474de052c56ec0a1b66c875d54228ace4e1e395b674d451c5a9c9a0002",
    "sha384WithRSAEncryption": "f4c39312fafc8a6eadf1c99359274e6a712b27474de052c56ec0a1b66c875d54228ace4e1e395b674d451c5a9c9a0002",
    "sha512": "1263ee50dddda760e3cd1aae4834fcee248b28d18012c45611f30c2f239d267f8d3e6945015a6c739abac78137e1f9f68c0df04a91ffc5616d4b8c8b2fb65e2f",
    "sha512WithRSAEncryption": "1263ee50dddda760e3cd1aae4834fcee248b28d18012c45611f30c2f239d267f8d3e6945015a6c739abac78137e1f9f68c0df04a91ffc5616d4b8c8b2fb65e2f",
    "shaWithRSAEncryption": "51d758af0a7e61726b0ce9f3400dd208db25a851",
    "ssl2-md5": "431acd1a4a4d6036057c9906da8add5e",
    "ssl3-md5": "431acd1a4a4d6036057c9906da8add5e",
    "ssl3-sha1": "5bb3570858fa1744123bac2873b0bb9810f53fa1",
    "whirlpool": "1fa150456efd95b4125f416b819b873ac52bfc50bc97a51885e3205f86e7e6db6bb362a12f67cb501b9e8e18b521c7cd24bb3fe32bb5f2a9e163dcd538cfee56"
  },
  {
    "input": "////gAAAAAAAAH/////////////8AAAAAAAAAAAAAAAAAH/////////////////////////////A///////////////////////////////AAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////8AAAAP/////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////A////+AAAAAAAAAAAAAP//////////////////wAP/////////////////////////z//////////////////////4AAAAAAAAAAAAAB///////////////////////////////wAAAAAAAAAAAH//////////gAAAAAAAAAAAAAAAAAAAAP////////////////////+AAAAAAAf///////////////////////////AB////////////////gAAAAAAAAAAAAAAAAA////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAA////wAAAAAAAAAAAAAAAAAAAAAAAD/////////+AAAAAAAAAAAAAAAAAAAAAH//////////////gAAAAAAAAAAAAAAAAAAAf//////////////////////wAAAAAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////wAAAAAAAAAAAAAB///4AAAAAAAAAAAAAAAAA///////////gAAAAAAAAAAAAf///////////////////////8AAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////4AAAAAAAAAAAAAH///////8AAAAAAAAAAAAAAf/////4AAAAAAAH///////////////////////////////4AAAAAAAAAB////AAAAAAAAAAD///////////////////////4AAAAAAAAAAAH///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAB/////////////////4AAAAAAAAAAAAAAAAAA////////+AAAAAAAAAH+AAAAAAAAAAAAAAAP8AAAAAAAAAAAAAB////////////////////wAAAAAAAAAAAAAAAAAAAP/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////+f///////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////wAAAAAAf/////wAAAAAAAAAAAAAAAAAAAAAAAAB///wAAAAAB///////////////gAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////gAPgAAAAAAAAAAAAAAAAAAAAAAAAf///////gAAD/////////////+AAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////AAAAAAAAAAAAAAD/////////////////f////////////////////AAAf//////////////////4AAAAAAAAAAAAAAAAAf//////////////////////8AAAAAAAAAAAAAAAAAAf///AAAAAAAf////////////////AAAAAAAAAD//////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAB////////////+AAAAAAAAAAAAAAAAD////////AAAAAAAAAAAAAAAAAB//////////////////////////////8AAAAAAAAAAAAAA/////////////////////////gAAAAAAAAAAAAAAAAAAAAB//////////////////////gAAAAAAAAAAAAAAAAAAAAAAA/////8AAAAB////gAAAAAAAAAAAAAAAAAAAH/////+AAAAAAH//////////////////gAAAAAAAAAAAAAAAP////+AAAAAAAAAAAAAAAAAAAAAAH///////+AAAAAAAAAAAAAAAAP////////////////////4AAAAAAAAAAAAAAAAAAAD//////////////////////////gP//4AAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////////////f////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///4AAAAAAAAAAAAAAAAAAAAAf//////////////////+D/////////////////AAAAAAAB////////////////////+AAAAAAAAAAAAAAAAAA///////////////wAAAAAAAAAAAAAAAAAAAAB////////4AAAAH///////////////////////////////8AAAAAAAAAAAAAAD/////4AAAAAAAAAAD///////////////////AAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////gAAAAAAAAAAAAAAAAAAAH////4AAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////+AAAAAAAAAAAAAAAAAP/////////////gAAD////////////4AAAAAP///////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAf///////////////AAAAAAAAAAAA//////////////////////////////+AAAAAAAAAAAAAAAH/////4AAAAAAAAAAAAAAAP////////////////////wAAAAAAAAAAAf////////////////////////D///////////AAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////8B////////AAAAAH////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////AAAAAAAAAAAAAAAAAAH///////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////gAAAAAAAAAAAAAAAAAAAA/////+AAAAAAAAAD/////8AAAAAAAAAAAAAAAAAAAAH/wAAAAAP//////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////gAAAAAAAAAAAAAAAAAAAA////7///////////4AAAAAAAAAAAAAAAAAAAAAD/////////+AAAAAAAAAAAAAAAAAAAAAAB///////////////////////////+AAAAAAAAAAAAAA/////////////////////+D///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////4AAAAAAAAAAAAAAAAAAA///////////////////////8AA/////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////8AAAAAAAAB/8AAAAAAAAAAAA//////////////AAAAAAAAAAAAAf///////////////////////////H//////gAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////8AAAAAAAAAAAAAAAAP//////////////////////////4AAf////////////////////wAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////////+AAAAAAAAAAAAAAAA//+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////AAAAAAAAAAAAAAAAAAAf////4AAAAAAAAAAAAAAAAAH//4AAAAAAAAAAAAAAAH/////////////////////////gAAAAAAAAAAAAAAAAP////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAD//////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/8AAAAAAAAAAAAAAAAf/////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////+AAAAAAAAAAAf/////////////////////////+AAAAAAA//////////////////gAAAAAAAAAAAAAAAAAAAAAAf////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAfgAAD///4AAAAAAAAAAAAAAAAAAAAAAAAP//8AH/////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAH//////+AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////AAAAAAAAAAAAAAAAAAAAAAf//////////////////wAAAP////AAAAAAAAB/////////////////gD//////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////AAAAAAAAAP/////+AAAAAAAAAAAAAB//////////////wAAAAP//////////////////////////4AAAAB///////////4AAAAAAAAAAAA///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAAAAAAAAAAAAAAAAAAAAH/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////8AAAAAAAAAAAAAAAAAAAAAAAH//////////gAAAAAAAAAAAAAA///////////////////////////////AAAAAAAAAAAAAAAAAAA//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAD/////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAD//////////gAAAAAAAAAP/////////////////////////AAAAAAAAAAAAAAAAAAH//AAAAAAAAAAAAAAAAAAAf////////////gAAAAAAAAAAAAAAAAAP/////////////////wAAAAAAAAAAAP////////////////////////////+AAf///////////AAAAAAAAAAAAAAAAAf////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAB//////gB////////+AAAAAAAAAAAAAAAAAAAAAB//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////wAAAAAAAAAAAAAAAAAAAAP/////////+AAAAAAAAAAAP/////+AAAAAAAAAAAAH8AAAAAAAAAAH////////////////////////////AAAAAAAAAAAAAD////////////////////////////wAAAAAAAAAAAAAAAAP////////////////////AAAAAAAAAAAAAAAAAAAAAAAP/////////////gAAAAAAAAAAAAAAAAAA",
    "DSA": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "DSA-SHA": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "DSA-SHA1": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "DSA-SHA1-old": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "RSA-MD4": "c38e08c825c3dc0572aaf38cd23d07bf",
    "RSA-MD5": "f6afe47bdedf075c7e188b2640152cf7",
    "RSA-MDC2": "5f94b6e3a14d4b1cf694f072fe2f7ddf",
    "RSA-RIPEMD160": "9521c22bf745d159c417053af365402c22168375",
    "RSA-SHA": "db6fd66569bdec06eb6ff28d1ab82d6947e8a930",
    "RSA-SHA1": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "RSA-SHA1-2": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "RSA-SHA224": "1602c72a9d7ab2cf4c3b0af1640941d09b2ff2f6c7b9a9f6f915138f",
    "RSA-SHA256": "981571f9393463f49cd5352c024a8998d7b139bc8aec7a512101edb18a7e0954",
    "RSA-SHA384": "2167d3773885d1e9553720f49c51789a7a8de91b3c09b87ae2d06e12f2d24a16561c6755d4c1e699c6b3a2751961541f",
    "RSA-SHA512": "b5adf124a9d519929f4e9dea2d9a1d061451abab6046d51e973d6fd1704cfa8c2f5bf50a950d7d3490ec8032490ed27da5532247c1a7f4831ab355ee28721fa1",
    "dsaEncryption": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "dsaWithSHA": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "dsaWithSHA1": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "dss1": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "ecdsa-with-SHA1": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "md4": "c38e08c825c3dc0572aaf38cd23d07bf",
    "md4WithRSAEncryption": "c38e08c825c3dc0572aaf38cd23d07bf",
    "md5": "f6afe47bdedf075c7e188b2640152cf7",
    "md5WithRSAEncryption": "f6afe47bdedf075c7e188b2640152cf7",
    "mdc2": "5f94b6e3a14d4b1cf694f072fe2f7ddf",
    "mdc2WithRSA": "5f94b6e3a14d4b1cf694f072fe2f7ddf",
    "ripemd": "9521c22bf745d159c417053af365402c22168375",
    "ripemd160": "9521c22bf745d159c417053af365402c22168375",
    "ripemd160WithRSA": "9521c22bf745d159c417053af365402c22168375",
    "rmd160": "9521c22bf745d159c417053af365402c22168375",
    "sha": "db6fd66569bdec06eb6ff28d1ab82d6947e8a930",
    "sha1": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "sha1WithRSAEncryption": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "sha224": "1602c72a9d7ab2cf4c3b0af1640941d09b2ff2f6c7b9a9f6f915138f",
    "sha224WithRSAEncryption": "1602c72a9d7ab2cf4c3b0af1640941d09b2ff2f6c7b9a9f6f915138f",
    "sha256": "981571f9393463f49cd5352c024a8998d7b139bc8aec7a512101edb18a7e0954",
    "sha256WithRSAEncryption": "981571f9393463f49cd5352c024a8998d7b139bc8aec7a512101edb18a7e0954",
    "sha384": "2167d3773885d1e9553720f49c51789a7a8de91b3c09b87ae2d06e12f2d24a16561c6755d4c1e699c6b3a2751961541f",
    "sha384WithRSAEncryption": "2167d3773885d1e9553720f49c51789a7a8de91b3c09b87ae2d06e12f2d24a16561c6755d4c1e699c6b3a2751961541f",
    "sha512": "b5adf124a9d519929f4e9dea2d9a1d061451abab6046d51e973d6fd1704cfa8c2f5bf50a950d7d3490ec8032490ed27da5532247c1a7f4831ab355ee28721fa1",
    "sha512WithRSAEncryption": "b5adf124a9d519929f4e9dea2d9a1d061451abab6046d51e973d6fd1704cfa8c2f5bf50a950d7d3490ec8032490ed27da5532247c1a7f4831ab355ee28721fa1",
    "shaWithRSAEncryption": "db6fd66569bdec06eb6ff28d1ab82d6947e8a930",
    "ssl2-md5": "f6afe47bdedf075c7e188b2640152cf7",
    "ssl3-md5": "f6afe47bdedf075c7e188b2640152cf7",
    "ssl3-sha1": "905f43940b3591ce39d1145acb1eca80ab5e43cd",
    "whirlpool": "56d8556fafbfb14794d84afbb9976bf93e4be93d5f3ddb7f75cd63c4a60668fc2dc015a4614ffe8cf99c35c254cad7162470f1d5bb155d3f68df6471b0516105"
  },
  {
    "input": "///////////////////////////////4AAAAAAAAAAAf/////////////AAAAB/////////////////////+AAAAAAAAAAA///////////////////gAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////////AAP///////////////////////////////z//////////////////////////////+AAAAAAHwAAAAB//////////////////////////4AAAAAAAH//////////////////////////////AAAAAAAAAAAAAAAf/////////////////////gAAAAAAAAAAAAA//////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////4AAAAAAAAAAAAAAAAAAAAB///////////////AAAAAAAAf/////4AAAAAAAB/////////AAAA/wD////////gAAAAAf/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////gAAAAAf////////4AAAAAAAAAAAAAAAAAAAAAAAAAAf/gAAAAAAAAAAAAAAAAA////////////////////////////AAAAf////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////8AAAAAAAAAAAAAAAAAAAAAAB///////////////////////////wAD////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////+AAAAAAD/////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAf///+AAAAAAAAAAAAA//////+AAAAAAAAAAAAAAAAAAAAAAAB///////////////////////////8AAAAAAAAf//////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////gAAAAAAAAAAwAAA///////////////4AAAAAAAAAAAAAP///////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAD///4AAAAAAAAAAAAAAAAAB/////////wAAAAAAAAAAAAAAAAAAAAAAf/////////////////////AAAAAAAAAAA///////////////////////AAAAP////////////wAAAAAAAAAAAAAAAAAAAAAAAD////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////AAAAAD/////////////////////////////gAAB/////////////////////wAAAAAAAAAAD///////////////////////////8AAAAAAAAAAAAAAAAAAf///////////4AAAAAAAAAAAAAAAAAAAf////////////AAAAAAAAP////////////////////////////wAAAAAAAAP///////gAAAAAAAAAAAAAD///////////////////////AAAP/////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////4AAAAAAAAAH/////AAAAAAAH///////////////AAAAAAAB/gAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////wAAAAAAAA/////////wAAAAAAAAAAAAAAAAAAAA///wAA/////////////////////////AAAAAAAAAAAAAAAAAAAH///4AAAAAAAAAAAAAH///////gAAAAAAAAAAAAAAAAB/////////////////////////AAAAAAAAH/////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////4AAAAAAAAAAAAAAAAAA////////////////////////////////8AAAAAAAAAAAB//wAAAAAAAAAAAAAAAAAAAAAH//////////////////////gAAAAAAAAAAA////////////////8AP/////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////gAAAAAAAAAAAAAAAAAAAAAAA///////////////////AAAAAAAAAAAAAAAP//////////////////////////////gAAAAAAf//////gAAAAAAAAAAAAAAAAAAB/////////////////////////+AAAf/////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////4AAAAAAAAAAAAAAAH/////////////////////////////4AAAAAD///////////+AAAAAAAAAAAAAAAAAAAAAAf/////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////////gAAAAAAD////////////////////////////wAAf///////////////////////////AAAAAAAAAAAAAAAf///////////////////////////gAAAAAAAAAAH//////////////wAAAAAAAAAAAAAAAAAAAAAD///////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////gAAAAB///////////////////////wAAAAAH////////////////////////+AAAAAAAAAAAAAAAAAAP//////////////////+AAAAAAAAAAAAAAAAA//////////gP/////AAAAAAAAAAP//////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////AP/////////////+AAAP///////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAA//////////////wAAAAAAD////////////wAAAAAAAAAAP////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///wAAAAH//////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHwAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////8AAAAAAAAH////////////////////////wAAAAAAAAAAAAAAAAAAAAAA/////+AAAAAAAAAAAAAAAAAAA////wAAAAAAAAAAAAAAAAAAAH/////////////////////wAAAAAAAAAAAAAAAAP///////////////////+P//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////4AAAAAAAAAAAAAH///////////////////////////AAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////wAAAAAAAAAAAAAAAAAAAAA////////gAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8AAAAAAAAAAAAAAAAH////////////////8AAAAAAAAAAAAAAAB////////////////////////////////8AH//8AAAAAAAAAAAAAAAAAAAIP///////////////////gAAAAAAAAAAAAAAAAAAAAAA/4AAAAAAAAAAAAAAAAB////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAH//////////////////+AAAAAAAAAAAAAAAAAAAAf///////////gAAAAAH8AAAAAAAAAAAP///////gAAAAAAH/////////////////////////wAAAAAAH//gAAAAAAAAAAAAAAAAA////////////////////+AAAAAAH////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////wAAAAAAAAAAAAAAAAAAAAAf///////////////////////wAAAAAAAAAAAAAAAAAP//////////////////////////////gf///////4AAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAD///////gAAAAAAAA////////////////////////////////AAAAAAAAAAAAAAAAAAAAf/gAAAAAAAAAAAAP/////////////wAAAAAAAAAAAAAAAAAAAAB/////////////////////////AAH///////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////+AAAAAAAAAB///////////////////////////////gAAAAAAAA//////////////////gAAAAAAAAAAAAA////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAD///////wAAAAAAAAAAAAAAAAAAAAAAAD8AAAAAAAAAAAAAAAAAAAAAAP/////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////gAAAAAH///////////////////////////8AAAAAAAAAAAAAB//////////wAAAAAAAAAAAAAB////////////////AAAAAB////////////////////////////////j/////////////wAAAAAAAA//gAAAAAAAAAAAAAAAAAAAAAf//////wAAAAAAAAAf//////////////4AAAAAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAf/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////+AAAAAAAAAAAAAAAH/////////4AAAAAAAAAAAAAAAAAAf/8AAAAAAAH///////////////////////////gAAAAAAAAAAAAAAAAAH/////////////////////////////wAAAAAAAAAAAAAAAB///////////wAAAAAAAAAAAAAAAAAAAAAAAAf///////////////+AAAAAAA///////////////////////AAAAAAAAAAAH///////////gAAAAAAAAAAAAAAAAAAAD//////////////4AH/////////////////////////+AAAAAAAAB//////////////+AAAAAAAAAAAB///////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////+AAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////AAAAAGAAAAAAAAAAAAAAAAD//////////gAAAAAAH//////////////////gAAAAAAAAB//////wAAAAAAAAAAAAAAAAAAAAAAAf///////////4AAAAB/////////////////8AAAAAAAAAAAAAAH////////8AAAAAAAAAAAAAAAAAAAAAAAH////8AAAAAAAH////////////////////AAAAAAAAAAAAAAAAAAAAB4AAAAAAAAAAAAAAAAAAAAAA///AAAAAAAAAAAAAAAAAAAAAAAH////////////+AAAAAAAAAAAAAAAAAAAAAAD//////////////wAAAAAAAAAAAAB/////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
    "DSA": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "DSA-SHA": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "DSA-SHA1": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "DSA-SHA1-old": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "RSA-MD4": "de3694df0817b6263272c7f6069c5552",
    "RSA-MD5": "8bc3bd8625778f64ed7c29698025f292",
    "RSA-MDC2": "4c66604859b648c1c2d960bdfd8cb458",
    "RSA-RIPEMD160": "b7a1b9d7afd4590c09595f7a1bb92e6b9d819d60",
    "RSA-SHA": "41b2e391eb39cf8683e88467f14ce6944a9ab10c",
    "RSA-SHA1": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "RSA-SHA1-2": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "RSA-SHA224": "552437e43c173e40fceeaa65f6b8cd59f062d1a1a625f8ba063aa4e3",
    "RSA-SHA256": "8628162a5c9d34c94e60027175f819e98a356832a3d3898a7f11b95e171e2a73",
    "RSA-SHA384": "5a24a0f490e2dcac67924ae2e0fe351e7cf45a525ab24a093c7466337d1e00e2714c4c667b8e6e78a6484272e1798e37",
    "RSA-SHA512": "d1e420127b234fee4a21777a107b75009621fad13facfe4af57a03de9ca4eeabdf5cf6bd1db312deb2ea2013ba0ca3ae64fa48794464cc12fbb4dfcedcb24a60",
    "dsaEncryption": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "dsaWithSHA": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "dsaWithSHA1": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "dss1": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "ecdsa-with-SHA1": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "md4": "de3694df0817b6263272c7f6069c5552",
    "md4WithRSAEncryption": "de3694df0817b6263272c7f6069c5552",
    "md5": "8bc3bd8625778f64ed7c29698025f292",
    "md5WithRSAEncryption": "8bc3bd8625778f64ed7c29698025f292",
    "mdc2": "4c66604859b648c1c2d960bdfd8cb458",
    "mdc2WithRSA": "4c66604859b648c1c2d960bdfd8cb458",
    "ripemd": "b7a1b9d7afd4590c09595f7a1bb92e6b9d819d60",
    "ripemd160": "b7a1b9d7afd4590c09595f7a1bb92e6b9d819d60",
    "ripemd160WithRSA": "b7a1b9d7afd4590c09595f7a1bb92e6b9d819d60",
    "rmd160": "b7a1b9d7afd4590c09595f7a1bb92e6b9d819d60",
    "sha": "41b2e391eb39cf8683e88467f14ce6944a9ab10c",
    "sha1": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "sha1WithRSAEncryption": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "sha224": "552437e43c173e40fceeaa65f6b8cd59f062d1a1a625f8ba063aa4e3",
    "sha224WithRSAEncryption": "552437e43c173e40fceeaa65f6b8cd59f062d1a1a625f8ba063aa4e3",
    "sha256": "8628162a5c9d34c94e60027175f819e98a356832a3d3898a7f11b95e171e2a73",
    "sha256WithRSAEncryption": "8628162a5c9d34c94e60027175f819e98a356832a3d3898a7f11b95e171e2a73",
    "sha384": "5a24a0f490e2dcac67924ae2e0fe351e7cf45a525ab24a093c7466337d1e00e2714c4c667b8e6e78a6484272e1798e37",
    "sha384WithRSAEncryption": "5a24a0f490e2dcac67924ae2e0fe351e7cf45a525ab24a093c7466337d1e00e2714c4c667b8e6e78a6484272e1798e37",
    "sha512": "d1e420127b234fee4a21777a107b75009621fad13facfe4af57a03de9ca4eeabdf5cf6bd1db312deb2ea2013ba0ca3ae64fa48794464cc12fbb4dfcedcb24a60",
    "sha512WithRSAEncryption": "d1e420127b234fee4a21777a107b75009621fad13facfe4af57a03de9ca4eeabdf5cf6bd1db312deb2ea2013ba0ca3ae64fa48794464cc12fbb4dfcedcb24a60",
    "shaWithRSAEncryption": "41b2e391eb39cf8683e88467f14ce6944a9ab10c",
    "ssl2-md5": "8bc3bd8625778f64ed7c29698025f292",
    "ssl3-md5": "8bc3bd8625778f64ed7c29698025f292",
    "ssl3-sha1": "336c79fbd82f33e490c577e3f791c3cbfe842aff",
    "whirlpool": "d3b274ea00162c8c3124e5ff0ea7c11d0458b216c57034f92d66e2176a24084896356d268f085b393098a4beb3366376b8094da62620224bbf2efcbae74f90ba"
  },
  {
    "input": "AAAB//////////////////////gAAAAAAAAAAAAAAAAP///////4AAAAAAAAAAAAAAAA///////wAAAAAAAAAA//////////////////////////8AAAAAAAAAAA///////////////////////////////8AAAAAAAAAAAAAAAAAAD/////////////////gAAAAAAAAAAAAAAP/////////////8AAAP///+AAP///////////8A///8AAAAAAAAAAAAAAAAAAAAAAAAB/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////gAAAAAAAAAAAAAP//////////////wAAAAAAAAAAAAAAAAAAAAD/g/////////////////////////////gAAAAAAAAAAAAAAAAAAAAD//4AAAAAAf/////////AAAAAAAAAAAAAAAAAAAAB///////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAHAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////+AAAAAAAAAAA/////////8AAD////////////////gAAP////////gAAAAAAAAAAAAAAAAAAAAD//////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////+AAAAAAAAH////////////////////gAAAAAAAAP///////////////gAAAAAAAAAAAAAAAAAAAAAAf////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////AAAAAAAAAAAH///////////////////+AA//////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////4AAAAAAAAAAAAAAAAAAD//////////////////////////4AAAAAAAA//wAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////gAAAAAAA//////////AAAAAAAAAH/////////////+AAH//////////////////////////////gAAAAAAAAAAAAAAAf////////////////////////////////AAAAAAA////////////////wAAAAAAAAAAAAAAAAAA///////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAH///AAAAAAAAAAAAAAAAAAAAAAAAAAAA////////8AAAAAAAAAAAAAAAAAAAAAAAA///////////AAAAAAAAAAAAAAAAAAAAA///////////////////+AAAAAAAAAAAAAAAP////////////////////////wAAD/////8AAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////wAAAD/////////////////////////8AAAAAAAAAAAAAAAAAAD/////////////AAAAAAAAAAAAAP////////4AAAAAAB//AAAAAB///+AAAAAAAf///////////////////////////////AAAA///////////////////////////////8AAAAAAAAAAf////////////////////////////8AAAAAAA///////////////////////wAAAAAAAAAAAAAAAB////////////////////////gAAAAAAAAAAAAAAAAAAD////////8AAAAAAAAAAAAAAAAAAAAAAAAAAB//////+AAAAAAAAAAAAH////////////////wAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAA///gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////////wAP////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////wAAH////8AAAAAAAAAAAAAAAAAAAP/////////v///////////////////+AAAAAAAAAAAB///////////8AAAAAAAAAAAAAAP//////////AB////////////////////////////////AAAAAAf/////////8AAAAP///////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////8AAAAAAAAAAAD////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////4AAAAAAAAAAAAAA/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////wAAAAAAf//////////////8AAAAAAAAAAAAH/////////////4AAAAAAAAAAAAAAAAAAAAAAAAAB////8f/////////////////////+AAAAAAAAAAAAAAAAAAAAAAAH/////4AAAAAAAAAAAAB4AAAAAAAAAAAAAAAAAAAP///////////////////////////AAAAAAAAAAAAAAP///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////3///////////////////////8AAAAAAAAAAAAAH////////////////4AAAAAAAAAAH////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////4f//////////////+AAAAAAAAAAAAAAAAAAAAAAAAAD////////+AAAAAAAAAAAAAAAAAAAB////////////////////////8AAAAAAAAAAAAAAAAAAH////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAP/////////////+D////////gAAAAAAAAAA///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///wAAAAAAAAAH//////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////4AAAAAAAAAAAAAAAAAPwB/////////////wAAAAAAAAAAAAAAAAAAP4AAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////4AAAAAAAAAAAAAAAAAAA////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////+AAAAAAAAB//////////////////4AAAAAAAAAAAAAAAAAAH////wAAAAAAAAAAAAAAAAAAAAAAAAD/4AAAAAAAAAAAAAAAB//////////////wAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////4AAA////////////////////////wAAAAAAf//////////////////wAAAAAAAAAAAAAA///////////////////gAAAAAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////////AAAAAAAAAAAAAAAAAAf//////////wH//////////////4AAAAAAAAf///////////wAAAAAAAAAAAAAAAAAAAAH////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////AAAAAAAAAAAAAAB///////////wAAAAAAAH////////////wAAAAB/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////gB//////////4AAAAAAAAAAAAAAAAAAAAAAH/////////AAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////gAAAAAAAAAAAAAAP/////////////////+AAAAAP/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////8AAAAAAAAAAAAAAAAAAAP/////////////////8AAAAAAAAAAAAAAAAAAAAD////////////////////////////AAA////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////AAAAAD//////4AAP//////////////////////wP/////AAAAAAAAAAAAAAAP///////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////8AAAAAAB/gAAAAAAAAAAAAAAAAAAAAAAH///////4AAA///////////8AAAAAAAAAAAAAAAAAf/////+AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////wAAAAAAAAAAAAP//////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////AAAAAAAAAAAAAAAA////////////////////gAAAAAAAAAAAAAAAAB///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////gAAAAAAAAAAAAAAAf///////gAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////gAAAAAAAAB///////////////AAAAAB////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////AAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////+AAAAAAAAAAAAAAAAAAAAH////////////////////+AAAAAH//gf/////////////////AAAAD///AAAAAAAAAAAAAAAAAAD///////////////AAA////////////////////gAAAAf/////////////gAAAAAAAAAAAAAAAAA////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////4AAD/////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////////AAAAAAAAAAAAP//////////////////////////////wAf///////////////////gAAAAAAAAAAAAAAAH//////////////////////////////wAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAAAA///////////////8AAAAAAAAAAAAAP///////////////////gAAAAAAf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////gAAAAf/////////4AAAAAAAAAAAAAAAH///////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////////gAAAAAD////////////////8AAf////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAD////////////////wAAAAAAAAAAAAP//AAAAAAAAAH/////wAAAAAAAAAAAB////////////////////////////AAAAAB////////////////////////////gAAAAAAAAAAAAAAAAAAH///////////////////////4AAAAAAAAAAAA////////////////////////w==",
    "DSA": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "DSA-SHA": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "DSA-SHA1": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "DSA-SHA1-old": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "RSA-MD4": "00a81549257ddc647e718ed80e4ddd16",
    "RSA-MD5": "51f6bb4db8e6e61cc4333450c6035139",
    "RSA-MDC2": "7820f6dcafa4090c6718db2cc0ba9ea6",
    "RSA-RIPEMD160": "12b05637efd8676d2a1c273c68ecfc4f211b36da",
    "RSA-SHA": "b0eaf74a5daeab7e550cbf3670b411449e883d71",
    "RSA-SHA1": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "RSA-SHA1-2": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "RSA-SHA224": "d9d4e5a4b7c2464a4e3233d96c2b06fbbb711a77a1724320a99b479b",
    "RSA-SHA256": "1c4530860ec79ab73b141a7e64b0de775192a002fa2f3832b6c24972797d5161",
    "RSA-SHA384": "132e2c74dfbb89b65eab740e42c9e7d715000f3b95837fca99e050376bfab515b48bfb798a729c087e56c60d62e958f9",
    "RSA-SHA512": "56ad639b61fe8f834de37d5c760cd436add2a7fb046b78ca87cc6434f3e251d902a8b0d1a7dacef2d156c28ee22ba52c3d90a3640dd0cea4e7a4b5d72f7ca0ee",
    "dsaEncryption": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "dsaWithSHA": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "dsaWithSHA1": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "dss1": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "ecdsa-with-SHA1": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "md4": "00a81549257ddc647e718ed80e4ddd16",
    "md4WithRSAEncryption": "00a81549257ddc647e718ed80e4ddd16",
    "md5": "51f6bb4db8e6e61cc4333450c6035139",
    "md5WithRSAEncryption": "51f6bb4db8e6e61cc4333450c6035139",
    "mdc2": "7820f6dcafa4090c6718db2cc0ba9ea6",
    "mdc2WithRSA": "7820f6dcafa4090c6718db2cc0ba9ea6",
    "ripemd": "12b05637efd8676d2a1c273c68ecfc4f211b36da",
    "ripemd160": "12b05637efd8676d2a1c273c68ecfc4f211b36da",
    "ripemd160WithRSA": "12b05637efd8676d2a1c273c68ecfc4f211b36da",
    "rmd160": "12b05637efd8676d2a1c273c68ecfc4f211b36da",
    "sha": "b0eaf74a5daeab7e550cbf3670b411449e883d71",
    "sha1": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "sha1WithRSAEncryption": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "sha224": "d9d4e5a4b7c2464a4e3233d96c2b06fbbb711a77a1724320a99b479b",
    "sha224WithRSAEncryption": "d9d4e5a4b7c2464a4e3233d96c2b06fbbb711a77a1724320a99b479b",
    "sha256": "1c4530860ec79ab73b141a7e64b0de775192a002fa2f3832b6c24972797d5161",
    "sha256WithRSAEncryption": "1c4530860ec79ab73b141a7e64b0de775192a002fa2f3832b6c24972797d5161",
    "sha384": "132e2c74dfbb89b65eab740e42c9e7d715000f3b95837fca99e050376bfab515b48bfb798a729c087e56c60d62e958f9",
    "sha384WithRSAEncryption": "132e2c74dfbb89b65eab740e42c9e7d715000f3b95837fca99e050376bfab515b48bfb798a729c087e56c60d62e958f9",
    "sha512": "56ad639b61fe8f834de37d5c760cd436add2a7fb046b78ca87cc6434f3e251d902a8b0d1a7dacef2d156c28ee22ba52c3d90a3640dd0cea4e7a4b5d72f7ca0ee",
    "sha512WithRSAEncryption": "56ad639b61fe8f834de37d5c760cd436add2a7fb046b78ca87cc6434f3e251d902a8b0d1a7dacef2d156c28ee22ba52c3d90a3640dd0cea4e7a4b5d72f7ca0ee",
    "shaWithRSAEncryption": "b0eaf74a5daeab7e550cbf3670b411449e883d71",
    "ssl2-md5": "51f6bb4db8e6e61cc4333450c6035139",
    "ssl3-md5": "51f6bb4db8e6e61cc4333450c6035139",
    "ssl3-sha1": "5c6d07a6b44f7a75a64f6ce592f3bae91e022210",
    "whirlpool": "849f385972114ec6cc5ac714fcb0c1aaa4c541b6ca86443dc47c53bcbb69b8c38071459e5b212406d344c2eb94e82f5038e9d2d7d4bdb98d3cc187582afbb9b7"
  },
  {
    "input": "//////////////////////////////+AAAAAAAAAAAH/4AAAAAAAAAAAAAAAP/////////////////8AAAAAAAAAAAH/////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////+AAAAAAAAAAAAAAAAAAAAAAH////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAf//////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//AAAAf///////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAHwAAAAAAAAAAAAH/////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////4AAAAAAAAAAAAAAAAAAA///gAAAAAAP//8AAAAAAAAAAAAAAAf////////////////////////////gAAAAAf////////////////////AAAAAAAAAAAAAAAAAAAH////////////////////////8AAAAAAAAAAAAAAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAD////////+AAAAAAAAAAAAAAAAD/////+AAAAAAAAAAAAAAAAAAAAf////////////////////////4AAAAAAAAAAAAP/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////8AAAAAAAAAAAAAAAf//////////////////////+AAf/////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////AAAAAAAAAAAAAAAAAAAAAAAAB///////////////4AAAAAA///////////////////////////////8AAAAAAAA///////////wAAAAAAAf/////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAAAAAAAAAAAAAAAAAD/////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////////////+AAAAAAAAAAAf///////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////wAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////+AAAAAAAAAAAA//////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////+AAAAAAAAAAAAAAA////AAAAAAAAAAAAD/wAAAAAAAAAAAAD////////////////////////AAAAAAAAAAAAAf////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAH/////////+AAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////AAAAAAAAAAAAAB//////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////+AAAAAAAAAB/////////////////////////gAAAD/////////////////+AAAAAAAAAAAAAAAAAH///////////////////4AAAAAAAAAAAAAAAAAAAAAB/////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAH/4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////4AAAAAAAAAAAAAAAAAAAAAH/4AAAAAAAAAAAAAAAAAAAAD/////////////////////8AAAAAAAAAAAAAAAAAAAAAB/////////////8A//AAAAAAAH//////////////gD//////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAA///////////////wAAAP///gAAAAAAAAAAAB//////////wAD//////////////////////////+Af/////////4AAAAAAAAAAD////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////wAAAAAAAAAAAAAAAAAAAAH////+AAAAAAAAAAAAAAD//////////////////////////8AAAAAAAAAAAAAAD//////////////////////////gAAAAAAAAAAAAAAAAAAAA//////////////gAAAAAAAAAAAAAAAAAAAAD///////4AAAAAAAAP/////////////////////////AAAAAAAAAAAAAAAB/AAAAAAAAAAAAAAAAAAAf////////gAAAAAAAAAAAAAAAA//////////////////AAAAAAAAAP///////////////////////////4H///////wAAAAAAAAAAAAAAAAH////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////8AAAAAAAAAAAAAAAAAAAAH/+AH////4AAAAAAAAAAAAAAAAAAAAf//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////AAAAAAAAAAAAAAAAA/////////gAAAAAAAAAAD//gAAAAAAAAAf////////////////////////////////+AAAAAAAA////////////////////////////4AAAAAAAAAAAB////////////////////////4AAAAAAAAAAAAAAAf//////////////4AAAAAAAAAAAAAAAAAAAAf//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////wAAAAAAAAAAA/////////////+AAAAD////////////////////+AAAAAAAAAAA////////////////8AAAAAAAAAAAAAAAAAAAAAAA/////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////8P/////////////////////////////8///////////////////////////+AAAf///////////////////////////////wAAAAB//////////////////////////4AAAAAAD////////////////////////////4AAAAAAAAAAAP//////////////////AAAAAAAAAAAP///////////////4AAAAAAAAAAAAAAAAAAAAAAAAAD/////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////wAAAAAAAAAAAAAAAAAAf/////////////4AAAAAAB//////gAAAAAB/////////AAAf///////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////4AAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAB///8AAAA//////+AAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAA////gAAAAAAAAAAAAAAB///////////////////////4AAAAAAAAAAAAAAAAAAAAAAAB/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAP+AAAAB/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////4AAAAAAAA//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////wAAAA/////////+AAAAA////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAH//////wAAAAAAAAAAAAAAAAB////////////////////////////8AAAAAAAAAAAAAAAAAAAB//////////////////////gAAAAAAAAAAAAAAAAAAAAB//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//wAAAAAAAAAAAAP////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////wAH///////////////wAAAAAAAAB//////////////////////8AAAAAAAAAAAAAAAAAAA////////4AAAAAAAAAAAAAAAAAAAf/+AAAAAAAAAAAAB/////////////////////8AAAAAAAAAAAAAAAAAAB/////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAD////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA///8AAAAAAAAAAAAAAAAAAAAAf//////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////8AAAAAAAAAAAA////////////////wAAAAAAAAAAAP////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////+AAAAAA////////////AAAAAAAAAAAAAAAAAAAAAD//gAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////8AAAAAAAAAAAAAAAAAAAAA////////wAAP///4AAAAAAAAAAAD////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////AAAAAAAAAB////////4AAAAAH////////////////+AAAf/AAAAAAAAAAAAAAAAAAAAAD///////////////+H////////////8AAAAAAAP/////////////////AAAAAAAAAAAAAAAAAAAAAAAH///////gAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////wAAAAAAAAAAAAAAAAAP/////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////gAD//////////////////4AAAAAAAAAAAAAAAAAAAAAAf//////////gAAAAAAAAAAAAAAAB////////////////////////////////AAAAAAAAAAB//////////////////////////////gAAAAAAAAAAAAAAAAD////////////////////gAAAAAAAAAAAAAAAD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////+AAAH/////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAH/gAAAAAAAAAAAAAAAAAAAAB///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA///8AAAAAAAAAP/////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAf/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////wAAAAAAAAAAAAAAAAAAAAAAAAAH8AAAAAAAAAAAAAAAAAAAAAAAAf///////////+AAAAAAAAAAAAAAAAAAAAAAAAAAA/////////8AAAAAAAAAAAAAD/////////////////////gAAAAAAAAAAAAAAAB///////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAA////////////////AAAAAAAAAAAAAAAAAB//////////////4AAAAAAMAA///////AAAAAAAAD//////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAf/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////+AAAAAAAAAAB////8AAAAAAAAA///////////AAAAAAAAP///////////////////////////+P/gAAAAAAAAAAAA///////////////////////////g/////////////////////////AAAAAAAAAAAAAAAAAAD/////////////////////",
    "DSA": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "DSA-SHA": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "DSA-SHA1": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "DSA-SHA1-old": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "RSA-MD4": "0db744b9e2461b598bd0542c98faff5d",
    "RSA-MD5": "0baff1c675866bf259d3ac9417a33464",
    "RSA-MDC2": "c28a8f03dca74683836d5491f7d7354b",
    "RSA-RIPEMD160": "f0c9b5001ef561311ee81ec171e2f0bba045c6ef",
    "RSA-SHA": "d08a0065352411b17fb5349f43cbdf34276e4094",
    "RSA-SHA1": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "RSA-SHA1-2": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "RSA-SHA224": "1fd3de781554e16e8f5258b6337a5ccbdbe9efdf2e32ec0a47368784",
    "RSA-SHA256": "d97097c16c4d0cf169e61cde78e807cd318b8938992066bfe4e266e14146fbba",
    "RSA-SHA384": "bb0e3a3b70f77ad50cda53e3bd61903f94a327579446649877c70402692ecd22207ecf11cb409bbb6133bb399d73b2bd",
    "RSA-SHA512": "9c3c1aa2aa6fbb1dca6ebc4be7a8aeca2284f3a4729227dab1c4cab359bcb6750c228e754b170a2f20fc06f7c64789647f26dc0c61f0b62a9dc98fff5bef2289",
    "dsaEncryption": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "dsaWithSHA": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "dsaWithSHA1": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "dss1": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "ecdsa-with-SHA1": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "md4": "0db744b9e2461b598bd0542c98faff5d",
    "md4WithRSAEncryption": "0db744b9e2461b598bd0542c98faff5d",
    "md5": "0baff1c675866bf259d3ac9417a33464",
    "md5WithRSAEncryption": "0baff1c675866bf259d3ac9417a33464",
    "mdc2": "c28a8f03dca74683836d5491f7d7354b",
    "mdc2WithRSA": "c28a8f03dca74683836d5491f7d7354b",
    "ripemd": "f0c9b5001ef561311ee81ec171e2f0bba045c6ef",
    "ripemd160": "f0c9b5001ef561311ee81ec171e2f0bba045c6ef",
    "ripemd160WithRSA": "f0c9b5001ef561311ee81ec171e2f0bba045c6ef",
    "rmd160": "f0c9b5001ef561311ee81ec171e2f0bba045c6ef",
    "sha": "d08a0065352411b17fb5349f43cbdf34276e4094",
    "sha1": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "sha1WithRSAEncryption": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "sha224": "1fd3de781554e16e8f5258b6337a5ccbdbe9efdf2e32ec0a47368784",
    "sha224WithRSAEncryption": "1fd3de781554e16e8f5258b6337a5ccbdbe9efdf2e32ec0a47368784",
    "sha256": "d97097c16c4d0cf169e61cde78e807cd318b8938992066bfe4e266e14146fbba",
    "sha256WithRSAEncryption": "d97097c16c4d0cf169e61cde78e807cd318b8938992066bfe4e266e14146fbba",
    "sha384": "bb0e3a3b70f77ad50cda53e3bd61903f94a327579446649877c70402692ecd22207ecf11cb409bbb6133bb399d73b2bd",
    "sha384WithRSAEncryption": "bb0e3a3b70f77ad50cda53e3bd61903f94a327579446649877c70402692ecd22207ecf11cb409bbb6133bb399d73b2bd",
    "sha512": "9c3c1aa2aa6fbb1dca6ebc4be7a8aeca2284f3a4729227dab1c4cab359bcb6750c228e754b170a2f20fc06f7c64789647f26dc0c61f0b62a9dc98fff5bef2289",
    "sha512WithRSAEncryption": "9c3c1aa2aa6fbb1dca6ebc4be7a8aeca2284f3a4729227dab1c4cab359bcb6750c228e754b170a2f20fc06f7c64789647f26dc0c61f0b62a9dc98fff5bef2289",
    "shaWithRSAEncryption": "d08a0065352411b17fb5349f43cbdf34276e4094",
    "ssl2-md5": "0baff1c675866bf259d3ac9417a33464",
    "ssl3-md5": "0baff1c675866bf259d3ac9417a33464",
    "ssl3-sha1": "7e0d3e9d33127f4a30eb8d9c134a58409fa8695b",
    "whirlpool": "c8f50d42f1f2994367db90fb74e8b6c0d5625758d17d1fb090db6aea31e11888a219f96e73f6671e380aa6164e87badb5b61ad6a14c31682251fbcffe6258394"
  },
  {
    "input": "///////+AAAA//////////////////////4AAAAAAAAAAAAAAAAAAAAA/gAAAAAAAAAAAAAAAAAf//wAAAAAAAAAAAAAAAAAf//////////////////8AAAAAAAAAAAAAAAAD////////////////8f///+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////AAAAAAAAAAH///////////////////////////AAAAAAAAAAAAAAAAAAAAP/////////////////////////////+AAAAAAAAAAAAAAAAAAAf///+AAAAAAAAAAAAAAAAAAAAAAAAAA////////8AAAAAAAAAAAB//////////////8AAAAAAAAAAAAAAD///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/4AAAAAAAAAAAAAAAAAA//////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////+AAAAAAAAAAAAAAAAAAAf////////////////////////////////4AAAAAAAAAAAAAAAD///////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAf//////////////////4AAAAAAAAAAAAAAAAAAAB///////gAAAAP4AAAAAAAAAA////wAAAAAH/////////////////////+AAAGAAAAAAAAAAAAAAAP////////////////////gAAAAD////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////AAAAAAAAAAAAAAAAAAAAD/////////////////////4AAAAAAAAAAAAAAAf///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////4AAAAAAAAAAAAAAAAAAP/////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAP////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAA///////4AAAAB///////////////////////////gAAAAAAAAAAAAAAAAAAAP/////////////////////////////////gAAAAAAAAB/////////gAAAAAAAAAAAAAAAAAf////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////+AAAAAAP//////////////////////////////8AAAAAAAAH////////////////4AAAAAAAAAAA////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAf//gAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////////gAAAAAAAAAAAAAAAAAf///////////////wAAAAAAAAAAAAAAAAAAAAAP///////////8AAAD/////////////////////////4AAAAAAAAAAAP/////////+AAAAAAAAAD///////////////+AAAP///////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////+AAAAAAAP/////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAP////gAAAAP/////////////4AAAAAAAAAAAAAAf//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////////////AAAAAAAAAAAAAAAAAAAD/////+AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////wAAAAAAAAAAAAAAA//////////AAAAAAAAAAAAAAAAIAAAAAAAP////////////////////////8AAAAAAAAAAAAAAAAAA////////////////////////////8AAAAAAAAAAAAAB/////////AAAAAAAAAAAAAAAAAAAAAP///////////wAAAAAAH///////////////////AAAAAAB//////+AAAAAAAAAAAAAAAAAAAf/////////wAP///////////////////////wAAAAAA//////////wAAAAAAAAA///////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAH//wAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////B////////////////////////////////AAAAAAAAAAAAAAAAB/////////gAAAAf////////////////8AAAAD/4AAAAAAAAAAAAAAAAAAAAAAAP/////////wAAAAD//////////////AAAAAAAAAAAP//////gAAAAAAAAAAAAAAAAAAAAAB/////AAAAAAD////////////////////gAAAAAAAAAAAAAAAAAAB//////////////////////////////AAAAAAAAAAAAAAAAAAAAAAH////////////////////////////////AAAAAAAAAAAAAAAAAAAAAf/////////AAAAAAAAAAAAAAAAAAAAAD/////////////gAAAAAAAA////////////////////////4AAAAAAAAAB//AAAAAAAAAAAAAAAAAAAAD////////////////AAAAAD////////////+AAAAAAP///////4AAAAAAAAAAAAAAAAAAAAAAAD////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////gAAAAAAAAAAAAAAAAD//////////////+AAAAAAAAAAADAAAAHwAAAAAAAAP///////////////////////////////4D///////////////////////gAAAAAAAAAAAAP////////////////////////////////4AAAAAAAAAAAAAH////////////AAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////gAA///wAAAAAAAAP//////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////wAAAAAAAAAAAAAAAAAAAAB////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////wAAAAAAAAAAAAAAAAAAAAAAP////////+AAAAAAA///AAAAAAAAAAAAAAAD/////////////////////////////////8AAAAAA///////////////////AAAAAAAAAAAAAP/////////////////////////////gAAAAAAAAAAAAAAAAAAf///////AAAAAAAAAAAAAAAAAAAB////////gAAAAAAAAAAAAH///////////////////gAAAAAAAAAAAAB//////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAB////////AAAAAAAAAAAAAAAAAAD////////////////////////////////8AAAAAAAAAAAAAAP/////////////////////////gAAAAAAAAAAAAAAAAH///////////////wAAAAAAAAAAAAAAAAAAAAAAAAH/////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////8AAAAAAAAAAAAAAAAP///+AAAAAAAAf///////AAAAAAAAAAAAAAP///////////////////////////////+AAH/////////////////////////////wAAAAAAAAAAAAB///////////////////////////////+AAAAP/////////////gAAAAAAAAAAAAAAAAA/////////////////////////AAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAAAAB//////////AAAAAAAAAAAAAAAAAAH///////////////////wAAAAAAAAAAAAAf//////////////////////4P//+AAAAAAAAAAAAAAAAAAAAAA////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////AAAAP//////////////////////AAAAAAAAAAAAAAAAAAf//////////AAAAAAAAAAAAAP//////AAAAB/////////////////////////////////8AAAB///+AAAAAAAf///////////////////////////////AAP///////////////////////////8AAAAAAB//////////////////////////+AAAAAH//////////////////////+AAAAAAAAAAAAAAAAP//////////////////////+AAAAAAAAAAAAAAAAAAH////////4AAAAAAAAAAAAAAAAAAAAAAAAf//////gAAAAAAAAAAA////////////////AAAAAAAAAAAAAAAAAAAB//////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////8AHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAB////////gAH///+AAAAAAAAAAAAAAAAA////////v//////////////////gAAAAAAAAAAP/////////4AAAAAAAAAAAAH/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////+AAAAAf////////AP/////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAf////gAAAAAAAAAAAf////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////AAAAAAAAAAAAAAH/////4AAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////gAAAAAf/////////////+AAAAAAAAAAAAD////////////+AAAAAAAAAAAAAAAAAAAAAAB///+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////AAAAAAAAAAAAAAAAAAAAAf///4AAAAAAAAAAAf///////////////////////////////4AAAAAAAAAAAAAAAAAAH///////////////////////+AAAAAAAAAAB///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////+AAAAAAAAAAAAB///////////////gAAAAAAAD/////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA////w////////////wAAAAAAAAAAAAAAAAAAAAAB/////8AAAAAAAAAAAAAAAAAAAD/////////////////////gAAAAAAAAAAAAAAAAAA//////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////gAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAD////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////+AAAAAAAP////////////gAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//+AAAAAAAAAA////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////wAAAAAAAAAAAAAAAAAfgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////AAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAP/////////////////8=",
    "DSA": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "DSA-SHA": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "DSA-SHA1": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "DSA-SHA1-old": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "RSA-MD4": "cc48f7da203594f8a0fc7cdd8fdc504f",
    "RSA-MD5": "6e8a56a9a005c6c6239ccbdf48f59aa8",
    "RSA-MDC2": "4e3c584f062937827518e601b11342e0",
    "RSA-RIPEMD160": "c284165bee92e6285563b8bbb344dfad2ee835f9",
    "RSA-SHA": "7f111c6ce5f470b193ebb10a03f27e9fe8dafee2",
    "RSA-SHA1": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "RSA-SHA1-2": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "RSA-SHA224": "358bcda7233325f892ae3dc84f32b693dd5a6270f4b8ae0f53599bfc",
    "RSA-SHA256": "3a18179cf693d234a8aa913b7362505533b414d60bf7eaf02427157759defaba",
    "RSA-SHA384": "988927dd0cdac68181da194ec649d4afc5214dece20d4299a1cbd1fc7d3f5f8073ca475af57da87637c0e9f5fcdea943",
    "RSA-SHA512": "4e041ec1fc9208aa3ef65bd5abfaf8db48e0d6f1b1de52a47351d827057bff253effb63c5e868dbdddd56ff93b32e750896db45a534b1e2016cf1f380f564262",
    "dsaEncryption": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "dsaWithSHA": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "dsaWithSHA1": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "dss1": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "ecdsa-with-SHA1": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "md4": "cc48f7da203594f8a0fc7cdd8fdc504f",
    "md4WithRSAEncryption": "cc48f7da203594f8a0fc7cdd8fdc504f",
    "md5": "6e8a56a9a005c6c6239ccbdf48f59aa8",
    "md5WithRSAEncryption": "6e8a56a9a005c6c6239ccbdf48f59aa8",
    "mdc2": "4e3c584f062937827518e601b11342e0",
    "mdc2WithRSA": "4e3c584f062937827518e601b11342e0",
    "ripemd": "c284165bee92e6285563b8bbb344dfad2ee835f9",
    "ripemd160": "c284165bee92e6285563b8bbb344dfad2ee835f9",
    "ripemd160WithRSA": "c284165bee92e6285563b8bbb344dfad2ee835f9",
    "rmd160": "c284165bee92e6285563b8bbb344dfad2ee835f9",
    "sha": "7f111c6ce5f470b193ebb10a03f27e9fe8dafee2",
    "sha1": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "sha1WithRSAEncryption": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "sha224": "358bcda7233325f892ae3dc84f32b693dd5a6270f4b8ae0f53599bfc",
    "sha224WithRSAEncryption": "358bcda7233325f892ae3dc84f32b693dd5a6270f4b8ae0f53599bfc",
    "sha256": "3a18179cf693d234a8aa913b7362505533b414d60bf7eaf02427157759defaba",
    "sha256WithRSAEncryption": "3a18179cf693d234a8aa913b7362505533b414d60bf7eaf02427157759defaba",
    "sha384": "988927dd0cdac68181da194ec649d4afc5214dece20d4299a1cbd1fc7d3f5f8073ca475af57da87637c0e9f5fcdea943",
    "sha384WithRSAEncryption": "988927dd0cdac68181da194ec649d4afc5214dece20d4299a1cbd1fc7d3f5f8073ca475af57da87637c0e9f5fcdea943",
    "sha512": "4e041ec1fc9208aa3ef65bd5abfaf8db48e0d6f1b1de52a47351d827057bff253effb63c5e868dbdddd56ff93b32e750896db45a534b1e2016cf1f380f564262",
    "sha512WithRSAEncryption": "4e041ec1fc9208aa3ef65bd5abfaf8db48e0d6f1b1de52a47351d827057bff253effb63c5e868dbdddd56ff93b32e750896db45a534b1e2016cf1f380f564262",
    "shaWithRSAEncryption": "7f111c6ce5f470b193ebb10a03f27e9fe8dafee2",
    "ssl2-md5": "6e8a56a9a005c6c6239ccbdf48f59aa8",
    "ssl3-md5": "6e8a56a9a005c6c6239ccbdf48f59aa8",
    "ssl3-sha1": "9a5f50dfcfb19286206c229019f0abf25283028c",
    "whirlpool": "4f7f493ccdb8647378040cf721295af90109ee75e5b5718861067f3628c88d5d26de863ef219a7c27f5c6791a33208342fbc91dabb843ccce086a716c4d81fc6"
  },
  {
    "input": "//////////////gAAAAAAAAAf////////////////////////gAAAAAAAAAAAP/////8AAAAAAAAAAAAAAP//////////////wf////////////////////4AP///////////////8AAAAAAAAB/////////////////////4AAAAAAAAAAAAAAD/+AAAAAAAAAAAAAAAAAAAAAAAAf8AAAAAAAAAAAAAAB//////////////4AAAAAAAAAAAAAAAAAP//////////////////////4AAf/////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////8AAAAAH///////////////////////////////wAAAAAAAAAAP////AAAAAAAAAAB///////////////8AAAAAAAAf/////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAH/////////AAAAAAAH///////8AAAAAAAAAB////AH///////////////////////////gAAAAAAAP///////////////////////////////8AAAAAAAAAAP/////////////////////AAAAAH///////////////////////wAAAAAAAAAAAAAAAAAA///////////gAAAAAAAAAAAAAAAAACAAAAAAAAAH/////////////////////////////AAAAAAAAAAAAAP//////////////////////////8AAAAAAAAAH/////////////////+AAAAAAAAAAAAAAAH///////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAH/gAAAAAA////////////////////////////////gAAAAAAAAAAAAAAAAAAf//////////////////////////////+AAAAf//////////////4AAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAf/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////AAAAAAAA///4AAAAAAAf//////////////AAAAAAD/////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////gAAAAAAAAAA////////////////////////////////8AAAAAAAAAAAAAA/////////////////////////////gAAAAAAAAAAAAAAf////////////4AAAAAAAAAAAAAAP///////////////8AAAH///////////////////////////8P//////////////AAAAAP/////////////////////+AAAAAAAAAAAAAAAAAAAAAAD////AAAAAAAAAAAAH/wAAAAAAAAAAAAB////////////////////////////4AAAAAf////////////////////////wAAAAAAAAAAAAAAAAAAAAA//////////////////AAAAAAAAAAAAAAAAAP/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////8AAAAAAAAAAAAAH/4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////+AAAAAAAAAAAAAB/////////////////////////////////4AAAAAAAAAAAAAAAD//////////////////////////////////AAAAAAAAAA////////////4AAAAAAAAAAA//////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAD//+AAAAAAAAAAAAAAAAAAAAAD////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAB//////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////////////AAAAAAAAAAAAAAAAAP//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////4B////////////////////+AAAAAAAAAAAH//////////4AAAAAAAAAAAAAAAAD////AAB///////////////////////wAAAAAAAAAAAAAAP///AAAAAAAAA//////////8AAAAAA////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////+AAAAAAAAAAAH////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAP///////////////////////+AAAAAAAAAAAAAAAf//////////+Af///wAAAAAf///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAAAAA///////////////wAAAAAAAAAAAAAAAAAAAAD//////+AAAAAAAAAD//////////////////////////////4AAAAAAAAD/////////////////////////////////+AAAAAAAAAAAAAAAD////////////////wAAAAAAAAAAAf///////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////4AAAAAAAAAAAAAAAAAAAAH////////////////////+AAAAAAAAAAAAAAAAAAAAAAAB///////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////////////AAAP//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////////wAAAAAAAAAf///////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////AAAAAAAAAAAAAAAAAAD/gAAAAD/wAAAAAAAAAAAH/////////////////////////gAAAAAf//////////////////wAAAAAAAAAAAAAAAH/////////////////////wAAAAAAAAAAAAAAAB////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAH///////AAAAAAAAAAAAAH///gAAAAAAAAAAAAAAAAAB///////////////////////4AAAAAAAAAAAH/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAA/////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////8AAAAAAAAAAAAD///////////////////////wAD////////4AAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////gAAAAAAAAAAAAAAAAAAAAAAP///////////8AAAAH/////////////////////////////4AAAAAP/////////AAAAH//////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAB//////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAP//////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////8AAAAAAAAAAAAAAAAAAAAAD/////////////////////////8AAAAAAAAAP//////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAD///////////AAAAAAAAAAAAD//+AAAAAAAAAfAAAAAAAAAAAD///////////////////////gAAAAAAAAAB//////////////////8AAAAAAAAAAAAAAAAAAAAAAAAD///////4AAAAAAAAAAAAAAAAAAAAA//////////////////////////////8AAAAAAAAAAAB///////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////gAAAAAAAAP///////////////////////+AAD/////////////////+AAAAAAAAAAAAAAf///////////////+AAAAAAAAAAAAAAAAAAAAAP////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAA/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////8AAAAAAAAAAAAAAAAAAP////////////////////////////////8AAAAAAAAAAAAAAAAAH///////////////////+AAAAAAAAAAAAAAAAAAAAAA//////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAB////////////+AP/////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAf////////////+H/8AAAAAAAAAAAH///////4f//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////wAAAAAAAAAD///////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAf4AAAAAAAAAAAAAAAAf/////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////4AAAAAAAAAAAAAAAAAAA//AAAAAAAAAAAAAAB////////////////////////wAAAAAAAAAAAB///////////////////////+AAAAAAAAAAAAAAAAAAAB//////////////AAAAAAAAAAAAAAAAAAf/////wAAAAAAAP/////////////////////////AAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAD//////gAAAAAAAAAAAAAAAf/////////////////gAAAAAAB///////////////////////////v////8AAAAAAAAAAAAAAAAB/////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////8AAAAAAAAAAAAAAAAAf/////////////////////////////////8AP/+AAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////wAAAAAAAAAAAAAB////////gAAAAAAAAAAD////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////gAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////gAAAAAAAAAAAAAAAAAAAAAP//////////////gAAAAAAAAAAAf//////////////////gAAAAAAAAD////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////8AAAAAAAAAAAAAH////wAAAAAAAAAAAAAAAAAAAD//////////+AAAAAAAAAAAAAA//////////////////////4AAAAAAAAAAAAAAAAAA//////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////+AAAAAP//////////////////////////AAAAAAP//////////////////////////4AAAAAAAA///////////////wAAAAAAAAf////////////+AAAAAAAAAAAAAAAAAAAAAAD////////wAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////8AAAAAAAAAAAAAAAA/////////////4AAAAAA//////wAAAAP////////4AB//////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/wOAAAAAAAAAAAAAAAAAAAAAAAAAD//8AAP///8AAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////+AAAAAAAAAAAAAAAAAAAAAAAAH///8AAAAAAAAAAAAAD////////////////////+AAAAAAAAAAAAAAAAAAAAAAH///////////////////wAAAAAAAAAAAAAAAAAAAAAB4AAAAH//////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAH////////////////////////////////AAAAAAAD////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////AAAAD///////////////////////////////w==",
    "DSA": "dca737e269f9d8626d488988c996e06b352c0708",
    "DSA-SHA": "dca737e269f9d8626d488988c996e06b352c0708",
    "DSA-SHA1": "dca737e269f9d8626d488988c996e06b352c0708",
    "DSA-SHA1-old": "dca737e269f9d8626d488988c996e06b352c0708",
    "RSA-MD4": "1441e723d40eb1201a208b6d716ee960",
    "RSA-MD5": "6565bceb49f962f797f49084f3f819a1",
    "RSA-MDC2": "efe944f5d723013d2d8763d8b5266a03",
    "RSA-RIPEMD160": "a812218c1eae12a88ce7d93d9eb354e5a3ba57b4",
    "RSA-SHA": "d5fc56684dee5665b81f27a1e60a5de80907894d",
    "RSA-SHA1": "dca737e269f9d8626d488988c996e06b352c0708",
    "RSA-SHA1-2": "dca737e269f9d8626d488988c996e06b352c0708",
    "RSA-SHA224": "c0cc680c7c15ec8b6c3aedbb54f0626e369dda4e134cb43cf625a403",
    "RSA-SHA256": "8ee61f98cea2659f5ab9d8ec444de3b3e843ab02baa7806e96230a64dee93774",
    "RSA-SHA384": "b64be3fdd16ce8908ea0ac1f837451db7c30c6a4aa0ba0cf9d7d472463e830887adeb349d17fef6d947d91e90b819c3c",
    "RSA-SHA512": "b6e75a0815130a7d690bf587251c88850838f6ae834979e941eabc624529022b181ae7fecba9580193621520c65c416735d85542d5ab635be6bdc6b7c9dd87af",
    "dsaEncryption": "dca737e269f9d8626d488988c996e06b352c0708",
    "dsaWithSHA": "dca737e269f9d8626d488988c996e06b352c0708",
    "dsaWithSHA1": "dca737e269f9d8626d488988c996e06b352c0708",
    "dss1": "dca737e269f9d8626d488988c996e06b352c0708",
    "ecdsa-with-SHA1": "dca737e269f9d8626d488988c996e06b352c0708",
    "md4": "1441e723d40eb1201a208b6d716ee960",
    "md4WithRSAEncryption": "1441e723d40eb1201a208b6d716ee960",
    "md5": "6565bceb49f962f797f49084f3f819a1",
    "md5WithRSAEncryption": "6565bceb49f962f797f49084f3f819a1",
    "mdc2": "efe944f5d723013d2d8763d8b5266a03",
    "mdc2WithRSA": "efe944f5d723013d2d8763d8b5266a03",
    "ripemd": "a812218c1eae12a88ce7d93d9eb354e5a3ba57b4",
    "ripemd160": "a812218c1eae12a88ce7d93d9eb354e5a3ba57b4",
    "ripemd160WithRSA": "a812218c1eae12a88ce7d93d9eb354e5a3ba57b4",
    "rmd160": "a812218c1eae12a88ce7d93d9eb354e5a3ba57b4",
    "sha": "d5fc56684dee5665b81f27a1e60a5de80907894d",
    "sha1": "dca737e269f9d8626d488988c996e06b352c0708",
    "sha1WithRSAEncryption": "dca737e269f9d8626d488988c996e06b352c0708",
    "sha224": "c0cc680c7c15ec8b6c3aedbb54f0626e369dda4e134cb43cf625a403",
    "sha224WithRSAEncryption": "c0cc680c7c15ec8b6c3aedbb54f0626e369dda4e134cb43cf625a403",
    "sha256": "8ee61f98cea2659f5ab9d8ec444de3b3e843ab02baa7806e96230a64dee93774",
    "sha256WithRSAEncryption": "8ee61f98cea2659f5ab9d8ec444de3b3e843ab02baa7806e96230a64dee93774",
    "sha384": "b64be3fdd16ce8908ea0ac1f837451db7c30c6a4aa0ba0cf9d7d472463e830887adeb349d17fef6d947d91e90b819c3c",
    "sha384WithRSAEncryption": "b64be3fdd16ce8908ea0ac1f837451db7c30c6a4aa0ba0cf9d7d472463e830887adeb349d17fef6d947d91e90b819c3c",
    "sha512": "b6e75a0815130a7d690bf587251c88850838f6ae834979e941eabc624529022b181ae7fecba9580193621520c65c416735d85542d5ab635be6bdc6b7c9dd87af",
    "sha512WithRSAEncryption": "b6e75a0815130a7d690bf587251c88850838f6ae834979e941eabc624529022b181ae7fecba9580193621520c65c416735d85542d5ab635be6bdc6b7c9dd87af",
    "shaWithRSAEncryption": "d5fc56684dee5665b81f27a1e60a5de80907894d",
    "ssl2-md5": "6565bceb49f962f797f49084f3f819a1",
    "ssl3-md5": "6565bceb49f962f797f49084f3f819a1",
    "ssl3-sha1": "dca737e269f9d8626d488988c996e06b352c0708",
    "whirlpool": "d5090b5ca8d31ecd7079a3d4a99b7b859eee8161f9bbfd3ffbf0d65c9e81a24f6b1793add043254e9e50c7fd3401d4ac3e720ad896fb1bf88992b8cfafb54829"
  },
  {
    "input": "//+AAAAAAAAAAAAAAAB///////////////////////////8AAAAf//////////////wAAAAAAAAAAAAAAAAAAAAAAAAD////////////////wAAAAAAAAAAAAAAAAA//////////////////gAAAAAAAAAA///////////////////////////wA/////////4AAAAAAAAAAAP///////////////////////////gAAAAAAAAAAAAAAAAAAAD//////////////////////////////////4AAAAAAAAAAAB/////////wAAAAAAAAAAAAAAAAAAAAAAf///////////////AAAAA///////////////P////////////wAAAAAAAAAAAAAAAAAD////////////////4AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////AAAD/////////////////////////////gAAB/////////////////////wAAAAAAAAAAD///////////////////////////8AAAAAAAAAAf///////////4AAAAAAAAAAAf//////////P////////////////////////////wAAP///gAAAAAAAD///////////////////AP///////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////4AAAAAH//////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////////gAAAAAAAAAAAAAAAAAAAH/////////wAAAAAAAA/wAAAAAAAAAAAA///w/////////////////AAAAAAAAAAAH//////////////////////////////4AAAAAAAAAAAH///////gAAAAAAAAAAAAAAAAB/////////////////////AAAAAAH/////////////////+AAAAAAAAAAAAAAAAAAAAAAAAD////////////////4AAAAAAAAAAAAAAAA//////////////////////////////8AAAAAAAAAB//wAAAAAAAAAAAAAH//////////////////////gAAAAAAAAA////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////gAAAAAAAAAAAAAAA/////////////AAAAAAAP////////////////////////////gAAAAf/////////////////////////////////gAAAAAAAAAAAAAAB/////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////4AAAAAAAAAAAAAAAH/////////////////////7/////+AAAAAAAAAAAAAAAAAAAAAAf///////////////////////gAAAAAAAAAAAAAAAAAAAAAH////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////////////gAAD//////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////AAAAAAAAAf/////////////////////////gAAAAAAH////////////wAAAAAAAAAAAAAAAAAAAD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////gB/////////////////wAAAH////////////////////+AAAAAAAAAAAAP//////////////+AAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////////AAP////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////+AAAAAAAAAAAAAAA//////wD////wAAAAAAAAAAP//////4AAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////AAAAAAAAAAAAAAAAAAAAAAHwAAAAAAAAAAAAAAAAAAAAAAAf///////////////4AAAAAAAAAAAAAAAAAAAAAAAP////8H////////////////////wAAAAAAAAAAAAAAAAAAAA////////////////////////////////+AAAAAAAAAAAAAAAAA//wAAAAAAAAAAAAAAAH/////////////////wAAAAAAAAAAAAAAAAP/////////////+P//wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAf////////4AAAAAAAH///////////////////////////AAAAAAAAAAAAAAAAAAD/////////////////////////////wAAAAAAAAAAAAAAAAA//gAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAH////////////8AAAAAAAAAAAAAB////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH8AAAAAAAAAAAAAAAAAP////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////gAAAAAAAAAAAAAAAA////////////////////////////////4AAAAAAAAAAAAAAB////////////////////////////////AAAAAAAAAAAAAAAAAAAAAH//////////////////+AAAAAAAAAAAAAAAAAAAAf///gAAAH8AAAAAAAAAP/gAAAAH///////////////////wH/////////////////////////////////gAAAAAAAAAAAAA////////////////////+AAAAH////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////wAAAAAAAAAAAAAAAAAAAf///////////////////wAAAAAAAAAAAAAP//////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////4AAAAAAAAAAAAAAA///////////////////////////gAAAAAAAAAAAAAAAAAAAAA/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAD///////gAA////////////////////////AAAAAAAAAAAAAAAAAAAAf////////////////////////////////gAAAAAAP/////wAAAAAAAAAAAAAAB///////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAB/////////////////+AAAB///////////////////////////////gAAAAAAAA////////////////gAAAAAAAAA////////////////////////8AAAAAAAAAAAAAAAAAAAAD//////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////8AAAAAAAAAAAAAAP/////////////+AAAAAAAAAAAAAAAAAAH//////////gAH///////////////////////8AAAAAAAAAB//////////wAAAAAB////////////////AB////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAD///////wAAAAAA/////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAf//wAf////////////4AAAAAAAAAAAD/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////4AAAAAAAAAAAAAAAAAAAf/////wAAAAAAAAAAAAAAAAAAAAAAAB///////////+AAAAAAAAAAAAAAAH/////////4AAAAAAAAAAAAAAf////////////////////////////////8AAAAAAAH///////////////////////gAAAAAAAAAAAAAAAAAH///////////////////////////wAAAAAAAAAAAB///////wAAAAAAAAAAAAAAAAAAf///////+AAAAAAA/////////////////AAAH///gAAAAAAAAAAAAAAAAAD//////4AH/////////////////////+AAAAB//////+AAAAAAAB///////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAD+AAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////+AAAAAAAAAAAAAAAAD////////gAAH////////////////gB/////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAf///////4AAAAB///////////8AAAAAAAAH////8AAAAAAAAAAAAAAAAAAAAAH////8AAAAAH////////////////////AAAAAAAAAAAAAAAAAAB///////////////////////////4AAAAAAAAAAAAAAAAAAAAAA//////////////////////////////AAAAAAAAAAAAAAAAAAAH//////+AAAAAAAAAAAAAAAAAAAAD////////////wAAAAB///////////////////////4AAAAAAAAABwAAAAAAAAAAAAAAAAAAP//////////////+AAA/////////+AAAAAH/////gAAAAAAAAAAAAAAAAAAAAB//////gAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////+AAAAAAAAAAAAAAAAAP//////////////4AAAAAAAAB///////////////////////////////+AAAAP/////////////////////////////////4AAAAAf////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////wAAAAAAAAAAAAH////////////////////////////////8AAAAAAAAAAAAAD//////////4AAAAAAAB/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAD/////////////////+AAD///////+AAAAAAAAAAAAAAAAAP//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////4AAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////4AAB////////////////////////////////4AAAAAAAAAAAAAAAAAAAAB////////////////////wAAAAAAAf///+AAB//////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///AAAAAAAAAAAAAAAAH///////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////8AAAAAAD//////////////////8AAAAAAAf//////////AAAAAAAAAAAAAAAAP/////////////AAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////+AAAAD////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////4AAAAAAAAAAAAAAAAAAAAAAAAH//////////////wAAAAAAAAAAAB///////////////////////wAAB//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAD/////////////Af/////+AAAAAA//////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/+AAAAAAAAAAAf////////////////gAAAAAAAAAAAAAAAAAAAAAD//////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////4AH//////////////////+AAAAAAAAAf///////////////gAAAAAAAAAAAAAAAAAAA////////////gAAAAAAAAAAAAAAAAAAAAB/////////////////////////////////gf//////////////////AAAAAAAAAAAAAAAAD/////////////////////////wAAAAAAAAAB////gAAAAAAAAAAAAAAAAAAH////////////////+AAAAAAAAf////////////4AAAD//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////",
    "DSA": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "DSA-SHA": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "DSA-SHA1": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "DSA-SHA1-old": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "RSA-MD4": "421c126089eb860449cabcfce5411a3c",
    "RSA-MD5": "2267037a7f3e753c653218fcf67ce9c7",
    "RSA-MDC2": "4b1a54e8337d64029d3c1d146c10f7b2",
    "RSA-RIPEMD160": "0dacd206650e99e239e958ed38128f889c066461",
    "RSA-SHA": "d00525def6dbf08a0ae5135a5496bfe8284a8b3d",
    "RSA-SHA1": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "RSA-SHA1-2": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "RSA-SHA224": "9fb71c6c0313ffffcb218c76dea9029a1ca80987bebfdf0fb526e639",
    "RSA-SHA256": "bc69420ce99aa58de5d5c9ae32c3528b02546347e8f85dca651187142bc2a40b",
    "RSA-SHA384": "dac161339d0c7b826dffbcdd9209795d24b1c5d3abc25f8fe655c8e6146b99a227ea27a479e4868d16690fd7715f8491",
    "RSA-SHA512": "05a4482e9c87bc49e5c55a087d2d670fec5e3eb0ed2d7fa9d836485c94b477fa50f027f2013a638d9668c4c8a48770415ef5319460c2f4af1b9f628615ccde8d",
    "dsaEncryption": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "dsaWithSHA": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "dsaWithSHA1": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "dss1": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "ecdsa-with-SHA1": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "md4": "421c126089eb860449cabcfce5411a3c",
    "md4WithRSAEncryption": "421c126089eb860449cabcfce5411a3c",
    "md5": "2267037a7f3e753c653218fcf67ce9c7",
    "md5WithRSAEncryption": "2267037a7f3e753c653218fcf67ce9c7",
    "mdc2": "4b1a54e8337d64029d3c1d146c10f7b2",
    "mdc2WithRSA": "4b1a54e8337d64029d3c1d146c10f7b2",
    "ripemd": "0dacd206650e99e239e958ed38128f889c066461",
    "ripemd160": "0dacd206650e99e239e958ed38128f889c066461",
    "ripemd160WithRSA": "0dacd206650e99e239e958ed38128f889c066461",
    "rmd160": "0dacd206650e99e239e958ed38128f889c066461",
    "sha": "d00525def6dbf08a0ae5135a5496bfe8284a8b3d",
    "sha1": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "sha1WithRSAEncryption": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "sha224": "9fb71c6c0313ffffcb218c76dea9029a1ca80987bebfdf0fb526e639",
    "sha224WithRSAEncryption": "9fb71c6c0313ffffcb218c76dea9029a1ca80987bebfdf0fb526e639",
    "sha256": "bc69420ce99aa58de5d5c9ae32c3528b02546347e8f85dca651187142bc2a40b",
    "sha256WithRSAEncryption": "bc69420ce99aa58de5d5c9ae32c3528b02546347e8f85dca651187142bc2a40b",
    "sha384": "dac161339d0c7b826dffbcdd9209795d24b1c5d3abc25f8fe655c8e6146b99a227ea27a479e4868d16690fd7715f8491",
    "sha384WithRSAEncryption": "dac161339d0c7b826dffbcdd9209795d24b1c5d3abc25f8fe655c8e6146b99a227ea27a479e4868d16690fd7715f8491",
    "sha512": "05a4482e9c87bc49e5c55a087d2d670fec5e3eb0ed2d7fa9d836485c94b477fa50f027f2013a638d9668c4c8a48770415ef5319460c2f4af1b9f628615ccde8d",
    "sha512WithRSAEncryption": "05a4482e9c87bc49e5c55a087d2d670fec5e3eb0ed2d7fa9d836485c94b477fa50f027f2013a638d9668c4c8a48770415ef5319460c2f4af1b9f628615ccde8d",
    "shaWithRSAEncryption": "d00525def6dbf08a0ae5135a5496bfe8284a8b3d",
    "ssl2-md5": "2267037a7f3e753c653218fcf67ce9c7",
    "ssl3-md5": "2267037a7f3e753c653218fcf67ce9c7",
    "ssl3-sha1": "b8ffc1d4972fce63241e0e77850ac46dde75dbfa",
    "whirlpool": "a18feaf3f04d0d50a86fe5292b8cc08014348d9bb16be1ead10aeefc6df32c0c87f0ea97d9f7f28b518e86a286cdf035bb135f1e22d4126f6cf5617ccfcf3cd1"
  },
  {
    "input": "////AAAAAAAP///////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////wAf//////////////////////gAAf//////////////////////4AAAAAAAAAAAAAAAA//////////////////////gAAAAAAAAAAAAAAAAH////////4AAAAAAAAAAAAAAAAAAAAf//////gAAAAAAAAAD//////////////wAAAAAAAAAAAAAAAf//////////////////////AAAAAAAAAAAAAAAAAAAAAAf////////////////////////wAAAAAAAAAAAAAAAAAAD//////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAP///8AAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAf///4H//4AAAAAAAAAAAAD/////v///////////////4AAAAAAAAAP//////+AAAAAAAAAAf///////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////+AAAB//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAPwAAAAAAAAAAAP///////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////gAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAAAAAP/////////////8AAAAP////////////8AAAAAAAAAAAAH///////////wAAAAAAAAAAAAAAAAA//8AAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////4AAAAAAAAAAAAAAAAD/wAAAAAAAAP/////////////////////////////AAAAAAAAAAAAAAAAAD//////////////////8AAAAAP/////////////4AAAAAAAAAAAAAAAAAAAAAAAAH///////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////8AAAAAAAAAAAP////////////AAAAH/////4AAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////////////w///////AAAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAAAAAD///////////////+AAAAAAAAAAAAAAAAAAD/////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////8AAAAAAAAAAAAAAAAAAAAAf/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAA//////wAH////////wAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8AAAAAAAAAB//////////////////4AAAAAAAAAAAAAAAAAAAP////////////////////////////4AAAAAAAAAAAAAAAAAPwAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////gAAAAAAAAAAAAAAAAAAf/////////////////////////////////8AAAAAAAAAAAAAAAAD////////////////////4AAAAAAAAAAP///////8AAAAAAAAAAAAAAAAAAAAAAf///////////wAAAA////////////gAAAAAAAAAAAD/////////////////////////////////4AAAAAAAAAAAAAAAAAAP/gAAAAAAAAAAAAAAAH/////wAAAAAAAAAAAAAAAAAAH///////////wD////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////wAAAAAAAAAAAAAA/////////////////AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////+AAAAAAAAAAAAAD//gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////+AA//////////AAAAAAAAAAAAH////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////8AAAAAB////+AAAAAAAA////////4AAB//////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAP//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAAAAAAB//+AAAAAAAAAAAAAAAAAAAAAA////////////////gAAAAAAAB//////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////8AAAAAAAAAAAAAAAAAAAAAAAAH///////8AAAAAAAAAAAAAAAAAf/////////////gAAAAAAAAAAAAAAAAAA////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///gAAAAAAAAAAAAAAH///////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////gAAAAAAAAAAAAAAAAD/////////////////////4AAAAH//////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////4AAAAAAAH///AAAAAf////////////wAAAAAA////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////AAAAAAAAP////////////////////////////////AAAAAAAAAAAB//////////////////////////4AAAAAAAAAAAAB///////////4AAAAAAAAAAA///////////////4AAAP/////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////wAAA///////////////////gAAAAAAAAAAAAAAAAAAAAAfgAAAAAAAAAA//////////////////////////////////+AAAAAAAAAAAD///////////////////////////4AB/////////////////////////AAAAAAAAAAAAAAAAAAAAAD////////////////AAAAAAAAAAAAAAB/////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////AAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////4AAAAAAAAAAAAD///////////////////////////////8AAAAAAAAAAAAAP///////////////////////////////gAAAAAAD////////+AAAAAAAA//////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAf//wAAAAAAAAAAAAAAAAAAD///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAH/////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////wAAAAAAAAAAAAAAA///////8AAAAAAAAAAAAAAAAAAAAAAAA/////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////8AAAAAAAAB/////////gAAAAAAAAAAAAAAD//wAP///////////////////4AAAAAAAAAAAAAAH//wAAAAAAAH//////+AAB////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAA//////4AAAAAAAB///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAf///////////////////////8AAAAAAAAAAAAAAf//////////HwAAAAAf///////////8AAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////wAAAAAAAAAAAAAAAAAAA////////////+AAAAAAAAAAAAAAAAAAAH///wAAAAAAAAP//////////////////////////////gAAAAAB////////////////////////////////wAAAAAAAAAAAAAAAf//////////////gAAAAAAAAAAA//////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAD/////////////////8AAAAAAAAAAAAAAAAAAAAAAAD////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////wAB//////////////////////gAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////+AAAAAAP/////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////AAAAAAAAAAAAAAAAAB///////////////////////////////////gAAA////////+AAAAAAAAAAAAAAAAAAAAAAf/////gAAAAAAAAAAAAAAAAD////////////4AAAAAAAAAAAAAAAAAA//////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////4AAAAAP/////////4D////////////////8AAAAAAAAAAAAAAAAAAAAAD//////////+AAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAA///////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAB//////////wAAAAAAAAAAAAAAAAAAAAAAA//wAAAAAAH////////////////////////AAAAAAAAAAAAAAAAAAAAAAAH/////////////////////AAAAAAAAA///gAAAAAAAAAAAAAAAAAAAAAAAAAAAH//+AAAAAAAB/AAAAAAAAAAAAAAAB////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////8AAAAAAAAAAAAAAAAAAAAf/////////////////////////wAAAAAAAAAAAD////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////gAAAAAAAAAAAAAAAAAAAAP//////////////////////4AAAAAAAAAAAAAAAAAD////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAf//////wAAAAAAAAAAAAAAAAAAAAAAD//////////////////////+AAAAAAAB//////////AAP/////wAAAAAAAAAP//////////////////////AAAAAAAAf///////////////4AAAAAAAAAAAAAAAAAAAAAAAAH////+AAAAAAAAAAAAAAAAAA/////////////////////////////AAAAAAAAAAH/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////4AAAAAAAAAAAAAAAAAAAAAAB////////////////////////gAAAAAAAH///////////////////////gP/////////////////4AAAAAAAAAAH////////////+AAAAAAAAAAAAAAAAAAAAH/////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////4AAAAAAAAAAAAAAB//////////////////////////////8AAAAAAAAAAAAAAf/////////////////+AAAAAAAAAAAAAAAAAAAAAA///////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////////+AAAAAD///////////AH//////////////////////////////AAAAAAAAAAAAAAAAAAAAB///////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAAAAAAAAAAf////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////+AAAAAAAAAP/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAP8AAAAAAAAAAAAAB/////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAA/////////////4AAAAAAAAAAAAAAAAAP/////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
    "DSA": "e9c9bf41c8549354151b977003ce1d830be667db",
    "DSA-SHA": "e9c9bf41c8549354151b977003ce1d830be667db",
    "DSA-SHA1": "e9c9bf41c8549354151b977003ce1d830be667db",
    "DSA-SHA1-old": "e9c9bf41c8549354151b977003ce1d830be667db",
    "RSA-MD4": "5eb2c3a72b932c060fe5d08a607d4098",
    "RSA-MD5": "aca1ae6237f498986991565b0307f0da",
    "RSA-MDC2": "99c90730ba346b64c4a8c3e5ae68ceaf",
    "RSA-RIPEMD160": "06b093ec41f5d21964081e2d3cdc648ebdceede0",
    "RSA-SHA": "51c762b894c97aaad0bc1685a39a31faad22d89c",
    "RSA-SHA1": "e9c9bf41c8549354151b977003ce1d830be667db",
    "RSA-SHA1-2": "e9c9bf41c8549354151b977003ce1d830be667db",
    "RSA-SHA224": "84eff7dda54a498404422baba6e5f1f39e10737a8ba6c81ab6c581df",
    "RSA-SHA256": "79b2d4da202168d2c6f7dbff6dba414f71e405731a287a23b58af903f9b1c770",
    "RSA-SHA384": "7cb840e5561a93f39f5f84fbd539e09c8f1d99ebfc1ba6eeb0cd32ab8624361f3c64a7fb3a7f426c74358dffa764a2b7",
    "RSA-SHA512": "e6684cb464c37e901848d0dd497df81ee31f709dd8304ccb2158783c981f8a8151f60d67271667b159ab11b0912e63900e99dfd8fdcc6c3d24a93dc899919537",
    "dsaEncryption": "e9c9bf41c8549354151b977003ce1d830be667db",
    "dsaWithSHA": "e9c9bf41c8549354151b977003ce1d830be667db",
    "dsaWithSHA1": "e9c9bf41c8549354151b977003ce1d830be667db",
    "dss1": "e9c9bf41c8549354151b977003ce1d830be667db",
    "ecdsa-with-SHA1": "e9c9bf41c8549354151b977003ce1d830be667db",
    "md4": "5eb2c3a72b932c060fe5d08a607d4098",
    "md4WithRSAEncryption": "5eb2c3a72b932c060fe5d08a607d4098",
    "md5": "aca1ae6237f498986991565b0307f0da",
    "md5WithRSAEncryption": "aca1ae6237f498986991565b0307f0da",
    "mdc2": "99c90730ba346b64c4a8c3e5ae68ceaf",
    "mdc2WithRSA": "99c90730ba346b64c4a8c3e5ae68ceaf",
    "ripemd": "06b093ec41f5d21964081e2d3cdc648ebdceede0",
    "ripemd160": "06b093ec41f5d21964081e2d3cdc648ebdceede0",
    "ripemd160WithRSA": "06b093ec41f5d21964081e2d3cdc648ebdceede0",
    "rmd160": "06b093ec41f5d21964081e2d3cdc648ebdceede0",
    "sha": "51c762b894c97aaad0bc1685a39a31faad22d89c",
    "sha1": "e9c9bf41c8549354151b977003ce1d830be667db",
    "sha1WithRSAEncryption": "e9c9bf41c8549354151b977003ce1d830be667db",
    "sha224": "84eff7dda54a498404422baba6e5f1f39e10737a8ba6c81ab6c581df",
    "sha224WithRSAEncryption": "84eff7dda54a498404422baba6e5f1f39e10737a8ba6c81ab6c581df",
    "sha256": "79b2d4da202168d2c6f7dbff6dba414f71e405731a287a23b58af903f9b1c770",
    "sha256WithRSAEncryption": "79b2d4da202168d2c6f7dbff6dba414f71e405731a287a23b58af903f9b1c770",
    "sha384": "7cb840e5561a93f39f5f84fbd539e09c8f1d99ebfc1ba6eeb0cd32ab8624361f3c64a7fb3a7f426c74358dffa764a2b7",
    "sha384WithRSAEncryption": "7cb840e5561a93f39f5f84fbd539e09c8f1d99ebfc1ba6eeb0cd32ab8624361f3c64a7fb3a7f426c74358dffa764a2b7",
    "sha512": "e6684cb464c37e901848d0dd497df81ee31f709dd8304ccb2158783c981f8a8151f60d67271667b159ab11b0912e63900e99dfd8fdcc6c3d24a93dc899919537",
    "sha512WithRSAEncryption": "e6684cb464c37e901848d0dd497df81ee31f709dd8304ccb2158783c981f8a8151f60d67271667b159ab11b0912e63900e99dfd8fdcc6c3d24a93dc899919537",
    "shaWithRSAEncryption": "51c762b894c97aaad0bc1685a39a31faad22d89c",
    "ssl2-md5": "aca1ae6237f498986991565b0307f0da",
    "ssl3-md5": "aca1ae6237f498986991565b0307f0da",
    "ssl3-sha1": "e9c9bf41c8549354151b977003ce1d830be667db",
    "whirlpool": "0469b8b86d0fc14dacbf8b5aff9d7d5dfdc9219c1abd4999bb1082ce33010b0ba2292909ba63b47650de0ca1cebdc7f901a81063895436c4ac2f51ab49170ffb"
  },
  {
    "input": "/////////////////////AAAAAAAAA////////////////////4AAAAAAAAAAAAAAAAAAP/////////////4AAAAAAAAAAAAA///+AAAAAAD/////////////////////////wAAAAAAAAAAAf//////////////////////////////////gAAAAAAAAAAAAAAAAAAP//wAAAAAAAAAAAAAAf/////////////////gAAAAH/////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/wAAAAAAAAAAAAAAAAH////////////////////////////+AAAAAAAAAAAAAAAAAAAAAA//////////////////////8AAAAAAAAAAAAH///////////////////////////////8AP//////////////////////////////////gAAAAAAAAAAAAAAAAAB////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////4AAAAAAAAAAH//////8AAAAAAAAAAAf///////////////////////////////4AAAAAH/////////////////////////////////gAAAP///////////////////////////+AAAAAAAAAAf/////////////////+AAAAAAAAAAAAAH//////+AAAAAAAAAAAAAAAAH//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////8AAAAAAAAAAAP/////////////gAAAA///////////////////gAAAAAAAAAAP//////////AAAAAAAAAAAAAAAAAAAAAP/////////////gAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////+f///////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////////wAAAAB//////////////////////////4AAAAD////////////////////////4AAAP//////////AAAAAP/////////4AAAAAAAAAAAAAAAAAD///////gAAAAAAAAAAAAAAAAAAAP////////////////wAAAAAAAAAAAAf///////////4AAAAB//////gAB/////////Af///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAP/nwAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAf//////////////gAAAAAAAAAAAAAAAAAAAAAH///8AAAAAAAAAAAP/////////////////AAAAAAAAAAAAAAAAAAAAP////////////////+AAAAAAAAAAAAAAAAAAB///////////////////////////////////gAAAAf//////////////////////8AAAAAAAAAAAAAAAAAAAAAP///////////////////////////////+AAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////8AAAAP/gP////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAB//8AAAAAAAAAAAAAf//////////////////////AAAAAAAAAAAAAAf/////////////4AAAAAAAAAAAAAAAf//////////AAAAAAAAAAAAAAAAAAAAAAAAB8AAAAAAD//////////8AAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////4AAAAAAAAA//////////////////////+AAAAAAAAAAAAAf/8AAAAAAAAAAAP/////////////////////////////////+AAAAAAAAAAAAB///////////////8AAAAAAAAAAAAAAB///////////////////////4AAAAAAAAAAAAAAAAAAAAAD//4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA///8AAAAAAAAAAAAAAAAAAAAAf//////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAH//////8AAAAAAAAAAAA////////wAAAAAAAAAP////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAB/////+AAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAAAf/////////////////////////4AAAAAAAAAAAAAAAAAAB////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAf///////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAP////////////////wAAAAAAAAAf///////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////AAAP///////////////////////////////////AAAAAAAAAAAAAD///////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////4AAAAAAAf////////////////+AAAAAAAAAAAAAAAAAAAP/////AAAAAAAAAAAAAAA///////////////////////gAAAAAAAAAAAAAAAf//////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////AAH//////////wAAAAAAAAAAAAAAAAAAAAAA/////////AAAAAAAAAAAAAAAAD/////////////////////////+AAD//////////////////////////////AAAAAAAAAAAAAAAH////////////AAAAAAAAAAH///4AAAAAAAAAAAAAAAAAAAAAAAAAAAH///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////gAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////////8AAAAAAAAAAAAAAAAAAAP/////////////////////////wAAAAAAAAAAAAAAAAB///////////////+AAAAAAAAAAAAAAAAAAH/////////////////////////////////AAAD//////////////////////AAAAAAAAAAAAAAAAAAAAAAAf//////////////////gAAAAAAAAAAAAAAAAAAH///////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAB/8AAAAAAAAAAAAAAAAAAAB////////////////////////////////+AAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAf////+AAAAAAAAAAAB///////////////////wAAAAAAAA///////////////////////////////8AAAAAAAAAAAAAAAAAf//////////////gAAH///////////////////gAAAAAAAAAf/////////////AAAAAAAAD//////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//gAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////gAAAAAAAAAAA///AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAAAAAAAAA//////wAAAAAAAAAAAAAAAAAAAAAB////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////8AAAAAAAAAAAAAAAAAAB8AAAAAAAAAAAAAAAAAAAAAAD//////////////wAAAAAAAAAAAAAAAAAAAB//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////gAAAAAAAAAAAAAAAAAAA//////////////////////////////wAAAAAAAAAAAAAAAD/gAAAAAAAAAAAAAD///////////////+AAAAAAAAAAAAAAAAB///////////+P8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////wAAAAAAAAAAAAAAAAAAAAAAAH////////+AAAAAP//////////////////////////+AAAAAAAAAAAAAAAAB////////////////////////////8AAAAAAAAAAAAAAAD///////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAP/wAAAAB///////////wAAAAAAAAAAAAD/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAP//////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////gAAAAAAAAAAAAAH///////////////////////////////gAAAAAAAAAAAAAD///////////////////////////////+AAAAAAAAAAAAAAAAAAAAH//////////////////+AAAAAAAAAAAAAAAAAAAAeAAAP4AAAAAAAAP//////////////////////////////////4AAAA/////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////////////8AAAAAAAAAAAB////////////////////8AAAH/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////+AAAAAAAAAAAAAAAAAAB//////////////////wAAAAAAAAAAAD////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAP///////8AAAAAAAAAAAB////////////////////////4AAAAAAAAAAAAAAAAAAB/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAH///////P////////////////////AAAAAAAAAAAAAAAAAAAAf///////////////////////////////wAAAA//8AAAAAAAAAAAAD////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////AAAAAAAAAAAAAAAAAAAAAP//////////////AH//////////////////////////////+AAAAAAAAD///////////////AAAAAAAAf///////////////////////+AAAAAAAAAAAAAAAAAAP///////////////////////////////4AAAAAAAAAAAAAAAAAAAAA///////////////////////////////gAAAAAAAAAAH////////////wAAAAAAAAAAAAAAD////////8P/////////////////////+AAAAAAAAP/////////+AAA////////////////v///////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAD////+AAAAAD////////////////////////////////AAAAAAAAAAAAAAAAAAAAAA/4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////wAAAAAAAAA////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////+AAAAAAAAAAAAAAAAAAAH/////8AAAAAAAAAAAAAAAAAAAAB//////////gAAAAAAAAAAAAAAB/////////+AAAAAAAAAAAAB////////////////////////////////4AAAAAAAP/////////////////////wAAAAAAAAAAAAAAAAAD//////////////////////////8AAAAAAAAAAH/////wAAAAAAAAAAAAAAAD/////AAAAAAAf/////////////9gAAAAAAAAAAAAAAAAB///wAP////////////////////AAAP///AAAAAAP//////////////////+AAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAD///////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAB////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////AAAAAAAAAAAAAAAAB///////4Af///////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAA//////8AAAAA/////////wAAAAAD///gAAAAAAAAAAAAAAAAAAAAf////wAAAAP///////////////////+AAAAAAAAAAAAAAAAAB/////////////////////////AAAAAAAAAAAAAAAAAAAAAAH///////////////////////////AAAAAAAAAAAAAAAAAB////8AAAAAAAAAAAAAAAAAAAD///////////4AD//////////////////////4AAAAAAAAAB//////////////////////////////////4AAAAAAAAAAAAAAAAB//////////////4f/////8AAAAH//8AAAAAAAAAAAAAAAAAAB///8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////wAAAAAAAAAAAAAAAAB///////////////AAAAAAB/////////////////////////////wAAAB/////////////////////////////////gAH//////////////////////////8AAAAAAAAAAAAAAAAAAAAA==",
    "DSA": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "DSA-SHA": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "DSA-SHA1": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "DSA-SHA1-old": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "RSA-MD4": "e8296f86e645e73081c56cd8d084ba70",
    "RSA-MD5": "785bb09a5f25730a3aed4de12da4d9ea",
    "RSA-MDC2": "97d9430d8ff0634dd3143c7726f26160",
    "RSA-RIPEMD160": "2474086e7c55ebfeb279d627170ff8d928ba1e87",
    "RSA-SHA": "1ec7e5f099eaa453ae6e1959b442b0239a7f7f4b",
    "RSA-SHA1": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "RSA-SHA1-2": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "RSA-SHA224": "76bfc01be3ef7c5412524878502000b50c69a62ae0c332f3f3616b03",
    "RSA-SHA256": "068c65431e6010461cd77e3d2859fbc978857d1195dc1506ab1b5c9344e1099f",
    "RSA-SHA384": "3287f1fecd5907f9c093cf0416f62f26099ae27ad36482f07c82987c0f3d5a54d7d5e59319c16b0e574629c39633c430",
    "RSA-SHA512": "b2bf183fbd9e04d480c35d733a2f325a2ee3c936b173d1f925fa545c2dbd02f8a0f0c34b505b8289ce64b621f1f7d53da6b3a5419e7f4f5af531153f1e262137",
    "dsaEncryption": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "dsaWithSHA": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "dsaWithSHA1": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "dss1": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "ecdsa-with-SHA1": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "md4": "e8296f86e645e73081c56cd8d084ba70",
    "md4WithRSAEncryption": "e8296f86e645e73081c56cd8d084ba70",
    "md5": "785bb09a5f25730a3aed4de12da4d9ea",
    "md5WithRSAEncryption": "785bb09a5f25730a3aed4de12da4d9ea",
    "mdc2": "97d9430d8ff0634dd3143c7726f26160",
    "mdc2WithRSA": "97d9430d8ff0634dd3143c7726f26160",
    "ripemd": "2474086e7c55ebfeb279d627170ff8d928ba1e87",
    "ripemd160": "2474086e7c55ebfeb279d627170ff8d928ba1e87",
    "ripemd160WithRSA": "2474086e7c55ebfeb279d627170ff8d928ba1e87",
    "rmd160": "2474086e7c55ebfeb279d627170ff8d928ba1e87",
    "sha": "1ec7e5f099eaa453ae6e1959b442b0239a7f7f4b",
    "sha1": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "sha1WithRSAEncryption": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "sha224": "76bfc01be3ef7c5412524878502000b50c69a62ae0c332f3f3616b03",
    "sha224WithRSAEncryption": "76bfc01be3ef7c5412524878502000b50c69a62ae0c332f3f3616b03",
    "sha256": "068c65431e6010461cd77e3d2859fbc978857d1195dc1506ab1b5c9344e1099f",
    "sha256WithRSAEncryption": "068c65431e6010461cd77e3d2859fbc978857d1195dc1506ab1b5c9344e1099f",
    "sha384": "3287f1fecd5907f9c093cf0416f62f26099ae27ad36482f07c82987c0f3d5a54d7d5e59319c16b0e574629c39633c430",
    "sha384WithRSAEncryption": "3287f1fecd5907f9c093cf0416f62f26099ae27ad36482f07c82987c0f3d5a54d7d5e59319c16b0e574629c39633c430",
    "sha512": "b2bf183fbd9e04d480c35d733a2f325a2ee3c936b173d1f925fa545c2dbd02f8a0f0c34b505b8289ce64b621f1f7d53da6b3a5419e7f4f5af531153f1e262137",
    "sha512WithRSAEncryption": "b2bf183fbd9e04d480c35d733a2f325a2ee3c936b173d1f925fa545c2dbd02f8a0f0c34b505b8289ce64b621f1f7d53da6b3a5419e7f4f5af531153f1e262137",
    "shaWithRSAEncryption": "1ec7e5f099eaa453ae6e1959b442b0239a7f7f4b",
    "ssl2-md5": "785bb09a5f25730a3aed4de12da4d9ea",
    "ssl3-md5": "785bb09a5f25730a3aed4de12da4d9ea",
    "ssl3-sha1": "0942908960b54f96cb43452e583f4f9cb66e398a",
    "whirlpool": "79dfad91dd1eadb98c7268c86f85ca38c0c28c4ca1e828780fc242ee418a6bef46ec3e612838e76543907635f9d48a356e95e33943862c4022759f6177d20a24"
  },
  {
    "input": "AAAAAAAAAAAAAAAAAAAf////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////4AAAAAAAD//8AAAAAAAAAAAAAAAAAAAAA////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////gAAAAAAAAAAAAAAD//4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////wAAAAAAAAAAAAAAf//////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////8AAAAAAAAAAAAAAAAAAAAAB///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////////wAAAAAAAAAAAAAAAAD////////////////gAAAAPAAA/////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////////gAAAAAAAAAAAD////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////+AAAAAH/////////////////gAAAAAP//////gAAAAAAAAAAf////////////+AAAAAAAAAAAAAAAAAAAAAAf//////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////gAAAAAAAAAAAAAAAAAAAAAAAAAD/////8AAAAAAAAAAAAAAAAAAAAAAAP//////////gAAAAAAP////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAH///////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAf/////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//4AAAAAAAAAAAAAAAAAAAAAAAAAAAf//////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////////wAAAAAAD///////////////wAAAAAAAAAAAAAAAAAB/////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////AAAAAAAA////////////AAAAAAAAAAAAAAAAAAAB/////////wAAAAAAAAAAAAAAAAAAP//////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////+AAAAAAAAAAAf///////////////////4AAAAAA////wAAAAAAAAAAAAAP///////////////wAAAD/////////////f/////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////4AAAH//////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////AAAAAAAAAAAAAAAAAAAD//////////////////////////////////4AAAAAAAAAAAAAAAAAAAA/wAAAAAAAAAAAAAAAAAAAAAAD////////////////gAAAAAAAAAAAAAAAAAAAAH////////////////AAAAAAAAA//////////////////gAAAAAAf////////+AAAAAAAAAAAAAD/////////////AAAAAAAAAAAAAAAAAAAAP//////////////////gAAAAAAAAAAAAAAAAAAAAAAD///////////////8AAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////AAD///////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////gAgAP//////////AAABAAAAAAAAAAAAAAH////////4AAAAAP////////AAAAAAAD/////////////////////////+AAAAAAAAAAAAAAAAAAAA///gAAAD////////////////////////////8AAAAAAAAAAAAAAAAAAB/////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wAAAAAAAAAAAAAAAAAAAB/////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAf/////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////8AAAAAAAAAAAAP///gAAAAAAAAAAAD////////////4AAAAAAAAAAH/////////////+AD////////////////////////4AAAAAAAAAAAAAAAAAAAf/////////////+AAAAAAAf///////////////////////////gAAAAAAAAAAAAAAAA///////////////8AA/////////////wAAAAAAAAAAAAAAAAAAAAAAAH///////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////8AAAAAAAAAAH//////////4AH///AAAAAAAAAAAAAAAAAAAAAAB///////////////////////////////+H///gAAAAAAAAAAAAA/////////////////////////////////4AAAAAAAAAAAAAAAAAAAH////////////wAAAAAAAAAAAAAAAAAAf//////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////8AAAAAAAAAAAAAAAAAAAAP///////+AAAAAAAAAAAAAAAAAAAAAAAAA/////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////AAAAAAAAAAAAAAAAAAAAAB/////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAAAAAAAf//////////////4AAAAAAAAAAAAAAAA/////////////////////////////gAAAAAAAAAAAAAAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAB/////////////wAAAAAAAAAAAAAAAAAAP/////////////////////////////////+AAAAAAAAAAAAAAP////////////////+AAAAAAAP//////AAAAAAAAAAAAAAAAAAAA////////////gAAf////////+AAAAAAAAAB////////////////////////////////AAAAAAAAAAAAAAAAP/gAAAAAAAAAAAAAAAH//AAAAAAAAAAAAAAAAD////////j////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////wAAAAAAAAAAAAAA////////////////gAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////////wAAAAAAAAAAAAAAAAAAAAB///////////////////////////////wAAAAAAAAAAAH///////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////8AAAAAAAAB////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////wAAf/8AAAAAAAB//////8AAf////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAP/////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////4AAAAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAAH/////////////gAAAAAP/////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////wAAAAAAAAAAAAAAAAAAAAAAAAAH///////////gAAAAAAAAAAAAAAAAAAAAAH//////AAAAAAAAAAAAAAAAD////////////AAAAAAAAAAAAAAAAAA////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////4AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAA//8AAAAAAAAAAAAAAA////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////+AAAAAAAAAAAAAA///////////////////wAAAH//////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////+AAAAAAAB///wAA///////////4AAAAAAf///////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////8AAAAAH////////////////////////////////gAAAAAAAAH///////////////////////8AAAAAAAAAAAP/////////wAAAAAAAH//////////////gAAA////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////+AB///////////////8AAAAAAAAAAAAAAAAAAAAB/////////////////////////////////+AAAAAAAAA/////////////////////////////////gAAAAAAAAAP//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////+AAAAAAAAAAAAAAAAAAAAAH//////////////gAAAAAAAAAAAH/////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////4AAAAAAAAP//////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////8AAAAAAAAAAAA//////////////////////////////wAAAAAAAAAAH////////////////////////////+AAAAB/////8AAAAH//////////////////////////AAAAAAAAAAAAAAAAAAAAAAf//wAAAAAAAAAAAAAAAAf//////////////////////////4AAAAAAAAAAAAAAAAAAAAD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////gAAAAAAAAAAAAAf///4AAAAAAAAAAAAAAAAAAAAAP////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////wAAAAAA///////8AAAAAAAAAAAAAH4D////////////////4AAAAAAAAAAAAAAH/4AAAAAAB///+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAB//////wAAAAP/////////////////////////////gAAAAAAAAAAAAAAAAAAAAAf///////////////////////8AAAAAAAAAAAAAP/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////////gAAAAA////////////4AAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////+AAAAAAAAAAAAAAAAf/////////4AAAAAAAAAAAAAAAAAHAAAAAAAAf//////////////////////////////AAAAf//////////////////////////////AAAAAAAAAAAAAAAB/////////////gAAAAAAAAAAA/////////////////gAAAAAAAAAAAAAAAAAAAAAAAAD///wAAAAAAAAAAAAAAAAA//////////////8AAAAAAAAAAAAAAAAAAAAAAAD////////8AAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////+AH/////////////////////AAAAAAAAAAAAAAAAAAAB/////////////////////////////4AAD////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////gAAAAAAAAAAAAAAAAf/////////////////////////////////8AB//////////////////////////////////4AAAAA///////////////////AAAAAA///////////////+AAAAAAAAAP//////////////4AAAAAAAAAAAAD/////////////////////////////AAAAAAAAAAAAAAAAAP///4AAAAAAP//////////////////////////////////wAAAAAAAAAAAAAAD////////////////////AAAAAAAAAAP/////////////////////gAAAAAAAAAAAAAAAAAf///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////gAAAAAAAf//////////////////////+AAf////8AAAAAAAAAAAAAAAAAAAAAAH///////////////////////AAAAAAAAAAAAAAAAAAAB/////4A//////////////////////////8H/////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////////AAAAAAAAP/////////////////wAAAAAAAAAAAAAAAAAA",
    "DSA": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "DSA-SHA": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "DSA-SHA1": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "DSA-SHA1-old": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "RSA-MD4": "055d4ac39ae31bfe0665fc4fab62e845",
    "RSA-MD5": "4eb5472f4e5243fcd4a76533789e829a",
    "RSA-MDC2": "d550ff59b9b0ef87d98e540f5ee1bc30",
    "RSA-RIPEMD160": "23f82a44beb35e0ac26ff853f9fa1de06387d510",
    "RSA-SHA": "9437bffbdb0b5f33b7500ccc112b81d56a02e404",
    "RSA-SHA1": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "RSA-SHA1-2": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "RSA-SHA224": "407814ed7b28707c42f0bc6445c1ab0b3fc503eb6aec44ae1a084ea8",
    "RSA-SHA256": "918a1d14de8c5fa363fb3137cf5014020646a1a2235f78ef3ed0d034c74f5761",
    "RSA-SHA384": "e406e4967de02dfb3a3615edec1c6d6829763a2372035c44c5740146d6b1f781bbfa2465814890eae669d935baef6d9a",
    "RSA-SHA512": "6123a636eaaa0de3ff0c09043f9a9d7601f264433c9b3deb5964c42c1892c62f4184271a15ccbd2c017a2e4b4bacab3badbf46393875804a1cf2371e43df643a",
    "dsaEncryption": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "dsaWithSHA": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "dsaWithSHA1": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "dss1": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "ecdsa-with-SHA1": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "md4": "055d4ac39ae31bfe0665fc4fab62e845",
    "md4WithRSAEncryption": "055d4ac39ae31bfe0665fc4fab62e845",
    "md5": "4eb5472f4e5243fcd4a76533789e829a",
    "md5WithRSAEncryption": "4eb5472f4e5243fcd4a76533789e829a",
    "mdc2": "d550ff59b9b0ef87d98e540f5ee1bc30",
    "mdc2WithRSA": "d550ff59b9b0ef87d98e540f5ee1bc30",
    "ripemd": "23f82a44beb35e0ac26ff853f9fa1de06387d510",
    "ripemd160": "23f82a44beb35e0ac26ff853f9fa1de06387d510",
    "ripemd160WithRSA": "23f82a44beb35e0ac26ff853f9fa1de06387d510",
    "rmd160": "23f82a44beb35e0ac26ff853f9fa1de06387d510",
    "sha": "9437bffbdb0b5f33b7500ccc112b81d56a02e404",
    "sha1": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "sha1WithRSAEncryption": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "sha224": "407814ed7b28707c42f0bc6445c1ab0b3fc503eb6aec44ae1a084ea8",
    "sha224WithRSAEncryption": "407814ed7b28707c42f0bc6445c1ab0b3fc503eb6aec44ae1a084ea8",
    "sha256": "918a1d14de8c5fa363fb3137cf5014020646a1a2235f78ef3ed0d034c74f5761",
    "sha256WithRSAEncryption": "918a1d14de8c5fa363fb3137cf5014020646a1a2235f78ef3ed0d034c74f5761",
    "sha384": "e406e4967de02dfb3a3615edec1c6d6829763a2372035c44c5740146d6b1f781bbfa2465814890eae669d935baef6d9a",
    "sha384WithRSAEncryption": "e406e4967de02dfb3a3615edec1c6d6829763a2372035c44c5740146d6b1f781bbfa2465814890eae669d935baef6d9a",
    "sha512": "6123a636eaaa0de3ff0c09043f9a9d7601f264433c9b3deb5964c42c1892c62f4184271a15ccbd2c017a2e4b4bacab3badbf46393875804a1cf2371e43df643a",
    "sha512WithRSAEncryption": "6123a636eaaa0de3ff0c09043f9a9d7601f264433c9b3deb5964c42c1892c62f4184271a15ccbd2c017a2e4b4bacab3badbf46393875804a1cf2371e43df643a",
    "shaWithRSAEncryption": "9437bffbdb0b5f33b7500ccc112b81d56a02e404",
    "ssl2-md5": "4eb5472f4e5243fcd4a76533789e829a",
    "ssl3-md5": "4eb5472f4e5243fcd4a76533789e829a",
    "ssl3-sha1": "fce34051c34d4b81b85ddc4b543cde8007e284b3",
    "whirlpool": "6751161ba77dae2038f2410a8a51cc24f751dcf4eb78dc31090ece1cbd715ee068d1d7209f4801668cab0a9212f54197f862ee52e26817afc01c2002609e3698"
  },
  {
    "input": "",
    "DSA": "61e8916532503627f4024d13884640a46f1d61d4",
    "DSA-SHA": "61e8916532503627f4024d13884640a46f1d61d4",
    "DSA-SHA1": "61e8916532503627f4024d13884640a46f1d61d4",
    "DSA-SHA1-old": "61e8916532503627f4024d13884640a46f1d61d4",
    "RSA-MD4": "902d83cd1104de79a2399c9ea77d29e3",
    "RSA-MD5": "7d725ae9a8e569f49c56194226b64dee",
    "RSA-MDC2": "d97887260a2ac0f64ce35a4ab3220688",
    "RSA-RIPEMD160": "bfb3f4c6a831ed7752598a54731ba61edec5fc7d",
    "RSA-SHA": "7e6bf7365990bb140e09b2d93e75cd585c9ef13d",
    "RSA-SHA1": "61e8916532503627f4024d13884640a46f1d61d4",
    "RSA-SHA1-2": "61e8916532503627f4024d13884640a46f1d61d4",
    "RSA-SHA224": "672200d406abe214e2543d5458426a15ba6d5b7e85dc8fe924490120",
    "RSA-SHA256": "ef88b649d012178186dcf0244835232b5b7392e0c1f8f141f5107e9ead559e74",
    "RSA-SHA384": "67d81f06cd91955f8687438102af53150230545e6a9d048607fad016e02871dce328be37f14adebd872e0b85fbfec21c",
    "RSA-SHA512": "7b700b34117c7d5d54f678dcbab709b5cb0e43c46ec5909d237d76c915677f6398232a2786b9e2acb44bccf30902ebd21bf5ccb009325ffa2d9fe323af956dd3",
    "dsaEncryption": "61e8916532503627f4024d13884640a46f1d61d4",
    "dsaWithSHA": "61e8916532503627f4024d13884640a46f1d61d4",
    "dsaWithSHA1": "61e8916532503627f4024d13884640a46f1d61d4",
    "dss1": "61e8916532503627f4024d13884640a46f1d61d4",
    "ecdsa-with-SHA1": "61e8916532503627f4024d13884640a46f1d61d4",
    "md4": "902d83cd1104de79a2399c9ea77d29e3",
    "md4WithRSAEncryption": "902d83cd1104de79a2399c9ea77d29e3",
    "md5": "7d725ae9a8e569f49c56194226b64dee",
    "md5WithRSAEncryption": "7d725ae9a8e569f49c56194226b64dee",
    "mdc2": "d97887260a2ac0f64ce35a4ab3220688",
    "mdc2WithRSA": "d97887260a2ac0f64ce35a4ab3220688",
    "ripemd": "bfb3f4c6a831ed7752598a54731ba61edec5fc7d",
    "ripemd160": "bfb3f4c6a831ed7752598a54731ba61edec5fc7d",
    "ripemd160WithRSA": "bfb3f4c6a831ed7752598a54731ba61edec5fc7d",
    "rmd160": "bfb3f4c6a831ed7752598a54731ba61edec5fc7d",
    "sha": "7e6bf7365990bb140e09b2d93e75cd585c9ef13d",
    "sha1": "61e8916532503627f4024d13884640a46f1d61d4",
    "sha1WithRSAEncryption": "61e8916532503627f4024d13884640a46f1d61d4",
    "sha224": "672200d406abe214e2543d5458426a15ba6d5b7e85dc8fe924490120",
    "sha224WithRSAEncryption": "672200d406abe214e2543d5458426a15ba6d5b7e85dc8fe924490120",
    "sha256": "ef88b649d012178186dcf0244835232b5b7392e0c1f8f141f5107e9ead559e74",
    "sha256WithRSAEncryption": "ef88b649d012178186dcf0244835232b5b7392e0c1f8f141f5107e9ead559e74",
    "sha384": "67d81f06cd91955f8687438102af53150230545e6a9d048607fad016e02871dce328be37f14adebd872e0b85fbfec21c",
    "sha384WithRSAEncryption": "67d81f06cd91955f8687438102af53150230545e6a9d048607fad016e02871dce328be37f14adebd872e0b85fbfec21c",
    "sha512": "7b700b34117c7d5d54f678dcbab709b5cb0e43c46ec5909d237d76c915677f6398232a2786b9e2acb44bccf30902ebd21bf5ccb009325ffa2d9fe323af956dd3",
    "sha512WithRSAEncryption": "7b700b34117c7d5d54f678dcbab709b5cb0e43c46ec5909d237d76c915677f6398232a2786b9e2acb44bccf30902ebd21bf5ccb009325ffa2d9fe323af956dd3",
    "shaWithRSAEncryption": "7e6bf7365990bb140e09b2d93e75cd585c9ef13d",
    "ssl2-md5": "7d725ae9a8e569f49c56194226b64dee",
    "ssl3-md5": "7d725ae9a8e569f49c56194226b64dee",
    "ssl3-sha1": "61e8916532503627f4024d13884640a46f1d61d4",
    "whirlpool": "f1932d3afdd5b38e9d614ace1cb632f7e9655e295c3e81ea9337275d28a4f183686ee64d8b87ee1fe9d633046e4a54e5ad2356dfe9eb88080c3e53a9f761b92e"
  },
  {
    "input": "",
    "DSA": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "DSA-SHA": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "DSA-SHA1": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "DSA-SHA1-old": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "RSA-MD4": "2b1d66eed05bc6e40ffacf55691782cb",
    "RSA-MD5": "7396f5d4491e79ec1ac0ce7a105bb233",
    "RSA-MDC2": "feabf6a719c5e076c23112828b1003e1",
    "RSA-RIPEMD160": "3e1abf43d4864e9abb4debc1b74bc796b56e849d",
    "RSA-SHA": "b41016af67a72469aedf7586bbf519250c383306",
    "RSA-SHA1": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "RSA-SHA1-2": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "RSA-SHA224": "73c23aad3f52f8852b9a25e1d42f0283500a7db25564b9b2555bf5bf",
    "RSA-SHA256": "326f14fc54954b73d704935b213dc797311f7c8fcd88c238c8ab767286dc3f94",
    "RSA-SHA384": "49581d90135017813701167b388aa0fb42c7abc20dc6478a9a95227ce3d97cc2ab7669680f83757f689a8317c2b705da",
    "RSA-SHA512": "18bdb647bf2cb2b8817a896757820d7dcc18b0f4c1220b3820cae338fc974253d8f92dfbe3f8c2f20bd7298be0a055684a4af91adc02f080c78d376f7676b175",
    "dsaEncryption": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "dsaWithSHA": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "dsaWithSHA1": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "dss1": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "ecdsa-with-SHA1": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "md4": "2b1d66eed05bc6e40ffacf55691782cb",
    "md4WithRSAEncryption": "2b1d66eed05bc6e40ffacf55691782cb",
    "md5": "7396f5d4491e79ec1ac0ce7a105bb233",
    "md5WithRSAEncryption": "7396f5d4491e79ec1ac0ce7a105bb233",
    "mdc2": "feabf6a719c5e076c23112828b1003e1",
    "mdc2WithRSA": "feabf6a719c5e076c23112828b1003e1",
    "ripemd": "3e1abf43d4864e9abb4debc1b74bc796b56e849d",
    "ripemd160": "3e1abf43d4864e9abb4debc1b74bc796b56e849d",
    "ripemd160WithRSA": "3e1abf43d4864e9abb4debc1b74bc796b56e849d",
    "rmd160": "3e1abf43d4864e9abb4debc1b74bc796b56e849d",
    "sha": "b41016af67a72469aedf7586bbf519250c383306",
    "sha1": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "sha1WithRSAEncryption": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "sha224": "73c23aad3f52f8852b9a25e1d42f0283500a7db25564b9b2555bf5bf",
    "sha224WithRSAEncryption": "73c23aad3f52f8852b9a25e1d42f0283500a7db25564b9b2555bf5bf",
    "sha256": "326f14fc54954b73d704935b213dc797311f7c8fcd88c238c8ab767286dc3f94",
    "sha256WithRSAEncryption": "326f14fc54954b73d704935b213dc797311f7c8fcd88c238c8ab767286dc3f94",
    "sha384": "49581d90135017813701167b388aa0fb42c7abc20dc6478a9a95227ce3d97cc2ab7669680f83757f689a8317c2b705da",
    "sha384WithRSAEncryption": "49581d90135017813701167b388aa0fb42c7abc20dc6478a9a95227ce3d97cc2ab7669680f83757f689a8317c2b705da",
    "sha512": "18bdb647bf2cb2b8817a896757820d7dcc18b0f4c1220b3820cae338fc974253d8f92dfbe3f8c2f20bd7298be0a055684a4af91adc02f080c78d376f7676b175",
    "sha512WithRSAEncryption": "18bdb647bf2cb2b8817a896757820d7dcc18b0f4c1220b3820cae338fc974253d8f92dfbe3f8c2f20bd7298be0a055684a4af91adc02f080c78d376f7676b175",
    "shaWithRSAEncryption": "b41016af67a72469aedf7586bbf519250c383306",
    "ssl2-md5": "7396f5d4491e79ec1ac0ce7a105bb233",
    "ssl3-md5": "7396f5d4491e79ec1ac0ce7a105bb233",
    "ssl3-sha1": "f008d5d7853b6a17b7466cd9e18bd135e520faf4",
    "whirlpool": "0c4b3b4955549c8111198dffd123cf1eb3153e8ecc4c09f53279422dbbe5810a83955a9bd62fa4697c296f5a8f963b84370132cafee81ce40b96fef7344a7907"
  },
  {
    "input": "",
    "DSA": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "DSA-SHA": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "DSA-SHA1": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "DSA-SHA1-old": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "RSA-MD4": "646300522d65be1fe0f8017e5cb9b065",
    "RSA-MD5": "aa64644a4877da34e2197c5f2dc375c5",
    "RSA-MDC2": "5a1d0136c341b3a22c6bcf8a81e6bc6e",
    "RSA-RIPEMD160": "772ae5a943ad630f39a7ded192bd4ae3788b8643",
    "RSA-SHA": "1a6924f77b05fd91e0fa867b24f807ca24d9f9f9",
    "RSA-SHA1": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "RSA-SHA1-2": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "RSA-SHA224": "9fe52a882c3ebffe3eb2679dca6c6b5427fc54b595b05d6c27cafe5b",
    "RSA-SHA256": "0087e37129b9a2d58b0987a218a3c1be67cb1e08142cbcf889aa617ca3e4640d",
    "RSA-SHA384": "1baef479239218d46b622347b3f9b8e2513df79af4794230934f5f6f3f515c108b060176566c38c913f97f1ef8fa96b1",
    "RSA-SHA512": "3b2e6dedcb51a29fff2bfaa8067002e407aaf8409b0f1db895de04b9f99135d02c6c1585bb95adcdc580c5246e11a19d96f4eaf6690d7395ecc183a97e5567b9",
    "dsaEncryption": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "dsaWithSHA": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "dsaWithSHA1": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "dss1": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "ecdsa-with-SHA1": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "md4": "646300522d65be1fe0f8017e5cb9b065",
    "md4WithRSAEncryption": "646300522d65be1fe0f8017e5cb9b065",
    "md5": "aa64644a4877da34e2197c5f2dc375c5",
    "md5WithRSAEncryption": "aa64644a4877da34e2197c5f2dc375c5",
    "mdc2": "5a1d0136c341b3a22c6bcf8a81e6bc6e",
    "mdc2WithRSA": "5a1d0136c341b3a22c6bcf8a81e6bc6e",
    "ripemd": "772ae5a943ad630f39a7ded192bd4ae3788b8643",
    "ripemd160": "772ae5a943ad630f39a7ded192bd4ae3788b8643",
    "ripemd160WithRSA": "772ae5a943ad630f39a7ded192bd4ae3788b8643",
    "rmd160": "772ae5a943ad630f39a7ded192bd4ae3788b8643",
    "sha": "1a6924f77b05fd91e0fa867b24f807ca24d9f9f9",
    "sha1": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "sha1WithRSAEncryption": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "sha224": "9fe52a882c3ebffe3eb2679dca6c6b5427fc54b595b05d6c27cafe5b",
    "sha224WithRSAEncryption": "9fe52a882c3ebffe3eb2679dca6c6b5427fc54b595b05d6c27cafe5b",
    "sha256": "0087e37129b9a2d58b0987a218a3c1be67cb1e08142cbcf889aa617ca3e4640d",
    "sha256WithRSAEncryption": "0087e37129b9a2d58b0987a218a3c1be67cb1e08142cbcf889aa617ca3e4640d",
    "sha384": "1baef479239218d46b622347b3f9b8e2513df79af4794230934f5f6f3f515c108b060176566c38c913f97f1ef8fa96b1",
    "sha384WithRSAEncryption": "1baef479239218d46b622347b3f9b8e2513df79af4794230934f5f6f3f515c108b060176566c38c913f97f1ef8fa96b1",
    "sha512": "3b2e6dedcb51a29fff2bfaa8067002e407aaf8409b0f1db895de04b9f99135d02c6c1585bb95adcdc580c5246e11a19d96f4eaf6690d7395ecc183a97e5567b9",
    "sha512WithRSAEncryption": "3b2e6dedcb51a29fff2bfaa8067002e407aaf8409b0f1db895de04b9f99135d02c6c1585bb95adcdc580c5246e11a19d96f4eaf6690d7395ecc183a97e5567b9",
    "shaWithRSAEncryption": "1a6924f77b05fd91e0fa867b24f807ca24d9f9f9",
    "ssl2-md5": "aa64644a4877da34e2197c5f2dc375c5",
    "ssl3-md5": "aa64644a4877da34e2197c5f2dc375c5",
    "ssl3-sha1": "bd8d2e873cf659b5c77aac1616827ef8a3b1a3b3",
    "whirlpool": "bbf55681639652c32a1b95266f8c6412726502948f78d45c5bca282509d7f3bfb566c5914007fb49eb92d17a4e7c4f62922152860476df635d54fb9ca5530a6b"
  },
  {
    "input": "",
    "DSA": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "DSA-SHA": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "DSA-SHA1": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "DSA-SHA1-old": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "RSA-MD4": "b318cc590bf331654f863601487c8071",
    "RSA-MD5": "2165718fc24bf21f1c4e0623c8e8d811",
    "RSA-MDC2": "ff3f4fa633d318e34624b34bd0a2e170",
    "RSA-RIPEMD160": "353248e07ae64f251202faa6ed077336f2e80305",
    "RSA-SHA": "4d265905a6dcbb0381e82050b3d6d2084fb78cad",
    "RSA-SHA1": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "RSA-SHA1-2": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "RSA-SHA224": "96b6dcbcfffaa3243d73174c83951c43ba1620723268916ba964064a",
    "RSA-SHA256": "93294033c9de9361a3c6cc0df539e2e459f6d2babbbc0623859e18af0d0ccf4e",
    "RSA-SHA384": "98dbc59715eb741d6ee1c30e7fadb581dc43b78619f9e70639ae56b23a9e0dfcaaac86bbe665b8388932e7b4ae43a58a",
    "RSA-SHA512": "fb111732088f48dbd779104f1de037bdc5ce349fbbbbfe2b79965e545ab968b347f6403492eb5adfcc347a283c9a58795ee6d0e758e8014a9702c3f1d58910fe",
    "dsaEncryption": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "dsaWithSHA": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "dsaWithSHA1": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "dss1": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "ecdsa-with-SHA1": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "md4": "b318cc590bf331654f863601487c8071",
    "md4WithRSAEncryption": "b318cc590bf331654f863601487c8071",
    "md5": "2165718fc24bf21f1c4e0623c8e8d811",
    "md5WithRSAEncryption": "2165718fc24bf21f1c4e0623c8e8d811",
    "mdc2": "ff3f4fa633d318e34624b34bd0a2e170",
    "mdc2WithRSA": "ff3f4fa633d318e34624b34bd0a2e170",
    "ripemd": "353248e07ae64f251202faa6ed077336f2e80305",
    "ripemd160": "353248e07ae64f251202faa6ed077336f2e80305",
    "ripemd160WithRSA": "353248e07ae64f251202faa6ed077336f2e80305",
    "rmd160": "353248e07ae64f251202faa6ed077336f2e80305",
    "sha": "4d265905a6dcbb0381e82050b3d6d2084fb78cad",
    "sha1": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "sha1WithRSAEncryption": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "sha224": "96b6dcbcfffaa3243d73174c83951c43ba1620723268916ba964064a",
    "sha224WithRSAEncryption": "96b6dcbcfffaa3243d73174c83951c43ba1620723268916ba964064a",
    "sha256": "93294033c9de9361a3c6cc0df539e2e459f6d2babbbc0623859e18af0d0ccf4e",
    "sha256WithRSAEncryption": "93294033c9de9361a3c6cc0df539e2e459f6d2babbbc0623859e18af0d0ccf4e",
    "sha384": "98dbc59715eb741d6ee1c30e7fadb581dc43b78619f9e70639ae56b23a9e0dfcaaac86bbe665b8388932e7b4ae43a58a",
    "sha384WithRSAEncryption": "98dbc59715eb741d6ee1c30e7fadb581dc43b78619f9e70639ae56b23a9e0dfcaaac86bbe665b8388932e7b4ae43a58a",
    "sha512": "fb111732088f48dbd779104f1de037bdc5ce349fbbbbfe2b79965e545ab968b347f6403492eb5adfcc347a283c9a58795ee6d0e758e8014a9702c3f1d58910fe",
    "sha512WithRSAEncryption": "fb111732088f48dbd779104f1de037bdc5ce349fbbbbfe2b79965e545ab968b347f6403492eb5adfcc347a283c9a58795ee6d0e758e8014a9702c3f1d58910fe",
    "shaWithRSAEncryption": "4d265905a6dcbb0381e82050b3d6d2084fb78cad",
    "ssl2-md5": "2165718fc24bf21f1c4e0623c8e8d811",
    "ssl3-md5": "2165718fc24bf21f1c4e0623c8e8d811",
    "ssl3-sha1": "b25a04dd425302ed211a1c2412d2410fa10c63b6",
    "whirlpool": "cb0e8e2d3e9f01df1b8308fb9691b64bc10f216a57a9adc1c9989efe5472d3a3f141c589592c8b4ba1f1059e3947359ca0237285518b154f48406b41742d43d2"
  },
  {
    "input": "",
    "DSA": "a404e21588123e0893718b4b44e91414a785b91f",
    "DSA-SHA": "a404e21588123e0893718b4b44e91414a785b91f",
    "DSA-SHA1": "a404e21588123e0893718b4b44e91414a785b91f",
    "DSA-SHA1-old": "a404e21588123e0893718b4b44e91414a785b91f",
    "RSA-MD4": "b35ad3b4139e965d61a9cbf0a396ae34",
    "RSA-MD5": "e1f45852024724f00ced7935e297983a",
    "RSA-MDC2": "58ceb1e0612f8e326c59fbe712289c34",
    "RSA-RIPEMD160": "da645019e2ca77d29eb1fe5aeaea55c6a8117fe9",
    "RSA-SHA": "dd2e300be6148c6a69b1635d82a116c4f84562ff",
    "RSA-SHA1": "a404e21588123e0893718b4b44e91414a785b91f",
    "RSA-SHA1-2": "a404e21588123e0893718b4b44e91414a785b91f",
    "RSA-SHA224": "c1416e854b41fb4bfb58428e05b2d17f2807c3af1e6054205544446a",
    "RSA-SHA256": "49640215294d9263bc464538c3c29e42edea637d1427c2f04ebcd828d6fcb480",
    "RSA-SHA384": "6194c3b9a2fc464a4e26fd3bd7c4ffbcfe8d10919bb5c12d656dee694875f55bc7185d315379fff03547ce0f1b41bc47",
    "RSA-SHA512": "ffa4fc1884d61bb097c2481cbfa1e247498627458b792c0abb37d6923345bbcaf51c9720bd4e81109d54e86f822d6cb8e3786876868a1097dd18a34b1f129892",
    "dsaEncryption": "a404e21588123e0893718b4b44e91414a785b91f",
    "dsaWithSHA": "a404e21588123e0893718b4b44e91414a785b91f",
    "dsaWithSHA1": "a404e21588123e0893718b4b44e91414a785b91f",
    "dss1": "a404e21588123e0893718b4b44e91414a785b91f",
    "ecdsa-with-SHA1": "a404e21588123e0893718b4b44e91414a785b91f",
    "md4": "b35ad3b4139e965d61a9cbf0a396ae34",
    "md4WithRSAEncryption": "b35ad3b4139e965d61a9cbf0a396ae34",
    "md5": "e1f45852024724f00ced7935e297983a",
    "md5WithRSAEncryption": "e1f45852024724f00ced7935e297983a",
    "mdc2": "58ceb1e0612f8e326c59fbe712289c34",
    "mdc2WithRSA": "58ceb1e0612f8e326c59fbe712289c34",
    "ripemd": "da645019e2ca77d29eb1fe5aeaea55c6a8117fe9",
    "ripemd160": "da645019e2ca77d29eb1fe5aeaea55c6a8117fe9",
    "ripemd160WithRSA": "da645019e2ca77d29eb1fe5aeaea55c6a8117fe9",
    "rmd160": "da645019e2ca77d29eb1fe5aeaea55c6a8117fe9",
    "sha": "dd2e300be6148c6a69b1635d82a116c4f84562ff",
    "sha1": "a404e21588123e0893718b4b44e91414a785b91f",
    "sha1WithRSAEncryption": "a404e21588123e0893718b4b44e91414a785b91f",
    "sha224": "c1416e854b41fb4bfb58428e05b2d17f2807c3af1e6054205544446a",
    "sha224WithRSAEncryption": "c1416e854b41fb4bfb58428e05b2d17f2807c3af1e6054205544446a",
    "sha256": "49640215294d9263bc464538c3c29e42edea637d1427c2f04ebcd828d6fcb480",
    "sha256WithRSAEncryption": "49640215294d9263bc464538c3c29e42edea637d1427c2f04ebcd828d6fcb480",
    "sha384": "6194c3b9a2fc464a4e26fd3bd7c4ffbcfe8d10919bb5c12d656dee694875f55bc7185d315379fff03547ce0f1b41bc47",
    "sha384WithRSAEncryption": "6194c3b9a2fc464a4e26fd3bd7c4ffbcfe8d10919bb5c12d656dee694875f55bc7185d315379fff03547ce0f1b41bc47",
    "sha512": "ffa4fc1884d61bb097c2481cbfa1e247498627458b792c0abb37d6923345bbcaf51c9720bd4e81109d54e86f822d6cb8e3786876868a1097dd18a34b1f129892",
    "sha512WithRSAEncryption": "ffa4fc1884d61bb097c2481cbfa1e247498627458b792c0abb37d6923345bbcaf51c9720bd4e81109d54e86f822d6cb8e3786876868a1097dd18a34b1f129892",
    "shaWithRSAEncryption": "dd2e300be6148c6a69b1635d82a116c4f84562ff",
    "ssl2-md5": "e1f45852024724f00ced7935e297983a",
    "ssl3-md5": "e1f45852024724f00ced7935e297983a",
    "ssl3-sha1": "a404e21588123e0893718b4b44e91414a785b91f",
    "whirlpool": "83ba4e16be2f98d7952c47f486c1f7d0e6ed567f359d6899ff9a850624c18b3576b6ed9f4f1618ab8bf1dd75acaf22e484a68886203e397cade9382fda4650a0"
  },
  {
    "input": "",
    "DSA": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "DSA-SHA": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "DSA-SHA1": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "DSA-SHA1-old": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "RSA-MD4": "4c1006d8e83a3f69846ceb49f7ea37be",
    "RSA-MD5": "deac06cde1f6b18a53a2cf0b03998da2",
    "RSA-MDC2": "c8b71a4aafcc799ea87dfe476489094d",
    "RSA-RIPEMD160": "5ecdd8e5bdec974e050202e0d0d3d46dbf43188b",
    "RSA-SHA": "23890d5af03b95b5441f86f466dadb37b40734e4",
    "RSA-SHA1": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "RSA-SHA1-2": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "RSA-SHA224": "bcd73ec191bb23ffc5d784fa2fa6fd008a60ce76da9da663d813d31d",
    "RSA-SHA256": "ce5cfa5b3b0485805cf5bcc8c24594a6b6fec9249698d317ce20bc84d857eafe",
    "RSA-SHA384": "e2f7ac96a493ab7724dbd2a9663228e3e46409a764447f972e39fe65194b2fc045ec19408476f9b7345a185a671c18cd",
    "RSA-SHA512": "a2e8bb021193a23df9f3a1778735827121fdc94f80a9b603f650465c8f62feac24044b73cbbfbcc2aa351b45381eba3ac8a878f284fc76a5d8d25ac4934b1dea",
    "dsaEncryption": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "dsaWithSHA": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "dsaWithSHA1": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "dss1": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "ecdsa-with-SHA1": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "md4": "4c1006d8e83a3f69846ceb49f7ea37be",
    "md4WithRSAEncryption": "4c1006d8e83a3f69846ceb49f7ea37be",
    "md5": "deac06cde1f6b18a53a2cf0b03998da2",
    "md5WithRSAEncryption": "deac06cde1f6b18a53a2cf0b03998da2",
    "mdc2": "c8b71a4aafcc799ea87dfe476489094d",
    "mdc2WithRSA": "c8b71a4aafcc799ea87dfe476489094d",
    "ripemd": "5ecdd8e5bdec974e050202e0d0d3d46dbf43188b",
    "ripemd160": "5ecdd8e5bdec974e050202e0d0d3d46dbf43188b",
    "ripemd160WithRSA": "5ecdd8e5bdec974e050202e0d0d3d46dbf43188b",
    "rmd160": "5ecdd8e5bdec974e050202e0d0d3d46dbf43188b",
    "sha": "23890d5af03b95b5441f86f466dadb37b40734e4",
    "sha1": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "sha1WithRSAEncryption": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "sha224": "bcd73ec191bb23ffc5d784fa2fa6fd008a60ce76da9da663d813d31d",
    "sha224WithRSAEncryption": "bcd73ec191bb23ffc5d784fa2fa6fd008a60ce76da9da663d813d31d",
    "sha256": "ce5cfa5b3b0485805cf5bcc8c24594a6b6fec9249698d317ce20bc84d857eafe",
    "sha256WithRSAEncryption": "ce5cfa5b3b0485805cf5bcc8c24594a6b6fec9249698d317ce20bc84d857eafe",
    "sha384": "e2f7ac96a493ab7724dbd2a9663228e3e46409a764447f972e39fe65194b2fc045ec19408476f9b7345a185a671c18cd",
    "sha384WithRSAEncryption": "e2f7ac96a493ab7724dbd2a9663228e3e46409a764447f972e39fe65194b2fc045ec19408476f9b7345a185a671c18cd",
    "sha512": "a2e8bb021193a23df9f3a1778735827121fdc94f80a9b603f650465c8f62feac24044b73cbbfbcc2aa351b45381eba3ac8a878f284fc76a5d8d25ac4934b1dea",
    "sha512WithRSAEncryption": "a2e8bb021193a23df9f3a1778735827121fdc94f80a9b603f650465c8f62feac24044b73cbbfbcc2aa351b45381eba3ac8a878f284fc76a5d8d25ac4934b1dea",
    "shaWithRSAEncryption": "23890d5af03b95b5441f86f466dadb37b40734e4",
    "ssl2-md5": "deac06cde1f6b18a53a2cf0b03998da2",
    "ssl3-md5": "deac06cde1f6b18a53a2cf0b03998da2",
    "ssl3-sha1": "a1e13bc55bf6dad83cf3aabda3287ad68681ea64",
    "whirlpool": "226e877a7a45261746d9650f86e7441556afa97e3bc80d0ebece69b65775de6983031dd1cdd2d4a3bb66b570e315d28fac5654ea909591308685d63951c68910"
  },
  {
    "input": "",
    "DSA": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "DSA-SHA": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "DSA-SHA1": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "DSA-SHA1-old": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "RSA-MD4": "5367260e23568b1f8fb40a6f382e58fe",
    "RSA-MD5": "8371f0970efbc6099c50afbbd4f0e477",
    "RSA-MDC2": "6e0a57f6ea16a91ead4103b2855ead96",
    "RSA-RIPEMD160": "da680c974e0bbdbfc0c84bd41ce9b16279c82137",
    "RSA-SHA": "778750545a291a890f962682ac5faefcb29ba2f4",
    "RSA-SHA1": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "RSA-SHA1-2": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "RSA-SHA224": "df927cad220400bb09773ce003cd72a2aaa7c139dffa1b3d66ad12e9",
    "RSA-SHA256": "c9ac43870e02c7b36bb1e7ba3ce2e234507c0076f8a77494f268777edf5ebffc",
    "RSA-SHA384": "0765ddba824c8fcbf073286ac775a08761a1f52bd153955a66bc46eb9ed6ddce57060dc36f54f146812eaba10a0f1ab4",
    "RSA-SHA512": "8223437b80c6b88e5397f138b9831fb3c06db9ea99ac4cc9e49e082b7b648c58a4dab10d089530d08d9afedd0a7facb27331f2ef51879e7c04758f30a1b7e968",
    "dsaEncryption": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "dsaWithSHA": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "dsaWithSHA1": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "dss1": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "ecdsa-with-SHA1": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "md4": "5367260e23568b1f8fb40a6f382e58fe",
    "md4WithRSAEncryption": "5367260e23568b1f8fb40a6f382e58fe",
    "md5": "8371f0970efbc6099c50afbbd4f0e477",
    "md5WithRSAEncryption": "8371f0970efbc6099c50afbbd4f0e477",
    "mdc2": "6e0a57f6ea16a91ead4103b2855ead96",
    "mdc2WithRSA": "6e0a57f6ea16a91ead4103b2855ead96",
    "ripemd": "da680c974e0bbdbfc0c84bd41ce9b16279c82137",
    "ripemd160": "da680c974e0bbdbfc0c84bd41ce9b16279c82137",
    "ripemd160WithRSA": "da680c974e0bbdbfc0c84bd41ce9b16279c82137",
    "rmd160": "da680c974e0bbdbfc0c84bd41ce9b16279c82137",
    "sha": "778750545a291a890f962682ac5faefcb29ba2f4",
    "sha1": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "sha1WithRSAEncryption": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "sha224": "df927cad220400bb09773ce003cd72a2aaa7c139dffa1b3d66ad12e9",
    "sha224WithRSAEncryption": "df927cad220400bb09773ce003cd72a2aaa7c139dffa1b3d66ad12e9",
    "sha256": "c9ac43870e02c7b36bb1e7ba3ce2e234507c0076f8a77494f268777edf5ebffc",
    "sha256WithRSAEncryption": "c9ac43870e02c7b36bb1e7ba3ce2e234507c0076f8a77494f268777edf5ebffc",
    "sha384": "0765ddba824c8fcbf073286ac775a08761a1f52bd153955a66bc46eb9ed6ddce57060dc36f54f146812eaba10a0f1ab4",
    "sha384WithRSAEncryption": "0765ddba824c8fcbf073286ac775a08761a1f52bd153955a66bc46eb9ed6ddce57060dc36f54f146812eaba10a0f1ab4",
    "sha512": "8223437b80c6b88e5397f138b9831fb3c06db9ea99ac4cc9e49e082b7b648c58a4dab10d089530d08d9afedd0a7facb27331f2ef51879e7c04758f30a1b7e968",
    "sha512WithRSAEncryption": "8223437b80c6b88e5397f138b9831fb3c06db9ea99ac4cc9e49e082b7b648c58a4dab10d089530d08d9afedd0a7facb27331f2ef51879e7c04758f30a1b7e968",
    "shaWithRSAEncryption": "778750545a291a890f962682ac5faefcb29ba2f4",
    "ssl2-md5": "8371f0970efbc6099c50afbbd4f0e477",
    "ssl3-md5": "8371f0970efbc6099c50afbbd4f0e477",
    "ssl3-sha1": "d5fd35ffabed6733c92365929df0fb4cae864d15",
    "whirlpool": "17307f31289dcc757292dc2c9f389b3055f0b9c31dcda5a1957eba23fa4bc405dcc57a3569cae0ba52ab15d23cb13b86b4981827aacd918999b68fcab4ef2be1"
  },
  {
    "input": "",
    "DSA": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "DSA-SHA": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "DSA-SHA1": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "DSA-SHA1-old": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "RSA-MD4": "faeec0007a5d869c8d89993bd90314db",
    "RSA-MD5": "985d909280bc20607f4cb4941ae535f2",
    "RSA-MDC2": "276277d8aafb5697b182431111493bc3",
    "RSA-RIPEMD160": "050a92e0d6488a205e1c51115d3a3d237a0e6a55",
    "RSA-SHA": "6409b2ceb7a288470ceb8900c062e9df00c9a291",
    "RSA-SHA1": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "RSA-SHA1-2": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "RSA-SHA224": "0b93fdd9f50a13b6a63db259a64e76dad2e1c128884748818c44f401",
    "RSA-SHA256": "30eb195e3aad4c288af76c66e26c6096f5f7de1b56b43d638ab7119d73cfd214",
    "RSA-SHA384": "2bdd564652442cacde07dd7548791924f0898ae69eaeb4aaee709b5ce7143ca500952e561fdf28e9841f4ec3ccc86e65",
    "RSA-SHA512": "5969edd5e6f7413f921bedb46e63077e0456fdbebea85324f7dbc40b21efda8e05de1c9fe32dd42d777e800ca2b502db8ff5d8117b07cca4a431821456309145",
    "dsaEncryption": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "dsaWithSHA": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "dsaWithSHA1": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "dss1": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "ecdsa-with-SHA1": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "md4": "faeec0007a5d869c8d89993bd90314db",
    "md4WithRSAEncryption": "faeec0007a5d869c8d89993bd90314db",
    "md5": "985d909280bc20607f4cb4941ae535f2",
    "md5WithRSAEncryption": "985d909280bc20607f4cb4941ae535f2",
    "mdc2": "276277d8aafb5697b182431111493bc3",
    "mdc2WithRSA": "276277d8aafb5697b182431111493bc3",
    "ripemd": "050a92e0d6488a205e1c51115d3a3d237a0e6a55",
    "ripemd160": "050a92e0d6488a205e1c51115d3a3d237a0e6a55",
    "ripemd160WithRSA": "050a92e0d6488a205e1c51115d3a3d237a0e6a55",
    "rmd160": "050a92e0d6488a205e1c51115d3a3d237a0e6a55",
    "sha": "6409b2ceb7a288470ceb8900c062e9df00c9a291",
    "sha1": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "sha1WithRSAEncryption": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "sha224": "0b93fdd9f50a13b6a63db259a64e76dad2e1c128884748818c44f401",
    "sha224WithRSAEncryption": "0b93fdd9f50a13b6a63db259a64e76dad2e1c128884748818c44f401",
    "sha256": "30eb195e3aad4c288af76c66e26c6096f5f7de1b56b43d638ab7119d73cfd214",
    "sha256WithRSAEncryption": "30eb195e3aad4c288af76c66e26c6096f5f7de1b56b43d638ab7119d73cfd214",
    "sha384": "2bdd564652442cacde07dd7548791924f0898ae69eaeb4aaee709b5ce7143ca500952e561fdf28e9841f4ec3ccc86e65",
    "sha384WithRSAEncryption": "2bdd564652442cacde07dd7548791924f0898ae69eaeb4aaee709b5ce7143ca500952e561fdf28e9841f4ec3ccc86e65",
    "sha512": "5969edd5e6f7413f921bedb46e63077e0456fdbebea85324f7dbc40b21efda8e05de1c9fe32dd42d777e800ca2b502db8ff5d8117b07cca4a431821456309145",
    "sha512WithRSAEncryption": "5969edd5e6f7413f921bedb46e63077e0456fdbebea85324f7dbc40b21efda8e05de1c9fe32dd42d777e800ca2b502db8ff5d8117b07cca4a431821456309145",
    "shaWithRSAEncryption": "6409b2ceb7a288470ceb8900c062e9df00c9a291",
    "ssl2-md5": "985d909280bc20607f4cb4941ae535f2",
    "ssl3-md5": "985d909280bc20607f4cb4941ae535f2",
    "ssl3-sha1": "c12e9c280ee9c079e0506ff89f9b20536e0a83ef",
    "whirlpool": "b437924aadf4ea10bb9700bfbc13a01d2ff589ce92c0a2b93eac3e5208e2467bbad82abf7f557a290b7476d47e50dcc5494630500c1458f5f7ac26cb238e3967"
  },
  {
    "input": "",
    "DSA": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "DSA-SHA": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "DSA-SHA1": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "DSA-SHA1-old": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "RSA-MD4": "ee371b11a15e65fa954c04d52fc7bbb3",
    "RSA-MD5": "abcdd18a791546544b52c0587dbd6107",
    "RSA-MDC2": "9e55a6b73ef57c2c3dd54f0c2f78ac94",
    "RSA-RIPEMD160": "719944eb4cb28b2ff52a458570874d9285519307",
    "RSA-SHA": "2b8504f3c11c4bc4e2b58423a1c458586bc15d91",
    "RSA-SHA1": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "RSA-SHA1-2": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "RSA-SHA224": "bf740e5c90b4ae7347f37731e2d6b31ff7deb4f400da5a5afce7bd99",
    "RSA-SHA256": "338225e3b94025d2b327d72ed3d763a66856e1d1ebcb632bc4d8752000ad9966",
    "RSA-SHA384": "f43e6d9cbaad24e7325edc031471e7010f561d2abcdf0b7a450cb2ade97f58e9f4c95b84e0f346ed6f1c31a40f64a9f6",
    "RSA-SHA512": "7de4de5d39e0f1efc62d9f5343f1b77657281adb46fc189813196eed279ab0cee8a7fa2cb58ebd31f906c11f82418c83f374055cb745c715c5532ac0f62a6899",
    "dsaEncryption": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "dsaWithSHA": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "dsaWithSHA1": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "dss1": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "ecdsa-with-SHA1": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "md4": "ee371b11a15e65fa954c04d52fc7bbb3",
    "md4WithRSAEncryption": "ee371b11a15e65fa954c04d52fc7bbb3",
    "md5": "abcdd18a791546544b52c0587dbd6107",
    "md5WithRSAEncryption": "abcdd18a791546544b52c0587dbd6107",
    "mdc2": "9e55a6b73ef57c2c3dd54f0c2f78ac94",
    "mdc2WithRSA": "9e55a6b73ef57c2c3dd54f0c2f78ac94",
    "ripemd": "719944eb4cb28b2ff52a458570874d9285519307",
    "ripemd160": "719944eb4cb28b2ff52a458570874d9285519307",
    "ripemd160WithRSA": "719944eb4cb28b2ff52a458570874d9285519307",
    "rmd160": "719944eb4cb28b2ff52a458570874d9285519307",
    "sha": "2b8504f3c11c4bc4e2b58423a1c458586bc15d91",
    "sha1": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "sha1WithRSAEncryption": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "sha224": "bf740e5c90b4ae7347f37731e2d6b31ff7deb4f400da5a5afce7bd99",
    "sha224WithRSAEncryption": "bf740e5c90b4ae7347f37731e2d6b31ff7deb4f400da5a5afce7bd99",
    "sha256": "338225e3b94025d2b327d72ed3d763a66856e1d1ebcb632bc4d8752000ad9966",
    "sha256WithRSAEncryption": "338225e3b94025d2b327d72ed3d763a66856e1d1ebcb632bc4d8752000ad9966",
    "sha384": "f43e6d9cbaad24e7325edc031471e7010f561d2abcdf0b7a450cb2ade97f58e9f4c95b84e0f346ed6f1c31a40f64a9f6",
    "sha384WithRSAEncryption": "f43e6d9cbaad24e7325edc031471e7010f561d2abcdf0b7a450cb2ade97f58e9f4c95b84e0f346ed6f1c31a40f64a9f6",
    "sha512": "7de4de5d39e0f1efc62d9f5343f1b77657281adb46fc189813196eed279ab0cee8a7fa2cb58ebd31f906c11f82418c83f374055cb745c715c5532ac0f62a6899",
    "sha512WithRSAEncryption": "7de4de5d39e0f1efc62d9f5343f1b77657281adb46fc189813196eed279ab0cee8a7fa2cb58ebd31f906c11f82418c83f374055cb745c715c5532ac0f62a6899",
    "shaWithRSAEncryption": "2b8504f3c11c4bc4e2b58423a1c458586bc15d91",
    "ssl2-md5": "abcdd18a791546544b52c0587dbd6107",
    "ssl3-md5": "abcdd18a791546544b52c0587dbd6107",
    "ssl3-sha1": "e22769dc00748a9bbd6c05bbc8e81f2cd1dc4e2d",
    "whirlpool": "318397667fa60031670fda823ca44d72b3f855b10c099495bb2362daebb24472948ad0be9f5961b5a444b55a67afbd08759a0965f25f7c9f0bdf180d69ecc6b1"
  },
  {
    "input": "",
    "DSA": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "DSA-SHA": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "DSA-SHA1": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "DSA-SHA1-old": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "RSA-MD4": "01290c5e753bc3cf37856977e252440a",
    "RSA-MD5": "23e8b5a657c962a3e77979859ae1400e",
    "RSA-MDC2": "5808e10f3baf76a813e602f8ab4e2e39",
    "RSA-RIPEMD160": "9a3ee1489539e745759f36e8e538190ca521970e",
    "RSA-SHA": "1ef9b27cb24a473e6ba223c79d7eb2181e82de62",
    "RSA-SHA1": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "RSA-SHA1-2": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "RSA-SHA224": "056719242001058ac3f5a383be2b69accf06a822ae7f498dcefd883d",
    "RSA-SHA256": "69b6cc0729b2d2877d46a08f3c251ae18f043949a33797c3027668b23c969d68",
    "RSA-SHA384": "066aea5a8e7a335908571b21f2c22779a6db5e96c8ecc9fedb504bcfe7cbbe22de1819a58b51544ff6674ad5d518466b",
    "RSA-SHA512": "a10cacb49c9425b942e716f4640fca68421eafb13aa318b0c80e19b5b30f82b3395f28ce18d7f5865d16a3f61934918d742b4ffda2f34a2999298078e058bb47",
    "dsaEncryption": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "dsaWithSHA": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "dsaWithSHA1": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "dss1": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "ecdsa-with-SHA1": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "md4": "01290c5e753bc3cf37856977e252440a",
    "md4WithRSAEncryption": "01290c5e753bc3cf37856977e252440a",
    "md5": "23e8b5a657c962a3e77979859ae1400e",
    "md5WithRSAEncryption": "23e8b5a657c962a3e77979859ae1400e",
    "mdc2": "5808e10f3baf76a813e602f8ab4e2e39",
    "mdc2WithRSA": "5808e10f3baf76a813e602f8ab4e2e39",
    "ripemd": "9a3ee1489539e745759f36e8e538190ca521970e",
    "ripemd160": "9a3ee1489539e745759f36e8e538190ca521970e",
    "ripemd160WithRSA": "9a3ee1489539e745759f36e8e538190ca521970e",
    "rmd160": "9a3ee1489539e745759f36e8e538190ca521970e",
    "sha": "1ef9b27cb24a473e6ba223c79d7eb2181e82de62",
    "sha1": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "sha1WithRSAEncryption": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "sha224": "056719242001058ac3f5a383be2b69accf06a822ae7f498dcefd883d",
    "sha224WithRSAEncryption": "056719242001058ac3f5a383be2b69accf06a822ae7f498dcefd883d",
    "sha256": "69b6cc0729b2d2877d46a08f3c251ae18f043949a33797c3027668b23c969d68",
    "sha256WithRSAEncryption": "69b6cc0729b2d2877d46a08f3c251ae18f043949a33797c3027668b23c969d68",
    "sha384": "066aea5a8e7a335908571b21f2c22779a6db5e96c8ecc9fedb504bcfe7cbbe22de1819a58b51544ff6674ad5d518466b",
    "sha384WithRSAEncryption": "066aea5a8e7a335908571b21f2c22779a6db5e96c8ecc9fedb504bcfe7cbbe22de1819a58b51544ff6674ad5d518466b",
    "sha512": "a10cacb49c9425b942e716f4640fca68421eafb13aa318b0c80e19b5b30f82b3395f28ce18d7f5865d16a3f61934918d742b4ffda2f34a2999298078e058bb47",
    "sha512WithRSAEncryption": "a10cacb49c9425b942e716f4640fca68421eafb13aa318b0c80e19b5b30f82b3395f28ce18d7f5865d16a3f61934918d742b4ffda2f34a2999298078e058bb47",
    "shaWithRSAEncryption": "1ef9b27cb24a473e6ba223c79d7eb2181e82de62",
    "ssl2-md5": "23e8b5a657c962a3e77979859ae1400e",
    "ssl3-md5": "23e8b5a657c962a3e77979859ae1400e",
    "ssl3-sha1": "f29835a93475740e888e8c14318f3ca45a3c8606",
    "whirlpool": "0ed01376f6e9d35c944475650de6e4f2de792f236fdd03ed52ec68d07506aaa3dcd9a969a2d060d0026c04b38e13ba3857fc6021ef0c1443a5da350a2163af4f"
  },
  {
    "input": "",
    "DSA": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "DSA-SHA": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "DSA-SHA1": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "DSA-SHA1-old": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "RSA-MD4": "24b88bb08f8d3bd3258ed26d9646ad1d",
    "RSA-MD5": "cc4fab29cc180ffa888be396ce6aa6f5",
    "RSA-MDC2": "a57a80d979e1a3f26c16fb14548c5e97",
    "RSA-RIPEMD160": "16cf3ebedba4fc5d1b438f637e82d8a0b6efc576",
    "RSA-SHA": "334b16d6cb72e71d8e5e3e7515954a8452d1fa86",
    "RSA-SHA1": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "RSA-SHA1-2": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "RSA-SHA224": "0e857791f3be20b2cd79952588ef9ec13fee68e4d765890bf3b76849",
    "RSA-SHA256": "3d35c10650a2da8413a2a11b8e7fb891af5da3a9763584caa6cd71bbe68de6ba",
    "RSA-SHA384": "0a7583f394bb8ffb43f21c739da337b46cd3907106596fc2f5774f4ee70b58c0a1f7ef979b89da7c65867d6ec6a33110",
    "RSA-SHA512": "b39ffcd51b0fdf9095ec7e38467a4aa87917fdda9acac5a95217ec3f378d4a6c5c5e2b643ca97151a0ab370dcc1af9f2e84cbf1c2535778ffbe45fc320b787d0",
    "dsaEncryption": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "dsaWithSHA": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "dsaWithSHA1": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "dss1": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "ecdsa-with-SHA1": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "md4": "24b88bb08f8d3bd3258ed26d9646ad1d",
    "md4WithRSAEncryption": "24b88bb08f8d3bd3258ed26d9646ad1d",
    "md5": "cc4fab29cc180ffa888be396ce6aa6f5",
    "md5WithRSAEncryption": "cc4fab29cc180ffa888be396ce6aa6f5",
    "mdc2": "a57a80d979e1a3f26c16fb14548c5e97",
    "mdc2WithRSA": "a57a80d979e1a3f26c16fb14548c5e97",
    "ripemd": "16cf3ebedba4fc5d1b438f637e82d8a0b6efc576",
    "ripemd160": "16cf3ebedba4fc5d1b438f637e82d8a0b6efc576",
    "ripemd160WithRSA": "16cf3ebedba4fc5d1b438f637e82d8a0b6efc576",
    "rmd160": "16cf3ebedba4fc5d1b438f637e82d8a0b6efc576",
    "sha": "334b16d6cb72e71d8e5e3e7515954a8452d1fa86",
    "sha1": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "sha1WithRSAEncryption": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "sha224": "0e857791f3be20b2cd79952588ef9ec13fee68e4d765890bf3b76849",
    "sha224WithRSAEncryption": "0e857791f3be20b2cd79952588ef9ec13fee68e4d765890bf3b76849",
    "sha256": "3d35c10650a2da8413a2a11b8e7fb891af5da3a9763584caa6cd71bbe68de6ba",
    "sha256WithRSAEncryption": "3d35c10650a2da8413a2a11b8e7fb891af5da3a9763584caa6cd71bbe68de6ba",
    "sha384": "0a7583f394bb8ffb43f21c739da337b46cd3907106596fc2f5774f4ee70b58c0a1f7ef979b89da7c65867d6ec6a33110",
    "sha384WithRSAEncryption": "0a7583f394bb8ffb43f21c739da337b46cd3907106596fc2f5774f4ee70b58c0a1f7ef979b89da7c65867d6ec6a33110",
    "sha512": "b39ffcd51b0fdf9095ec7e38467a4aa87917fdda9acac5a95217ec3f378d4a6c5c5e2b643ca97151a0ab370dcc1af9f2e84cbf1c2535778ffbe45fc320b787d0",
    "sha512WithRSAEncryption": "b39ffcd51b0fdf9095ec7e38467a4aa87917fdda9acac5a95217ec3f378d4a6c5c5e2b643ca97151a0ab370dcc1af9f2e84cbf1c2535778ffbe45fc320b787d0",
    "shaWithRSAEncryption": "334b16d6cb72e71d8e5e3e7515954a8452d1fa86",
    "ssl2-md5": "cc4fab29cc180ffa888be396ce6aa6f5",
    "ssl3-md5": "cc4fab29cc180ffa888be396ce6aa6f5",
    "ssl3-sha1": "1a1d77c6d0f97c4b620faa90f3f8644408e4b13d",
    "whirlpool": "57245b9a657664b4b88bb7ed9609b9c83aa9728af0d3909a13637ad7013b5c94a7c59614414d10b4d05f0d21c5be9ac5287b1f03cec10cb57fb24677f93860ba"
  },
  {
    "input": "",
    "DSA": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "DSA-SHA": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "DSA-SHA1": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "DSA-SHA1-old": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "RSA-MD4": "3c491ded3b8897fb83a7ee2709e57973",
    "RSA-MD5": "b553506daedf701ccdc437fbf3e6bbe4",
    "RSA-MDC2": "34a4bf7e54e296760a639852b4718530",
    "RSA-RIPEMD160": "a4f7e35299c8fd917a18bd605d4d2a4f084d8e24",
    "RSA-SHA": "feb46b5daf29b640d24bcbb973fdd473cb0238c4",
    "RSA-SHA1": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "RSA-SHA1-2": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "RSA-SHA224": "76fd1c4eb3e5cd1a34e34fbe9311f92a94e83f79d00029659ab37a71",
    "RSA-SHA256": "baf3bcf323f3e5b91649eeb5f1be977a8bd91915a66297a22fdb1a906d1a7e53",
    "RSA-SHA384": "33d78d3097e653d99711e9e984792d06b767facc45a76271c40682bebaeb2080418af7d334f51d1f8005daec6582f589",
    "RSA-SHA512": "44a5845ade0e82bb34b1ada3b7875193515d5c3c19765f11e5e6d990f869adee5be8e9d995b18bd2d9ff5a308dc22d883198a527e6418833fbc715eccf939469",
    "dsaEncryption": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "dsaWithSHA": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "dsaWithSHA1": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "dss1": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "ecdsa-with-SHA1": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "md4": "3c491ded3b8897fb83a7ee2709e57973",
    "md4WithRSAEncryption": "3c491ded3b8897fb83a7ee2709e57973",
    "md5": "b553506daedf701ccdc437fbf3e6bbe4",
    "md5WithRSAEncryption": "b553506daedf701ccdc437fbf3e6bbe4",
    "mdc2": "34a4bf7e54e296760a639852b4718530",
    "mdc2WithRSA": "34a4bf7e54e296760a639852b4718530",
    "ripemd": "a4f7e35299c8fd917a18bd605d4d2a4f084d8e24",
    "ripemd160": "a4f7e35299c8fd917a18bd605d4d2a4f084d8e24",
    "ripemd160WithRSA": "a4f7e35299c8fd917a18bd605d4d2a4f084d8e24",
    "rmd160": "a4f7e35299c8fd917a18bd605d4d2a4f084d8e24",
    "sha": "feb46b5daf29b640d24bcbb973fdd473cb0238c4",
    "sha1": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "sha1WithRSAEncryption": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "sha224": "76fd1c4eb3e5cd1a34e34fbe9311f92a94e83f79d00029659ab37a71",
    "sha224WithRSAEncryption": "76fd1c4eb3e5cd1a34e34fbe9311f92a94e83f79d00029659ab37a71",
    "sha256": "baf3bcf323f3e5b91649eeb5f1be977a8bd91915a66297a22fdb1a906d1a7e53",
    "sha256WithRSAEncryption": "baf3bcf323f3e5b91649eeb5f1be977a8bd91915a66297a22fdb1a906d1a7e53",
    "sha384": "33d78d3097e653d99711e9e984792d06b767facc45a76271c40682bebaeb2080418af7d334f51d1f8005daec6582f589",
    "sha384WithRSAEncryption": "33d78d3097e653d99711e9e984792d06b767facc45a76271c40682bebaeb2080418af7d334f51d1f8005daec6582f589",
    "sha512": "44a5845ade0e82bb34b1ada3b7875193515d5c3c19765f11e5e6d990f869adee5be8e9d995b18bd2d9ff5a308dc22d883198a527e6418833fbc715eccf939469",
    "sha512WithRSAEncryption": "44a5845ade0e82bb34b1ada3b7875193515d5c3c19765f11e5e6d990f869adee5be8e9d995b18bd2d9ff5a308dc22d883198a527e6418833fbc715eccf939469",
    "shaWithRSAEncryption": "feb46b5daf29b640d24bcbb973fdd473cb0238c4",
    "ssl2-md5": "b553506daedf701ccdc437fbf3e6bbe4",
    "ssl3-md5": "b553506daedf701ccdc437fbf3e6bbe4",
    "ssl3-sha1": "4ec84870e9bdd25f523c6dfb6edd605052ca4eaa",
    "whirlpool": "9bb3953536539da2448cb9e4b2821b5671e4340df3f3a864bb760302cea346ab3d14649ec61500edbc6f4430834bcf4107469773884d53315c97fe2da2949685"
  },
  {
    "input": "////////////////////////////////////4AAAAB////////////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////wAAAAAAAP///////wAAB/////////////////////////////4AD//////wAAAAAAAAAAAAAAAAAAH/////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////8AAAAAAAAAB//h//////////////////////////////wAAAAAAAAAP///gAAAAAAAAAAAAAAD//////////////////////wAAAAAAAD/////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////AAAAAAAAAAAAAAAAAAAA////////////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAD4AAAAAAAAAAAAAAAAAAAAAB/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////AAAAAP//////////////////////////////////////8AAAAAP////////////////////AAAAAAAAAAAP///////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////gAAAAAAAAAAAAAAAAAB///////4AAAAAAAAAAAAAAAAAAAAH/////////////////////////////////////8AAAAAAAAAAAAAAA////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAB////////AAAf//AAAAAAAAAAAAAAAAAAAAAAD//////+AAAAH//////////////////////+AAAAAAAAAAAAAAAAAAAD////wAAAAAAAAAAAAAAAAAAAAAAAAAA///////+AAAAAAAAAAAAAAAAAf//////////////////////4AAAAAAAAAAAAAAAAAAAAH/////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////wAAAAAB///////////////////////////gAAAAAAAAAAAAAAAAAAAD/////////////////AAAAAAAAAAAAAAAAAAAAAAAAH////////4AAAAB///////////////////////////////////+AAAAAAAAAAAAAAAAAAAD/////4AAAAAAAAAAAA////////////////////4AAAAAAAAAAAAAAAD//////////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////wAAAAAAAAAAAAAAAAAAAAAAf//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////////8AAAAAAAAAAAAAAAAAAAAAf///////////////AAAA///////////+AAAAAAAD///////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////4AAAAAAAAAAAAAAD/////////////////////////////////////8AAAAAAAAAAAAAAAAH/////wAAAAAAAAAAAAAAAAAAAD/////////////////////////gAAAAAAAAAAAAAAH////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////n/////4AAAAAA///////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///gAAAAAAAAAAAAAAAAAAAf//////////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAH/////4AAAAAAAAAAH/////gAAAAAAAAAAAAAAAAAAAAA////////////////////////////////////////wAAAAAAB//////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAP/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////wAAAAAAAAAAAAAAAAAAAAAAB//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////////4AAAAAAAAAAAAAAAAB///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAB//////////////////////////////4AAAH//////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////AAAAAAAAAAfwAAAAAAAAAAAA///////////////8AAAAAAAAAAAAA///////////////////////////////8A//////8AAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////////////8AAAAAAAAAAAAAAAAB////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////////////wAAAAAAAAAAAAAAAAAP///////////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////gAAAAAAAAAAAAAAAAAAAB//////8AAAAAAAAAAAAAAAAAAH//wAAAAAAAAAAAAAAAAAH//////////////////////////////8AAAAAAAAAAAAAAAAAB/////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/+AAAAAAAAAAAAAAAAAAAf////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////////8AAAAAAAAAAAAAA/////////////////////////////////4AAAAAAAf/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAZ/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////gf///////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////4AAD///8AAAAAAAAAAP///////////////////gH//////////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////+AAAAAAAB//////8AAAAAAAAAAAAAAAAAP//////////////gAAAAD//////////////////////////////////gAAAAf////////////+AAAAAAAAAAAAAA/////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/AAAAAAAAAAAAAAAAAAAAAAAAAD/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////4AAAAAAAAAAAAAAAAAH///////////////////////////////////4AAAAAAAAAAAAAAAAAAAAH//////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////AAAAAAAAAAAAP////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAP/AAAAAAAAAAAAAAAAAAAAAAAAH/////////////AAAAAAAAAAAAAAAAAAAAAAP/////////////////////+AAAAAAAAAAAAA////////////////////////////////////4AH///////////AAAAAAAAAAAAAAAAAAAAAA////////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAD////+AAA////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAf/////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////4AAAAAAAAAAAAAAAAAAAAAAA///////////8AAAAAAAAAAAAAH////wAAAAAAAAAAAAAP//////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////wAAAAAAAAAAAAAAAAAAAAAH//////////////////////////+AAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////AAAAAAAAAAAAAAAAAB/////wAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////4AAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////7//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////8AAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////+AAAAAAAAAAAAA/////////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////AAAAAAAAAAAAAAAAAAD//////////8AAAAAAAAD/////////4AAAAAAAAAAAH///8A//gAAAAAAAAAf//////wAAB///////////////////////////////////gAAAAf///////gAAAAAAAAAAH////////////////////////////////AP///////////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAf//////////////////////////////////8AAAAP/////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////////8AAB///////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////////////7//////////4AAAAAAAAB////////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////+AAAAAAAAAAAAAAAD////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////////////wAAAAAAAAB//////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////////+AAAAAAAAAAAABgAAAA//////////////////4AAAAAAAAAAAAAAAAH//////////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///wAAAAAAAAAAAAAAAAAAAAB///////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////8AAAAAAAAAAAA////////////////////////////8AAAAH////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////gAAAAAAH///////////////////////////////////+AAAAAH/////////////////////////+AAAAAAAAAAAAAA///////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAH////////////////AAAAAAAAAAAAAAAAAAAAAAAAH////////////////wAAAAAAAAAD/////////////////////////////////////AAAAAAAAAB////////4AAAAAAAAAAAAAAAAAB/////////////////////////////4AAB///////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////////////////////AAAAAAAAAAAAA//////AAAAAAAD/////////////////wAAAAAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////gAAAAAAAAAA//////////4AAAAAAAAAAAAAAAAAAAAAAAAf///wAB///////////////////////////////AAAAAAAAAAAAAAAAAAAAAAD///4AAAAAAAAAAAAAAAAf/////////+AAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////wAAAAAAAAAD////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////+AAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////////////8AAAAAAAAAAAAAAAD///wAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////8AAAAAAAAAAAAAAf////////////////////AA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////8AAAAAAAAAAAAAAAAAD///////////////////////////////////////AAAAAAAAA////////8AAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////gAAAB///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////////8AAAAAAAAAAAAAAAAAAAD////////////////////////////////////AAAAAAB//////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////////////////////AAAAAAAAAP//////////////////////////////////+AAAP/////////////////////////////////4AAAAAAAAAAAAAAAAAAD/////////////////////////////////+AAAAAAAAAAAA=",
    "DSA": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "DSA-SHA": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "DSA-SHA1": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "DSA-SHA1-old": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "RSA-MD4": "bd4efb750199eed40569d4d8b49adfda",
    "RSA-MD5": "d707ae093ab94607010ddda09fc8a5a8",
    "RSA-MDC2": "e3a74037014b09cc20664d2a74b4a77e",
    "RSA-RIPEMD160": "c549972f8411ca63f94e0f9afaac02f2f653bb23",
    "RSA-SHA": "60616180caabab8cd7bf7ff33987386971a3229f",
    "RSA-SHA1": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "RSA-SHA1-2": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "RSA-SHA224": "ec608370deede3749f7382238d7830853612b23211320cc5068ff0c9",
    "RSA-SHA256": "7fd9b3abc4684e6f8ee591bbac5a36c5060bb09ef7899690416e5300cc14fcd3",
    "RSA-SHA384": "bc0710b5f0cca1dedc4748ea82144be5785489a941fa22b5f9e1e25cc3d6656018f9fda2c40db535fd1519c691989c0b",
    "RSA-SHA512": "fa3948c29572d0e7c9103e435fc9f298dcd5a68d0e5174a84aaeb58af8564c473d64d8295347ded8fa5c10e02a96a30b26a6fa7435b449b78bb91105ad043ba0",
    "dsaEncryption": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "dsaWithSHA": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "dsaWithSHA1": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "dss1": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "ecdsa-with-SHA1": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "md4": "bd4efb750199eed40569d4d8b49adfda",
    "md4WithRSAEncryption": "bd4efb750199eed40569d4d8b49adfda",
    "md5": "d707ae093ab94607010ddda09fc8a5a8",
    "md5WithRSAEncryption": "d707ae093ab94607010ddda09fc8a5a8",
    "mdc2": "e3a74037014b09cc20664d2a74b4a77e",
    "mdc2WithRSA": "e3a74037014b09cc20664d2a74b4a77e",
    "ripemd": "c549972f8411ca63f94e0f9afaac02f2f653bb23",
    "ripemd160": "c549972f8411ca63f94e0f9afaac02f2f653bb23",
    "ripemd160WithRSA": "c549972f8411ca63f94e0f9afaac02f2f653bb23",
    "rmd160": "c549972f8411ca63f94e0f9afaac02f2f653bb23",
    "sha": "60616180caabab8cd7bf7ff33987386971a3229f",
    "sha1": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "sha1WithRSAEncryption": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "sha224": "ec608370deede3749f7382238d7830853612b23211320cc5068ff0c9",
    "sha224WithRSAEncryption": "ec608370deede3749f7382238d7830853612b23211320cc5068ff0c9",
    "sha256": "7fd9b3abc4684e6f8ee591bbac5a36c5060bb09ef7899690416e5300cc14fcd3",
    "sha256WithRSAEncryption": "7fd9b3abc4684e6f8ee591bbac5a36c5060bb09ef7899690416e5300cc14fcd3",
    "sha384": "bc0710b5f0cca1dedc4748ea82144be5785489a941fa22b5f9e1e25cc3d6656018f9fda2c40db535fd1519c691989c0b",
    "sha384WithRSAEncryption": "bc0710b5f0cca1dedc4748ea82144be5785489a941fa22b5f9e1e25cc3d6656018f9fda2c40db535fd1519c691989c0b",
    "sha512": "fa3948c29572d0e7c9103e435fc9f298dcd5a68d0e5174a84aaeb58af8564c473d64d8295347ded8fa5c10e02a96a30b26a6fa7435b449b78bb91105ad043ba0",
    "sha512WithRSAEncryption": "fa3948c29572d0e7c9103e435fc9f298dcd5a68d0e5174a84aaeb58af8564c473d64d8295347ded8fa5c10e02a96a30b26a6fa7435b449b78bb91105ad043ba0",
    "shaWithRSAEncryption": "60616180caabab8cd7bf7ff33987386971a3229f",
    "ssl2-md5": "d707ae093ab94607010ddda09fc8a5a8",
    "ssl3-md5": "d707ae093ab94607010ddda09fc8a5a8",
    "ssl3-sha1": "d689513fed08b80c39b67371959bc4e3fecb0537",
    "whirlpool": "a07180f5c874805b22671b5d076cf9de8c22f144fb3515e3cb5bf9b88d19933333e169fc09a1c5e84ea29debbb3c44795b7170d8b88909595bb5279a2cf49ced"
  },
  {
    "input": "",
    "DSA": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "DSA-SHA": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "DSA-SHA1": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "DSA-SHA1-old": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "RSA-MD4": "f724769c83087912ba4787e4438eeb8f",
    "RSA-MD5": "76bdae04521ba996636c4dc431040031",
    "RSA-MDC2": "1fdc71c78d86a40a07c8de3c3a7fd53a",
    "RSA-RIPEMD160": "beb2b4475cec11d662e85143392c8b184fc91336",
    "RSA-SHA": "d7faf9fcc564d0b4231d362b9d55623e8b8ce433",
    "RSA-SHA1": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "RSA-SHA1-2": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "RSA-SHA224": "c6d7c6c27cba6fe169c940fe8b7fb5f620c24c439164cf217a7b869c",
    "RSA-SHA256": "429e454c0cd5d874d7887f8f8def3390a6e54af783c102af6bc3c75c62f3661f",
    "RSA-SHA384": "bf5ee19c4f81ffc3ff0a25879dfbf35782f2cde7f493dc44e07aee8f146e35bdb9766943fbdca87b80fc45fd24ed3de5",
    "RSA-SHA512": "288a6fa4607292fd3e4ee38d2007863cb11fd4fa5ffa5cc94cfcceefe9bdd1c5fdd092a0f9db45daeff6702b3d7dee5fd81d821e8f84c0ce21c3df1f0e1b58b2",
    "dsaEncryption": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "dsaWithSHA": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "dsaWithSHA1": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "dss1": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "ecdsa-with-SHA1": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "md4": "f724769c83087912ba4787e4438eeb8f",
    "md4WithRSAEncryption": "f724769c83087912ba4787e4438eeb8f",
    "md5": "76bdae04521ba996636c4dc431040031",
    "md5WithRSAEncryption": "76bdae04521ba996636c4dc431040031",
    "mdc2": "1fdc71c78d86a40a07c8de3c3a7fd53a",
    "mdc2WithRSA": "1fdc71c78d86a40a07c8de3c3a7fd53a",
    "ripemd": "beb2b4475cec11d662e85143392c8b184fc91336",
    "ripemd160": "beb2b4475cec11d662e85143392c8b184fc91336",
    "ripemd160WithRSA": "beb2b4475cec11d662e85143392c8b184fc91336",
    "rmd160": "beb2b4475cec11d662e85143392c8b184fc91336",
    "sha": "d7faf9fcc564d0b4231d362b9d55623e8b8ce433",
    "sha1": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "sha1WithRSAEncryption": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "sha224": "c6d7c6c27cba6fe169c940fe8b7fb5f620c24c439164cf217a7b869c",
    "sha224WithRSAEncryption": "c6d7c6c27cba6fe169c940fe8b7fb5f620c24c439164cf217a7b869c",
    "sha256": "429e454c0cd5d874d7887f8f8def3390a6e54af783c102af6bc3c75c62f3661f",
    "sha256WithRSAEncryption": "429e454c0cd5d874d7887f8f8def3390a6e54af783c102af6bc3c75c62f3661f",
    "sha384": "bf5ee19c4f81ffc3ff0a25879dfbf35782f2cde7f493dc44e07aee8f146e35bdb9766943fbdca87b80fc45fd24ed3de5",
    "sha384WithRSAEncryption": "bf5ee19c4f81ffc3ff0a25879dfbf35782f2cde7f493dc44e07aee8f146e35bdb9766943fbdca87b80fc45fd24ed3de5",
    "sha512": "288a6fa4607292fd3e4ee38d2007863cb11fd4fa5ffa5cc94cfcceefe9bdd1c5fdd092a0f9db45daeff6702b3d7dee5fd81d821e8f84c0ce21c3df1f0e1b58b2",
    "sha512WithRSAEncryption": "288a6fa4607292fd3e4ee38d2007863cb11fd4fa5ffa5cc94cfcceefe9bdd1c5fdd092a0f9db45daeff6702b3d7dee5fd81d821e8f84c0ce21c3df1f0e1b58b2",
    "shaWithRSAEncryption": "d7faf9fcc564d0b4231d362b9d55623e8b8ce433",
    "ssl2-md5": "76bdae04521ba996636c4dc431040031",
    "ssl3-md5": "76bdae04521ba996636c4dc431040031",
    "ssl3-sha1": "c4fed58f209fc3c34ad19f86a6dacadc86c04d33",
    "whirlpool": "ae4f5133cd00f7497b5fd4d915a4e14d66b6e042d01a74c2465e312baa4a6c0e1948120529b6cdf94ba9e17af1c767749e6906faaa88c59301170fcacc29fbce"
  },
  {
    "input": "",
    "DSA": "051888c6d00029c176de792b84dece2dc1c74b00",
    "DSA-SHA": "051888c6d00029c176de792b84dece2dc1c74b00",
    "DSA-SHA1": "051888c6d00029c176de792b84dece2dc1c74b00",
    "DSA-SHA1-old": "051888c6d00029c176de792b84dece2dc1c74b00",
    "RSA-MD4": "16c5141e205c865c6554495c484a536a",
    "RSA-MD5": "556c14fd0f3ff7bd6b435bd630e48811",
    "RSA-MDC2": "01c793ae56f6b99a4205a447731478d8",
    "RSA-RIPEMD160": "1bc1cf2bd525baa1acd2278937a0e08e1c3fabec",
    "RSA-SHA": "082f9a24ef0197b6bd90ff5665d7ff43a7fe1cee",
    "RSA-SHA1": "051888c6d00029c176de792b84dece2dc1c74b00",
    "RSA-SHA1-2": "051888c6d00029c176de792b84dece2dc1c74b00",
    "RSA-SHA224": "ec1f0e50f399737240f177cb3c9cd197728b968c5db795e1f85445c5",
    "RSA-SHA256": "0987d19048e10b925bcf394dfffcf259fc1a15e403673a80bfd4e7fd4f43cef0",
    "RSA-SHA384": "9c4b19d1a92e3eaf50c6340e422b4f6fac535072085c84cccca89a8ed3b6a5c7231674c1fa54bee856dc56e216631e6b",
    "RSA-SHA512": "ea2b4ce965af861dc357b045bcdefe1016bde2245dc9b0d13bd330da25fe5fe95b121163139bcc3cc7306c2a3e3f64f42deccade1c216592e6b94ddbca8d9262",
    "dsaEncryption": "051888c6d00029c176de792b84dece2dc1c74b00",
    "dsaWithSHA": "051888c6d00029c176de792b84dece2dc1c74b00",
    "dsaWithSHA1": "051888c6d00029c176de792b84dece2dc1c74b00",
    "dss1": "051888c6d00029c176de792b84dece2dc1c74b00",
    "ecdsa-with-SHA1": "051888c6d00029c176de792b84dece2dc1c74b00",
    "md4": "16c5141e205c865c6554495c484a536a",
    "md4WithRSAEncryption": "16c5141e205c865c6554495c484a536a",
    "md5": "556c14fd0f3ff7bd6b435bd630e48811",
    "md5WithRSAEncryption": "556c14fd0f3ff7bd6b435bd630e48811",
    "mdc2": "01c793ae56f6b99a4205a447731478d8",
    "mdc2WithRSA": "01c793ae56f6b99a4205a447731478d8",
    "ripemd": "1bc1cf2bd525baa1acd2278937a0e08e1c3fabec",
    "ripemd160": "1bc1cf2bd525baa1acd2278937a0e08e1c3fabec",
    "ripemd160WithRSA": "1bc1cf2bd525baa1acd2278937a0e08e1c3fabec",
    "rmd160": "1bc1cf2bd525baa1acd2278937a0e08e1c3fabec",
    "sha": "082f9a24ef0197b6bd90ff5665d7ff43a7fe1cee",
    "sha1": "051888c6d00029c176de792b84dece2dc1c74b00",
    "sha1WithRSAEncryption": "051888c6d00029c176de792b84dece2dc1c74b00",
    "sha224": "ec1f0e50f399737240f177cb3c9cd197728b968c5db795e1f85445c5",
    "sha224WithRSAEncryption": "ec1f0e50f399737240f177cb3c9cd197728b968c5db795e1f85445c5",
    "sha256": "0987d19048e10b925bcf394dfffcf259fc1a15e403673a80bfd4e7fd4f43cef0",
    "sha256WithRSAEncryption": "0987d19048e10b925bcf394dfffcf259fc1a15e403673a80bfd4e7fd4f43cef0",
    "sha384": "9c4b19d1a92e3eaf50c6340e422b4f6fac535072085c84cccca89a8ed3b6a5c7231674c1fa54bee856dc56e216631e6b",
    "sha384WithRSAEncryption": "9c4b19d1a92e3eaf50c6340e422b4f6fac535072085c84cccca89a8ed3b6a5c7231674c1fa54bee856dc56e216631e6b",
    "sha512": "ea2b4ce965af861dc357b045bcdefe1016bde2245dc9b0d13bd330da25fe5fe95b121163139bcc3cc7306c2a3e3f64f42deccade1c216592e6b94ddbca8d9262",
    "sha512WithRSAEncryption": "ea2b4ce965af861dc357b045bcdefe1016bde2245dc9b0d13bd330da25fe5fe95b121163139bcc3cc7306c2a3e3f64f42deccade1c216592e6b94ddbca8d9262",
    "shaWithRSAEncryption": "082f9a24ef0197b6bd90ff5665d7ff43a7fe1cee",
    "ssl2-md5": "556c14fd0f3ff7bd6b435bd630e48811",
    "ssl3-md5": "556c14fd0f3ff7bd6b435bd630e48811",
    "ssl3-sha1": "051888c6d00029c176de792b84dece2dc1c74b00",
    "whirlpool": "96458a47a74d17a36b4e6352036a673b020c23a8b145f592d5dca72353a5de81734f8d4f51a1872111526c0daa57b66d0e15e7715db4edbb3c45de5fca30ce57"
  },
  {
    "input": "",
    "DSA": "1a3540bee05518505827954f58b751c475aeece0",
    "DSA-SHA": "1a3540bee05518505827954f58b751c475aeece0",
    "DSA-SHA1": "1a3540bee05518505827954f58b751c475aeece0",
    "DSA-SHA1-old": "1a3540bee05518505827954f58b751c475aeece0",
    "RSA-MD4": "7a1488a3e00d2ed82a5c9b10260f0d8c",
    "RSA-MD5": "b500501957d4b8b412ea0102c842dd5e",
    "RSA-MDC2": "aae510e80df71a421270d45dfbce6eb2",
    "RSA-RIPEMD160": "950bf739968cda4736dc985abaf73169bf02d8a1",
    "RSA-SHA": "c416122b67bf261a80fd515376c8cfbe2ba3e858",
    "RSA-SHA1": "1a3540bee05518505827954f58b751c475aeece0",
    "RSA-SHA1-2": "1a3540bee05518505827954f58b751c475aeece0",
    "RSA-SHA224": "ec60937a1fcd8a97ff5a62c6a0b726ab62b818ddbc4c94c2112a9547",
    "RSA-SHA256": "fc774a081d9c93d52bb6a8d99a06ccd7bf32a10154d302524b8c5c5dc1b2969f",
    "RSA-SHA384": "b3b6070d7f244dd7267037cc56e34495a10e64ed5923a6a0f85c9ad17c742c0a15705f6a964243f321554d4d1022ea55",
    "RSA-SHA512": "57cdfebacae17394501dc67e5a12253e18ff29e8fe15bbd716edd28d070674e60d3fa0d6fd2ca574e670f45b3e9baab384b953e7005db7800bfdf825940f62de",
    "dsaEncryption": "1a3540bee05518505827954f58b751c475aeece0",
    "dsaWithSHA": "1a3540bee05518505827954f58b751c475aeece0",
    "dsaWithSHA1": "1a3540bee05518505827954f58b751c475aeece0",
    "dss1": "1a3540bee05518505827954f58b751c475aeece0",
    "ecdsa-with-SHA1": "1a3540bee05518505827954f58b751c475aeece0",
    "md4": "7a1488a3e00d2ed82a5c9b10260f0d8c",
    "md4WithRSAEncryption": "7a1488a3e00d2ed82a5c9b10260f0d8c",
    "md5": "b500501957d4b8b412ea0102c842dd5e",
    "md5WithRSAEncryption": "b500501957d4b8b412ea0102c842dd5e",
    "mdc2": "aae510e80df71a421270d45dfbce6eb2",
    "mdc2WithRSA": "aae510e80df71a421270d45dfbce6eb2",
    "ripemd": "950bf739968cda4736dc985abaf73169bf02d8a1",
    "ripemd160": "950bf739968cda4736dc985abaf73169bf02d8a1",
    "ripemd160WithRSA": "950bf739968cda4736dc985abaf73169bf02d8a1",
    "rmd160": "950bf739968cda4736dc985abaf73169bf02d8a1",
    "sha": "c416122b67bf261a80fd515376c8cfbe2ba3e858",
    "sha1": "1a3540bee05518505827954f58b751c475aeece0",
    "sha1WithRSAEncryption": "1a3540bee05518505827954f58b751c475aeece0",
    "sha224": "ec60937a1fcd8a97ff5a62c6a0b726ab62b818ddbc4c94c2112a9547",
    "sha224WithRSAEncryption": "ec60937a1fcd8a97ff5a62c6a0b726ab62b818ddbc4c94c2112a9547",
    "sha256": "fc774a081d9c93d52bb6a8d99a06ccd7bf32a10154d302524b8c5c5dc1b2969f",
    "sha256WithRSAEncryption": "fc774a081d9c93d52bb6a8d99a06ccd7bf32a10154d302524b8c5c5dc1b2969f",
    "sha384": "b3b6070d7f244dd7267037cc56e34495a10e64ed5923a6a0f85c9ad17c742c0a15705f6a964243f321554d4d1022ea55",
    "sha384WithRSAEncryption": "b3b6070d7f244dd7267037cc56e34495a10e64ed5923a6a0f85c9ad17c742c0a15705f6a964243f321554d4d1022ea55",
    "sha512": "57cdfebacae17394501dc67e5a12253e18ff29e8fe15bbd716edd28d070674e60d3fa0d6fd2ca574e670f45b3e9baab384b953e7005db7800bfdf825940f62de",
    "sha512WithRSAEncryption": "57cdfebacae17394501dc67e5a12253e18ff29e8fe15bbd716edd28d070674e60d3fa0d6fd2ca574e670f45b3e9baab384b953e7005db7800bfdf825940f62de",
    "shaWithRSAEncryption": "c416122b67bf261a80fd515376c8cfbe2ba3e858",
    "ssl2-md5": "b500501957d4b8b412ea0102c842dd5e",
    "ssl3-md5": "b500501957d4b8b412ea0102c842dd5e",
    "ssl3-sha1": "1a3540bee05518505827954f58b751c475aeece0",
    "whirlpool": "0f45677e36adec48ee14743fcca5de6647fda49b9ce288b85a65f509c6fc11d99bd4046f227d56cf316fb902cbdb01974d6b66728fb1f0600839eb348af9864b"
  },
  {
    "input": "",
    "DSA": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "DSA-SHA": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "DSA-SHA1": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "DSA-SHA1-old": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "RSA-MD4": "bb18288e5885fbc98bd2b77acb08b2e3",
    "RSA-MD5": "d18506a74c66e4d8537269c10c783923",
    "RSA-MDC2": "12f123761e14500ade4faf050e2e8ee0",
    "RSA-RIPEMD160": "11d300e4cd2d314f8bd2c3d1b1d6903873b29007",
    "RSA-SHA": "26986e3055a0096247d843e73592c9a45802c3c4",
    "RSA-SHA1": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "RSA-SHA1-2": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "RSA-SHA224": "7b0b0d86fab12ccd0bd968b3faa467a5180e8629ba69b7e944b59411",
    "RSA-SHA256": "6c6afa35f1aad6301dfde6c4ababe2da47d92033a9a41e84ca6f00e5eb29bc60",
    "RSA-SHA384": "8882a0793659d46a41f40688d92989a0b8185cbab4b071e0db7cb6c648d0be14d32ece95be0506e48737d4b2bd814599",
    "RSA-SHA512": "ae75a779c9034a0048caebad4983d870ea61fa2fd5adc8f7eb1c6f0bfaadd13685dcca0eaccee903b857893a17edfc6a08226b35e95804303845434d442f7cc7",
    "dsaEncryption": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "dsaWithSHA": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "dsaWithSHA1": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "dss1": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "ecdsa-with-SHA1": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "md4": "bb18288e5885fbc98bd2b77acb08b2e3",
    "md4WithRSAEncryption": "bb18288e5885fbc98bd2b77acb08b2e3",
    "md5": "d18506a74c66e4d8537269c10c783923",
    "md5WithRSAEncryption": "d18506a74c66e4d8537269c10c783923",
    "mdc2": "12f123761e14500ade4faf050e2e8ee0",
    "mdc2WithRSA": "12f123761e14500ade4faf050e2e8ee0",
    "ripemd": "11d300e4cd2d314f8bd2c3d1b1d6903873b29007",
    "ripemd160": "11d300e4cd2d314f8bd2c3d1b1d6903873b29007",
    "ripemd160WithRSA": "11d300e4cd2d314f8bd2c3d1b1d6903873b29007",
    "rmd160": "11d300e4cd2d314f8bd2c3d1b1d6903873b29007",
    "sha": "26986e3055a0096247d843e73592c9a45802c3c4",
    "sha1": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "sha1WithRSAEncryption": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "sha224": "7b0b0d86fab12ccd0bd968b3faa467a5180e8629ba69b7e944b59411",
    "sha224WithRSAEncryption": "7b0b0d86fab12ccd0bd968b3faa467a5180e8629ba69b7e944b59411",
    "sha256": "6c6afa35f1aad6301dfde6c4ababe2da47d92033a9a41e84ca6f00e5eb29bc60",
    "sha256WithRSAEncryption": "6c6afa35f1aad6301dfde6c4ababe2da47d92033a9a41e84ca6f00e5eb29bc60",
    "sha384": "8882a0793659d46a41f40688d92989a0b8185cbab4b071e0db7cb6c648d0be14d32ece95be0506e48737d4b2bd814599",
    "sha384WithRSAEncryption": "8882a0793659d46a41f40688d92989a0b8185cbab4b071e0db7cb6c648d0be14d32ece95be0506e48737d4b2bd814599",
    "sha512": "ae75a779c9034a0048caebad4983d870ea61fa2fd5adc8f7eb1c6f0bfaadd13685dcca0eaccee903b857893a17edfc6a08226b35e95804303845434d442f7cc7",
    "sha512WithRSAEncryption": "ae75a779c9034a0048caebad4983d870ea61fa2fd5adc8f7eb1c6f0bfaadd13685dcca0eaccee903b857893a17edfc6a08226b35e95804303845434d442f7cc7",
    "shaWithRSAEncryption": "26986e3055a0096247d843e73592c9a45802c3c4",
    "ssl2-md5": "d18506a74c66e4d8537269c10c783923",
    "ssl3-md5": "d18506a74c66e4d8537269c10c783923",
    "ssl3-sha1": "dfa19180359d5a7a38e842f172359caf4208fc05",
    "whirlpool": "43c64be749df158343bb188bae2d14c35da89a10f83186cca8f64d480420a56da74948eec5f667e18c045a6ec13d0f9b12b5a3dbbf2fec3684bd74f5859b2d65"
  },
  {
    "input": "////////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////4AAAAAAAAAP////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////+AAAAAAAP///////////////////////////////4AAAAAAAAAAAAAf//////////////////4AAAAAAAAAAAAAAAAAAAB///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+AD////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf//////////////////////////////////////wAAAAAAAAAAAAAAAAAAAB/////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////////////////////+AAAAAAAAAAAAAAAAAAAAAAf////////////////////gAAAAAAAAAAAf///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////AAAAH///////+AAAAAAAAAAAAAAAAAAAAAAAAAAB///4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAP//////+AAAAAAAAAAAAAAAAAAAAAA///////////////////////////////////4AAAAAAAAAAAAAAAAAAAD////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////////gAAAAAf//////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAB///////////////////////////////gAAAAAAAA////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////4AAAAAAAAAAAAAA////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////+AAAAAAAAAAAAAAAAAB////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////wAAAP//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////wAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////8AAAAAAAAAAAAA/////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////AAAAAAAAAA/////////////+AAAAAAAAAAAAAAAAAAAH/////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////////+AAAAAAAAAAAAAAAH/////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////AAAAAAAB///////+AAAAAAAAAAAAAAAAAAf///////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////+AAAAAAA////////////////////////////////////wAAAAAAAAAAAAAAP//////////////4AAAAAAAAAAf/////////////////4AH//////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////4AAAAAAAAAAf///////////////////////////4AAAAAAAAAAAAAAAAAP/////gAAAAAAAAAAAAAAAAAAAAAAAAAAH////////////gAAAAAAAAf//////////////////////8AAAAAAAAAAAAAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////4AAAAAAAAAAAAD/////////8AAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////////////AAAAAP//////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////AAAAAAAAAAAAAA/////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////4AAAAAAAAAAH///8AAAAAAAAAAAAAAAAAAAAAAf/////8AAAH//////////////////////////gAAAAAAAAAAAAf////AAAAAAAAAAAAAAAAA///////////////+AAAAAAAAAAf//////////////////////////+AAAf//////+AAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////AAAAAAAAAAAAD///////////////////////4AAAAAAAAAAAAAAAAA///////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////wAAAB//////////////////////////gAAAAAAAAAAAAAAAAP/////4AAAAAAAAAAAAAAAAAH/////8AAAAAAAAAAAAB/////////////////////////////////AAAAAAAAAAAAAA//////////////////////////////////////AAAAAAAAAAAAAAAAAAAB/////////////////////gAAAAAAAAAAAAAAA///////////////h//wAAf//////////8/+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////wAAAAAAAAAAAAAAf//////////////AAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAP//wAAAAAAP///////wAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////////////////////////////////gAAAAAAAAAAP/////////////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////+AAAAAAAAAAAAAH////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////wD//////8AAAAAAAAAAAAAAAAAAAAAAH////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////+AAAAAAAD//////////////////////4AAAAAAD//////////////////AAAAAAAAAAAAAAAAAAAAAAAAB////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////////8AAAAAAAAAAAAAA///////////////////////+AAH////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////wAAAAAAAAAAAAAAAAAAAAD//////////////////////////////wAAAAAAAAH/////////////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB///////////////////////4AAAAAAD////////AAAAAAAAA/////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////gAAAAAAAAAAAAAAAAB////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////////8AAAA//////////////////////////////+AAAAAAAAAP///////////////////////////AAAAAAAAAAAAAP//////////////////////+AAAAAAAAAAAAAAAAAAAAAH////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAA///////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////////gAAAAAAAAAAAAAAH4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////AAAAAAAAAAAAAAAAH//////////////wAAAAAAAAAP////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////+AAA///////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////+AAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////wAAAAAAf///////////////////////////////8AAAA////////////+AAAAAAAAAAAAAAAAAAAf////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////////f8AAf//////////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP4AAAAAAf////////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////////////////AAAAAAAAAH//////////////////////////////////////////AAf/////////////////////AAAAAAAAAAAA/////////////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAD///////////8AAAAAAAAAAAAAAf/////////////wAAAAAAAAAD//////////////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////wAAAAAAAAAAAAf///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//////////////////////////////////////AAAAAP////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH/////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//////////////4AAAAAAAAAB////////////////////////////////wAAAAAAAAAAAAAAAAAAH//////wAAAAAAAAAAAAAAAAA///////////////4AAAAAAAAAAAAAA/////////////////////////////AAAAP////////////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAH//////////////////////////wAAD////////////h////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////AAAAAAAAAAAAAAAAAAAA/////////////////////////////8AAAAAAAAAAAAAAAAAAH//////////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////8AAAAAAAAAAAAAAAAAAAP//////////wAAAAAAAAAAAAAH/////////////////////////////////////+AAAAAH/////////////////////////////////////////wAAAAAAAAAAAAAAA/////////////////////////////8AAAAAAAAH//////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////////////////4AAAAAAAAAD///////////////////////////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////wAAAAAAAAAAAAAAAAAfgAAAAAH/////////////AAAAAAAAAAAAAAAAAAA//////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////////4////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/AAAAAAAAAAAAAAAAP//////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB////////////////////////gAAAAAAAAAAB/////////////////////////////////wAAAAAAAAAAAAAA/////////8AAAAAAAAAAAAAAAAAAAAAAB////////////////////+AB///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////wAAAAAAAAAAAAAAB/////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAf/+AAAAAAAAAAAAAAAAAAAAAAAAAB////////wAAAAAAAAAAAAAAAAAAAAAB////////////////wAAAAAAAAAAAAAAAAAAA/////////////////////////+AAAAAAAA////////////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////wAAAAAAAAAAD///////////////8AAAAAAAAAAP////////////+AAAAAAAAAAAAAAAAAAAAAAAD///////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf////////////////////////////8AAAAAAAAAAAAAAAAAAf/////////4AAAAAAAAAf////////////wAAAAH//wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAB///////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///////////////////////////8AAAAAAAAAAAAAAAAAf///////////////////gAAAAAA///////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////8AAAAAAAAAAAAAAAAAAAAAAAB/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////////////gAAAH///////4AAA//////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAP/////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////////////////////////////////wAAAA/////////////////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////////wAAAAAAAH///wAAAAAAAAAAAf//////////////////gAAAAAD///////////////////////////////4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/////////////+AAAAAAAAAAAAAAP//////////////////////////////////////wAAAAAAAAAAAAAAAAAAAH///////////////////////////////////////4AAAAAAAAAAAAAAAAAAAA///////////////+AAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////8AP///////////////////////////////////AAAAAD////////////////8AAAAAH///////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAf///////wAAAAAAAAAAAAAAAAAA/////+AAAAAAAAAAAAAAAAAf/////////////////////////////////8AAAAAAAAAH///////////////////////////+AAAAAAAAAAAAAAAAAAAAAAH/////////////////////gAAAAAAAAAAAAAAAAAAAAAAAAAD//wAAH///////////////////////////////////////8AAAAAAAAAAAAAAAAAAAAH///////////////////////////////////",
    "DSA": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "DSA-SHA": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "DSA-SHA1": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "DSA-SHA1-old": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "RSA-MD4": "6b455bef955c34837d0789d2941cae5d",
    "RSA-MD5": "c9b4b691f4d88b7d2b4d5b770b05c8bf",
    "RSA-MDC2": "cb9ad9a0b753b1e50a4a932b2cecd247",
    "RSA-RIPEMD160": "a47e5a0208b894db4582e9998907268f8a69a072",
    "RSA-SHA": "b455ab47978a216fc47cd9cffbc78bf69fd23182",
    "RSA-SHA1": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "RSA-SHA1-2": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "RSA-SHA224": "bad5ffb737a22625b1fefab26f330668f31d5bb19e2b61787971ea81",
    "RSA-SHA256": "1e858dd15069f54478023c4d8518cd5aa814fb15c9eb8df45c44efbb050587ed",
    "RSA-SHA384": "8657ce6c69997fa758477e941e087a9ce4128c61281d60f357dc632cbede5d227f2508c2e590b0ba74fd9b3045120f44",
    "RSA-SHA512": "9d807978287e8964df204f412628975a29079e0f9e6ea2602b4bcb1b18ebc4a4566197c5ebdec2b6f86c71bc49c8e6423f2dc48f66e14a0595ae89f68713070c",
    "dsaEncryption": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "dsaWithSHA": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "dsaWithSHA1": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "dss1": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "ecdsa-with-SHA1": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "md4": "6b455bef955c34837d0789d2941cae5d",
    "md4WithRSAEncryption": "6b455bef955c34837d0789d2941cae5d",
    "md5": "c9b4b691f4d88b7d2b4d5b770b05c8bf",
    "md5WithRSAEncryption": "c9b4b691f4d88b7d2b4d5b770b05c8bf",
    "mdc2": "cb9ad9a0b753b1e50a4a932b2cecd247",
    "mdc2WithRSA": "cb9ad9a0b753b1e50a4a932b2cecd247",
    "ripemd": "a47e5a0208b894db4582e9998907268f8a69a072",
    "ripemd160": "a47e5a0208b894db4582e9998907268f8a69a072",
    "ripemd160WithRSA": "a47e5a0208b894db4582e9998907268f8a69a072",
    "rmd160": "a47e5a0208b894db4582e9998907268f8a69a072",
    "sha": "b455ab47978a216fc47cd9cffbc78bf69fd23182",
    "sha1": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "sha1WithRSAEncryption": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "sha224": "bad5ffb737a22625b1fefab26f330668f31d5bb19e2b61787971ea81",
    "sha224WithRSAEncryption": "bad5ffb737a22625b1fefab26f330668f31d5bb19e2b61787971ea81",
    "sha256": "1e858dd15069f54478023c4d8518cd5aa814fb15c9eb8df45c44efbb050587ed",
    "sha256WithRSAEncryption": "1e858dd15069f54478023c4d8518cd5aa814fb15c9eb8df45c44efbb050587ed",
    "sha384": "8657ce6c69997fa758477e941e087a9ce4128c61281d60f357dc632cbede5d227f2508c2e590b0ba74fd9b3045120f44",
    "sha384WithRSAEncryption": "8657ce6c69997fa758477e941e087a9ce4128c61281d60f357dc632cbede5d227f2508c2e590b0ba74fd9b3045120f44",
    "sha512": "9d807978287e8964df204f412628975a29079e0f9e6ea2602b4bcb1b18ebc4a4566197c5ebdec2b6f86c71bc49c8e6423f2dc48f66e14a0595ae89f68713070c",
    "sha512WithRSAEncryption": "9d807978287e8964df204f412628975a29079e0f9e6ea2602b4bcb1b18ebc4a4566197c5ebdec2b6f86c71bc49c8e6423f2dc48f66e14a0595ae89f68713070c",
    "shaWithRSAEncryption": "b455ab47978a216fc47cd9cffbc78bf69fd23182",
    "ssl2-md5": "c9b4b691f4d88b7d2b4d5b770b05c8bf",
    "ssl3-md5": "c9b4b691f4d88b7d2b4d5b770b05c8bf",
    "ssl3-sha1": "7b0fa84ebbcff7d7f4500f73d79660c4a3431b67",
    "whirlpool": "a0000c2a8650764b7113a5d9910c8a8cbc7b0ca89fd6634f3639e7a61679110621b1cd79af5fff7cfb6d7c5d2c137100c3312f6021d72389b5aa875b24097fab"
  },
  {
    "input": "",
    "DSA": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "DSA-SHA": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "DSA-SHA1": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "DSA-SHA1-old": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "RSA-MD4": "b8e2ad13fc5522407092524ee012f573",
    "RSA-MD5": "ba915c678f944fe5a480364ddc3382a8",
    "RSA-MDC2": "05b301c95bfedc219654ce0a7814de86",
    "RSA-RIPEMD160": "69758b92225248317720e8b335950b674656d1b1",
    "RSA-SHA": "19f36c6c9b5fe53e4b34646851f78fefb35e8cf0",
    "RSA-SHA1": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "RSA-SHA1-2": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "RSA-SHA224": "01e2dadeefa45b34cc63e2164f102d0a61f931adb82993a0b99e951c",
    "RSA-SHA256": "5d73820315ebd00f0e419a7fe418ff109664add82a68387daffff4239a2c1b23",
    "RSA-SHA384": "15c8a1b5e9f63eb92da306b7fbe8db22a3f8266f110ed82ede94f0cb74387665c1ae7159aacdf38510f345f451f49587",
    "RSA-SHA512": "2e66fadfa7cba0704d58989e24a63d3bef3138479a205cf6d3cd2884fb84c1bcb0ee7cbb74e64165d86860c3fea48df8fa1c7ebf6c757b7b7b51d75eb4f60e9e",
    "dsaEncryption": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "dsaWithSHA": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "dsaWithSHA1": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "dss1": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "ecdsa-with-SHA1": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "md4": "b8e2ad13fc5522407092524ee012f573",
    "md4WithRSAEncryption": "b8e2ad13fc5522407092524ee012f573",
    "md5": "ba915c678f944fe5a480364ddc3382a8",
    "md5WithRSAEncryption": "ba915c678f944fe5a480364ddc3382a8",
    "mdc2": "05b301c95bfedc219654ce0a7814de86",
    "mdc2WithRSA": "05b301c95bfedc219654ce0a7814de86",
    "ripemd": "69758b92225248317720e8b335950b674656d1b1",
    "ripemd160": "69758b92225248317720e8b335950b674656d1b1",
    "ripemd160WithRSA": "69758b92225248317720e8b335950b674656d1b1",
    "rmd160": "69758b92225248317720e8b335950b674656d1b1",
    "sha": "19f36c6c9b5fe53e4b34646851f78fefb35e8cf0",
    "sha1": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "sha1WithRSAEncryption": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "sha224": "01e2dadeefa45b34cc63e2164f102d0a61f931adb82993a0b99e951c",
    "sha224WithRSAEncryption": "01e2dadeefa45b34cc63e2164f102d0a61f931adb82993a0b99e951c",
    "sha256": "5d73820315ebd00f0e419a7fe418ff109664add82a68387daffff4239a2c1b23",
    "sha256WithRSAEncryption": "5d73820315ebd00f0e419a7fe418ff109664add82a68387daffff4239a2c1b23",
    "sha384": "15c8a1b5e9f63eb92da306b7fbe8db22a3f8266f110ed82ede94f0cb74387665c1ae7159aacdf38510f345f451f49587",
    "sha384WithRSAEncryption": "15c8a1b5e9f63eb92da306b7fbe8db22a3f8266f110ed82ede94f0cb74387665c1ae7159aacdf38510f345f451f49587",
    "sha512": "2e66fadfa7cba0704d58989e24a63d3bef3138479a205cf6d3cd2884fb84c1bcb0ee7cbb74e64165d86860c3fea48df8fa1c7ebf6c757b7b7b51d75eb4f60e9e",
    "sha512WithRSAEncryption": "2e66fadfa7cba0704d58989e24a63d3bef3138479a205cf6d3cd2884fb84c1bcb0ee7cbb74e64165d86860c3fea48df8fa1c7ebf6c757b7b7b51d75eb4f60e9e",
    "shaWithRSAEncryption": "19f36c6c9b5fe53e4b34646851f78fefb35e8cf0",
    "ssl2-md5": "ba915c678f944fe5a480364ddc3382a8",
    "ssl3-md5": "ba915c678f944fe5a480364ddc3382a8",
    "ssl3-sha1": "9e886081c9acaad0f97b10810d1de6fcdce6b5f4",
    "whirlpool": "c4960dee6f76c42875272f71c7a48af330be7dbaa21b6a37cc22ac67ca8b06a703b0bbc5cff1b2219c1e0d648cbf19b12f92cb3b457071304d1a5c0e78df8fcb"
  },
  {
    "input": "",
    "DSA": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "DSA-SHA": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "DSA-SHA1": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "DSA-SHA1-old": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "RSA-MD4": "0d01d9f80397c1e7ff0258311a33c311",
    "RSA-MD5": "78134c91a1ffb2e21594daa2c2a932fc",
    "RSA-MDC2": "4b0bc331041f19071009843da43f35dd",
    "RSA-RIPEMD160": "06c1a4259d6da0adc41ef780499ebb6ff1237537",
    "RSA-SHA": "f70c1705f2bcc30066d9c8458c857a550c295cf5",
    "RSA-SHA1": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "RSA-SHA1-2": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "RSA-SHA224": "e2d5bf15257be77f3d983906ae6f0d2699aae2db9f2a1d6f73af82ca",
    "RSA-SHA256": "f7f4721be31524d014bacf105b06bacc4bdb953bc04d5a048e1fd4ddc395667e",
    "RSA-SHA384": "c010e293fa8ce8a7d021b0882a93f36456481b7e4b5d51e31ecc1ec2f658d413bc0f81b8d18e8a642510b4b3ca2d29be",
    "RSA-SHA512": "79ade28ad07bfef57f84f8dd5b8fcf05e887e897c3f10ede2a27990720e70487fdaa29d11fb806e4a7d4920f7b015bf7390437396ef28edd3f52afd67d1cb908",
    "dsaEncryption": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "dsaWithSHA": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "dsaWithSHA1": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "dss1": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "ecdsa-with-SHA1": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "md4": "0d01d9f80397c1e7ff0258311a33c311",
    "md4WithRSAEncryption": "0d01d9f80397c1e7ff0258311a33c311",
    "md5": "78134c91a1ffb2e21594daa2c2a932fc",
    "md5WithRSAEncryption": "78134c91a1ffb2e21594daa2c2a932fc",
    "mdc2": "4b0bc331041f19071009843da43f35dd",
    "mdc2WithRSA": "4b0bc331041f19071009843da43f35dd",
    "ripemd": "06c1a4259d6da0adc41ef780499ebb6ff1237537",
    "ripemd160": "06c1a4259d6da0adc41ef780499ebb6ff1237537",
    "ripemd160WithRSA": "06c1a4259d6da0adc41ef780499ebb6ff1237537",
    "rmd160": "06c1a4259d6da0adc41ef780499ebb6ff1237537",
    "sha": "f70c1705f2bcc30066d9c8458c857a550c295cf5",
    "sha1": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "sha1WithRSAEncryption": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "sha224": "e2d5bf15257be77f3d983906ae6f0d2699aae2db9f2a1d6f73af82ca",
    "sha224WithRSAEncryption": "e2d5bf15257be77f3d983906ae6f0d2699aae2db9f2a1d6f73af82ca",
    "sha256": "f7f4721be31524d014bacf105b06bacc4bdb953bc04d5a048e1fd4ddc395667e",
    "sha256WithRSAEncryption": "f7f4721be31524d014bacf105b06bacc4bdb953bc04d5a048e1fd4ddc395667e",
    "sha384": "c010e293fa8ce8a7d021b0882a93f36456481b7e4b5d51e31ecc1ec2f658d413bc0f81b8d18e8a642510b4b3ca2d29be",
    "sha384WithRSAEncryption": "c010e293fa8ce8a7d021b0882a93f36456481b7e4b5d51e31ecc1ec2f658d413bc0f81b8d18e8a642510b4b3ca2d29be",
    "sha512": "79ade28ad07bfef57f84f8dd5b8fcf05e887e897c3f10ede2a27990720e70487fdaa29d11fb806e4a7d4920f7b015bf7390437396ef28edd3f52afd67d1cb908",
    "sha512WithRSAEncryption": "79ade28ad07bfef57f84f8dd5b8fcf05e887e897c3f10ede2a27990720e70487fdaa29d11fb806e4a7d4920f7b015bf7390437396ef28edd3f52afd67d1cb908",
    "shaWithRSAEncryption": "f70c1705f2bcc30066d9c8458c857a550c295cf5",
    "ssl2-md5": "78134c91a1ffb2e21594daa2c2a932fc",
    "ssl3-md5": "78134c91a1ffb2e21594daa2c2a932fc",
    "ssl3-sha1": "a4d46e4ba0ae4b012f75b1b50d0534d578ae9cb6",
    "whirlpool": "c4c495b8dc022d57fc6a50463357354905e80a10e1b975f91abab2631eae95034214c34a5a5ce8cd4412db032278a1bb58be1db9ea6c7ee840e57403910416f4"
  },
  {
    "input": "",
    "DSA": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "DSA-SHA": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "DSA-SHA1": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "DSA-SHA1-old": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "RSA-MD4": "cb07b1079dcac3c150760aa4133edff0",
    "RSA-MD5": "6fc6c8790dfc301ee38b8b63e18def5c",
    "RSA-MDC2": "87142fffa2394f85fd8c6ccd18440c62",
    "RSA-RIPEMD160": "16e5a88db8f37c2cf5ef64d1e48f84fe1dccba7c",
    "RSA-SHA": "7ea14f4d503fec84a1a3d24fdfabc3fba0212f6c",
    "RSA-SHA1": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "RSA-SHA1-2": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "RSA-SHA224": "7a639040f7b372947a1774aaf8be4441933bdd991f5913bfb27097f4",
    "RSA-SHA256": "426cbfa5a10024c4f5deae9146222146c2d75a5bf13e8215c04d7dd17f455743",
    "RSA-SHA384": "90d7b6ece2af45b682b1567022278a4f1171141d85e0d375197b9475a9a86f390b653e57b4f09b678ac9ac2bb58ab45e",
    "RSA-SHA512": "a38b0e7a64c8ce3fc050e35bde8dc0df0e47acbfe8be29a0f464d91f1130792c11556f3edd52627753d47fe2b7f257f8406de95cd90857dff2c9cb1d5ba25141",
    "dsaEncryption": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "dsaWithSHA": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "dsaWithSHA1": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "dss1": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "ecdsa-with-SHA1": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "md4": "cb07b1079dcac3c150760aa4133edff0",
    "md4WithRSAEncryption": "cb07b1079dcac3c150760aa4133edff0",
    "md5": "6fc6c8790dfc301ee38b8b63e18def5c",
    "md5WithRSAEncryption": "6fc6c8790dfc301ee38b8b63e18def5c",
    "mdc2": "87142fffa2394f85fd8c6ccd18440c62",
    "mdc2WithRSA": "87142fffa2394f85fd8c6ccd18440c62",
    "ripemd": "16e5a88db8f37c2cf5ef64d1e48f84fe1dccba7c",
    "ripemd160": "16e5a88db8f37c2cf5ef64d1e48f84fe1dccba7c",
    "ripemd160WithRSA": "16e5a88db8f37c2cf5ef64d1e48f84fe1dccba7c",
    "rmd160": "16e5a88db8f37c2cf5ef64d1e48f84fe1dccba7c",
    "sha": "7ea14f4d503fec84a1a3d24fdfabc3fba0212f6c",
    "sha1": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "sha1WithRSAEncryption": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "sha224": "7a639040f7b372947a1774aaf8be4441933bdd991f5913bfb27097f4",
    "sha224WithRSAEncryption": "7a639040f7b372947a1774aaf8be4441933bdd991f5913bfb27097f4",
    "sha256": "426cbfa5a10024c4f5deae9146222146c2d75a5bf13e8215c04d7dd17f455743",
    "sha256WithRSAEncryption": "426cbfa5a10024c4f5deae9146222146c2d75a5bf13e8215c04d7dd17f455743",
    "sha384": "90d7b6ece2af45b682b1567022278a4f1171141d85e0d375197b9475a9a86f390b653e57b4f09b678ac9ac2bb58ab45e",
    "sha384WithRSAEncryption": "90d7b6ece2af45b682b1567022278a4f1171141d85e0d375197b9475a9a86f390b653e57b4f09b678ac9ac2bb58ab45e",
    "sha512": "a38b0e7a64c8ce3fc050e35bde8dc0df0e47acbfe8be29a0f464d91f1130792c11556f3edd52627753d47fe2b7f257f8406de95cd90857dff2c9cb1d5ba25141",
    "sha512WithRSAEncryption": "a38b0e7a64c8ce3fc050e35bde8dc0df0e47acbfe8be29a0f464d91f1130792c11556f3edd52627753d47fe2b7f257f8406de95cd90857dff2c9cb1d5ba25141",
    "shaWithRSAEncryption": "7ea14f4d503fec84a1a3d24fdfabc3fba0212f6c",
    "ssl2-md5": "6fc6c8790dfc301ee38b8b63e18def5c",
    "ssl3-md5": "6fc6c8790dfc301ee38b8b63e18def5c",
    "ssl3-sha1": "6342b199ee64c7b2c9cbcd4f2dcb65acef51516f",
    "whirlpool": "164107a68c4bd310b4bd1a94f7989d69ac7027c108619d6aba63add3e5d48c55008544845dcaf789a4a055bb35d67bfd01fd1c6d544fa16034103d3dbbfa0054"
  }
]

},{}],10:[function(require,module,exports){
var crypto = require('crypto')

var exportFn = require('./pbkdf2')
var exported = exportFn(crypto)

module.exports = {
  pbkdf2: exported.pbkdf2,
  pbkdf2Sync: exported.pbkdf2Sync,

  // for crypto-browserify
  __pbkdf2Export: exportFn
}

},{"./pbkdf2":11,"crypto":43}],11:[function(require,module,exports){
(function (Buffer){
module.exports = function(crypto) {
  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
    if ('function' === typeof digest) {
      callback = digest
      digest = undefined
    }

    if ('function' !== typeof callback)
      throw new Error('No callback provided to pbkdf2')

    setTimeout(function() {
      var result

      try {
        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }

      callback(undefined, result)
    })
  }

  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
    if ('number' !== typeof iterations)
      throw new TypeError('Iterations not a number')

    if (iterations < 0)
      throw new TypeError('Bad iterations')

    if ('number' !== typeof keylen)
      throw new TypeError('Key length not a number')

    if (keylen < 0)
      throw new TypeError('Bad key length')

    digest = digest || 'sha1'

    if (!Buffer.isBuffer(password)) password = new Buffer(password)
    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

    var hLen, l = 1, r, T
    var DK = new Buffer(keylen)
    var block1 = new Buffer(salt.length + 4)
    salt.copy(block1, 0, 0, salt.length)

    for (var i = 1; i <= l; i++) {
      block1.writeUInt32BE(i, salt.length)

      var U = crypto.createHmac(digest, password).update(block1).digest()

      if (!hLen) {
        hLen = U.length
        T = new Buffer(hLen)
        l = Math.ceil(keylen / hLen)
        r = keylen - (l - 1) * hLen

        if (keylen > (Math.pow(2, 32) - 1) * hLen)
          throw new TypeError('keylen exceeds maximum length')
      }

      U.copy(T, 0, 0, hLen)

      for (var j = 1; j < iterations; j++) {
        U = crypto.createHmac(digest, password).update(U).digest()

        for (var k = 0; k < hLen; k++) {
          T[k] ^= U[k]
        }
      }

      var destPos = (i - 1) * hLen
      var len = (i == l ? r : hLen)
      T.copy(DK, destPos, 0, len)
    }

    return DK
  }

  return {
    pbkdf2: pbkdf2,
    pbkdf2Sync: pbkdf2Sync
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":37}],12:[function(require,module,exports){
(function (Buffer){

module.exports = ripemd160



/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Constants table
var zl = [
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
var zr = [
    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
var sl = [
     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
var sr = [
    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

var bytesToWords = function (bytes) {
  var words = [];
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32);
  }
  return words;
};

var wordsToBytes = function (words) {
  var bytes = [];
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
  }
  return bytes;
};

var processBlock = function (H, M, offset) {

  // Swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i;
    var M_offset_i = M[offset_i];

    // Swap
    M[offset_i] = (
        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
    );
  }

  // Working variables
  var al, bl, cl, dl, el;
  var ar, br, cr, dr, er;

  ar = al = H[0];
  br = bl = H[1];
  cr = cl = H[2];
  dr = dl = H[3];
  er = el = H[4];
  // Computation
  var t;
  for (var i = 0; i < 80; i += 1) {
    t = (al +  M[offset+zl[i]])|0;
    if (i<16){
        t +=  f1(bl,cl,dl) + hl[0];
    } else if (i<32) {
        t +=  f2(bl,cl,dl) + hl[1];
    } else if (i<48) {
        t +=  f3(bl,cl,dl) + hl[2];
    } else if (i<64) {
        t +=  f4(bl,cl,dl) + hl[3];
    } else {// if (i<80) {
        t +=  f5(bl,cl,dl) + hl[4];
    }
    t = t|0;
    t =  rotl(t,sl[i]);
    t = (t+el)|0;
    al = el;
    el = dl;
    dl = rotl(cl, 10);
    cl = bl;
    bl = t;

    t = (ar + M[offset+zr[i]])|0;
    if (i<16){
        t +=  f5(br,cr,dr) + hr[0];
    } else if (i<32) {
        t +=  f4(br,cr,dr) + hr[1];
    } else if (i<48) {
        t +=  f3(br,cr,dr) + hr[2];
    } else if (i<64) {
        t +=  f2(br,cr,dr) + hr[3];
    } else {// if (i<80) {
        t +=  f1(br,cr,dr) + hr[4];
    }
    t = t|0;
    t =  rotl(t,sr[i]) ;
    t = (t+er)|0;
    ar = er;
    er = dr;
    dr = rotl(cr, 10);
    cr = br;
    br = t;
  }
  // Intermediate hash value
  t    = (H[1] + cl + dr)|0;
  H[1] = (H[2] + dl + er)|0;
  H[2] = (H[3] + el + ar)|0;
  H[3] = (H[4] + al + br)|0;
  H[4] = (H[0] + bl + cr)|0;
  H[0] =  t;
};

function f1(x, y, z) {
  return ((x) ^ (y) ^ (z));
}

function f2(x, y, z) {
  return (((x)&(y)) | ((~x)&(z)));
}

function f3(x, y, z) {
  return (((x) | (~(y))) ^ (z));
}

function f4(x, y, z) {
  return (((x) & (z)) | ((y)&(~(z))));
}

function f5(x, y, z) {
  return ((x) ^ ((y) |(~(z))));
}

function rotl(x,n) {
  return (x<<n) | (x>>>(32-n));
}

function ripemd160(message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

  if (typeof message == 'string')
    message = new Buffer(message, 'utf8');

  var m = bytesToWords(message);

  var nBitsLeft = message.length * 8;
  var nBitsTotal = message.length * 8;

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
  );

  for (var i=0 ; i<m.length; i += 16) {
    processBlock(H, m, i);
  }

  // Swap endian
  for (var i = 0; i < 5; i++) {
      // Shortcut
    var H_i = H[i];

    // Swap
    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
  }

  var digestbytes = wordsToBytes(H);
  return new Buffer(digestbytes);
}



}).call(this,require("buffer").Buffer)
},{"buffer":37}],13:[function(require,module,exports){
module.exports = function (Buffer) {

  //prototype class for hash functions
  function Hash (blockSize, finalSize) {
    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
    this._finalSize = finalSize
    this._blockSize = blockSize
    this._len = 0
    this._s = 0
  }

  Hash.prototype.init = function () {
    this._s = 0
    this._len = 0
  }

  Hash.prototype.update = function (data, enc) {
    if ("string" === typeof data) {
      enc = enc || "utf8"
      data = new Buffer(data, enc)
    }

    var l = this._len += data.length
    var s = this._s = (this._s || 0)
    var f = 0
    var buffer = this._block

    while (s < l) {
      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
      var ch = (t - f)

      for (var i = 0; i < ch; i++) {
        buffer[(s % this._blockSize) + i] = data[i + f]
      }

      s += ch
      f += ch

      if ((s % this._blockSize) === 0) {
        this._update(buffer)
      }
    }
    this._s = s

    return this
  }

  Hash.prototype.digest = function (enc) {
    // Suppose the length of the message M, in bits, is l
    var l = this._len * 8

    // Append the bit 1 to the end of the message
    this._block[this._len % this._blockSize] = 0x80

    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
    this._block.fill(0, this._len % this._blockSize + 1)

    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
      this._update(this._block)
      this._block.fill(0)
    }

    // to this append the block which is equal to the number l written in binary
    // TODO: handle case where l is > Math.pow(2, 29)
    this._block.writeInt32BE(l, this._blockSize - 4)

    var hash = this._update(this._block) || this._hash()

    return enc ? hash.toString(enc) : hash
  }

  Hash.prototype._update = function () {
    throw new Error('_update must be implemented by subclass')
  }

  return Hash
}

},{}],14:[function(require,module,exports){
var exports = module.exports = function (alg) {
  var Alg = exports[alg]
  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
  return new Alg()
}

var Buffer = require('buffer/').Buffer
var Hash   = require('./hash')(Buffer)

exports.sha1 = require('./sha1')(Buffer, Hash)
exports.sha256 = require('./sha256')(Buffer, Hash)
exports.sha512 = require('./sha512')(Buffer, Hash)

},{"./hash":13,"./sha1":15,"./sha256":16,"./sha512":17,"buffer/":6}],15:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('util').inherits

module.exports = function (Buffer, Hash) {

  var A = 0|0
  var B = 4|0
  var C = 8|0
  var D = 12|0
  var E = 16|0

  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

  var POOL = []

  function Sha1 () {
    if(POOL.length)
      return POOL.pop().init()

    if(!(this instanceof Sha1)) return new Sha1()
    this._w = W
    Hash.call(this, 16*4, 14*4)

    this._h = null
    this.init()
  }

  inherits(Sha1, Hash)

  Sha1.prototype.init = function () {
    this._a = 0x67452301
    this._b = 0xefcdab89
    this._c = 0x98badcfe
    this._d = 0x10325476
    this._e = 0xc3d2e1f0

    Hash.prototype.init.call(this)
    return this
  }

  Sha1.prototype._POOL = POOL
  Sha1.prototype._update = function (X) {

    var a, b, c, d, e, _a, _b, _c, _d, _e

    a = _a = this._a
    b = _b = this._b
    c = _c = this._c
    d = _d = this._d
    e = _e = this._e

    var w = this._w

    for(var j = 0; j < 80; j++) {
      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

      var t = add(
        add(rol(a, 5), sha1_ft(j, b, c, d)),
        add(add(e, W), sha1_kt(j))
      )

      e = d
      d = c
      c = rol(b, 30)
      b = a
      a = t
    }

    this._a = add(a, _a)
    this._b = add(b, _b)
    this._c = add(c, _c)
    this._d = add(d, _d)
    this._e = add(e, _e)
  }

  Sha1.prototype._hash = function () {
    if(POOL.length < 100) POOL.push(this)
    var H = new Buffer(20)
    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
    H.writeInt32BE(this._a|0, A)
    H.writeInt32BE(this._b|0, B)
    H.writeInt32BE(this._c|0, C)
    H.writeInt32BE(this._d|0, D)
    H.writeInt32BE(this._e|0, E)
    return H
  }

  /*
   * Perform the appropriate triplet combination function for the current
   * iteration
   */
  function sha1_ft(t, b, c, d) {
    if(t < 20) return (b & c) | ((~b) & d);
    if(t < 40) return b ^ c ^ d;
    if(t < 60) return (b & c) | (b & d) | (c & d);
    return b ^ c ^ d;
  }

  /*
   * Determine the appropriate additive constant for the current iteration
   */
  function sha1_kt(t) {
    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
           (t < 60) ? -1894007588 : -899497514;
  }

  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
   *
   */
  function add(x, y) {
    return (x + y ) | 0
  //lets see how this goes on testling.
  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  //  return (msw << 16) | (lsw & 0xFFFF);
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function rol(num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt));
  }

  return Sha1
}

},{"util":72}],16:[function(require,module,exports){

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('util').inherits

module.exports = function (Buffer, Hash) {

  var K = [
      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
    ]

  var W = new Array(64)

  function Sha256() {
    this.init()

    this._w = W //new Array(64)

    Hash.call(this, 16*4, 14*4)
  }

  inherits(Sha256, Hash)

  Sha256.prototype.init = function () {

    this._a = 0x6a09e667|0
    this._b = 0xbb67ae85|0
    this._c = 0x3c6ef372|0
    this._d = 0xa54ff53a|0
    this._e = 0x510e527f|0
    this._f = 0x9b05688c|0
    this._g = 0x1f83d9ab|0
    this._h = 0x5be0cd19|0

    this._len = this._s = 0

    return this
  }

  function S (X, n) {
    return (X >>> n) | (X << (32 - n));
  }

  function R (X, n) {
    return (X >>> n);
  }

  function Ch (x, y, z) {
    return ((x & y) ^ ((~x) & z));
  }

  function Maj (x, y, z) {
    return ((x & y) ^ (x & z) ^ (y & z));
  }

  function Sigma0256 (x) {
    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
  }

  function Sigma1256 (x) {
    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
  }

  function Gamma0256 (x) {
    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
  }

  function Gamma1256 (x) {
    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
  }

  Sha256.prototype._update = function(M) {

    var W = this._w
    var a, b, c, d, e, f, g, h
    var T1, T2

    a = this._a | 0
    b = this._b | 0
    c = this._c | 0
    d = this._d | 0
    e = this._e | 0
    f = this._f | 0
    g = this._g | 0
    h = this._h | 0

    for (var j = 0; j < 64; j++) {
      var w = W[j] = j < 16
        ? M.readInt32BE(j * 4)
        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

      T2 = Sigma0256(a) + Maj(a, b, c);
      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
    }

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
    this._f = (f + this._f) | 0
    this._g = (g + this._g) | 0
    this._h = (h + this._h) | 0

  };

  Sha256.prototype._hash = function () {
    var H = new Buffer(32)

    H.writeInt32BE(this._a,  0)
    H.writeInt32BE(this._b,  4)
    H.writeInt32BE(this._c,  8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)
    H.writeInt32BE(this._h, 28)

    return H
  }

  return Sha256

}

},{"util":72}],17:[function(require,module,exports){
var inherits = require('util').inherits

module.exports = function (Buffer, Hash) {
  var K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ]

  var W = new Array(160)

  function Sha512() {
    this.init()
    this._w = W

    Hash.call(this, 128, 112)
  }

  inherits(Sha512, Hash)

  Sha512.prototype.init = function () {

    this._a = 0x6a09e667|0
    this._b = 0xbb67ae85|0
    this._c = 0x3c6ef372|0
    this._d = 0xa54ff53a|0
    this._e = 0x510e527f|0
    this._f = 0x9b05688c|0
    this._g = 0x1f83d9ab|0
    this._h = 0x5be0cd19|0

    this._al = 0xf3bcc908|0
    this._bl = 0x84caa73b|0
    this._cl = 0xfe94f82b|0
    this._dl = 0x5f1d36f1|0
    this._el = 0xade682d1|0
    this._fl = 0x2b3e6c1f|0
    this._gl = 0xfb41bd6b|0
    this._hl = 0x137e2179|0

    this._len = this._s = 0

    return this
  }

  function S (X, Xl, n) {
    return (X >>> n) | (Xl << (32 - n))
  }

  function Ch (x, y, z) {
    return ((x & y) ^ ((~x) & z));
  }

  function Maj (x, y, z) {
    return ((x & y) ^ (x & z) ^ (y & z));
  }

  Sha512.prototype._update = function(M) {

    var W = this._w
    var a, b, c, d, e, f, g, h
    var al, bl, cl, dl, el, fl, gl, hl

    a = this._a | 0
    b = this._b | 0
    c = this._c | 0
    d = this._d | 0
    e = this._e | 0
    f = this._f | 0
    g = this._g | 0
    h = this._h | 0

    al = this._al | 0
    bl = this._bl | 0
    cl = this._cl | 0
    dl = this._dl | 0
    el = this._el | 0
    fl = this._fl | 0
    gl = this._gl | 0
    hl = this._hl | 0

    for (var i = 0; i < 80; i++) {
      var j = i * 2

      var Wi, Wil

      if (i < 16) {
        Wi = W[j] = M.readInt32BE(j * 4)
        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

      } else {
        var x  = W[j - 15*2]
        var xl = W[j - 15*2 + 1]
        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

        x  = W[j - 2*2]
        xl = W[j - 2*2 + 1]
        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7  = W[j - 7*2]
        var Wi7l = W[j - 7*2 + 1]

        var Wi16  = W[j - 16*2]
        var Wi16l = W[j - 16*2 + 1]

        Wil = gamma0l + Wi7l
        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
        Wil = Wil + gamma1l
        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
        Wil = Wil + Wi16l
        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

        W[j] = Wi
        W[j + 1] = Wil
      }

      var maj = Maj(a, b, c)
      var majl = Maj(al, bl, cl)

      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

      // t1 = h + sigma1 + ch + K[i] + W[i]
      var Ki = K[j]
      var Kil = K[j + 1]

      var ch = Ch(e, f, g)
      var chl = Ch(el, fl, gl)

      var t1l = hl + sigma1l
      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
      t1l = t1l + chl
      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
      t1l = t1l + Kil
      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
      t1l = t1l + Wil
      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

      // t2 = sigma0 + maj
      var t2l = sigma0l + majl
      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

      h  = g
      hl = gl
      g  = f
      gl = fl
      f  = e
      fl = el
      el = (dl + t1l) | 0
      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
      d  = c
      dl = cl
      c  = b
      cl = bl
      b  = a
      bl = al
      al = (t1l + t2l) | 0
      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
    }

    this._al = (this._al + al) | 0
    this._bl = (this._bl + bl) | 0
    this._cl = (this._cl + cl) | 0
    this._dl = (this._dl + dl) | 0
    this._el = (this._el + el) | 0
    this._fl = (this._fl + fl) | 0
    this._gl = (this._gl + gl) | 0
    this._hl = (this._hl + hl) | 0

    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
  }

  Sha512.prototype._hash = function () {
    var H = new Buffer(64)

    function writeInt64BE(h, l, offset) {
      H.writeInt32BE(h, offset)
      H.writeInt32BE(l, offset + 4)
    }

    writeInt64BE(this._a, this._al, 0)
    writeInt64BE(this._b, this._bl, 8)
    writeInt64BE(this._c, this._cl, 16)
    writeInt64BE(this._d, this._dl, 24)
    writeInt64BE(this._e, this._el, 32)
    writeInt64BE(this._f, this._fl, 40)
    writeInt64BE(this._g, this._gl, 48)
    writeInt64BE(this._h, this._hl, 56)

    return H
  }

  return Sha512

}

},{"util":72}],18:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        if (!harness) harness = createExitHarness({
            autoclose: !canEmitExit
        });

        return harness.apply(this, arguments);
    };

    lazyLoad.only = function () {
        if (!harness) harness = createExitHarness({
            autoclose: !canEmitExit
        });

        return harness.only.apply(this, arguments);
    }

    return lazyLoad
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream();
    var es = stream.pipe(createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;
    
    var _error;

    process.on('uncaughtException', function (err) {
        if (err && err.code === 'EPIPE' && err.errno === 'EPIPE'
        && err.syscall === 'write') return;
        
        _error = err
        
        throw err
    })

    process.on('exit', function (code) {
        if (_error) {
            return
        }

        if (!ended) {
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok) test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    
    test._tests = [];
    
    test.createStream = function () {
        return results.createStream();
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":19,"./lib/results":20,"./lib/test":21,"_process":57,"defined":25}],19:[function(require,module,exports){
var through = require('through');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        try { console.log(line); }
        catch (e) { stream.emit('error', e) }
        line = '';
    }
};

},{"through":31}],20:[function(require,module,exports){
(function (process){
var Stream = require('stream');
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var json = typeof JSON === 'object' ? JSON : require('jsonify');
var through = require('through');
var resumer = require('resumer');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function () {
    var self = this;
    var output = resumer();
    output.queue('TAP version 13\n');
    
    nextTick(function () {
        var t = getNextTest(self);
        if (t) t.run()
        else self.emit('done')
    });
    self._stream.pipe(output);
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    t.once('end', function () {
        var nt = getNextTest(self);
        if (nt) nt.run()
        else self.emit('done')
    });
};

Results.prototype.only = function (name) {
    if (this._only) {
        self.count ++;
        self.fail ++;
        write('not ok ' + self.count + ' already called .only()\n');
    }
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });

    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;
        
        if (res.ok) self.pass ++
        else self.fail ++
    });

    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')
    
    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    var ex = json.stringify(res.expected, getSerialize()) || '';
    var ac = json.stringify(res.actual, getSerialize()) || '';
    
    if (Math.max(ex.length, ac.length) > 65) {
        output += inner + 'expected:\n' + inner + '  ' + ex + '\n';
        output += inner + 'actual:\n' + inner + '  ' + ac + '\n';
    }
    else {
        output += inner + 'expected: ' + ex + '\n';
        output += inner + 'actual:   ' + ac + '\n';
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack:\n';
        output += inner + '  ' + lines[0] + '\n';
        for (var i = 1; i < lines.length; i++) {
            output += inner + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getSerialize () {
    var seen = [];
    
    return function (key, value) {
        var ret = value;
        if (typeof value === 'object' && value) {
            var found = false;
            for (var i = 0; i < seen.length; i++) {
                if (seen[i] === value) {
                    found = true
                    break;
                }
            }
            
            if (found) ret = '[Circular]'
            else seen.push(value)
        }
        return ret;
    };
}

function getNextTest(results) {
    if (!results._only) {
        return results.tests.shift();
    }

    do {
        var t = results.tests.shift();
        if (!t) {
            return null;
        }
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

}).call(this,require('_process'))
},{"_process":57,"events":53,"inherits":26,"jsonify":27,"resumer":30,"stream":70,"through":31}],21:[function(require,module,exports){
(function (process,__dirname){
var Stream = require('stream');
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('util').inherits;
var EventEmitter = require('events').EventEmitter;

module.exports = Test;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

inherits(Test, EventEmitter);

function Test (name_, opts_, cb_) {
    var self = this;
    var name = '(anonymous)';
    var opts = {};
    var cb;
    
    for (var i = 0; i < arguments.length; i++) {
        switch (typeof arguments[i]) {
            case 'string':
                name = arguments[i];
                break;
            case 'object':
                opts = arguments[i] || opts;
                break;
            case 'function':
                cb = arguments[i];
        }
    }
    
    this.readable = true;
    this.name = name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = opts.skip || false;
    this._plan = undefined;
    this._cb = cb;
    this._progeny = [];
    this._ok = true;
}

Test.prototype.run = function () {
    if (this._skip) {
        return this.end();
    }
    this.emit('prerun');
    try {
        this._cb(this);
    }
    catch (err) {
        this.error(err);
        this.end();
        return;
    }
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })

    if (!self._pendingAsserts()) {
        nextTick(function () {
            self.end();
        });
    }

    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self.end();
        }
    });
};

Test.prototype.comment = function (msg) {
    this.emit('result', msg.trim().replace(/^#\s*/, ''));
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.end = function () {
    var self = this;

    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () {
            self.end();
        });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    } else {
        return this._plan -
            (this._progeny.length + this.assertCount);
    }
}

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator),
        actual : defined(extra.actual, opts.actual),
        expected : defined(extra.expected, opts.expected)
    };
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    var e = new Error('exception');
    var err = (e.stack || '').split('\n');
    var dir = path.dirname(__dirname) + '/';
    
    for (var i = 0; i < err.length; i++) {
        var m = /^\s*\bat\s+(.+)/.exec(err[i]);
        if (!m) continue;
        
        var s = m[1].split(/\s+/);
        var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
        if (!filem) {
            filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);
            
            if (!filem) continue;
        }
        
        if (filem[1].slice(0, dir.length) === dir) continue;
        
        res.functionName = s[0];
        res.file = filem[1];
        res.line = Number(filem[2]);
        if (filem[3]) res.column = filem[3];
        
        res.at = m[1];
        break;
    }
    
    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self.end();
        } else {
            nextTick(function () {
                self.end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    this._assert(passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

// vim: set softtabstop=4 shiftwidth=4:

}).call(this,require('_process'),"/node_modules/tape/lib")
},{"_process":57,"deep-equal":22,"defined":25,"events":53,"path":56,"stream":70,"util":72}],22:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function objEquiv(a, b, opts) {
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return true;
}

},{"./lib/is_arguments.js":23,"./lib/keys.js":24}],23:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],24:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],25:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],26:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],27:[function(require,module,exports){
exports.parse = require('./lib/parse');
exports.stringify = require('./lib/stringify');

},{"./lib/parse":28,"./lib/stringify":29}],28:[function(require,module,exports){
var at, // The index of the current character
    ch, // The current character
    escapee = {
        '"':  '"',
        '\\': '\\',
        '/':  '/',
        b:    '\b',
        f:    '\f',
        n:    '\n',
        r:    '\r',
        t:    '\t'
    },
    text,

    error = function (m) {
        // Call error when something is wrong.
        throw {
            name:    'SyntaxError',
            message: m,
            at:      at,
            text:    text
        };
    },
    
    next = function (c) {
        // If a c parameter is provided, verify that it matches the current character.
        if (c && c !== ch) {
            error("Expected '" + c + "' instead of '" + ch + "'");
        }
        
        // Get the next character. When there are no more characters,
        // return the empty string.
        
        ch = text.charAt(at);
        at += 1;
        return ch;
    },
    
    number = function () {
        // Parse a number value.
        var number,
            string = '';
        
        if (ch === '-') {
            string = '-';
            next('-');
        }
        while (ch >= '0' && ch <= '9') {
            string += ch;
            next();
        }
        if (ch === '.') {
            string += '.';
            while (next() && ch >= '0' && ch <= '9') {
                string += ch;
            }
        }
        if (ch === 'e' || ch === 'E') {
            string += ch;
            next();
            if (ch === '-' || ch === '+') {
                string += ch;
                next();
            }
            while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
            }
        }
        number = +string;
        if (!isFinite(number)) {
            error("Bad number");
        } else {
            return number;
        }
    },
    
    string = function () {
        // Parse a string value.
        var hex,
            i,
            string = '',
            uffff;
        
        // When parsing for string values, we must look for " and \ characters.
        if (ch === '"') {
            while (next()) {
                if (ch === '"') {
                    next();
                    return string;
                } else if (ch === '\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    } else {
                        break;
                    }
                } else {
                    string += ch;
                }
            }
        }
        error("Bad string");
    },

    white = function () {

// Skip whitespace.

        while (ch && ch <= ' ') {
            next();
        }
    },

    word = function () {

// true, false, or null.

        switch (ch) {
        case 't':
            next('t');
            next('r');
            next('u');
            next('e');
            return true;
        case 'f':
            next('f');
            next('a');
            next('l');
            next('s');
            next('e');
            return false;
        case 'n':
            next('n');
            next('u');
            next('l');
            next('l');
            return null;
        }
        error("Unexpected '" + ch + "'");
    },

    value,  // Place holder for the value function.

    array = function () {

// Parse an array value.

        var array = [];

        if (ch === '[') {
            next('[');
            white();
            if (ch === ']') {
                next(']');
                return array;   // empty array
            }
            while (ch) {
                array.push(value());
                white();
                if (ch === ']') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error("Bad array");
    },

    object = function () {

// Parse an object value.

        var key,
            object = {};

        if (ch === '{') {
            next('{');
            white();
            if (ch === '}') {
                next('}');
                return object;   // empty object
            }
            while (ch) {
                key = string();
                white();
                next(':');
                if (Object.hasOwnProperty.call(object, key)) {
                    error('Duplicate key "' + key + '"');
                }
                object[key] = value();
                white();
                if (ch === '}') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error("Bad object");
    };

value = function () {

// Parse a JSON value. It could be an object, an array, a string, a number,
// or a word.

    white();
    switch (ch) {
    case '{':
        return object();
    case '[':
        return array();
    case '"':
        return string();
    case '-':
        return number();
    default:
        return ch >= '0' && ch <= '9' ? number() : word();
    }
};

// Return the json_parse function. It will have access to all of the above
// functions and variables.

module.exports = function (source, reviver) {
    var result;
    
    text = source;
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) {
        error("Syntax error");
    }

    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.

    return typeof reviver === 'function' ? (function walk(holder, key) {
        var k, v, value = holder[key];
        if (value && typeof value === 'object') {
            for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = walk(value, k);
                    if (v !== undefined) {
                        value[k] = v;
                    } else {
                        delete value[k];
                    }
                }
            }
        }
        return reviver.call(holder, key, value);
    }({'': result}, '')) : result;
};

},{}],29:[function(require,module,exports){
var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {    // table of character substitutions
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"' : '\\"',
        '\\': '\\\\'
    },
    rep;

function quote(string) {
    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.
    
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
        var c = meta[a];
        return typeof c === 'string' ? c :
            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
}

function str(key, holder) {
    // Produce a string from holder[key].
    var i,          // The loop counter.
        k,          // The member key.
        v,          // The member value.
        length,
        mind = gap,
        partial,
        value = holder[key];
    
    // If the value has a toJSON method, call it to obtain a replacement value.
    if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
        value = value.toJSON(key);
    }
    
    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.
    if (typeof rep === 'function') {
        value = rep.call(holder, key, value);
    }
    
    // What happens next depends on the value's type.
    switch (typeof value) {
        case 'string':
            return quote(value);
        
        case 'number':
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : 'null';
        
        case 'boolean':
        case 'null':
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);
            
        case 'object':
            if (!value) return 'null';
            gap += indent;
            partial = [];
            
            // Array.isArray
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }
                
                // Join all of the elements together, separated with commas, and
                // wrap them in brackets.
                v = partial.length === 0 ? '[]' : gap ?
                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                    '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }
            
            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            else {
                // Otherwise, iterate through all of the keys in the object.
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            
        // Join all of the member texts together, separated with commas,
        // and wrap them in braces.

        v = partial.length === 0 ? '{}' : gap ?
            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
            '{' + partial.join(',') + '}';
        gap = mind;
        return v;
    }
}

module.exports = function (value, replacer, space) {
    var i;
    gap = '';
    indent = '';
    
    // If the space parameter is a number, make an indent string containing that
    // many spaces.
    if (typeof space === 'number') {
        for (i = 0; i < space; i += 1) {
            indent += ' ';
        }
    }
    // If the space parameter is a string, it will be used as the indent string.
    else if (typeof space === 'string') {
        indent = space;
    }

    // If there is a replacer, it must be a function or an array.
    // Otherwise, throw an error.
    rep = replacer;
    if (replacer && typeof replacer !== 'function'
    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
        throw new Error('JSON.stringify');
    }
    
    // Make a fake root object containing our value under the key of ''.
    // Return the result of stringifying the value.
    return str('', {'': value});
};

},{}],30:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":57,"through":31}],31:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data == null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":57,"stream":70}],32:[function(require,module,exports){
var pbkdf2Export = require('pbkdf2-compat').__pbkdf2Export

module.exports = function (crypto, exports) {
  exports = exports || {}

  var exported = pbkdf2Export(crypto)

  exports.pbkdf2 = exported.pbkdf2
  exports.pbkdf2Sync = exported.pbkdf2Sync

  return exports
}

},{"pbkdf2-compat":10}],33:[function(require,module,exports){
(function (global,Buffer){
(function() {
  var g = ('undefined' === typeof window ? global : window) || {}
  _crypto = (
    g.crypto || g.msCrypto || require('crypto')
  )
  module.exports = function(size) {
    // Modern Browsers
    if(_crypto.getRandomValues) {
      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
      /* This will not work in older browsers.
       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
       */
    
      _crypto.getRandomValues(bytes);
      return bytes;
    }
    else if (_crypto.randomBytes) {
      return _crypto.randomBytes(size)
    }
    else
      throw new Error(
        'secure random number generation not supported by this browser\n'+
        'use chrome, FireFox or Internet Explorer 11'
      )
  }
}())

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"buffer":37,"crypto":36}],34:[function(require,module,exports){
(function (Buffer){
var fs = require('fs')
var test = require('tape')

var algorithms = require('../').getHashes()
var encodings = [/*'binary',*/ 'hex', 'base64'];
var vectors = require('hash-test-vectors')

var createHash = require('../create-hash')

algorithms.forEach(function (algorithm) {
  test('test ' + algorithm + ' against test vectors', function (t) {

    vectors.forEach(function (obj, i) {
      var input = new Buffer(obj.input, 'base64')
      var node = obj[algorithm]
      var js = createHash(algorithm).update(input).digest('hex')
      t.equal(js, node, algorithm + '(testVector['+i+']) == ' + node)
    })

    encodings.forEach(function (encoding) {
        vectors.forEach(function (obj, i) {
          var input = new Buffer(obj.input, 'base64').toString(encoding)
          var node = obj[algorithm]
          var js = createHash(algorithm).update(input, encoding).digest('hex')
          t.equal(js, node, algorithm + '(testVector['+i+'], '+encoding+') == ' + node)
        })
    });

    t.end()
  })
});


}).call(this,require("buffer").Buffer)
},{"../":4,"../create-hash":1,"buffer":37,"fs":35,"hash-test-vectors":9,"tape":18}],35:[function(require,module,exports){

},{}],36:[function(require,module,exports){
module.exports=require(35)
},{}],37:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
var TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    if (encoding === 'base64')
      subject = base64clean(subject)
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str.toString()
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.compare = function (a, b) {
  assert(Buffer.isBuffer(a) && Buffer.isBuffer(b), 'Arguments must be Buffers')
  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) {
    return -1
  }
  if (y < x) {
    return 1
  }
  return 0
}

// BUFFER INSTANCE METHODS
// =======================

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end === undefined) ? self.length : Number(end)

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = asciiSlice(self, start, end)
      break
    case 'binary':
      ret = binarySlice(self, start, end)
      break
    case 'base64':
      ret = base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

Buffer.prototype.equals = function (b) {
  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.compare = function (b) {
  assert(Buffer.isBuffer(b), 'Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  if (TYPED_ARRAY_SUPPORT) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return readUInt16(this, offset, false, noAssert)
}

function readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return readInt16(this, offset, false, noAssert)
}

function readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return readInt32(this, offset, false, noAssert)
}

function readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return readFloat(this, offset, false, noAssert)
}

function readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
  return offset + 1
}

function writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
  return offset + 2
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  return writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  return writeUInt16(this, value, offset, false, noAssert)
}

function writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
  return offset + 4
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  return writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  return writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
  return offset + 1
}

function writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
  return offset + 2
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  return writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  return writeInt16(this, value, offset, false, noAssert)
}

function writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
  return offset + 4
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  return writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  return writeInt32(this, value, offset, false, noAssert)
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

},{"base64-js":38,"ieee754":39}],38:[function(require,module,exports){
module.exports=require(7)
},{}],39:[function(require,module,exports){
module.exports=require(8)
},{}],40:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"./md5":44,"buffer":37,"ripemd160":45,"sha.js":47}],41:[function(require,module,exports){
(function (Buffer){
var createHash = require('./create-hash')

var blocksize = 64
var zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)

module.exports = Hmac

function Hmac (alg, key) {
  if(!(this instanceof Hmac)) return new Hmac(alg, key)
  this._opad = opad
  this._alg = alg

  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

  if(key.length > blocksize) {
    key = createHash(alg).update(key).digest()
  } else if(key.length < blocksize) {
    key = Buffer.concat([key, zeroBuffer], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for(var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)
  return this
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()
  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}


}).call(this,require("buffer").Buffer)
},{"./create-hash":40,"buffer":37}],42:[function(require,module,exports){
module.exports=require(3)
},{"buffer":37}],43:[function(require,module,exports){
(function (Buffer){
var rng = require('./rng')

function error () {
  var m = [].slice.call(arguments).join(' ')
  throw new Error([
    m,
    'we accept pull requests',
    'http://github.com/dominictarr/crypto-browserify'
    ].join('\n'))
}

exports.createHash = require('./create-hash')

exports.createHmac = require('./create-hmac')

exports.randomBytes = function(size, callback) {
  if (callback && callback.call) {
    try {
      callback.call(this, undefined, new Buffer(rng(size)))
    } catch (err) { callback(err) }
  } else {
    return new Buffer(rng(size))
  }
}

function each(a, f) {
  for(var i in a)
    f(a[i], i)
}

exports.getHashes = function () {
  return ['sha1', 'sha256', 'md5', 'rmd160']

}

var p = require('./pbkdf2')(exports.createHmac)
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync


// the least I can do is make error messages for the rest of the node.js/crypto api.
each(['createCredentials'
, 'createCipher'
, 'createCipheriv'
, 'createDecipher'
, 'createDecipheriv'
, 'createSign'
, 'createVerify'
, 'createDiffieHellman'
], function (name) {
  exports[name] = function () {
    error('sorry,', name, 'is not implemented yet')
  }
})

}).call(this,require("buffer").Buffer)
},{"./create-hash":40,"./create-hmac":41,"./pbkdf2":51,"./rng":52,"buffer":37}],44:[function(require,module,exports){
module.exports=require(5)
},{"./helpers":42}],45:[function(require,module,exports){
module.exports=require(12)
},{"buffer":37}],46:[function(require,module,exports){
var u = require('./util')
var write = u.write
var fill = u.zeroFill

module.exports = function (Buffer) {

  //prototype class for hash functions
  function Hash (blockSize, finalSize) {
    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
    this._finalSize = finalSize
    this._blockSize = blockSize
    this._len = 0
    this._s = 0
  }

  Hash.prototype.init = function () {
    this._s = 0
    this._len = 0
  }

  function lengthOf(data, enc) {
    if(enc == null)     return data.byteLength || data.length
    if(enc == 'ascii' || enc == 'binary')  return data.length
    if(enc == 'hex')    return data.length/2
    if(enc == 'base64') return data.length/3
  }

  Hash.prototype.update = function (data, enc) {
    var bl = this._blockSize

    //I'd rather do this with a streaming encoder, like the opposite of
    //http://nodejs.org/api/string_decoder.html
    var length
      if(!enc && 'string' === typeof data)
        enc = 'utf8'

    if(enc) {
      if(enc === 'utf-8')
        enc = 'utf8'

      if(enc === 'base64' || enc === 'utf8')
        data = new Buffer(data, enc), enc = null

      length = lengthOf(data, enc)
    } else
      length = data.byteLength || data.length

    var l = this._len += length
    var s = this._s = (this._s || 0)
    var f = 0
    var buffer = this._block
    while(s < l) {
      var t = Math.min(length, f + bl - s%bl)
      write(buffer, data, enc, s%bl, f, t)
      var ch = (t - f);
      s += ch; f += ch

      if(!(s%bl))
        this._update(buffer)
    }
    this._s = s

    return this

  }

  Hash.prototype.digest = function (enc) {
    var bl = this._blockSize
    var fl = this._finalSize
    var len = this._len*8

    var x = this._block

    var bits = len % (bl*8)

    //add end marker, so that appending 0's creats a different hash.
    x[this._len % bl] = 0x80
    fill(this._block, this._len % bl + 1)

    if(bits >= fl*8) {
      this._update(this._block)
      u.zeroFill(this._block, 0)
    }

    //TODO: handle case where the bit length is > Math.pow(2, 29)
    x.writeInt32BE(len, fl + 4) //big endian

    var hash = this._update(this._block) || this._hash()
    if(enc == null) return hash
    return hash.toString(enc)
  }

  Hash.prototype._update = function () {
    throw new Error('_update must be implemented by subclass')
  }

  return Hash
}

},{"./util":50}],47:[function(require,module,exports){
var exports = module.exports = function (alg) {
  var Alg = exports[alg]
  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
  return new Alg()
}

var Buffer = require('buffer').Buffer
var Hash   = require('./hash')(Buffer)

exports.sha =
exports.sha1 = require('./sha1')(Buffer, Hash)
exports.sha256 = require('./sha256')(Buffer, Hash)

},{"./hash":46,"./sha1":48,"./sha256":49,"buffer":37}],48:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */
module.exports = function (Buffer, Hash) {

  var inherits = require('util').inherits

  inherits(Sha1, Hash)

  var A = 0|0
  var B = 4|0
  var C = 8|0
  var D = 12|0
  var E = 16|0

  var BE = false
  var LE = true

  var W = new Int32Array(80)

  var POOL = []

  function Sha1 () {
    if(POOL.length)
      return POOL.pop().init()

    if(!(this instanceof Sha1)) return new Sha1()
    this._w = W
    Hash.call(this, 16*4, 14*4)
  
    this._h = null
    this.init()
  }

  Sha1.prototype.init = function () {
    this._a = 0x67452301
    this._b = 0xefcdab89
    this._c = 0x98badcfe
    this._d = 0x10325476
    this._e = 0xc3d2e1f0

    Hash.prototype.init.call(this)
    return this
  }

  Sha1.prototype._POOL = POOL

  // assume that array is a Uint32Array with length=16,
  // and that if it is the last block, it already has the length and the 1 bit appended.


  var isDV = new Buffer(1) instanceof DataView
  function readInt32BE (X, i) {
    return isDV
      ? X.getInt32(i, false)
      : X.readInt32BE(i)
  }

  Sha1.prototype._update = function (array) {

    var X = this._block
    var h = this._h
    var a, b, c, d, e, _a, _b, _c, _d, _e

    a = _a = this._a
    b = _b = this._b
    c = _c = this._c
    d = _d = this._d
    e = _e = this._e

    var w = this._w

    for(var j = 0; j < 80; j++) {
      var W = w[j]
        = j < 16
        //? X.getInt32(j*4, false)
        //? readInt32BE(X, j*4) //*/ X.readInt32BE(j*4) //*/
        ? X.readInt32BE(j*4)
        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

      var t =
        add(
          add(rol(a, 5), sha1_ft(j, b, c, d)),
          add(add(e, W), sha1_kt(j))
        );

      e = d
      d = c
      c = rol(b, 30)
      b = a
      a = t
    }

    this._a = add(a, _a)
    this._b = add(b, _b)
    this._c = add(c, _c)
    this._d = add(d, _d)
    this._e = add(e, _e)
  }

  Sha1.prototype._hash = function () {
    if(POOL.length < 100) POOL.push(this)
    var H = new Buffer(20)
    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
    H.writeInt32BE(this._a|0, A)
    H.writeInt32BE(this._b|0, B)
    H.writeInt32BE(this._c|0, C)
    H.writeInt32BE(this._d|0, D)
    H.writeInt32BE(this._e|0, E)
    return H
  }

  /*
   * Perform the appropriate triplet combination function for the current
   * iteration
   */
  function sha1_ft(t, b, c, d) {
    if(t < 20) return (b & c) | ((~b) & d);
    if(t < 40) return b ^ c ^ d;
    if(t < 60) return (b & c) | (b & d) | (c & d);
    return b ^ c ^ d;
  }

  /*
   * Determine the appropriate additive constant for the current iteration
   */
  function sha1_kt(t) {
    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
           (t < 60) ? -1894007588 : -899497514;
  }

  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
   *
   */
  function add(x, y) {
    return (x + y ) | 0
  //lets see how this goes on testling.
  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  //  return (msw << 16) | (lsw & 0xFFFF);
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function rol(num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt));
  }

  return Sha1
}

},{"util":72}],49:[function(require,module,exports){

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('util').inherits
var BE       = false
var LE       = true
var u        = require('./util')

module.exports = function (Buffer, Hash) {

  var K = [
      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
    ]

  inherits(Sha256, Hash)
  var W = new Array(64)
  var POOL = []
  function Sha256() {
    if(POOL.length) {
      //return POOL.shift().init()
    }
    //this._data = new Buffer(32)

    this.init()

    this._w = W //new Array(64)

    Hash.call(this, 16*4, 14*4)
  };

  Sha256.prototype.init = function () {

    this._a = 0x6a09e667|0
    this._b = 0xbb67ae85|0
    this._c = 0x3c6ef372|0
    this._d = 0xa54ff53a|0
    this._e = 0x510e527f|0
    this._f = 0x9b05688c|0
    this._g = 0x1f83d9ab|0
    this._h = 0x5be0cd19|0

    this._len = this._s = 0

    return this
  }

  var safe_add = function(x, y) {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  }

  function S (X, n) {
    return (X >>> n) | (X << (32 - n));
  }

  function R (X, n) {
    return (X >>> n);
  }

  function Ch (x, y, z) {
    return ((x & y) ^ ((~x) & z));
  }

  function Maj (x, y, z) {
    return ((x & y) ^ (x & z) ^ (y & z));
  }

  function Sigma0256 (x) {
    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
  }

  function Sigma1256 (x) {
    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
  }

  function Gamma0256 (x) {
    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
  }

  function Gamma1256 (x) {
    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
  }

  Sha256.prototype._update = function(m) {
    var M = this._block
    var W = this._w
    var a, b, c, d, e, f, g, h
    var T1, T2

    a = this._a | 0
    b = this._b | 0
    c = this._c | 0
    d = this._d | 0
    e = this._e | 0
    f = this._f | 0
    g = this._g | 0
    h = this._h | 0

    for (var j = 0; j < 64; j++) {
      var w = W[j] = j < 16
        ? M.readInt32BE(j * 4)
        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

      T2 = Sigma0256(a) + Maj(a, b, c);
      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
    }

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
    this._f = (f + this._f) | 0
    this._g = (g + this._g) | 0
    this._h = (h + this._h) | 0

  };

  Sha256.prototype._hash = function () {
    if(POOL.length < 10)
      POOL.push(this)

    var H = new Buffer(32)

    H.writeInt32BE(this._a,  0)
    H.writeInt32BE(this._b,  4)
    H.writeInt32BE(this._c,  8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)
    H.writeInt32BE(this._h, 28)

    return H
  }

  return Sha256

}

},{"./util":50,"util":72}],50:[function(require,module,exports){
exports.write = write
exports.zeroFill = zeroFill

exports.toString = toString

function write (buffer, string, enc, start, from, to, LE) {
  var l = (to - from)
  if(enc === 'ascii' || enc === 'binary') {
    for( var i = 0; i < l; i++) {
      buffer[start + i] = string.charCodeAt(i + from)
    }
  }
  else if(enc == null) {
    for( var i = 0; i < l; i++) {
      buffer[start + i] = string[i + from]
    }
  }
  else if(enc === 'hex') {
    for(var i = 0; i < l; i++) {
      var j = from + i
      buffer[start + i] = parseInt(string[j*2] + string[(j*2)+1], 16)
    }
  }
  else if(enc === 'base64') {
    throw new Error('base64 encoding not yet supported')
  }
  else
    throw new Error(enc +' encoding not yet supported')
}

//always fill to the end!
function zeroFill(buf, from) {
  for(var i = from; i < buf.length; i++)
    buf[i] = 0
}


},{}],51:[function(require,module,exports){
(function (Buffer){
// JavaScript PBKDF2 Implementation
// Based on http://git.io/qsv2zw
// Licensed under LGPL v3
// Copyright (c) 2013 jduncanator

var blocksize = 64
var zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)

module.exports = function (createHmac, exports) {
  exports = exports || {}

  exports.pbkdf2 = function(password, salt, iterations, keylen, cb) {
    if('function' !== typeof cb)
      throw new Error('No callback provided to pbkdf2');
    setTimeout(function () {
      cb(null, exports.pbkdf2Sync(password, salt, iterations, keylen))
    })
  }

  exports.pbkdf2Sync = function(key, salt, iterations, keylen) {
    if('number' !== typeof iterations)
      throw new TypeError('Iterations not a number')
    if(iterations < 0)
      throw new TypeError('Bad iterations')
    if('number' !== typeof keylen)
      throw new TypeError('Key length not a number')
    if(keylen < 0)
      throw new TypeError('Bad key length')

    //stretch key to the correct length that hmac wants it,
    //otherwise this will happen every time hmac is called
    //twice per iteration.
    var key = !Buffer.isBuffer(key) ? new Buffer(key) : key

    if(key.length > blocksize) {
      key = createHash(alg).update(key).digest()
    } else if(key.length < blocksize) {
      key = Buffer.concat([key, zeroBuffer], blocksize)
    }

    var HMAC;
    var cplen, p = 0, i = 1, itmp = new Buffer(4), digtmp;
    var out = new Buffer(keylen);
    out.fill(0);
    while(keylen) {
      if(keylen > 20)
        cplen = 20;
      else
        cplen = keylen;

      /* We are unlikely to ever use more than 256 blocks (5120 bits!)
         * but just in case...
         */
        itmp[0] = (i >> 24) & 0xff;
        itmp[1] = (i >> 16) & 0xff;
          itmp[2] = (i >> 8) & 0xff;
          itmp[3] = i & 0xff;

          HMAC = createHmac('sha1', key);
          HMAC.update(salt)
          HMAC.update(itmp);
        digtmp = HMAC.digest();
        digtmp.copy(out, p, 0, cplen);

        for(var j = 1; j < iterations; j++) {
          HMAC = createHmac('sha1', key);
          HMAC.update(digtmp);
          digtmp = HMAC.digest();
          for(var k = 0; k < cplen; k++) {
            out[k] ^= digtmp[k];
          }
        }
      keylen -= cplen;
      i++;
      p += cplen;
    }

    return out;
  }

  return exports
}

}).call(this,require("buffer").Buffer)
},{"buffer":37}],52:[function(require,module,exports){
(function (Buffer){
(function() {
  module.exports = function(size) {
    var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
    /* This will not work in older browsers.
     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
     */
    crypto.getRandomValues(bytes);
    return bytes;
  }
}())

}).call(this,require("buffer").Buffer)
},{"buffer":37}],53:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        throw TypeError('Uncaught, unspecified "error" event.');
      }
      return false;
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],54:[function(require,module,exports){
module.exports=require(26)
},{}],55:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],56:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":57}],57:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],58:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":59}],59:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":61,"./_stream_writable":63,"_process":57,"core-util-is":64,"inherits":54}],60:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":62,"core-util-is":64,"inherits":54}],61:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = false;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // In streams that never have any data, and do push(null) right away,
  // the consumer can miss the 'end' event if they do some I/O before
  // consuming the stream.  So, we don't emit('end') until some reading
  // happens.
  this.calledRead = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (typeof chunk === 'string' && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null || chunk === undefined) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) {
        state.buffer.unshift(chunk);
      } else {
        state.reading = false;
        state.buffer.push(chunk);
      }

      if (state.needReadable)
        emitReadable(stream);

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || n === null) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  var state = this._readableState;
  state.calledRead = true;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length - n <= state.highWaterMark)
    doRead = true;

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading)
    doRead = false;

  if (doRead) {
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read called its callback synchronously, then `reading`
  // will be false, and we need to re-evaluate how much data we
  // can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we happened to read() exactly the remaining amount in the
  // buffer, and the EOF has been seen at this point, then make sure
  // that we emit 'end' on the very next tick.
  if (state.ended && !state.endEmitted && state.length === 0)
    endReadable(this);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode &&
      !er) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // if we've ended and we have some data left, then emit
  // 'readable' now to make sure it gets picked up.
  if (state.length > 0)
    emitReadable(stream);
  else
    endReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (state.emittedReadable)
    return;

  state.emittedReadable = true;
  if (state.sync)
    process.nextTick(function() {
      emitReadable_(stream);
    });
  else
    emitReadable_(stream);
}

function emitReadable_(stream) {
  stream.emit('readable');
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    if (readable !== src) return;
    cleanup();
  }

  function onend() {
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (!dest._writableState || dest._writableState.needDrain)
      ondrain();
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    // the handler that waits for readable events after all
    // the data gets sucked out in flow.
    // This would be easier to follow with a .once() handler
    // in flow(), but that is too slow.
    this.on('readable', pipeOnReadable);

    state.flowing = true;
    process.nextTick(function() {
      flow(src);
    });
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var dest = this;
    var state = src._readableState;
    state.awaitDrain--;
    if (state.awaitDrain === 0)
      flow(src);
  };
}

function flow(src) {
  var state = src._readableState;
  var chunk;
  state.awaitDrain = 0;

  function write(dest, i, list) {
    var written = dest.write(chunk);
    if (false === written) {
      state.awaitDrain++;
    }
  }

  while (state.pipesCount && null !== (chunk = src.read())) {

    if (state.pipesCount === 1)
      write(state.pipes, 0, null);
    else
      forEach(state.pipes, write);

    src.emit('data', chunk);

    // if anyone needs a drain, then we have to wait for that.
    if (state.awaitDrain > 0)
      return;
  }

  // if every destination was unpiped, either before entering this
  // function, or in the while loop, then stop flowing.
  //
  // NB: This is a pretty rare edge case.
  if (state.pipesCount === 0) {
    state.flowing = false;

    // if there were data event listeners added, then switch to old mode.
    if (EE.listenerCount(src, 'data') > 0)
      emitDataEvents(src);
    return;
  }

  // at this point, no one needed a drain, so we just ran out of data
  // on the next readable event, start it over again.
  state.ranOut = true;
}

function pipeOnReadable() {
  if (this._readableState.ranOut) {
    this._readableState.ranOut = false;
    flow(this);
  }
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data' && !this._readableState.flowing)
    emitDataEvents(this);

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        this.read(0);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  emitDataEvents(this);
  this.read(0);
  this.emit('resume');
};

Readable.prototype.pause = function() {
  emitDataEvents(this, true);
  this.emit('pause');
};

function emitDataEvents(stream, startPaused) {
  var state = stream._readableState;

  if (state.flowing) {
    // https://github.com/isaacs/readable-stream/issues/16
    throw new Error('Cannot switch to old mode now.');
  }

  var paused = startPaused || false;
  var readable = false;

  // convert to an old-style stream.
  stream.readable = true;
  stream.pipe = Stream.prototype.pipe;
  stream.on = stream.addListener = Stream.prototype.on;

  stream.on('readable', function() {
    readable = true;

    var c;
    while (!paused && (null !== (c = stream.read())))
      stream.emit('data', c);

    if (c === null) {
      readable = false;
      stream._readableState.needReadable = true;
    }
  });

  stream.pause = function() {
    paused = true;
    this.emit('pause');
  };

  stream.resume = function() {
    paused = false;
    if (readable)
      process.nextTick(function() {
        stream.emit('readable');
      });
    else
      this.read(0);
    this.emit('resume');
  };

  // now make it start, just in case it hadn't already.
  stream.emit('readable');
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (typeof stream[i] === 'function' &&
        typeof this[i] === 'undefined') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted && state.calledRead) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"_process":57,"buffer":37,"core-util-is":64,"events":53,"inherits":54,"isarray":55,"stream":70,"string_decoder/":65}],62:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  var ts = this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('finish', function() {
    if ('function' === typeof this._flush)
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var rs = stream._readableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":59,"core-util-is":64,"inherits":54}],63:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/


var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb))
    ret = writeOrBuffer(this, state, chunk, encoding, cb);

  return ret;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      cb(er);
    });
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.bufferProcessing && state.buffer.length)
      clearBuffer(stream, state);

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  cb();
  if (finished)
    finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  for (var c = 0; c < state.buffer.length; c++) {
    var entry = state.buffer[c];
    var chunk = entry.chunk;
    var encoding = entry.encoding;
    var cb = entry.callback;
    var len = state.objectMode ? 1 : chunk.length;

    doWrite(stream, state, len, chunk, encoding, cb);

    // if we didn't call the onwrite immediately, then
    // it means that we need to wait until it does.
    // also, that means that the chunk and cb are currently
    // being processed, so move the buffer counter past them.
    if (state.writing) {
      c++;
      break;
    }
  }

  state.bufferProcessing = false;
  if (c < state.buffer.length)
    state.buffer = state.buffer.slice(c);
  else
    state.buffer.length = 0;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (typeof chunk !== 'undefined' && chunk !== null)
    this.write(chunk, encoding);

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    state.finished = true;
    stream.emit('finish');
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":59,"_process":57,"buffer":37,"core-util-is":64,"inherits":54,"stream":70}],64:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)
},{"buffer":37}],65:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  this.charBuffer = new Buffer(6);
  this.charReceived = 0;
  this.charLength = 0;
};


StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  var offset = 0;

  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var i = (buffer.length >= this.charLength - this.charReceived) ?
                this.charLength - this.charReceived :
                buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, offset, i);
    this.charReceived += (i - offset);
    offset = i;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (i == buffer.length) return charStr;

    // otherwise cut off the characters end from the beginning of this buffer
    buffer = buffer.slice(i, buffer.length);
    break;
  }

  var lenIncomplete = this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - lenIncomplete, end);
    this.charReceived = lenIncomplete;
    end -= lenIncomplete;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    this.charBuffer.write(charStr.charAt(charStr.length - 1), this.encoding);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }

  return i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  var incomplete = this.charReceived = buffer.length % 2;
  this.charLength = incomplete ? 2 : 0;
  return incomplete;
}

function base64DetectIncompleteChar(buffer) {
  var incomplete = this.charReceived = buffer.length % 3;
  this.charLength = incomplete ? 3 : 0;
  return incomplete;
}

},{"buffer":37}],66:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":60}],67:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":59,"./lib/_stream_passthrough.js":60,"./lib/_stream_readable.js":61,"./lib/_stream_transform.js":62,"./lib/_stream_writable.js":63}],68:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":62}],69:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":63}],70:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":53,"inherits":54,"readable-stream/duplex.js":58,"readable-stream/passthrough.js":66,"readable-stream/readable.js":67,"readable-stream/transform.js":68,"readable-stream/writable.js":69}],71:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],72:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":71,"_process":57,"inherits":54}]},{},[34]);
