[[kibana-diagnostic]]
== Capturing diagnostics
++++
<titleabbrev>Capture diagnostics</titleabbrev>
++++
:keywords: Kibana diagnostic, diagnostics

The {kib} https://github.com/elastic/support-diagnostics[Support Diagnostic] 
tool captures a point-in-time snapshot of {kib} and its Task Manager health. 
It works against {kib} versions greater than or equal to 7.11.0. 

This information can be used to troubleshoot problems with {kib} instance. 
For examples of issues that you can troubleshoot using Support Diagnostic 
tool output, refer to the 
https://www.elastic.co/blog/troubleshooting-kibana-health[Troubleshooting 
Kibana Health blog].

You can generate diagnostic information using this tool before you contact 
https://support.elastic.co[Elastic Support] or 
https://discuss.elastic.co[Elastic Discuss] to minimize turnaround time. 

[discrete]
[[kibana-diagnostic-tool-requirements]]
=== Requirements

-  Java Runtime Environment or Java Development Kit v1.8 or higher

[discrete]
[[kibana-diagnostic-tool-access]]
=== Access the tool

The Support Diagnostic tool is included as a sub-library in some Elastic 
deployments: 

* {ece}: Located under **{ece}** > **Deployment** > **Operations** > 
**Prepare Bundle** > **{kib}**. 
* {eck}: Run as https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-take-eck-dump.html[`eck-diagnostics`].

You can also directly download the `diagnostics-X.X.X-dist.zip` file for 
the latest Support Diagnostic release from 
https://github.com/elastic/support-diagnostics/releases/latest[the 
`support-diagnostic` repo].


[discrete]
[[kibana-diagnostic-capture]]
=== Capture diagnostic information

To capture a {kib} diagnostic: 

. In a terminal, verify that your network and user permissions are sufficient 
to connect by polling {kib}'s <<task-manager-api-health,Task Manager health>>.
+
For example, with the parameters `host:localhost`, `port:5601`, and 
`username:elastic`, you'd use the following curl request:
+
[source,sh]
----
curl -X GET -k -H 'kbn-xsrf: true' -u elastic -p https://localhost:5601/api/task_manager/_health
----
// NOTCONSOLE
+
If you receive a an HTTP 200 `OK` response, then you can proceed to the 
next step. If you receive a different response code, then 
<<diagnostic-non-200,diagnose the issue>> before proceeding.

. Using the same environment parameters, run the diagnostic tool script. 
+
For information about the parameters that you can pass to the tool, refer 
to the https://github.com/elastic/support-diagnostics#standard-options[diagnostic 
parameter reference]. 
+
The following command options are recommended:
+
**Unix-based systems**
+
[source,sh]
----
sudo ./diagnostics.sh --type kibana-local --host localhost --port 5601 -u elastic -p --bypassDiagVerify --ssl --noVerify
----
+
**Windows**
+
[source,sh]
----
sudo .\diagnostics.bat --type kibana-local --host localhost --port 5601 -u elastic -p --bypassDiagVerify --ssl --noVerify
----
+
[TIP]
.Script execution modes
====
You can execute the script in three https://github.com/elastic/support-diagnostics#diagnostic-types[modes]: 

* `kibana-local` (default, recommended): Polls the <<api,{kib} API>>, 
gathers operating system info, and captures cluster and GC logs. 

* `kibana-remote`: Establishes an ssh session 
to the applicable target server to pull the same information as `kibana-local`.

* `kibana-api`: Polls the <<api,{kib} API>>. All other data must be 
collected manually.
====

. When the script has completed, verify that no errors were logged to 
`diagnostic.log`. If the log file contains errors, then refer to 
<<diagnostic-log-errors,Diagnose errors in `diagnostic.log`>>.

. If the script completed without errors, then an archive with the 
format `<diagnostic type>-diagnostics-<DateTimeStamp>.zip` is created in 
the working directory, or an output directory you have specified. You can 
review or share the diagnostic archive as needed.

[discrete]
[[kibana-diagnostic-non-200]]
=== Diagnose a non-200 response

When you poll your Task Manager health, if you receive any response other 
than `200 0K`, then the diagnostic tool might not work as intended. The 
following are possible error codes and their resolutions:

HTTP 401 `UNAUTHENTICATED`::
Additional information in the error will usually indicate either 
that your `username:password` pair is invalid, or that your {es} `.security` 
index is unavailable and you need to setup a temporary 
<<file-realm,file-based realm>> user with `role:superuser` to authenticate.

HTTP 403 `UNAUTHORIZED`::
Your `username` is recognized but has insufficient permissions to run the 
diagnostic. Either use a different username or elevate the user's privileges.

HTTP 429 `TOO_MANY_REQUESTS` (for example, `circuit_breaking_exception`)::
Your username authenticated and authorized, but the {es} cluster is under 
sufficiently high strain that it's not responding to requests. These 
responses are usually intermittent. You will usually want to pivot and 
resolving {es}'s health first before returning to {kib}. 

HTTP 504 `BAD_GATEWAY`::
Your network is experiencing issues reaching {kib}. You might be using 
a proxy or firewall. Consider running the diagnostic tool from a different 
location, confirming your port, or using an IP instead of a URL domain. 

[discrete]
[[kibana-diagnostic-log-errors]]
=== Diagnose errors in `diagnostic.log`

The following are common errors that you might encounter when running 
the diagnostic tool:

* `Error: Could not find or load main class com.elastic.support.diagnostics.DiagnosticApp`
+
This indicates that you accidentally downloaded the source code file 
instead of `diagnostics-X.X.X-dist.zip` from the releases page.

* A `security_exception` that includes `is unauthorized for user`:
+
The provided user has insufficient admin permissions to run the diagnostic 
tool. Use another user, or grant the user `role:superuser` privileges.

* `{kib} Server is not Ready yet`
+ This indicates issues with {kib}'s dependencies blocking full start-up. 
To investigate, see <<not-ready,Troubleshoot {kib} UI error>>. 
