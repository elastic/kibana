[role="xpack"]
[[task-manager-health-monitoring]]
=== Task Manager health monitoring

++++
<titleabbrev>Health monitoring</titleabbrev>
++++

The Task Manager has an internal monitoring mechanism to keep track of a variety of metrics, which can be consumed with either the health monitoring API or the {kib} server log.

The health monitoring API provides a reliable endpoint that can be monitored.
Consuming this endpoint doesn't cause additional load, but rather returns the latest health checks made by the system. This design enables consumption by external monitoring services at a regular cadence without additional load to the system.

Each {kib} instance exposes its own endpoint at:

[source,sh]
--------------------------------------------------
$ curl -X GET api/task_manager/_health
--------------------------------------------------
// KIBANA

Monitoring the `_health` endpoint of each {kib} instance in the cluster is the recommended method of ensuring confidence in mission critical services such as Alerting and Actions.

[float]
[[task-manager-configuring-health-monitoring]]
==== Configuring the monitored health statistics

The health monitoring API monitors the performance of Task Manager out of the box.  However, certain performance considerations are deployment specific and you can configure them.

A health threshold is the threshold for failed task executions.  Once a task exceeds this threshold, a status of `warn` or `error` is set on the task type execution. To configure a health threshold, use the <<task-manager-health-settings,`xpack.task_manager.monitored_task_execution_thresholds`>> setting.  You can apply this this setting to all task types in the system, or to a custom task type. 

By default, this setting marks the health of every task type as `warning` when it exceeds 80% failed executions, and as `error` at 90%.
Set this value to a number between 0 to 100. The threshold is hit when the value *exceeds* this number.
To avoid a status of `error`, set the threshold at 100.  To hit `error` the moment any task fails, set the threshold to 0.

Create a custom configuration to set lower thresholds for task types you consider critical, such as alerting tasks that you want to detect sooner in an external monitoring service.

[source,yml]
----
xpack.task_manager.monitored_task_execution_thresholds:
  default: # <1>
    error_threshold: 70
    warn_threshold: 50
  custom:
    "alerting:.index-threshold": # <2>
      error_threshold: 50
      warn_threshold: 0
----
<1> A default configuration that sets the system-wide `warn` threshold at a 50% failure rate, and `error` at 70% failure rate.
<2> A custom configuration for the `alerting:.index-threshold` task type that sets a system wide `warn` threshold at 0% (which sets a `warn` status the moment any task of that type fails), and `error` at a 50% failure rate.

[float]
[[task-manager-consuming-health-stats]]
==== Consuming health stats

The health API is best consumed by via the `/api/task_manager/_health` endpoint.

Additionally, the metrics are logged in the {kib} `DEBUG` logger at a regular cadence.
To enable Task Manager DEBUG logging in your {kib} instance, add the following to your `kibana.yml`:

[source,yml]
----
logging:
  loggers:
      - context: plugins.taskManager
        appenders: [console]
        level: debug
----

These stats are logged based the number of milliseconds set in your <<task-manager-settings,`xpack.task_manager.poll_interval`>> setting, which means it could add substantial noise to your logs. Only enable this level of logging temporarily.

[float]
[[making-sense-of-task-manager-health-stats]]
==== Making sense of Task Manager health stats

The health monitoring API exposes three sections: `configuration`, `workload` and `runtime`:

[cols="2"]
|===

a| Configuration

| This section summarizes the current configuration of Task Manager.  This includes dynamic configurations that change over time, such as `poll_interval` and `max_workers`, which can adjust in reaction to changing load on the system.

a| Workload

| This section summarizes the work load across the cluster, including the tasks in the system, their types, and current status.

a| Runtime

| This section tracks excution performance of Task Manager, tracking task _drift_, worker _load_, and execution stats broken down by type, including duration and execution results.

|===

Each section has a `timestamp` and a `status` that indicates when the last update to this section took place and whether the health of this section was evaluated as `OK`, `Warning` or `Error`.

The root `status` indicates the `status` of the system overall.

By monitoring the `status` of the system overall, and the `status` of specific task types of interest, you can evaluate the health of the {kib} Task Management system.
