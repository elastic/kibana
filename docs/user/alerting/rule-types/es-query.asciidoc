[[rule-type-es-query]]
== Create an {es} query rule
:frontmatter-description: Generate alerts when an {es} query meets a threshold.
:frontmatter-tags-products: [kibana,alerting]
:frontmatter-tags-content-type: [how-to]
:frontmatter-tags-user-goals: [analyze]
++++
<titleabbrev>{es} query</titleabbrev>
++++

The {es} query rule type runs a user-configured query, compares the number of 
matches to a configured threshold, and schedules actions to run when the 
threshold condition is met.

In *{stack-manage-app}* > *{rules-ui}*, click *Create rule*, fill in the name and optional tags, then select *{es} query*.
An {es} query rule can be defined using {es} Query Domain Specific Language (DSL), {es} Query Language (ES|QL), {kib} Query Language (KQL), or Lucene.

[float]
=== Define the conditions

When you create an {es} query rule, your choice of query type affects the information you must provide.
For example:

[role="screenshot"]
image::user/alerting/images/rule-types-es-query-conditions.png[Define the condition to detect]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

1. Define your query
+
--
If you use {ref}/query-dsl.html[query DSL], you must select an index and time field then provide your query.
Only the `query`, `fields`, `_source` and `runtime_mappings` fields are used, other DSL fields are not considered.
For example:

[source,sh]
--------------------------------------------------
{
    "query":{
      "match_all" : {}
    }
 }
--------------------------------------------------

If you use {kibana-ref}/kuery-query.html[KQL] or {kibana-ref}/lucene-query.html[Lucene], you must specify a data view then define a text-based query.
For example, `http.request.referrer: "https://example.com"`.

preview:[] If you use {ref}/esql.html[ES|QL], you must provide a source command followed by an optional series of processing commands, separated by pipe characters (|).
For example:

[source,sh]
--------------------------------------------------
FROM kibana_sample_data_logs
| STATS total_bytes = SUM(bytes) BY host
| WHERE total_bytes > 200000
| SORT total_bytes DESC
| LIMIT 10
--------------------------------------------------
--

2. If you use query DSL, KQL, or Lucene, set the group and theshold.
+
--
When::: Specify how to calculate the value that is compared to the threshold. The value is calculated by aggregating a numeric field within the time window. The aggregation options are: `count`, `average`, `sum`, `min`, and `max`. When using `count` the document count is used and an aggregation field is not necessary.
Over or Grouped Over::: Specify whether the aggregation is applied over all documents or split into groups using up to four grouping fields.
If you choose to use grouping, it's a {ref}/search-aggregations-bucket-terms-aggregation.html[terms] or {ref}/search-aggregations-bucket-multi-terms-aggregation.html[multi terms aggregation]; an alert will be created for each unique set of values when it meets the condition.
To limit the number of alerts on high cardinality fields, you must specify the number of groups to check against the threshold.
Only the top groups are checked.
Threshold::: Defines a threshold value and a comparison operator  (`is above`, 
`is above or equals`, `is below`, `is below or equals`, or `is between`). The value
calculated by the aggregation is compared to this threshold.
--

3. Set the time window, which defines how far back to search for documents.

4. If you use query DSL, KQL, or Lucene, set the number of documents to send to the configured actions when the threshold condition is met.

5. If you use query DSL, KQL, or Lucene, choose whether to avoid alert duplication by excluding matches from the previous run.
This option is not available when you use a grouping field.

6. Set the check interval, which defines how often to evaluate the rule conditions.
Generally this value should be set to a value that is smaller than the time window, to avoid gaps in 
detection.

7. Select a scope value, which affects the <<kibana-feature-privileges,{kib} feature privileges>> that are required to access the rule.
For example when it's set to `Stack Rules`, you must have the appropriate *Management > {stack-rules-feature}* feature privileges to view or edit the rule.

[float]
=== Test your query

Use the *Test query* feature to verify that your query is valid.

If you use query DSL, KQL, or Lucene, the query runs against the selected indices using the configured time window.
The number of documents that match the query is displayed.
For example:

[role="screenshot"]
image::user/alerting/images/rule-types-es-query-valid.png[Test {es} query returns number of matches when valid]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

preview:[] If you use an ES|QL query, a table is displayed. For example:

[role="screenshot"]
image::user/alerting/images/rule-types-esql-query-valid.png[Test ES|QL query returns a table when valid]

If the query is not valid, an error occurs.

[float]
=== Add actions

You can optionally send notifications when the rule conditions are met and when they are no longer met.
In particular, this rule type supports:

* alert summaries
* actions that run when the query is matched
* recovery actions that run when the rule conditions are no longer met

For each action, you must choose a connector, which provides connection information for a {kib} service or third party integration. For more information about all the supported connectors, go to <<action-types>>.

After you select a connector, you must set the action frequency.
You can choose to create a summary of alerts on each check interval or on a custom interval.
For example, send email notifications that summarize the new, ongoing, and recovered alerts at a custom interval:

[role="screenshot"]
image::images/es-query-rule-action-summary.png[UI for defining alert summary action in an {es} query rule]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

Alternatively, you can set the action frequency such that actions run for each alert.
Choose how often the action runs (at each check interval, only when the alert status changes, or at a custom action interval).
You must also choose an action group, which indicates whether the action runs when the query is matched or when the alert is recovered.
Each connector supports a specific set of actions for each action group.
For example:

[role="screenshot"]
image::images/es-query-rule-action-query-matched.png[UI for defining a recovery action]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

You can further refine the conditions under which actions run by specifying that actions only run they match a KQL query or when an alert occurs within a specific time frame.

[float]
=== Add action variables

You can pass rule values to an action to provide contextual details.
To view the list of variables available for each action, click the "add rule variable" button.
For example:

[role="screenshot"]
image::images/es-query-rule-action-variables.png[Passing rule values to an action]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

The following variables are specific to the {es} query rule.
You can also specify <<defining-rules-actions-variables,variables common to all rules>>.

`context.title`:: A preconstructed title for the rule. Example: 
`rule term match alert query matched`.

`context.message`:: A preconstructed message for the rule. Example: +
`rule 'my es-query' is active:` +
`- Value: 2` +
`- Conditions Met: Number of matching documents is greater than 1 over 5m` +
`- Timestamp: 2022-02-03T20:29:27.732Z`

`context.group`:: The name of the action group associated with the condition. 
Example: `query matched`.

`context.date`:: The date, in ISO format, that the rule met the condition. 
Example: `2022-02-03T20:29:27.732Z`.

`context.value`:: The value of the rule that met the condition.

`context.conditions`:: A description of the condition. Example: 
`count greater than 4`.

`context.hits`:: The most recent documents that matched the query. Using the 
https://mustache.github.io/[Mustache] template array syntax, you can iterate 
over these hits to get values from the {es} documents into your actions.
For example, the message in an email connector action might contain:
+
--
[source,sh]
--------------------------------------------------
Elasticsearch query rule '{{rule.name}}' is active:

{{#context.hits}}
Document with {{_id}} and hostname {{_source.host.name}} has
{{_source.system.memory.actual.free}} bytes of memory free
{{/context.hits}}
--------------------------------------------------

The documents returned by `context.hits` include the {ref}/mapping-source-field.html[`_source`] field.
If the {es} query search API's {ref}/search-fields.html#search-fields-param[`fields`] parameter is used, documents will also return the `fields` field, 
which can be used to access any runtime fields defined by the {ref}/runtime-search-request.html[`runtime_mappings`] parameter. 
For example:

[source,sh]
--------------------------------------------------
{{#context.hits}}
timestamp: {{_source.@timestamp}}
day of the week: {{fields.day_of_week}} <1>
{{/context.hits}}
--------------------------------------------------
// NOTCONSOLE
<1> The `fields` parameter here is used to access the `day_of_week` runtime field.

As the {ref}/search-fields.html#search-fields-response[`fields`] response always returns an array of values for each field, 
the https://mustache.github.io/[Mustache] template array syntax is used to iterate over these values in your actions.
For example:

[source,sh]
--------------------------------------------------
{{#context.hits}}
Labels:
{{#fields.labels}}
- {{.}}
{{/fields.labels}}
{{/context.hits}}
--------------------------------------------------
// NOTCONSOLE
--

[float]
=== Handling multiple matches of the same document

By default, *Exclude matches from previous run* is turned on and the rule checks
for duplication of document matches across multiple runs. If you configure the
rule with a schedule interval smaller than the time window and a document
matches a query in multiple runs, it is alerted on only once.

The rule uses the timestamp of the matches to avoid alerting on the same match 
multiple times. The timestamp of the latest match is used for evaluating the 
rule conditions when the rule runs. Only matches between the latest timestamp
from the previous run and the current run are considered.

Suppose you have a rule configured to run every minute. The rule uses a time 
window of 1 hour and checks if there are more than 99 matches for the query. The 
{es} query rule type does the following:

[cols="3*<"]
|===
| `Run 1 (0:00)`
| Rule finds 113 matches in the last hour: `113 > 99`
| Rule is active and user is alerted.
| `Run 2 (0:01)`
| Rule finds 127 matches in the last hour. 105 of the matches are duplicates that were already alerted on previously, so you actually have 22 matches: `22 !> 99`
| No alert.
| `Run 3 (0:02)`
| Rule finds 159 matches in the last hour. 88 of the matches are duplicates that were already alerted on previously, so you actually have 71 matches: `71 !> 99`
| No alert.
| `Run 4 (0:03)`
| Rule finds 190 matches in the last hour. 71 of them are duplicates that were already alerted on previously, so you actually have 119 matches: `119 > 99`
| Rule is active and user is alerted.
|===