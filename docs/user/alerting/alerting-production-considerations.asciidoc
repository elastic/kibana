[role="xpack"]
[[alerting-production-considerations]]
== Production considerations

{kib} alerting run both alert checks and actions as persistent background tasks managed by the Kibana Task Manager. This has two major benefits:

* *Persistence*: all task state and scheduling is stored in {es}, so if {kib} is restarted, alerts and actions will pick up where they left off.  Task definitions for alerts and actions are stored in the index specified by `xpack.task_manager.index` (defaults to `.kibana_task_manager`).  It is important to have at least 1 replica of this index for production deployments, since if you lose this index all scheduled alerts and actions are also lost.
* *Scaling*: multiple {kib} instances can read from and update the same task queue in {es}, allowing the alerting and action load to be distributed across instances. In cases where a {kib} instance no longer has capacity to run alert checks or actions, capacity can be increased by adding additional {kib} instances.

[float]
=== Running background alert checks and actions

{kib} uses <<task-manager>> to run Alerts and Actions as background tasks, distributed across all {kib} nodes in the cluster.

By default, each {kib} instance polls for work at 3 second intervals, and can run a maximum of 10 concurrent tasks.
These tasks are then ran on the {kib} server.

In the case of alerts which are recurring background checks, upon completion the task is scheduled again according to the <<defining-alerts-general-details, check interval>>.

For more details on Task Manager, see <<task-manager-background-tasks>>.

[IMPORTANT]
==============================================
It is possible for alert and action tasks to be run late or at an inconsistent schedule.
This is usually a symptom of the specific usage of the cluster in question.

Such issues can be addressed by tweaking the {kib} <<task-manager>> or adjusting the cluster scaling strategy to better suit the unique use case.

For detailed guidance, see <<alerting-troubleshooting,`Alerting Troubelshooting`>>.
==============================================

[float]
=== Deployment considerations

{es} and {kib} instances use the system clock to determine the current time. To ensure schedules are triggered when expected, you should synchronize the clocks of all nodes in the cluster using a time service such as http://www.ntp.org/[Network Time Protocol].
