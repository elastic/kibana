[[rule-action-variable-tips]]
== Mustache tips and examples for rule actions
:frontmatter-description: Examples of how to use Mustache templates in {kib} alerting rule actions.
:frontmatter-tags-products: [alerting] 
:frontmatter-tags-content-type: [how-to] 
:frontmatter-tags-user-goals: [configure]
++++
<titleabbrev>Mustache tips and examples</titleabbrev>
++++

When a rule generates an alert, it can pass context-specific details by using <<rule-action-variables,rule action variables>> in Mustache templates.
For more information about Mustache, refer to https://github.com/mustache/spec or https://mustache.github.io/.

Rules support a specific subset of <<rule-action-mustache-lambdas,Mustache lambdas>>.
This page provides examples of their use as well as tips related to common syntax patterns.

[discrete]
=== Escape characters

By default, all variables in Mustache templates are HTML escaped.
Triple braces (`{{{variable name}}}`) specify to return the content without any escaping.
Use this form with caution, since it could end up rendering the variable content such that the resulting parameter is invalid or formatted incorrectly.
Some connectors automatically escape variable values in specific scenarios. For example:

- For the <<email-action-type,email connector>>, the `message` action configuration property escapes any characters that would be interpreted as Markdown.
- For the <<slack-action-type,Slack connector>>, the `message` action configuration property escapes any characters that would be interpreted as Slack Markdown.
- For the <<webhook-action-type,Webhook connector>>, the `body` action configuration property escapes any characters that are invalid in JSON string values.

[discrete]
=== Sections and implicit iterators

You can use Mustache sections, which start with a pound (`#`) and end with a slash (`/`), to render content conditionally or in a for-each loop.

The following example makes use of an implicit iterator (`{{.}}`) and a section to loop through all the properties in the `context` object and render them in JSON format:

[source,mustache]
--------------------------------------------------
{{#context}}{{.}}{{/context}}
--------------------------------------------------

TIP: The implicit iterator is typically used in this manner for diagnostic or exploratory purposes only.

The following example from a {transform} health rule demonstrates how to use sections to conditionally show content within a for-each loop:

[source,mustache]
--------------------------------------------------
{{#context.results}}
  Transform ID: {{transform_id}}
  {{#description}}Transform description: {{description}}
  {{/description}}{{#transform_state}}Transform state: {{transform_state}}
  {{/transform_state}}
  {{#details}}Issue details: {{details}}
  {{/details}}
{{/context.results}}
--------------------------------------------------

If `context.results.description` is missing, for example, the text in that section is not displayed.

[discrete]
=== Rendering objects as JSON

preview::[]

Some connectors (such as the <<webhook-action-type,Webhook connector>>) expect the rule action to send JSON values.
Array values referenced in braces have a predefined rendering by Mustache as string versions of the array elements joined with a comma (`,`).
To render array values as JSON, access the `asJSON` property of the array, instead of the array directly.
For example, if a Mustache variable `context.values` has the value `[1, 4, 9]`, the Mustache template `{{context.values}}` renders as `1,4,9`. The Mustache template `{{context.values.asJSON}}` renders as `[1,4,9]`.

Alternatively, you can use the Mustache lambda <<parse-hjson-lambda,ParseHjson>>, which makes it easier to create JSON in your templates. It uses https://hjson.github.io/[Hjson], a syntax extension to JSON, rather than strict JSON.

[discrete]
[[rule-action-mustache-lambdas]]
=== Mustache lambdas

preview::[]

Lambdas provide additional rendering capabilities for Mustache templates.
A Mustache lambda is formatted like a Mustache section; it begins with a pound and ends with a slash.

Rule actions support only the following lambdas: <<eval-math-lambda,EvalMath>>, <<format-date-lambda,FormatDate>>, <<format-number-lambda,FormatNumber>>, and <<parse-hjson-lambda,ParseHjson>>.

[discrete]
[[eval-math-lambda]]
==== EvalMath

The EvalMath lambda evaluates the text passed to it as <<canvas-tinymath-functions>>.

The following example renders a rounded value of the `context.value` variable:

[source,mustache]
----
{{#EvalMath}} round(context.value, 1) {{/EvalMath}}
----

When `context.value` is `3.1234`, it is rendered as `3.1`.

This lambda can access Mustache variables without having to wrap them in `{{}}`.
However, if the value is in a string form (for example, an Elasticsearch numeric field whose source was indexed as a string) or could be escaped, escaping the value with triple quotes should work.
For example, if the variable `context.value` is `"3.1234"`, the following template renders `3.1`:

[source,mustache]
----
{{#EvalMath}} round( {{{context.value}}} , 1) {{/EvalMath}}
----

[discrete]
[[parse-hjson-lambda]]
==== ParseHjson

The ParseHjson lambda provides ease-of-use capabilities when constructing JSON objects.
https://hjson.github.io/[Hjson] is a syntax extension to JSON. It has the following features:

- Missing and extra trailing commas are allowed in arrays and objects.
- Comments are supported.
- Property names can be specified without quotes.
- Property values can be specified without quotes (one per line and no commas).
- Multi-line strings have dedent support to remove the leading whitespace.
- Legal JSON documents are supported.

To use it, surround your Hjson content with `{{#ParseHjson}}...{{/ParseHjson}}`.
For example:
 
[source,mustache]
----
{{#ParseHjson}}
{
  # add the rule id and name to the JSON document
  ruleId:   "{{rule.id}}"
  ruleName: "{{rule.name}}"
}
{{/ParseHjson}}
----

This template is rendered as follows:
 
[source,json]
----
{
  "ruleId": "<the rule id is here>",
  "ruleName": "<the rule name is here>"
}
----

[discrete]
[[format-date-lambda]]
==== FormatDate

The FormatDate lambda provides date formatting capabilities.
Dates can be formatted in an arbitrary time zone and with an arbitrary format string.

To use it, surround the date and formatting parameters with `{{#FormatDate}}...{{/FormatDate}}`.

The format of the text passed to the lambda is: `<date>; <time zone>; <date format>`, where semicolons (`;`) separate each parameter.
The `<date>` parameter is required; the `<time zone>` and `<date format>` parameters are optional.
The default time zone is `"UTC"` and the default date format is `"YYYY-MM-DD hh:mma"`.
For example, the following templates all render the same value:
 
[source,mustache]
----
{{#FormatDate}} {{{timestamp}}} {{/FormatDate}}
{{#FormatDate}} {{{timestamp}}} ; UTC {{/FormatDate}}
{{#FormatDate}} {{{timestamp}}} ; UTC; YYYY-MM-DD hh:mma {{/FormatDate}}
{{#FormatDate}} {{{timestamp}}} ; ; YYYY-MM-DD hh:mma {{/FormatDate}}
----

The `<time zone>` parameter must be a valid time zone identifier as listed in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones[TZ database time zone names], such as `"America/New_York"`.

The `<date format>` parameter must be a valid date format string as described in the https://momentjs.com/docs/#/displaying/[Moment `format()` documentation].
For example, the date format `"YYYY-MM-DD hh:mma"` renders in the following format: `"2023-04-24 11:21pm"`.

The date value itself should usually be referenced with triple braces since some characters in date strings may contain values that are escaped, which would prevent them from being parsed as dates.

[discrete]
[[format-number-lambda]]
==== FormatNumber

The FormatNumber lambda provides number formatting capabilities using the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat[`Intl.NumberFormat` object].

Numbers can be formatted with the following `Intl.NumberFormat` options:

- `compactDisplay`
- `currencyDisplay`
- `currencySign`
- `notation`
- `signDisplay`
- `unitDisplay`
- `unit`
- `useGrouping` - but only values true and false
- `minimumIntegerDigits`
- `minimumFractionDigits`
- `maximumFractionDigits`
- `minimumSignificantDigits`
- `maximumSignificantDigits`

To use the lambda, surround the number and formatting options with `{{#FormatNumber}}...{{/FormatNumber}}`.

The format of the text passed to the lambda is: `<number>; <locales>; <options>`, where semicolons (`;`) separate each parameter.
The `<number>` parameter is required; it is the value to be formatted.
The `<locales>` and `<options>` parameters are optional, but the semicolons must be provided; the values may be empty strings.
The `<locales>` parameter is a list of locales separated by commas (`,`).
The `<options>` parameter is a list of key value pairs separated by commas (`,`).
The key value pairs are strings separated by colons (`:`) where the key is the name of the option and the value is the value of the option.
The default locale is `en-US` and no options are set by default.

For more information on locale strings, refer to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument[the `locales` argument documentation from the `Intl` reference].

The options and values that can be used with them are listed under `options` in the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat[Intl.NumberFormat() constructor documentation].

For example:

[source,mustache]
----
original value: {{{context.value.condition0}}}
formatted value: {{#FormatNumber}}
    {{{context.value.condition0}}} ; de-DE ; style: currency, currency: EUR
{{/FormatNumber}}
----

If the context variable `context.value.condition0` has a value of `628.4`, it results in the following text:

[source,sh]
----
original value: 628.4
formatted value: 628,40 €
----

The `{{FormatNumber}}` and `{{EvalMath}}` lambdas can be used together to perform calculations on numbers and then format them.
For example:

[source,mustache]
----
original value: {{{context.value.condition0}}}
formatted value: {{#FormatNumber}}
  {{#EvalMath}} {{context.value.condition0}} * 0.1 {{/EvalMath}}
  ; de-DE ; style: currency, currency: EUR
{{/FormatNumber}}
----

If the context variable `context.value.condition0` has a value of `628.4`, it results in the following text:

[source,sh]
----
original value: 628.4
formatted value: 62,84 €
----

[discrete]
[[mustache-examples]]
=== Mustache examples

This example demonstrates a Mustache template for an email action.

An <<rule-type-es-query,{es} query rule>> collects data like this when an alert occurs:

[source,json]
----
{
  "date": "2023-04-27T22:40:34.153Z",
  "context": {
    "title": "rule 'esq' matched query for group host-2",
    "conditions": "Number of matching documents for group \"host-2\" is less than 1000",
    "link": "https://example.com/this-will-link-to-Discover",
    "hits": [
      {
        "_source": {
          "event": {
            "provider": "alerting",
            "action": "active-instance",
            "duration": "96023000000"
          }
        }
      },
      {
        "_source": {
          "@timestamp": "2023-04-27T22:40:22.251Z",
          "event": {
            "provider": "alerting",
            "action": "execute-action"
          }
        }
      }
    ]
  }
}
----

You can use a Mustache template in the email action for your rule to include the appropriate alert details.
For example:

[source,mustache]
----
# {{context.title}} <1>

{{#FormatDate}} {{{date}}} ; America/New_York {{/FormatDate}} <2>

{{context.conditions}}

**documents** _[view in Discover]({{{context.link}}})_ <3>

| provider | action | duration | <4>
| -------- | ------ | -------- |
{{#context.hits}}{{#_source.event}}| {{provider}} | {{action}} | {{#duration}}{{#EvalMath}} round( {{{duration}}} / 1000 / 1000 / 1000 ) {{/EvalMath}} sec{{/duration}} {{^duration}}-n/a-{{/duration}} |{{/_source.event}}
{{/context.hits}}
----
<1> Renders the value of the `context.title` variable as a level 1 heading.
<2> Renders the value of the `date` variable as a formatted date in the America/New_York time zone.
<3> Shows examples of `**bold**`, `_italic_`, and `[text](url)` links.
<4> Shows a table with three columns, with one row per element in the `context.hits` array.
From each of those elements, you can access the `provider`, `action`, and `duration` fields of the `_source.event` object.
The `duration` field is rendered as a number of seconds, rounded to the nearest second.
It's stored as nanoseconds so it needs to be divided by a billion to yield seconds.
The duration field is optional, so you can use a `{{#duration}} ... {{/duration}}` section to render the duration if it's present and show `-n/a-` otherwise.

When rendered into Markdown and then HTML and viewed in an email client, it looks like this:

[role="screenshot"]
image:images/email-mustache-template-rendered.png[Email template rendered in an email client]