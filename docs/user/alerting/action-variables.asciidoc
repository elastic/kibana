[[rule-action-variables]]
== Rule action variables

Alerting rules can use the https://mustache.github.io/[Mustache] template syntax
(`{{variable name}}`) to pass values when its actions run.

[float]
[[common-rule-action-variables]]
=== Common variables

The available variables differ by rule type, however there are some common variables:

* <<general-rule-action-variables>>
* <<alert-summary-action-variables>>
* <<alert-action-variables>>

Some cases exist where the variable values will be "escaped" when used in a context where escaping is needed. For example:

- For the <<email-action-type,email connector>>, the `message` action configuration property escapes any characters that would be interpreted as Markdown.
- For the <<slack-action-type,Slack connector>>, the `message` action configuration property escapes any characters that would be interpreted as Slack Markdown.
- For the <<webhook-action-type,Webhook connector>>, the `body` action configuration property escapes any characters that are invalid in JSON string values.

Mustache also supports "triple braces" of the form `{{{variable name}}}`, which indicates no escaping should be done at all. Use this form with caution, since it could end up rendering the variable content such that the resulting parameter is invalid or formatted incorrectly.

[float]
[[general-rule-action-variables]]
==== General

All rule types pass the following variables:

`date`:: The date the rule scheduled the action, in ISO format.
`kibanaBaseUrl`:: The configured <<server-publicBaseUrl,`server.publicBaseUrl`>>. If not configured, this will be empty.
`rule.id`:: The ID of the rule.
`rule.name`:: The name of the rule.
`rule.spaceId`:: The ID of the space for the rule.
`rule.tags`:: The list of tags applied to the rule.

[float]
[role="child_attributes"]
[[alert-summary-action-variables]]
==== Action frequency: Summary of alerts

If the rule's action frequency is a summary of alerts, it passes the following variables:

`alerts.all.count`:: The count of all alerts.

`alerts.all.data`::
An array of objects for all alerts. The following object properties are examples; it is not a comprehensive list.
+
.Properties of the alerts.all.data objects
[%collapsible%open]
=====
//# tag::alerts-data[]
`kibana.alert.end`:: Datetime stamp of alert end. preview:[]
`kibana.alert.flapping`:: A flag on the alert that indicates whether the alert status is changing repeatedly. preview:[]
`kibana.alert.instance.id`:: ID of the source that generates the alert. preview:[]
`kibana.alert.reason`:: The reason of the alert (generated with the rule conditions). preview:[]
`kibana.alert.start`:: Datetime stamp of alert start. preview:[]
`kibana.alert.status`:: Alert status (for example, active or OK). preview:[]
//# end::alerts-data[]
=====

`alerts.new.count`:: The count of new alerts.

`alerts.new.data`::
An array of objects for new alerts. The following object properties are examples; it is not a comprehensive list.
+
.Properties of the alerts.new.data objects
[%collapsible]
=====
include::action-variables.asciidoc[tag=alerts-data]
=====

`alerts.ongoing.count`:: The count of ongoing alerts.

`alerts.ongoing.data`::
An array of objects for ongoing alerts. The following object properties are examples; it is not a comprehensive list.
+
.Properties of the alerts.ongoing.data objects
[%collapsible]
=====
include::action-variables.asciidoc[tag=alerts-data]
=====

`alerts.recovered.count`:: The count of recovered alerts.

`alerts.recovered.data`::
An array of objects for recovered alerts. The following object properties are examples; it is not a comprehensive list.
+
.Properties of the alerts.recovered.data objects
[%collapsible]
=====
include::action-variables.asciidoc[tag=alerts-data]
=====

[float]
[[alert-action-variables]]
==== Action frequency: For each alert

If the rule's action frequency is not a summary of alerts, it passes the following variables:

`alert.actionGroup`:: The ID of the action group of the alert that scheduled the action.
`alert.actionGroupName`:: The name of the action group of the alert that scheduled the action.
`alert.actionSubgroup`:: The action subgroup of the alert that scheduled the action.
`alert.flapping`:: A flag on the alert that indicates whether the alert status is changing repeatedly.
`alert.id`:: The ID of the alert that scheduled the action.
`alert.uuid`:: A universally unique identifier for the alert. While the alert is active, the UUID value remains unchanged each time the rule runs.  preview:[]

[float]
[[defining-rules-actions-variable-context]]
===== Context

If the rule's action frequency is not a summary of alerts, the rule defines additional variables as properties of the variable `context`. For example, if a rule type defines a variable `value`, it can be used in an action parameter as `{{context.value}}`.  

For diagnostic or exploratory purposes, action variables whose values are objects, such as `context`, can be referenced directly as variables. The resulting value will be a JSON representation of the object. For example, if an action parameter includes `{{context}}`, it will expand to the JSON representation of all the variables and values provided by the rule type. To see all alert-specific variables, use `{{.}}`.

For situations where your rule response returns arrays of data, you can loop through the `context`:

[source]
--------------------------------------------------
{{#context}}{{.}}{{/context}}
--------------------------------------------------

For example, looping through search result hits:

[source]
--------------------------------------------------
triggering data was:
{{#context.hits}} - {{_source.message}}
{{/context.hits}}
--------------------------------------------------

[discrete]
[[enhance-mustache-variables]]
=== Enhancing Mustache variables

preview::[]

There are a number of ways that the values contained in Mustache variables can be enhanced, when the Mustache template is rendered:

- rendering objects as JSON
- using Mustache lambdas

[discrete]
==== rendering objects as JSON

Some alerting connectors expect JSON values to be passed as parameters when the connector is invoked, for example the <<webhook-action-type,Webhook connector>>.  The following capabilities are available:

- Array values referenced in braces have a pre-defined rendering by Mustache as string versions of the array elements, joined with a `,` (comma).  To render array values as JSON, access the `asJSON` property of the array, instead of the array directly.  For example, given a Mustache variable `context.values` that has the value `[1, 4, 9]`, the Mustache template `{{context.values}}` will render as `1,4,9`, and the Mustache template `{{context.values.asJSON}}` will render as `[1,4,9]`.

- The `ParseHjson` Mustache lambda makes it easier to create JSON in your templates by using Hjson, a syntax extension to JSON, rather than strict JSON.

[discrete]
==== using Mustache lambdas

Mustache lambdas provide additional rendering capabilities for Mustache templates.  A Mustache lambda is formatted like a Mustache section, for example:
+
[source,text]
----
{{#EvalMath}}round(context.value, 1){{/EvalMath}}
----

In that example, the lambda `{{#EvalMath}}` is passed the text `round(context.value, 1)`, and renders a rounded value of the `context.value` variable.  This pattern is used by all the provided Mustache lambdas, described below.

[discrete]
===== {{#EvalMath}}

The `{{#EvalMath}}` lambda will evaluate the text passed to it as <<canvas-tinymath-functions>>.

For example, when the Mustache variable `context.value` is `3.1234`, the following template will render as `3.1`:
+
[source,text]
----
{{#EvalMath}}round(context.value, 1){{/EvalMath}}
----

This lambda can access Mustache variables without having to wrap them in `{{}}`.  However, if the value is in a string form (for example, an Elasticsearch numeric field whose source was indexed as a string), or could be escaped, escaping the value with triple quotes should allow this to work.  For example, if the Mustache variable `context.value` is `"3.1234"`, the following template will render as `3.1`:
+
[source,text]
----
{{#EvalMath}}round({{{context.value}}}, 1){{/EvalMath}}
----

[discrete]
===== {{#ParseHjson}}

The `{{#ParseHjson}}` lambda provides ease-of-use capabilities when constructing JSON objects.  https://hjson.github.io/[Hjson] is a syntax extension to JSON.  It has the following features:

- allows missing and extra trailing commas in arrays and objects
- comments are supported
- property names can be specified without quotes
- property values can be specified without quotes (one per line and no commas)
- de-dent support for leading whitespace in multi-line strings
- also supports legal JSON documents

To use it, surround your Hjson content with `{{#ParseHjson}}your content here{{/ParseHjson}}`.

For example, here's an example template:
+
[source,text]
----
{{#ParseHjson}}
{
  # add the rule id and name to the JSON document
  ruleId:   "{{rule.id}}"
  ruleName: "{{rule.name}}"
}
{{/ParseHjson}}
----

When rendered, this will generate:
+
[source,json]
----
    {
      "ruleId": "<the rule id is here>",
      "ruleName": "<the rule name is here>"
    }
----

[discrete]
===== {{#FormatDate}}

The `{{#FormatDate}}` lambda provides date formatting capabilities.  Dates can be formatted in an arbitrary time zone and with an arbitrary format string.

To use it, surround the date and formatting parameters with `{{#FormatDate}}<date and formatting parameters>{{/FormatDate}}`.

The format of the text passed to the lambda is: `<date>; <time zone>; <date format>`, where semicolons (`;`) separate each parameter.  The `<date>` parameter is required, and the `<time zone>` and `<date format>` parameters are optional.  The default time zone if not provided is `"UTC"`, and the default date format is `"YYYY-MM-DD hh:mma"`.  For example, the following templates all render the same value:
+
[source,text]
----
    {{#FormatDate}}{{{timestamp}}}{{/FormatDate}}
    {{#FormatDate}}{{{timestamp}}}; UTC{{/FormatDate}}
    {{#FormatDate}}{{{timestamp}}}; ; YYYY-MM-DD hh:mma{{/FormatDate}}
    {{#FormatDate}}{{{timestamp}}}; UTC; YYYY-MM-DD hh:mma{{/FormatDate}}
----

The `<time zone>` parameter must be a valid time zone identifier as listed in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones[TZ database time zone names], such as `"America/New_York"`.

The `<date format>` parameter must be a valid date format string as described in the https://momentjs.com/docs/#/displaying/[Moment `format()` documentation].  For example, the date format  `"YYYY-MM-DD hh:mma"` will render in the following format: `"2023-04-24 11:21pm"`.

The date value itself should usually be referenced with triple braces, as some characters in date strings may contain values which are escaped, which would prevent them from being parsed as dates.
