[[rule-action-variables]]
== Rule action variables
:frontmatter-description: A summary of common variables for use in {kib} alerting rule actions.
:frontmatter-tags-products: [alerting] 
:frontmatter-tags-content-type: [reference] 
:frontmatter-tags-user-goals: [configure]

Rule actions use variables to customize the notifications for each alert.

There is a set of common variables available in all rules, as well as some that are unique to each rule.
This page covers only the common variables and related tips and examples.

[float]
[[general-rule-action-variables]]
=== General variables

All rule types pass the following variables:

`alertActionGroup`::
(string) deprecated:[8.10.0,Replaced by `alert.actionGroup`]
`alertActionGroupName`::
(string) deprecated:[8.10.0,Replaced by `alert.actionGroupName`]
`alertActionSubgroup`::
(string) deprecated:[8.10.0,Replaced by `alert.actionSubgroup`]
`alertId`::
(string) deprecated:[8.10.0,Replaced by `rule.id`]
`alertInstanceId`::
(string) deprecated:[8.10.0,Replaced by `alert.id`]
`alertName`::
(string) deprecated:[8.10.0,Replaced by `rule.name`]
`date`::
(string) The date the rule scheduled the action, in ISO format. For example: `2024-04-30T00:55:42.839Z`
`kibanaBaseUrl`::
(string) The configured <<server-publicBaseUrl,`server.publicBaseUrl`>>. If not configured, this will be empty.
`params::
(object) deprecated:[8.10.0,Replaced by `rule.params`]
`rule.id`::
(string) The rule identifier. For example: `47754354-d894-49d3-87ec-05745a74e2b7`.
`rule.name`::
(string) The rule name.
`rule.params`::
(object) The rule parameters, which vary by rule type. For example, refer to the details in <<rule-type-es-query>>.
`rule.spaceId`::
(string) The space identifier for the rule. For example, `default`.
`rule.tags`::
(array) The list of tags applied to the rule.
`rule.type`::
(string) The type of rule. For example, `.es-query`.
`rule.url`::
The URL for the rule that generated the alert. This will be an empty string if the `server.publicBaseUrl` setting is not configured.
//TBD Are KibaanBaseUrl in fact absent instead of empty?
`spaceId`::
(string) deprecated:[8.10.0,Replaced by `rule.spaceId`]
`state.dateEnd`::
(string) For example: `2024-04-30T00:55:42.766Z`.
//TBD: Needs description
`state.dateStart`::
(string) For example: `2024-04-25T00:55:42.766Z`.
//TBD: Needs description
`state.duration`::
(integer)
//TBD: Needs description
`state.start`::
(string) For example: `2024-04-30T00:55:40.664Z`.
//TBD: Needs description
//TBD: Is these state ones general variables or only in some?
`tags`::
(array) deprecated:[8.10.0,Replaced by `rule.tags`]

[float]
[role="child_attributes"]
[[alert-summary-action-variables]]
=== Action frequency: Summary of alerts variables

If the rule's action frequency is a summary of alerts, it passes the following variables:

`alerts.all.count`::
(integer) The count of all alerts.

`alerts.all.data`::
(array) An array of objects for all alerts.
The following object properties are examples; it is not a comprehensive list.
+
.Properties of the alerts.all.data objects
[%collapsible%open]
=====
//# tag::alerts-data[]
//`_id`:: TBD. For example, "27ace796-1dfb-4db9-9ce1-7a10472fd461"
//`_index`:: TBD For example, ".internal.alerts-stack.alerts-default-000001",
//`@timestamp`:: (string) TBD. For example, `2024-04-30T02:30:11.254Z`.
//`event.action`:: (string) TBD. For example: `active`.
//`event.kind`:: (string) TBD. For example: `signal`.
`kibana.alert.end`:: Datetime stamp of alert end. preview:[]
`kibana.alert.flapping`:: A flag on the alert that indicates whether the alert status is changing repeatedly. preview:[]
`kibana.alert.instance.id`:: ID of the source that generates the alert. preview:[]
`kibana.alert.reason`:: The reason of the alert (generated with the rule conditions). preview:[]
`kibana.alert.start`:: Datetime stamp of alert start. preview:[]
`kibana.alert.status`:: Alert status (for example, active or OK). preview:[]
//`tags`:: (array) TBD
//# end::alerts-data[]
=====

`alerts.new.count`:: The count of new alerts.

`alerts.new.data`::
An array of objects for new alerts. The following object properties are examples; it is not a comprehensive list.
+
.Properties of the alerts.new.data objects
[%collapsible]
=====
include::action-variables.asciidoc[tag=alerts-data]
=====

`alerts.ongoing.count`:: The count of ongoing alerts.

`alerts.ongoing.data`::
An array of objects for ongoing alerts. The following object properties are examples; it is not a comprehensive list.
+
.Properties of the alerts.ongoing.data objects
[%collapsible]
=====
include::action-variables.asciidoc[tag=alerts-data]
=====

`alerts.recovered.count`:: The count of recovered alerts.

`alerts.recovered.data`::
An array of objects for recovered alerts. The following object properties are examples; it is not a comprehensive list.
+
.Properties of the alerts.recovered.data objects
[%collapsible]
=====
include::action-variables.asciidoc[tag=alerts-data]
=====

[float]
[[alert-action-variables]]
=== Action frequency: For each alert variables

If the rule's action frequency is not a summary of alerts, it passes the following variables:

`alert.actionGroup`::
(string) The ID of the action group of the alert that scheduled the action. For example, `query matched`.
`alert.actionGroupName`::
(string) The name of the action group of the alert that scheduled the action. For example, `Query matched`.
`alert.actionSubgroup`:: The action subgroup of the alert that scheduled the action.
//TBD When does the subgroup appear? Is it related to the subcategory of ServiceNow connectors?
`alert.consecutiveMatches`:: The number of consecutive runs that meet the rule conditions.
//TBD Does the consecutiveMatches only appear if that option is greater than one?
`alert.flapping`::
(boolean) A flag on the alert that indicates whether the alert status is changing repeatedly.
`alert.id`::
(string) The ID of the alert that scheduled the action. For example, `query matched`.
`alert.uuid`::
(string) A universally unique identifier for the alert. While the alert is active, the UUID value remains unchanged each time the rule runs. For example, `27ace796-1dfb-4db9-9ce1-7a10472fd461`. preview:[]
`context`::
(object) The context of the alert, which varies by rule type and typically contains multiple variables. For example, refer to the details in <<rule-type-es-query>>.

[float]
[[rule-mustache-tips]]
=== Mustache tips

Rule actions pass variable values into alert notifications by using Mustache template syntax (`{{variable name}}`).

The subsequent sections provide tips for using Mustache with rule action variables.
For more information, refer to https://github.com/mustache/spec or https://mustache.github.io/.

[discrete]
==== Escape characters

By default, all variables in Mustache templates are HTML escaped.
Triple braces (`{{{variable name}}}`) specify to return the content without any escaping.
Use this form with caution, since it could end up rendering the variable content such that the resulting parameter is invalid or formatted incorrectly.
Some connectors automatically escape variable values in specific scenarios. For example:

- For the <<email-action-type,email connector>>, the `message` action configuration property escapes any characters that would be interpreted as Markdown.
- For the <<slack-action-type,Slack connector>>, the `message` action configuration property escapes any characters that would be interpreted as Slack Markdown.
- For the <<webhook-action-type,Webhook connector>>, the `body` action configuration property escapes any characters that are invalid in JSON string values.

[discrete]
==== Sections and implicit iterators

Rule action variables whose values are objects (such as `rule.params` and `context`) can be referenced directly as variables.
The resulting value will be a JSON representation of the object.
For example, if the message in an action includes `{{context}}`, it will expand to the JSON representation of all the variables and values provided by the rule type. This format is generally used for diagnostic or exploratory purposes.



The following example makes use of an implicit iterator (`{{.}}`) and a section, which starts with a pound (`#`) and ends with a slash (`/`), to loop through all the context items:

[source,sh]
--------------------------------------------------
{{#context}}{{.}}{{/context}}
--------------------------------------------------

[discrete]
==== Dotted names

// TBD: This example requires more explanation
For example, looping through search result hits:

[source,sh]
--------------------------------------------------
triggering data was:
{{#context.hits}} - {{_source.message}}
{{/context.hits}}
--------------------------------------------------

[discrete]
==== Rendering objects as JSON

preview::[]

Some connectors (such as the <<webhook-action-type,Webhook connector>>) expect the rule action to send JSON values.
Array values referenced in braces have a predefined rendering by Mustache as string versions of the array elements joined with a comma (`,`).
To render array values as JSON, access the `asJSON` property of the array, instead of the array directly.
For example, if a Mustache variable `context.values` has the value `[1, 4, 9]`, the Mustache template `{{context.values}}` renders as `1,4,9`. The Mustache template `{{context.values.asJSON}}` renders as `[1,4,9]`.

Alternatively, you can use the Mustache lambda <<parse-hjson-lambda,ParseHjson>>, which makes it easier to create JSON in your templates. It uses https://hjson.github.io/[Hjson], a syntax extension to JSON, rather than strict JSON.

[discrete]
=== Mustache lambdas

preview::[]

Lambdas provide additional rendering capabilities for Mustache templates.
A Mustache lambda is formatted like a Mustache section; it begins with a pound and ends with a slash.

Rule actions support only the following lambdas: <<eval-math-lambda,EvalMath>>, <<format-date-lambda,FormatDate>>, <<format-number-lambda,FormatNumber>>, and <<parse-hjson-lambda,ParseHjson>>.

[discrete]
[[eval-math-lambda]]
==== EvalMath

The EvalMath lambda evaluates the text passed to it as <<canvas-tinymath-functions>>.

The following example renders a rounded value of the `context.value` variable:

[source,sh]
----
{{#EvalMath}} round(context.value, 1) {{/EvalMath}}
----

When `context.value` is `3.1234`, it is rendered as `3.1`.

This lambda can access Mustache variables without having to wrap them in `{{}}`.
However, if the value is in a string form (for example, an Elasticsearch numeric field whose source was indexed as a string) or could be escaped, escaping the value with triple quotes should work.
For example, if the variable `context.value` is `"3.1234"`, the following template renders `3.1`:

[source,sh]
----
{{#EvalMath}} round( {{{context.value}}} , 1) {{/EvalMath}}
----

[discrete]
[[parse-hjson-lambda]]
==== ParseHjson

The ParseHjson lambda provides ease-of-use capabilities when constructing JSON objects.
https://hjson.github.io/[Hjson] is a syntax extension to JSON. It has the following features:

- Missing and extra trailing commas are allowed in arrays and objects.
- Comments are supported.
- Property names can be specified without quotes.
- Property values can be specified without quotes (one per line and no commas).
- Multi-line strings have dedent support to remove the leading whitespace.
- Legal JSON documents are supported.

To use it, surround your Hjson content with `{{#ParseHjson}}...{{/ParseHjson}}`.
For example:
 
[source,sh]
----
{{#ParseHjson}}
{
  # add the rule id and name to the JSON document
  ruleId:   "{{rule.id}}"
  ruleName: "{{rule.name}}"
}
{{/ParseHjson}}
----

This template is rendered as follows:
 
[source,json]
----
    {
      "ruleId": "<the rule id is here>",
      "ruleName": "<the rule name is here>"
    }
----

[discrete]
[[format-date-lambda]]
==== FormatDate

The FormatDate lambda provides date formatting capabilities.
Dates can be formatted in an arbitrary time zone and with an arbitrary format string.

To use it, surround the date and formatting parameters with `{{#FormatDate}}...{{/FormatDate}}`.

The format of the text passed to the lambda is: `<date>; <time zone>; <date format>`, where semicolons (`;`) separate each parameter.
The `<date>` parameter is required; the `<time zone>` and `<date format>` parameters are optional.
The default time zone is `"UTC"` and the default date format is `"YYYY-MM-DD hh:mma"`.
For example, the following templates all render the same value:
 
[source,sh]
----
    {{#FormatDate}} {{{timestamp}}} {{/FormatDate}}
    {{#FormatDate}} {{{timestamp}}} ; UTC {{/FormatDate}}
    {{#FormatDate}} {{{timestamp}}} ; UTC; YYYY-MM-DD hh:mma {{/FormatDate}}
    {{#FormatDate}} {{{timestamp}}} ; ; YYYY-MM-DD hh:mma {{/FormatDate}}
----

The `<time zone>` parameter must be a valid time zone identifier as listed in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones[TZ database time zone names], such as `"America/New_York"`.

The `<date format>` parameter must be a valid date format string as described in the https://momentjs.com/docs/#/displaying/[Moment `format()` documentation].
For example, the date format `"YYYY-MM-DD hh:mma"` renders in the following format: `"2023-04-24 11:21pm"`.

The date value itself should usually be referenced with triple braces since some characters in date strings may contain values that are escaped, which would prevent them from being parsed as dates.

[discrete]
[[format-number-lambda]]
==== FormatNumber

The FormatNumber lambda provides number formatting capabilities using the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat[`Intl.NumberFormat` object].

Numbers can be formatted with the following `Intl.NumberFormat` options:

- `compactDisplay`
- `currencyDisplay`
- `currencySign`
- `notation`
- `signDisplay`
- `unitDisplay`
- `unit`
- `useGrouping` - but only values true and false
- `minimumIntegerDigits`
- `minimumFractionDigits`
- `maximumFractionDigits`
- `minimumSignificantDigits`
- `maximumSignificantDigits`

To use the lambda, surround the number and formatting options with `{{#FormatNumber}}...{{/FormatNumber}}`.

The format of the text passed to the lambda is: `<number>; <locales>; <options>`, where semicolons (`;`) separate each parameter.
The `<number>` parameter is required; it is the value to be formatted.
The `<locales>` and `<options>` parameters are optional, but the semicolons must be provided; the values may be empty strings.
The `<locales>` parameter is a list of locales separated by commas (`,`).
The `<options>` parameter is a list of key value pairs separated by commas (`,`).
The key value pairs are strings separated by colons (`:`) where the key is the name of the option and the value is the value of the option.
The default locale is `en-US` and no options are set by default.

For more information on locale strings, refer to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument[the `locales` argument documentation from the `Intl` reference].

The options and values that can be used with them are listed under `options` in the https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat[Intl.NumberFormat() constructor documentation].

For example:

[source,sh]
----
    original value: {{{context.value.condition0}}}
    formatted value: {{#FormatNumber}}
        {{{context.value.condition0}}} ; de-DE ; style: currency, currency: EUR
    {{/FormatNumber}}
----

If the context variable `context.value.condition0` has a value of `628.4`, it results in the following text:

[source,sh]
----
    original value: 628.4
    formatted value: 628,40 €
----

The `{{FormatNumber}}` and `{{EvalMath}}` lambdas can be used together to perform calculations on numbers and then format them.
For example:

[source,sh]
----
    original value: {{{context.value.condition0}}}
    formatted value: {{#FormatNumber}}
      {{#EvalMath}} {{context.value.condition0}} * 0.1 {{/EvalMath}}
      ; de-DE ; style: currency, currency: EUR
    {{/FormatNumber}}
----

If the context variable `context.value.condition0` has a value of `628.4`, it results in the following text:

[source,sh]
----
    original value: 628.4
    formatted value: 62,84 €
----