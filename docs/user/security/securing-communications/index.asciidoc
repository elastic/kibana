[[configuring-tls]]
=== Encrypting communications in {kib}
++++
<titleabbrev>Encrypting communications</titleabbrev>
++++

{kib} supports Transport Layer Security (TLS/SSL) encryption for all forms of data-in-transit. Browsers send traffic to {kib} and {kib}
sends traffic to {es}. These communications are configured separately.

[[configuring-tls-browser-kib]]
==== Encrypting traffic between the browser and {kib}

NOTE: You do not need to enable {security-features} for this type of encryption. 

. Obtain a server certificate and private key for {kib}.
+
--
{kib} supports certificates/keys in both PKCS #12 key stores and PEM format.

When you obtain a certificate, you must do at least one of the following:

.. Set the certificate's `subjectAltName` to the hostname, fully-qualified domain name (FQDN), or IP address of the {kib} server.

.. Set the certificate's Common Name (CN) to the {kib} server's hostname or FQDN. Using the server's IP address as the CN does not work.

You may choose to generate a certificate and private key using {ref}/certutil.html[the {es} certutil tool]. If you already used certutil to
generate a certificate authority (CA), you would generate a certificate/key for Kibana like so (using the `--dns` param to set the
`subjectAltName`):

[source,sh]
--------------------------------------------------------------------------------
bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --name kibana --dns localhost
--------------------------------------------------------------------------------

This will generate a certificate and private key in a PKCS #12 keystore named `kibana.p12`.

--

. Enable TLS/SSL in `kibana.yml`:
+
--
[source,yaml]
--------------------------------------------------------------------------------
server.ssl.enabled: true
--------------------------------------------------------------------------------
--

. Specify your server certificate and private key in `kibana.yml`:
+
--
If your certificate and private key are in a PKCS #12 keystore, specify it like so:

[source,yaml]
--------------------------------------------------------------------------------
server.ssl.keystore.path: "/path/to/your/keystore.p12"
server.ssl.keystore.password: "optional decryption password"
--------------------------------------------------------------------------------

Otherwise, if your certificate/key are in PEM format, specify them like so:

[source,yaml]
--------------------------------------------------------------------------------
server.ssl.certificate: "/path/to/your/server.crt"
server.ssl.key: "/path/to/your/server.key"
server.ssl.keyPassphrase: "optional decryption password"
--------------------------------------------------------------------------------

After making these changes, you must always access {kib} via HTTPS. For example, 
https://localhost:5601.

For more information, see <<settings,{kib} configuration settings>>.
--

[[configuring-tls-kib-es]]
==== Encrypting traffic between {kib} and {es}

NOTE: To perform this step, you must 
{ref}/configuring-security.html[enable the {es} {security-features}] or you 
must have a proxy that provides an HTTPS endpoint for {es}. 

. Specify the HTTPS URL in the `elasticsearch.hosts` setting in the {kib} configuration file, `kibana.yml`:
+
--
[source,yaml]
--------------------------------------------------------------------------------
elasticsearch.hosts: ["https://<your_elasticsearch_host>.com:9200"]
--------------------------------------------------------------------------------

Using the HTTPS protocol results in a default `elasticsearch.ssl.verificationMode` option of `full`, which utilizes hostname verification.

For more information, see <<settings,{kib} configuration settings>>. 
--

. Specify the {es} cluster's CA certificate chain in `kibana.yml`:
+
--

If you are using your own CA to sign certificates for {es}, then you need to specify the CA certificate chain in {kib} to properly establish
trust in TLS connections. If your CA certificate chain is contained in a PKCS #12 trust store, specify it like so:

[source,yaml]
--------------------------------------------------------------------------------
elasticsearch.ssl.truststore.path: "/path/to/your/truststore.p12"
elasticsearch.ssl.truststore.password: "optional decryption password"
--------------------------------------------------------------------------------

Otherwise, if your CA certificate chain is in PEM format, specify each certificate like so:

[source,yaml]
--------------------------------------------------------------------------------
elasticsearch.ssl.certificateAuthorities: ["/path/to/your/cacert1.pem", "/path/to/your/cacert2.pem"]
--------------------------------------------------------------------------------

--

. (Optional) If the Elastic {monitor-features} are enabled, configure {kib} to connect to the {es} monitoring cluster via HTTPS. The steps
are the same as above, but each setting is prefixed by `xpack.monitoring.`. For example, `xpack.monitoring.elasticsearch.hosts`,
`xpack.monitoring.elasticsearch.ssl.truststore.path`, etc.
