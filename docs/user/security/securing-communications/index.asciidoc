[[configuring-tls]]
=== Encrypting communications in {kib}
++++
<titleabbrev>Encrypting communications</titleabbrev>
++++

Secure Sockets Layer (SSL) and Transport Layer Security (TLS) provide encryption for data-in-transit. While these terms are often used
interchangeably, {kib} only supports TLS, which has superseded the old SSL protocols.

Browsers send traffic to {kib} and {kib} sends traffic to {es}. These communications are configured separately to use TLS.

TLS requires X.509 certificates to perform encryption and authentication of the application that is being communicated with. {kib} supports
certificates and private keys in PEM or PKCS#12 format.

[[configuring-tls-browser-kib]]
==== Encrypting traffic between the browser and {kib}

. *Obtain a server certificate and private key for {kib}.*
+
--
{kib} will need to use this "server certificate" and corresponding private key when receiving connections from web browsers.

When you obtain a server certificate, you must set its subject alternative name (SAN) correctly to ensure that modern web browsers with
hostname verification will trust it. You can set the SAN to the {kib} server's fully-qualified domain name (FQDN), hostname, or IP address.

You may choose to generate a certificate signing request (CSR) and private key using the {ref}/certutil.html[`elasticsearch-certutil`] tool.
For example:

[source,sh]
--------------------------------------------------------------------------------
bin/elasticsearch-certutil csr -name kibana-server -dns <your_kibana_host>.com
--------------------------------------------------------------------------------

This will produce a ZIP archive named `kibana-server.zip`. Extract that archive to obtain the PEM-formatted CSR (`kibana-server.csr`) and
unencrypted private key (`kibana-server.key`). In this example, the CSR has a common name (CN) of `"kibana-server"` and a SAN of
`"<your_kibana_host>.com"`.

NOTE: you will need to use a certificate authority (CA) to sign your CSR to obtain your server certificate. This certificate's signature
will be verified by web browsers that are configured to trust the CA.
--

. *Configure {kib} to access the server certificate and private key.*
+
You need to specify the information required to access your server certificate and corresponding private key.

.. If your server certificate and private key are in PEM format:
+
--
Specify your server certificate and private key in `kibana.yml`:

[source,yaml]
--------------------------------------------------------------------------------
server.ssl.certificate: "/path/to/kibana-server.crt"
server.ssl.key: "/path/to/kibana-server.key"
--------------------------------------------------------------------------------

If your private key is encrypted, add the decryption password to your <<secure-settings,{kib} keystore>>:

[source,yaml]
--------------------------------------------------------------------------------
bin/kibana-keystore add server.ssl.keyPassphrase
--------------------------------------------------------------------------------
--

.. Otherwise, if your server certificate and private key are in a PKCS#12 file:
+
--
Specify your PKCS#12 file in `kibana.yml`:

[source,yaml]
--------------------------------------------------------------------------------
server.ssl.keystore.path: "/path/to/kibana-server.p12"
--------------------------------------------------------------------------------

If your PKCS#12 file is encrypted, add the decryption password to your <<secure-settings,{kib} keystore>>:

[source,yaml]
--------------------------------------------------------------------------------
bin/kibana-keystore add server.ssl.keystore.password
--------------------------------------------------------------------------------

TIP: If your PKCS#12 file isn't protected with a password, depending on how it was generated, you may need to set
`server.ssl.keystore.password` to an empty string.
--

+
For more information about settings for certificates and keys, see <<settings,{kib} configuration settings>>.

. *Configure {kib} to enable TLS for inbound connections.*
+
--
Specify that TLS is used in `kibana.yml`:

[source,yaml]
--------------------------------------------------------------------------------
server.ssl.enabled: true
--------------------------------------------------------------------------------
--

. *Restart {kib}.*

After making these changes, you must always access {kib} via HTTPS. For example, https://<your_kibana_host>.com.

[[configuring-tls-kib-es]]
==== Encrypting traffic between {kib} and {es}

NOTE: To perform this step, you must {ref}/configuring-security.html[enable the {es} {security-features}] or you must have a proxy that
provides an HTTPS endpoint for {es}.

. *{ref}/configuring-tls.html#tls-http[Enable TLS on the HTTP layer in {es}].*

. *Obtain the certificate authority (CA) certificate chain for {es}.*
+
--
{kib} needs the appropriate CA certificate chain to properly establish trust when connecting to {es}.

If you followed the {es} documentation for {ref}/configuring-tls.html#node-certificates[Generating Node Certificates], then you likely have
a PKCS#12 file for each your {es} nodes. You can extract the CA certificate chain from one of these files. For example:

[source,sh]
--------------------------------------------------------------------------------
openssl pkcs12 -in elastic-certificates.p12 -cacerts -nokeys -out elasticsearch-ca.crt
--------------------------------------------------------------------------------

This will produce a PEM-formatted file named `elasticsearch-ca.crt` that contains all CA certificates from the PKCS#12 file.
--

. *Configure {kib} to trust the {es} server certificate(s) for the HTTP layer.*
+
You need to specify the information required to access your {es} CA certificate chain.

.. If your CA certificate chain is in PEM format:
+
--
Specify one or more CA certificates in `kibana.yml`:

[source,yaml]
--------------------------------------------------------------------------------
elasticsearch.ssl.certificateAuthorities: ["/path/to/elasticsearch-ca.crt"]
--------------------------------------------------------------------------------
--


.. If your CA certificate chain is in a PKCS#12 file:
+
--
WARNING: You should not use a PKCS#12 file that contains a private key. This is an unnecessary security risk. If you only have a PKCS#12
file that contains a private key, a safer approach is to extract the CA certificate chain in PEM format as described above.

Specify your PKCS#12 file in `kibana.yml`:

[source,yaml]
--------------------------------------------------------------------------------
elasticsearch.ssl.truststore.path: "/path/to/elasticsearch-ca.p12"
--------------------------------------------------------------------------------

If your PKCS#12 file is encrypted, add the decryption password to your <<secure-settings,{kib} keystore>>:

[source,yaml]
--------------------------------------------------------------------------------
bin/kibana-keystore add elasticsearch.ssl.truststore.password
--------------------------------------------------------------------------------

TIP: If your PKCS#12 file isn't protected with a password, depending on how it was generated, you may need to set
`elasticsearch.ssl.truststore.password` to an empty string.
--

+
For more information about settings for certificates and keys, see <<settings,{kib} configuration settings>>.

. *Configure {kib} to enable TLS for outbound connections to {es}.*
+
--
Specify the HTTPS URL for {es} in `kibana.yml`:

[source,yaml]
--------------------------------------------------------------------------------
elasticsearch.hosts: ["https://<your_elasticsearch_host>.com:9200"]
--------------------------------------------------------------------------------

NOTE: Using the HTTPS protocol results in a default `elasticsearch.ssl.verificationMode` option of `full`, which utilizes hostname
verification. For more information about this setting, see <<settings,{kib} configuration settings>>.
--

If the Elastic {monitor-features} are enabled and you have set up a separate {es} monitoring cluster, you can also configure {kib} to
connect to the monitoring cluster via HTTPS. The steps are the same as above, but each setting is prefixed by `"xpack.monitoring."`. For
example, `xpack.monitoring.elasticsearch.hosts`, `xpack.monitoring.elasticsearch.ssl.truststore.path`, etc.
