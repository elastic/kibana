[[timelion-math]]
== Using mathematical functions

You’ve learned how to create a chart and style a Timelion chart in the previous two tutorials. Next, we will explore the mathematical functions Timelion offers. _It is worth clarifying that these calculations are not using pipeline aggregations behind the scenes._

In this tutorial we will continue to use our Metricbeat data set to create a new Timelion visualizations for inbound and outbound network traffic. To start, let’s add a new Timelion visualization to the sheet.

In the top menu, click *Add* to add a second visualization. When added to the sheet, you’ll notice that the query bar has been replaced with the default *.es(\*)*. This is because the query bar points to whatever visualization on the Timelion sheet you have selected. 

image::images/timelion-math01.png[]

To track the inbound / outbound traffic, we’ll start build our query to calculate the maximum value of both *system.network.in.bytes*. Use the expression below for your new sheet.

[source,text]
----------------------------------
.es(index=metricbeat*, timefield=@timestamp, metric=max:system.network.in.bytes)
----------------------------------

image::images/timelion-math02.png[]

Now that we have the maximum value for this metric, let’s calculate the derivative to chart the change over time. This can be easily done by appending the *.derivative()* function to the end of of expression. Use the following expression to update your visualization:

[source,text]
----------------------------------
.es(index=metricbeat*, timefield=@timestamp, metric=max:system.network.in.bytes).derivative()
----------------------------------

image::images/timelion-math03.png[]

Wouldn’t it be nice to track your inbound traffic vs. your outbound traffic? Let’s add a similar calculation for *system.network.out.bytes*. Since outbound traffic is leaving your machine, it makes sense to represent it as a negative number. We can use the *multiply()* function to convert this number to a negative value. Use the following expression to update your visualization:

[source,text]
----------------------------------
.es(index=metricbeat*, timefield=@timestamp, metric=max:system.network.in.bytes).derivative(), .es(index=metricbeat*, timefield=@timestamp, metric=max:system.network.out.bytes).derivative().multiply(-1)
----------------------------------

image::images/timelion-math04.png[]

Using the *divide()* function we can convert bytes to megabytes so the metrics are a bit easier to consume. Use the following expression to update your visualization:

[source,text]
----------------------------------
.es(index=metricbeat*, timefield=@timestamp, metric=max:system.network.in.bytes).derivative().divide(1048576), .es(index=metricbeat*, timefield=@timestamp, metric=max:system.network.out.bytes).derivative().multiply(-1).divide(1048576)
----------------------------------

image::images/timelion-math05.png[]

Using the formatting functions learned in {kib-ref}timelion-customize.html[the last tutorial], let’s clean up the visualization a bit. Use the following expression to update the title, labels, colors and chart types of your visualization:

[source,text]
----------------------------------
.es(index=metricbeat*, timefield=@timestamp, metric=max:system.network.in.bytes).derivative().divide(1048576).lines(fill=2, width=1).color(green).label("Inbound traffic").title("Network traffic (MB/s)"), .es(index=metricbeat*, timefield=@timestamp, metric=max:system.network.out.bytes).derivative().multiply(-1).divide(1048576).lines(fill=2, width=1).color(blue).label("Outbound traffic").legend(columns=2, position=nw)
----------------------------------

image::images/timelion-math06.png[]

Save your changes and continue on to the next tutorial to learn about conditional logic and tracking trends.