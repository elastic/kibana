[[breaking-changes-7.8]]
== Breaking changes in 7.8
++++
<titleabbrev>7.8</titleabbrev>
++++

This page discusses the breaking changes that you need to be aware of when migrating
your application to Kibana 7.8.

* <<user-facing-changes-78, Breaking changes for users>>
* <<general-plugin-API-changes-78, Breaking changes for plugin developers>>


// The following section is re-used in the Installation and Upgrade Guide


// tag::notable-breaking-changes[]

[float]
[[user-facing-changes-78]]
=== Breaking changes for users

[float]
[[breaking_78_actions_api]]
==== Actions API endpoint changed
{pull}65936[#65936]

The following action plugin REST APIs changed so that they are consistent with the
{kib} styleguide.

* `GET /api/action/_getAll` -> `GET /api/actions`
* `GET /api/action/types` -> `GET /api/actions/list_action_types`
* `POST /api/action` -> `POST /api/actions/action`
* `GET /api/action/{id}` -> `GET /api/actions/action/{id}`
* `PUT /api/action/{id}` -> `PUT /api/actions/action/{id}`
* `DELETE /api/action/{id}` -> `DELETE /api/actions/action/{id}`
* `POST /api/action/{id}/_execute` -> `POST /api/actions/action/{id}/_execute`

[float]
[[breaking_78_bump_less_version]]
==== The less version in TSVB was bumped
{pull}65467[#65467]

Custom plugins are no longer allowed to use the @plugin statement and inline JavaScript
in less code used in TSVB Markdown visualizations.
Using the code does not apply the styles.

[float]
[[breaking_78_metrics_alerts]]
==== Metrics alerts no longer expose `context.valueOf`, `context.metricOf`, or `context.thresholdOf` to action messages
{pull}64365[#64365]

`context.valueOf`, `context.metricOf`, and `context.thresholdOf` are replaced
by the variable `context.reason`. This variable explains the reason that the alert
fired and automatically includes the metric, threshold, and current value of
all configured conditions.

Alerts configured in 7.7 still function as normal,
but their action messages might no longer provide useful information and
must be reconfigured. The new default action message will show an example
of how to use `context.reason`.

// end::notable-breaking-changes[]

[float]
[[general-plugin-API-changes-78]]
=== Breaking changes for plugin developers

[float]
[[breaking_78_canvas]]
==== Canvas applications run on the new {kib} platform
{pull}64831[#64831]

Any existing user-created plugins that extend
Canvas functionality must also move to the Kibana Platform to continue extending Canvas.


[float]
[[breaking-78-filter-expression-function]]
==== `filter` function uses `filterType` instead of `type`
{pull}64215[#64215]

 If you used the `type` argument of the `filter` function, you now
 must use `filterType` instead.

 Old code:

```
filter type={...} | ...
```

New code:

```
filter filterType={...} | ...
```

The `type` field is used internally by the expression interpreter to
discriminate between the different values it passes between functions.
The `filter` function was the only function that exposed this field to users.
After this change all expression values will consistently use `type` to determine a type of expression value.

[float]
[[breaking-78-jira-connector]]
=== Connectors refactored
{pull}64215[#64215]

The API changed to support executor actions. The supported action are: `pushToService`, `handshake`, and `getIncident`. This PR implements only the `pushToService` action.

The following response fields have changed:
- `incidentId` changed to `id`.
- `number` changed to `title`.

////
#### Create an incident:

Create an incident to ServiceNow. When the `incidentId` attribute **is not** in `actionParams` the executor will **create** the incident.

Endpoint: `api/action/<action_id>/_execute`
Method: `POST`

**Payload:**

```
{
    "params": {
        "action": "pushToService",
        "actionParams": {
	    	"caseId": "d4387ac5-0899-4dc2-bbfa-0dd605c934aa",
	        "title": "A new incident",
	        "description": "A description",
	        "comments": [
	            {
	                "commentId": "b5b4c4d0-574e-11ea-9e2e-21b90f8a9631",
	                "version": "WzU3LDFd",
	                "comment": "A comment"
	            }
	        ]
        }
    }
}
```

**Response**

```
{
    "status": "ok",
    "actionId": "f631be57-0a59-4e28-8833-16fc3b309374",
    "data": {
        "id": "7d7aad9c072fc0100e48fbbf7c1ed0c2",
        "title": "INC0010044",
        "pushedDate": "2020-03-10T13:02:59.000Z",
        "comments": [
            {
                "commentId": "b5b4c4d0-574e-11ea-9e2e-21b90f8a9631",
                "pushedDate": "2020-03-10T13:03:00.000Z"
            }
        ]
    }
}
```

#### Update an incident:

Update an incident to ServiceNow. When the `incidentId` attribute **is** in `actionParams` the executor will update the incident.

Endpoint: `api/action/<action_id>/_execute`
Method: `POST`

**Payload:**

```
{
    "params": {
        "action": "pushToService",
	    "actionParmas": {
			"caseId": "d4387ac5-0899-4dc2-bbfa-0dd605c934aa",
	        "incidentId": "7d7aad9c072fc0100e48fbbf7c1ed0c2"
	        "title": "A new incident",
	        "description": "A description",
	        "comments": [
	            {
	                "commentId": "b5b4c4d0-574e-11ea-9e2e-21b90f8a9631",
	                "version": "WzU3LDFd",
	                "comment": "A comment"
	            }
	        ]
		}
    }
}
```

**Response**

```
{
    "status": "ok",
    "actionId": "f631be57-0a59-4e28-8833-16fc3b309374",
    "data": {
        "id": "7d7aad9c072fc0100e48fbbf7c1ed0c2",
        "title": "INC0010044",
        "pushedDate": "2020-03-10T13:02:59.000Z",
        "comments": [
            {
                "commentId": "b5b4c4d0-574e-11ea-9e2e-21b90f8a9631",
                "pushedDate": "2020-03-10T13:03:00.000Z"
            }
        ]
    }
}
```
////
