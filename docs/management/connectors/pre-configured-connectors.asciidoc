[[pre-configured-connectors]]
== Preconfigured connectors

If you are running {kib} on-prem, you can preconfigure a connector to have all
the information it needs prior to startup by adding it to the `kibana.yml` file.

NOTE: {ess} provides a preconfigured email connector but you cannot create
additional preconfigured connectors.

Preconfigured connectors offer the following benefits:

- Require no setup. Configuration and credentials needed to run an action are
predefined, including the connector name and ID.
- Appear in all spaces because they are not saved objects.
- Cannot be edited or deleted.

[float]
[[create-preconfigured-connectors]]
=== Create preconfigured connectors

Add `xpack.actions.preconfigured` settings to your `kibana.yml` file. The
settings vary depending on which type of connector you're adding.

This example shows a valid configuration for a Slack connector and a Webhook
connector:

```js
  xpack.actions.preconfigured:
    my-slack1:                  <1>
      actionTypeId: .slack      <2>
      name: 'Slack #xyz'        <3>
      secrets:
        webhookUrl: 'https://hooks.slack.com/services/abcd/efgh/ijklmnopqrstuvwxyz'
    webhook-service:
      actionTypeId: .webhook
      name: 'Email service'
      config:                   <4>
        url: 'https://email-alert-service.elastic.co'
        method: post
        headers:
          header1: value1
          header2: value2
      secrets:                  <5>
        user: elastic
        password: changeme
```

<1>  The key is the connector identifier, `my-slack1` in this example.
<2> `actionTypeId` is the action type identifier.
<3> `name` is the name of the preconfigured connector.
<4> `config` is the configuration specific to the connector type.
<5> `secrets` is the sensitive configuration, such as username, password, and keys, specific to the connector type.

[NOTE]
==============================================
Sensitive properties, such as passwords, can also be stored in the 
<<creating-keystore,{kib} keystore>>.
==============================================

[float]
[[managing-pre-configured-connectors]]
=== View preconfigured connectors

When you open the main menu, click *{stack-manage-app} > {connectors-ui}*. 
Preconfigured connectors appear regardless of which space you are in.
They are tagged as “preconfigured”, and you cannot delete them.

[role="screenshot"]
image::images/preconfigured-connectors-managing.png[Connectors managing tab with pre-configured]

Clicking a preconfigured connector shows the description, but not the configuration.

[float]
[[build-in-preconfigured-connectors]]
=== Built-in preconfigured connectors

{kib} provides the following built-in preconfigured connectors:

* <<preconfigured-connector-alert-history>>
* <<elasticcloud,`Elastic-Cloud-SMTP` preconfigured email connector>>

[float]
[[preconfigured-connector-alert-history]]
==== Preconfigured alert history {es} index connector

preview::[]

{kib} offers a preconfigured index connector to facilitate indexing active alert data into {es}.
To use this connector, set <<action-settings,`xpack.actions.preconfiguredAlertHistoryEsIndex`>> to `true`.

When you subsequently create rules, you can use the `Alert history Elasticsearch index (preconfigured)` connector.

[role="screenshot"]
image::images/pre-configured-alert-history-connector.png[Creating a rule action that uses the pre-configured alert history connector]

Documents are indexed using a preconfigured schema that captures the <<defining-rules-actions-variables,action variables>> available for the rule.
By default, these documents are indexed into the `kibana-alert-history-default` index, but you can specify a different index.
Index names must start with `kibana-alert-history-` to take advantage of the preconfigured alert history index template.

[IMPORTANT]
====
* To write documents to the preconfigured index, you must have `all` or `write` privileges to the `kibana-alert-history-*` indices.
* The `kibana-alert-history-*` indices are not configured to use ILM so they must be maintained manually. If the index size grows large, consider using the {ref}/docs-delete-by-query.html[delete by query] API to clean up older documents in the index.
====

[float]
=== Examples

* <<preconfigured-index-configuration>>
* <<preconfigured-jira-configuration>>
* <<preconfigured-opsgenie-configuration>>
* <<preconfigured-pagerduty-configuration>>
* <<preconfigured-server-log-configuration>>
* <<preconfigured-webhook-configuration>>
* <<preconfigured-cases-webhook-configuration>>
* <<preconfigured-xmatters-configuration>>

[float]
[[preconfigured-index-configuration]]
==== Index connectors

The following example creates a <<index-action-type,index connector>>:

[source,text]
--
xpack.actions.preconfigured:
  my-index:
    name: preconfigured-index-connector-type
    actionTypeId: .index
    config:
      index: .kibana <1>
      executionTimeField: my-field <2>
--
<1> The {es} index to be written to.
<2> A field that indicates when the document was indexed.

[float]
[[preconfigured-jira-configuration]]
==== Jira connectors

The following example creates a <<jira-action-type,Jira connector>>:

[source,text]
--
xpack.actions.preconfigured:
  my-jira:
    name: preconfigured-jira-connector-type
    actionTypeId: .jira
    config:
      apiUrl: https://elastic.atlassian.net <1>
      projectKey: ES <2>
    secrets:
      email: testuser <3>
      apiToken: tokenkeystorevalue <4>
--
<1> The Jira instance URL.
<2> The Jira project key.
<3> The account email for HTTP basic authentication.
<4> The API authentication token for HTTP basic authentication. NOTE: This value should be stored in the <<creating-keystore,{kib} keystore>>.

[float]
[[preconfigured-teams-configuration]]
==== Microsoft Teams connectors

The following example creates a <<teams-action-type,Microsoft Teams connector>>:

[source,text]
--
xpack.actions.preconfigured:
  my-teams:
    name: preconfigured-teams-connector-type
    actionTypeId: .teams
    secrets:
      webhookUrl: 'https://outlook.office.com/webhook/abcd@0123456/IncomingWebhook/abcdefgh/ijklmnopqrstuvwxyz' <1>
--
<1> The URL of the incoming webhook.

[float]
[[preconfigured-opsgenie-configuration]]
==== {opsgenie} connectors

The following example creates an <<opsgenie-action-type,{opsgenie} connector>>:

[source,text]
--
xpack.actions.preconfigured:
  my-opsgenie:
    name: preconfigured-opsgenie-connector-type
    actionTypeId: .opsgenie
    config:
      apiUrl: https://api.opsgenie.com <1>
    secrets:
      apiKey: apikey <2>
--
<1> The {opsgenie} URL.
<2> The {opsgenie} API authentication key for HTTP basic authentication.

[float]
[[preconfigured-pagerduty-configuration]]
==== PagerDuty connectors

The following example creates a <<pagerduty-action-type,PagerDuty connector>>:

[source,text]
--
xpack.actions.preconfigured:
  my-pagerduty:
    name: preconfigured-pagerduty-connector-type
    actionTypeId: .pagerduty
    config:
      apiUrl: https://test.host <1>
    secrets:
      routingKey: testroutingkey <2>
--
<1> The PagerDuty event URL.
<2> A 32 character PagerDuty Integration Key for an integration on a service, also referred to as the routing key.

[float]
[[preconfigured-server-log-configuration]]
==== Server log connectors

The following example creates a <<server-log-action-type,server log connector>>:

[source,text]
--
xpack.actions.preconfigured:
  my-server-log:
    name: preconfigured-server-log-connector-type
    actionTypeId: .server-log
--

[float]
[[preconfigured-webhook-configuration]]
==== Webhook connectors

The following example creates a <<webhook-action-type,webhook connector>> with basic authentication:

[source,text]
--
xpack.actions.preconfigured:
  my-webhook:
    name: preconfigured-webhook-connector-type
    actionTypeId: .webhook
    config:
      url: https://test.host <1>
      method: post <2>
      headers: <3>
        testheader: testvalue
      hasAuth: true <4>
    secrets:
      user: testuser <5>
      password: passwordkeystorevalue <6>
--

<1> The web service request URL. If you are using the <<action-settings,`xpack.actions.allowedHosts`>> setting, make sure the hostname is added to the allowed hosts.
<2> The HTTP request method, either `post`(default) or `put`.
<3> A set of key-value pairs sent as headers with the request.
<4> If `true`, this connector will require values for `user` and `password` inside the secrets configuration. Defaults to `true`.
<5> A valid user name. Required if `hasAuth` is set to `true`.
<6> A valid password. Required if `hasAuth` is set to `true`. NOTE: This value should be stored in the <<creating-keystore,{kib} keystore>>.

NOTE: SSL authentication is not supported in preconfigured webhook connectors.


[float]
[[preconfigured-cases-webhook-configuration]]
==== {webhook-cm} connectors

The following example creates a <<cases-webhook-action-type,{webhook-cm} connector>>:

[source,text]
--
xpack.actions.preconfigured:
  my-case-management-webhook:
    name: Case Management Webhook Connector
    actionTypeId: .cases-webhook
    config:
      hasAuth: true <1>
      headers: <2>
        'content-type': 'application/json'
      createIncidentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue' <3>
      createIncidentMethod: 'post' <4>
      createIncidentJson: '{"fields":{"summary":{{{case.title}}},"description":{{{case.description}}},"labels":{{{case.tags}}}' <5>
      getIncidentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}' <6>
      getIncidentResponseExternalTitleKey: 'key' <7>
      viewIncidentUrl: 'https://testing-jira.atlassian.net/browse/{{{external.system.title}}}' <8>
      updateIncidentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}' <9>
      updateIncidentMethod: 'put' <10>
      updateIncidentJson: '{"fields":{"summary":{{{case.title}}},"description":{{{case.description}}},"labels":{{{case.tags}}}' <11>
      createCommentMethod: 'post', <12>
      createCommentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}/comment', <13>
      createCommentJson: '{"body": {{{case.comment}}}}', <14>
    secrets:
      user: testuser <15>
      password: passwordvalue <16>
--
<1> If `true`, this connector will require values for `user` and `password` inside the secrets configuration.
<2> A set of key-value pairs sent as headers with the request.
<3> A REST API URL string to create a case in the third-party system.
<4> The REST API HTTP request method to create a case in the third-party system.
<5> A stringified JSON payload with Mustache variables that is sent to the create case URL to create a case.
<6> A REST API URL string with an external service ID Mustache variable to get the case from the third-party system.
<7> A string from the response body of the get case method that corresponds to the external service title.
<8> A URL string with either the external service ID or external service title Mustache variable to view a case in the external system.
<9> The REST API URL to update the case by ID in the third-party system.
<10> The REST API HTTP request method to update the case in the third-party system.
<11> A stringified JSON payload with Mustache variables that is sent to the update case URL to update a case.
<12> The REST API HTTP request method to create a case comment in the third-party system.
<13> A REST API URL string to create a case comment by ID in the third-party system.
<14> A stringified JSON payload with Mustache variables that is sent to the create comment URL to create a case comment.
<15> A user name, which is required when `hasAuth` is `true`.
<16> A password, which is required when `hasAuth` is `true`.

[float]
[[preconfigured-xmatters-configuration]]
==== xMatters connectors

The following example creates an <<xmatters-action-type,xMatters connector>> with basic authentication:

[source,text]
--
xpack.actions.preconfigured:
my-xmatters:
    name: preconfigured-xmatters-connector-type
    actionTypeId: .xmatters
    config:
      configUrl: https://test.host <1>
      usesBasic: true <2>
    secrets:
      user: testuser <3>
      password: passwordkeystorevalue <4>
--
<1> The request URL for the Elastic Alerts trigger in xMatters.
<2> Indicates whether the connector uses HTTP basic authentication. If `true`, you must provide `user` and `password` values. Defaults to `true`.
<3> A user name for authentication, which is required when `usesBasic` is `true`.
<4> A password for authentication, which is required when `usesBasic` is `true`. NOTE: This value should be stored in the <<creating-keystore,{kib} keystore>>.

The following example creates an xMatters connector with URL authentication:

[source,text]
--
xpack.actions.preconfigured:
  my-xmatters:
    name: preconfigured-xmatters-connector-type
    actionTypeId: .xmatters
    config:
      usesBasic: false <1>
    secrets:
      secretsUrl: https://test.host?apiKey=1234-abcd <2>
--
<1> Indicates whether the connector uses HTTP basic authentication. Set to `false` to use URL authentication. Defaults to `true`.
<2> The request URL for the Elastic Alerts trigger in xMatters with the API key included in the URL.
