[role="xpack"]
[[tines-action-type]]
== Tines connector
++++
<titleabbrev>Tines</titleabbrev>
++++

The Tines connector uses Tines's https://www.tines.com/docs/actions/types/webhook[Webhook actions] to send events via POST request.

[float]
[[tines-connector-configuration]]
=== Connector configuration

Tines connectors have the following configuration properties.

URL::        The Tines tenant URL. If you are using the <<action-settings, `xpack.actions.allowedHosts`>> setting, make sure the hostname is added to the allowed hosts.
Email::      The email used to sign in to Tines.
API Token::  A Tines API token created by the user. https://www.tines.com/api/authentication#generate-api-token[Docs]

[role="screenshot"]
image::../images/tines-connector.png[Tines connector]

[float]
[[Preconfigured-tines-configuration]]
==== Preconfigured connector type

[source,text]
--
 my-tines:
   name: preconfigured-tines-connector-type
   actionTypeId: .tines
   config:
     url: https://some-tenant-2345.tines.com
   secrets:
     email: some.address@test.com
     token: ausergeneratedapitoken
--

Config defines information for the connector type.

`url`:: A Tines tenant URL string that corresponds to *URL*.

Secrets defines sensitive information for the connector type.

`email`:: A string that corresponds to *Email*.
`token`:: A string that corresponds to *API Token*.

[float]
[[tines-action-parameters]]
=== Action parameters

Tines action have the following parameters.

Story::   The Story to send the events to.
Webhook:: The Webhook action from the previous story that will receive the events, it is the data entry point. 

Test Tines action parameters.

[role="screenshot"]
image::../images/tines-params-test.png[Tines params test]

[float]
[[tines-action-format]]
=== Actions

Once the Tines connector has been configured in an Alerting Rule.

[role="screenshot"]
image::../images/tines-alerting.png[Tines rule alert]

It will send a POST request to the Tines webhook action on every action execution with at least one result.

[float]
[[webhookUrlFallback-tines-configuration]]
==== Webhook URL fallback

It is possible for the requests to the Tines API, to get the stories and webhooks for the selectors, to hit the 500 results limit; in this scenario, the webhook URL fallback text field will be displayed.
Users can still use the selectors if the story or webhook exists in the 500 options loaded. Otherwise, users can paste the webhook URL in the test input field, it can be copied from the Tines webhook configuration. 

When the webhook URL is defined, the connector will use it directly in the execution stage, and the story and webhook selectors will be disabled and ignored. To re-enable the story and webhook selectors, remove the webhook URL value.

[role="screenshot"]
image::../images/tines-webhook-url-fallback.png[Tines Webhook URL fallback]

[float]
[[tines-story-library]]
=== Tines Story Libary

In order to simplify the integration with Elastic, Tines offers a set of pre-defined Elastic stories in the Story library.
They can be found by searching for "Elastic" in the Tines Story library:

[role="screenshot"]
image::../images/tines_elastic_stories.png[Tines Elastic stories]

They can be imported directly into your Tines tenant.

=== Format

Tines connector will send the data in JSON format.

The message contains execution specific fields, such as `alertId`, `date`, `_index`, `kibanaBaseUrl`, along with the `rule` and `params` objects. 

The number of alerts (signals) can be found at `state.signals_count`.

The alerts (signals) data is stored in the `context.alerts` array, following the https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html[ECS] format.
