[role="xpack"]
[[cases-webhook-action-type]]
== Webhook - Case Management connector and action
++++
<titleabbrev>Webhook - Case Management</titleabbrev>
++++

The Webhook - Case Management connector uses https://github.com/axios/axios[axios] to send POST, PUT, and GET requests to a case management RESTful API web service.

[float]
[[cases-webhook-connector-configuration]]
=== Connector configuration

Webhook - Case Management connectors have the following configuration properties.

Name::      The name of the connector. The name is used to identify a connector in the management UI connector listing and in the connector list when configuring an action.
Require authentication:: If true, a username and password for login type authentication must be provided.
Username::      Username for HTTP basic authentication.
Password::  Password for HTTP basic authentication.
Headers::   A set of key-value pairs sent as headers with the request URLs for the create case, update case, get case, and create comment methods.
Create Case Method::  REST API HTTP request method to create a case in third-party system, either `post`(default), `put`, or `patch`.
Create Case URL::       Rest API URL to create case in third-party system. If you are using the <<action-settings, `xpack.actions.allowedHosts`>> setting, make sure the hostname is added to the allowed hosts.
Create Case Object::      A JSON payload sent to the create case URL to create a case. Use the variable selector to add case data to the payload. Required variables are `case.title` and `case.description`. For example:
+
[source,json]
--
{
	"fields": {
	  "summary": {{{case.title}}},
	  "description": {{{case.description}}},
	  "labels": {{{case.tags}}}
	}
}
--
Note: Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated in this step. The JSON is validated once the mustache variables have been placed when REST method is executed. Manually ensure that the JSON is valid, disregarding the mustache variables, so the later validation will pass.

Create Case Response - Case ID Key::   JSON key in the create case response that contains the external case ID
Get Case URL::       Rest API URL to GET case by id from third-party system. Use the variable selector to add external system id to the url. If you are using the <<action-settings, `xpack.actions.allowedHosts`>> setting, make sure the hostname is added to the allowed hosts. For example:
+
[source,text]
--
https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}
--
Note: Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated in this step. The JSON is validated once the mustache variables have been placed when REST method is executed. Manually ensure that the JSON is valid, disregarding the mustache variables, so the later validation will pass.

Get Case Response - Title Key::   JSON key in get case response that contains the external case title
External Case View URL::       URL to view case in external system. Use the variable selector to add external system id or external system title to the url. For example:
+
[source,text]
--
https://testing-jira.atlassian.net/browse/{{{external.system.title}}}
--
Update Case Method::  REST API HTTP request method to update case in third-party system, either `post`, `put`(default), or `patch`.
Update Case URL::       Rest API URL to update case by id in third-party system. Use the variable selector to add external system id to the url. If you are using the <<action-settings, `xpack.actions.allowedHosts`>> setting, make sure the hostname is added to the allowed hosts. For example:
+
[source,text]
--
https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}
--
Update Case Object::      A JSON payload sent to the update case URL to update case. Use the variable selector to add Kibana Cases data to the payload. Required variables are `case.title` and `case.description`. For example:
+
[source,json]
--
{
	"fields": {
	  "summary": {{{case.title}}},
	  "description": {{{case.description}}},
	  "labels": {{{case.tags}}}
	}
}
--
Note: Due to mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated in this step. The JSON is validated once the mustache variables have been placed when REST method is executed. Manually ensure that the JSON is valid to avoid future validation errors; disregard mustache variables during your review.
Create Comment Method::  (optional) REST API HTTP request method to create a case comment in third-party system, either `post`, `put`(default), or `patch`.
Create Comment URL::       (optional) Rest API URL to create a case comment by id in third-party system. Use the variable selector to add external system id to the url. If you are using the <<action-settings, `xpack.actions.allowedHosts`>> setting, make sure the hostname is added to the allowed hosts. For example:
+
[source,text]
--
https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}/comment
--
Create Comment Object::      (optional) A JSON payload sent to the create comment URL to create a case comment. Use the variable selector to add Kibana Cases data to the payload. The required variable is `case.comment`. For example:
+
[source,json]
--
{
  "body": {{{case.comment}}}
}
--
Note: Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated in this step. The JSON is validated once the mustache variables have been placed and when REST method is executed. We recommend manually ensuring that the JSON is valid, disregarding the mustache variables, so the later validation will pass.

[float]
[[cases-webhook-connector-networking-configuration]]
=== Connector networking configuration

Use the <<action-settings, action configuration settings>> to customize connector networking configurations, such as proxies, certificates, or TLS settings. You can set configurations that apply to all your connectors or use `xpack.actions.customHostSettings` to set per-host configurations.

[float]
[[Preconfigured-cases-webhook-configuration]]
=== Preconfigured connector type

[source,text]
--
 my-case-management-webhook:
   name: Case Management Webhook Connector
   actionTypeId: .cases-webhook
   config:
     hasAuth: true
     headers:
       'content-type': 'application/json'
     createIncidentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue'
     createIncidentMethod: 'post'
     createIncidentJson: '{"fields":{"summary":{{{case.title}}},"description":{{{case.description}}},"labels":{{{case.tags}}}'
     getIncidentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}'
     getIncidentResponseExternalTitleKey: 'key'
     viewIncidentUrl: 'https://testing-jira.atlassian.net/browse/{{{external.system.title}}}'
     updateIncidentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}'
     updateIncidentMethod: 'put'
     updateIncidentJson: '{"fields":{"summary":{{{case.title}}},"description":{{{case.description}}},"labels":{{{case.tags}}}'
     createCommentMethod: 'post',
     createCommentUrl: 'https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}/comment',
     createCommentJson: '{"body": {{{case.comment}}}}',
   secrets:
     user: testuser
     password: passwordvalue
--

Config defines information for the connector type.

`hasAuth`:: A boolean that corresponds to *Requires authentication*. If `true`, this connector will require values for `user` and `password` inside the secrets configuration. Defaults to `true`.
`headers`:: A record<string, string> that corresponds to *Headers*.
`createIncidentUrl`:: A URL string that corresponds to *Create Case URL*.
`createIncidentMethod`:: A string that corresponds to *Create Case Method*.
`createIncidentJson`:: A stringified JSON with mustache variables that corresponds to *Create Case JSON*.
`createIncidentResponseKey`:: A string from the response body of the create case method that corresponds to the *External Service Id*.
`getIncidentUrl`:: A URL string with an *External Service Id* mustache variable that corresponds to *Get Case URL*.
`getIncidentResponseExternalTitleKey`:: A string from the response body of the get case method that corresponds to the *External Service Title*.
`viewIncidentUrl`:: A URL string with either the *External Service Id* or *External Service Title* mustache variable that corresponds to *View Case URL*.
`updateIncidentUrl`:: A URL string that corresponds to *Update Case URL*.
`updateIncidentMethod`:: A string that corresponds to *Update Case Method*.
`updateIncidentJson`:: A stringified JSON with mustache variables that corresponds to *Update Case JSON*.
`createCommentUrl`:: A URL string that corresponds to *Create Comment URL*.
`createCommentMethod`:: A string that corresponds to *Create Comment Method*.
`createCommentJson`:: A stringified JSON with mustache variables that corresponds to *Create Comment JSON*.


Secrets defines sensitive information for the connector type.

`user`:: A string that corresponds to *User*. Required if `hasAuth` is set to `true`.
`password`:: A string that corresponds to *Password*. Required if `hasAuth` is set to `true`.

[float]
[[define-cases-webhook-ui]]
=== Define connector in Stack Management

Define Webhook - Case Management connector properties.

[role="screenshot"]
image::management/connectors/images/cases-webhook-connector.gif[Webhook - Case Management connector]

Test Webhook - Case Management action parameters.

[role="screenshot"]
image::management/connectors/images/cases-webhook-test.gif[Webhook - Case Management params test]

[float]
[[cases-webhook-action-configuration]]
=== Action configuration

Webhook - Case Management actions have the following configuration properties.

Title:: A title for the issue. Is used for searching the contents of the knowledge base.
Description:: The details about the incident.
Labels:: The labels for the incident.
Additional comments:: Additional information for the client, such as how to troubleshoot the issue.


[float]
[[cases-webhook-connector-full-example]]
== Full Example with Third-Party System

In the following example, we connect the Webhook - Case Management Connector with a demo instance of {jira} (a third-party case management system). Refer to their https://developer.atlassian.com/cloud/jira/platform/rest/v2/api-group-issues/[API documentation] to learn how to create an issue.

_NOTE: If you want to connect with {jira} quickly, we recommend using the <<jira-action-type, preconfigured {jira} connector>>._

[float]
====  Step 1 - Set up connector

In the Webhook - Case Management connector create flyout, begin by entering a connector *Name*, for example, `Jira Test Connector`. Basic authentication will be used in this example, so keep the *Require authentication* option selected and enter the *Username* and *Password* for the test instance, for example, `test-user@elastic.co` and `notarealpassword`. We will not be setting any *Headers* for the requests.

[role="screenshot"]
image::management/connectors/images/cases-webhook-step1.png[Webhook - Case Management connector Step 1, {jira} example]

[float]
====  Step 2 - Create case

To find the required values for this step, refer to the {jira} https://developer.atlassian.com/cloud/jira/platform/rest/v2/api-group-issues/#api-rest-api-2-issue-post[Create issue method documentation].

{jira} create issue request method: `POST`

{jira} create issue request url: `/rest/api/2/issue`

{jira} create issue request body:
[source,json]
--
{
    "fields": {
        "summary": "Main order flow broken",
        "description": "Order entry fails when selecting supplier.",
        "labels": ["bugfix",  "blitz_test"],
        "project":{"key":"PROJ-123"},
        "issuetype":{"id":"10000"}
    }
}
--

{jira} create issue response body:
[source,json]
--
{
  "id": "10000",
  "key": "ED-24",
  "self": "https://your-domain.atlassian.net/rest/api/2/issue/10000",
  "transition": {
    "status": 200,
    "errorCollection": {
      "errorMessages": [],
      "errors": {}
    }
  }
}
--
In the following screen capture, we enter `POST` as the *Create Case Method* and `https://testing-jira.atlassian.net/rest/api/2/issue` as the **Create Case Url**. In our example {jira} instance, the project key is "ROC" and the issuetype id is "10024". We have entered the {jira} request JSON as the *Create Case Object*, updating the project key to "ROC" and the issuetype id to "10024". We then use the Case variable selector to enter where we will map the Kibana case title, Kibana case description, and Kibana case tags. The {jira} response body contains an ID with the JSON key of "id", so we enter `id` as the *Create Case Response - Case ID Key*.
[role="screenshot"]
image::management/connectors/images/cases-webhook-step2.gif[Webhook - Case Management connector Step 2, {jira} example]

[float]
====  Step 3 - Get case information

Next we'll need to look at {jira}'s https://developer.atlassian.com/cloud/jira/platform/rest/v2/api-group-issues/#api-rest-api-2-issue-issueidorkey-[Get issue method documentation] to find the values for this step. In the GET response JSON below, we thinned out some null and unrelated data so that we can focus on the fields we need.

{jira} get issue request url: `/rest/api/2/issue/{issueIdOrKey}`

{jira} get issue response body:
[source,json]
--
{
    "id": "71964",
    "self": "https://testing-jira.atlassian.net/rest/api/2/issue/71964",
    "key": "ROC-584",
    "fields": {
        "issuetype": {
            "self": "https://testing-jira.atlassian.net/rest/api/2/issuetype/10024",
            "id": "10024",
            "description": "An improvement or enhancement to an existing feature or task.",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 10310,
            "hierarchyLevel": 0
        },
        "project": {
            "self": "https://testing-jira.atlassian.net/rest/api/2/project/10021",
            "id": "10021",
            "key": "ROC",
            "name": "ResponseOps Cases",
            "projectTypeKey": "software",
            "simplified": false
        },
        "created": "2022-08-02T16:52:20.554+0300",
        "priority": {
            "name": "Medium",
            "id": "3"
        },
        "labels": ["kibanaTag"],
        "updated": "2022-08-02T16:52:20.554+0300",
        "status": {
            "self": "https://testing-jira.atlassian.net/rest/api/2/status/10003",
            "description": "",
            "name": "To Do",
            "id": "10003",
            "statusCategory": {
                "self": "https://testing-jira.atlassian.net/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "description": "Kibana Description",
        "summary": "Kibana Title",
        "creator": {
            "self": "https://testing-jira.atlassian.net/rest/api/2/user?accountId=12345",
            "accountId": "12345",
            "emailAddress": "test-user@elastic.co",
            "displayName": "MLR-QA",
            "active": true,
            "timeZone": "Europe/Athens",
            "accountType": "atlassian"
        },
        "reporter": {
            "self": "https://testing-jira.atlassian.net/rest/api/2/user?accountId=12345",
            "accountId": "12345",
            "emailAddress": "test-user@elastic.co",
            "displayName": "MLR-QA",
            "active": true,
            "timeZone": "Europe/Athens",
            "accountType": "atlassian"
        },
        "comment": {
            "comments": [],
            "self": "https://testing-jira.atlassian.net/rest/api/2/issue/71964/comment",
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        }
    }
}
--

To make the Get Case URL, we need `/rest/api/2/issue/{issueIdOrKey}`. We will fill in the value with the issue ID, which we stored in the last step as *Create Case Response - Case ID Key*. Using the variable selector on the Get Case URL input, we can see the issue ID is stored as a mustache value `{{{external.system.id}}}`. So our value for *Get Case URL* will be `https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}`.

In the response JSON we can see the title of the case is "ROC-538". The key for this value is `key` so we enter `key` as the *Get Case Response External Title Key* value.

We also need the *External Case View URL*. https://support.atlassian.com/jira-software-cloud/docs/link-an-issue/[{jira}'s documentation] instructs you to get the link from the issue itself. The format for this link looks like `https://<user’s subdomain>.atlassian.net/browse/<issueKey>`. We mapped `key` to the *Get Case Response External Title Key* and using the variable selector on the *External Case View URL* input, we can see the issue key is stored as a mustache value `{{{external.system.title}}}`. Using this, the value for *External Case View URL* is `https://testing-jira.atlassian.net/browse/{{{external.system.title}}}`.
[role="screenshot"]
image::management/connectors/images/cases-webhook-step3.gif[Webhook - Case Management connector Step 3, {jira} example]

[float]
====  Step 4 - Comments and updates

During this step, we need to set the REST API data for updates and comments. Let's look at {jira}'s https://developer.atlassian.com/cloud/jira/platform/rest/v2/api-group-issues/#api-rest-api-2-issue-issueidorkey-put[Edit issue documentation].

{jira} update issue request method: `PUT`

{jira} update issue request url: `/rest/api/2/issue/{issueIdOrKey}`

{jira} update issue request body:
[source,json]
--
{
    "fields": {
        "summary": "Main order flow broken",
        "description": "Order entry fails when selecting supplier.",
        "labels": ["bugfix",  "blitz_test"],
        "project":{"key":"PROJ-123"},
        "issuetype":{"id":"10000"}
    }
}
--

In the screen capture below, on Step 4 we enter `PUT` as the *Update Case Method* and `https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}` as the **Update Case Url** using the variable selector to insert the `{{{external.system.id}}}`. Just like the create case JSON, have entered the {jira} request JSON as the *Update Case Object*, updating the project key to "ROC" and the issuetype id to "10024". We then use the Case variable selector to enter where we will map the Kibana case title, Kibana case description, and Kibana case tags.
[role="screenshot"]
image::management/connectors/images/cases-webhook-step4a.gif[Webhook - Case Management connector Step 4 Update, {jira} example]

Lastly we will look at {jira}'s https://developer.atlassian.com/cloud/jira/platform/rest/v2/api-group-issue-comments/#api-rest-api-2-issue-issueidorkey-comment-post[Add comment documentation] to fill out the optional comment REST fields.

{jira} create comment request method: `POST`

{jira} create comment request url: `/rest/api/2/issue/{issueIdOrKey}/comment`

{jira} create comment request body:
[source,json]
--
{
    "body": "Lorem ipsum dolor sit amet."
}
--

In the following screen capture, we enter `POST` as the *Create Comment Method* and `https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}/comment` as the **Create Comment Url** using the variable selector to insert the `{{{external.system.id}}}`. We enter the {jira} request JSON as the *Create Comment Object*, using the case variable selector to enter where we will map the case comment.
[role="screenshot"]
image::management/connectors/images/cases-webhook-step4b.gif[Webhook - Case Management connector Step 4 Comments, {jira} example]

[float]
[[cases-webhook-example-implementation]]
=== Implement connector in Kibana Cases
Let's take a look at how our new Webhook - Case Management connector works within the case workflow.

[float]
====  Create a case
[role="screenshot"]
image::management/connectors/images/cases-webhook-create.gif[Webhook - Case Management connector Create, {jira} example]

[float]
====  Update and comment on a case
[role="screenshot"]
image::management/connectors/images/cases-webhook-update.gif[Webhook - Case Management connector Update, {jira} example]
