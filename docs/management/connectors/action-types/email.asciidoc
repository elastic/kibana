[[email-action-type]]
== Email connector and action
++++
<titleabbrev>Email</titleabbrev>
++++
:frontmatter-description: Add a connector that can send email from your server.
:frontmatter-tags-products: [kibana] 
:frontmatter-tags-content-type: [how-to] 
:frontmatter-tags-user-goals: [configure]

The email connector uses the SMTP protocol to send mail messages.
Email message text is sent as both plain text and html text.

[NOTE]
====
* For emails to have a footer with a link back to {kib}, set the 
<<server-publicBaseUrl,`server.publicBaseUrl`>> configuration setting.
* When the 
<<action-config-email-domain-allowlist,`xpack.actions.email.domain_allowlist`>> 
configuration setting is used, the email addresses used for all of the Sender 
(from), To, CC, and BCC properties must have email domains specified in the 
configuration setting.
====

[float]
[[define-email-ui]]
=== Create connectors in {kib}

You can create connectors in *{stack-manage-app} > {connectors-ui}*
or as needed when you're creating a rule. For example:

[role="screenshot"]
image::management/connectors/images/email-connector.png[Email connector]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

[float]
[[email-connector-configuration]]
==== Connector configuration

Email connectors have the following configuration properties:

Name::
The name of the connector. The name is used to identify a  connector in the 
management UI connector listing, or in the connector list when configuring an 
action.

Sender::
The from address for all emails sent with this connector. This must be specified 
in `user@host-name` format. See the 
https://nodemailer.com/message/addresses/[Nodemailer address documentation] for 
more information.

Service::
The name of the email service. If `service` is one of Nodemailer's well-known email service providers, the 
`host`, `port`, and `secure` properties are defined with the default values and 
disabled for modification. If `service` is `MS Exchange Server`, the `host`, 
`port`, and `secure` properties are ignored and `tenantId`, `clientId`, 
`clientSecret` are required instead. If `service` is `other`, the `host` and 
`port` properties must be defined.

Host::
Host name of the service provider. If you are using the 
<<action-settings,`xpack.actions.allowedHosts`>> setting, make sure this 
hostname is added to the allowed hosts.

Port::
The port to connect to on the service provider.

Secure::
If true, the connection will use TLS when connecting to the service provider. 
Refer to the 
https://nodemailer.com/smtp/#tls-options[Nodemailer TLS documentation] for more 
information. If not true, the connection will initially connect over TCP, then 
attempt to switch to TLS via the SMTP STARTTLS command.

Tenant ID::
The directory tenant that the application plans to operate against, in GUID 
format.

Client ID::
The application ID that is assigned to your app, in GUID format. You can find 
this information in the portal where you registered your app.

Client Secret::
The client secret that you generated for your app in the app registration 
portal. The client secret must be URL-encoded before being sent. The Basic auth 
pattern of providing credentials in the Authorization header, per 
https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1[RFC 6749], is also 
supported.

Require authentication::
If true, a username and password for login type authentication must be provided.

Username::
Username for login type authentication.

Password::
Password for login type authentication.

[float]
[[email-action-configuration]]
=== Test connectors

You can test connectors as you're creating or editing the connector in {kib}.
For example:

[role="screenshot"]
image::management/connectors/images/email-params-test.png[Email params test]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

Email actions have the following configuration properties.

To, CC, BCC::
Each item is a list of addresses. Addresses can be specified in `user@host-name` 
format, or in `name <user@host-name>` format. One of To, CC, or BCC must contain 
an entry.

Subject::
The subject line of the email.

Message::
The message text of the email. Markdown format is supported.


[float]
[[email-connector-networking-configuration]]
=== Connector networking configuration

Use the <<action-settings,Action configuration settings>> to customize 
connector networking configurations, such as proxies, certificates, or TLS 
settings. You can set configurations that apply to all your connectors or use 
`xpack.actions.customHostSettings` to set per-host configurations.

[float]
[[configuring-email]]
=== Configure email accounts for well-known services

The email connector uses an integration of https://nodemailer.com/[Nodemailer] to send email from many popular SMTP email services.
For Microsoft Exchange email, it uses the Microsoft Graph API.

For other email servers, you can check the list of well-known services that 
Nodemailer supports in the JSON file
https://github.com/nodemailer/nodemailer/blob/master/lib/well-known/services.json[well-known/services.json]. 
The properties of the objects in those files &mdash; `host`, `port`, and 
`secure` &mdash; correspond to the same email connector configuration 
properties. A missing `secure` property in the "well-known/services.json" file 
is considered `false`.  Typically, `port: 465` uses `secure: true`, and 
`port: 25` and `port: 587` use `secure: false`.

[float]
[[elasticcloud]]
==== {ecloud}
    
Use the preconfigured email connector (`Elastic-Cloud-SMTP`) to send emails from {ecloud}.

NOTE: For more information on the preconfigured email connector, see link:{cloud}/ec-watcher.html#ec-cloud-email-service-limits[{ecloud} email service limits].

[float]
[[gmail]]
==== Gmail

To create a connector that sends email from the https://mail.google.com[Gmail] SMTP service, set the **Service** to `Gmail`.

If you get an authentication error that indicates that you need to continue the
sign-in process from a web browser when the action attempts to send email, you 
need to configure Gmail to 
https://support.google.com/accounts/answer/6010255?hl=en[allow less secure apps to access your account].

If two-step verification is enabled for your account, you must generate and use
a unique App Password to send email from {kib}. See
https://support.google.com/accounts/answer/185833?hl=en[Sign in using App Passwords]
for more information.

[float]
[[outlook]]
==== Outlook.com

To create a connector that sends email from the
https://www.outlook.com/[Outlook.com] SMTP service, set the **Service** to `Outlook`.

When sending emails, you must provide a `from` address, either as the default 
in your connector configuration or as part of the email action in the rule.

NOTE: You must use a unique App Password if two-step verification is enabled. 
See 
http://windows.microsoft.com/en-us/windows/app-passwords-two-step-verification[App passwords and two-step verification] 
for more information.

[float]
[[amazon-ses]]
==== Amazon SES

To create a connector that sends email from the
http://aws.amazon.com/ses[Amazon Simple Email Service] (SES) SMTP service, set the **Service** to `Amazon SES`.

NOTE: You must use your Amazon SES SMTP credentials to send email through Amazon 
SES. For more information, see
http://docs.aws.amazon.com/ses/latest/DeveloperGuide/smtp-credentials.html[Obtaining Your Amazon SES SMTP Credentials]. 
You might also need to verify
https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html[your email address]
or 
https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html[your whole domain]
at AWS.

[float]
[[exchange-basic-auth]]
==== Microsoft Exchange with basic authentication

deprecated:[7.16.0,"This Microsoft Exchange configuration is deprecated and will be removed later because Microsoft is deprecating basic authentication."]

To prepare for the removal of Basic Auth, you must update all existing Microsoft 
Exchange connectors with the new configuration based on the 
https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow[OAuth 2.0 Client Credentials Authentication].

[float]
[[exchange]]
==== Microsoft Exchange with OAuth 2.0

NOTE: The email connector uses Microsoft Graph REST API v1.0, in particular the https://docs.microsoft.com/en-us/graph/api/user-sendmail[sendMail] endpoint. It supports only the https://learn.microsoft.com/en-us/graph/deployments#microsoft-graph-and-graph-explorer-service-root-endpoints[Microsoft Graph global service] root endpoint (`https://graph.microsoft.com`).

Before you create an email connector for Microsoft Exchange, you must create and 
register the client integration application on the 
https://go.microsoft.com/fwlink/?linkid=2083908[Azure portal]:

[role="screenshot"]
image::management/connectors/images/exchange-register-app.png[Register client application for MS Exchange]

Next, open *Manage > API permissions*, and then define the permissions for the 
registered application to send emails. Refer to the 
https://docs.microsoft.com/en-us/graph/api/user-sendmail?view=graph-rest-1.0&tabs=http#permissions[documentation] 
for the Microsoft Graph API.

[role="screenshot"]
image::management/connectors/images/exchange-api-permissions.png[MS Exchange API permissions]

Add the "Mail.Send" permission for Microsoft Graph. The permission appears in 
the list with the status "Not granted for <your Azure active directory>":

[role="screenshot"]
image::management/connectors/images/exchange-not-granted.png[MS Exchange "Mail.Send" not granted]

Click *Grant admin consent for <your Azure active directory>*.

[role="screenshot"]
image::management/connectors/images/exchange-grant-confirm.png[MS Exchange grant confirmation]

Confirm that the status for the "Mail.Send" permission is now granted.

[role="screenshot"]
image::management/connectors/images/exchange-granted.png[MS Exchange grant confirmation]

[float]
[[exchange-client-secret]]
===== Configure the Microsoft Exchange Client secret

To configure the Microsoft Exchange Client secret, open *Manage > Certificates & secrets*:

[role="screenshot"]
image::management/connectors/images/exchange-secrets.png[MS Exchange secrets configuration]

Add a new client secret, then copy the value and put it to the proper field in 
the Microsoft Exchange email connector.

[float]
[[exchange-client-tenant-id]]
===== Configure the Microsoft Exchange client and tenant identifiers

To find the Microsoft Exchange client and tenant IDs, open the *Overview* page:

[role="screenshot"]
image::management/connectors/images/exchange-client-tenant.png[MS Exchange Client ID and Tenant ID configuration]

Create a connector and set the **Service** to `MS Exchange Server`.
Copy and paste the values into the proper fields.