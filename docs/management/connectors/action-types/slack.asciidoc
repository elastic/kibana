[[slack-action-type]]
== Slack connector and action
++++
<titleabbrev>Slack</titleabbrev>
++++

The Slack connector uses https://api.slack.com/incoming-webhooks[Slack Incoming Webhooks].

[float]
[[define-slack-ui]]
=== Create connectors in {kib}

You can create connectors in *{stack-manage-app} > {connectors-ui}*
or as needed when you're creating a rule. For example:

[role="screenshot"]
image::management/connectors/images/slack-connector.png[Slack connector]

[float]
[[slack-connector-configuration]]
==== Connector configuration

Slack connectors have the following configuration properties:

Name::      The name of the connector.
Webhook URL::   The URL of the incoming webhook. See https://api.slack.com/messaging/webhooks#getting_started[Slack Incoming Webhooks] for instructions on generating this URL. If you are using the <<action-settings, `xpack.actions.allowedHosts`>> setting, make sure the hostname is added to the allowed hosts.

[float]
[[preconfigured-slack-configuration]]
=== Create preconfigured connectors

If you are running {kib} on-prem, you can define connectors by
adding `xpack.actions.preconfigured` settings to your `kibana.yml` file.
For example:

Connector using Webhook

[source,text]
--
xpack.actions.preconfigured:
  my-slack:
    name: preconfigured-slack-connector-type
    actionTypeId: .slack
    config:
      type: 'webhook'
    secrets:
      webhookUrl: 'https://hooks.slack.com/services/xxxx/xxxx/xxxx'
--

Connector using Web API

[source,text]
--
xpack.actions.preconfigured:
  my-slack:
    name: preconfigured-slack-connector-type
    actionTypeId: .slack
    config:
      type: 'web_api'
    secrets:
      token: 'xoxb-xxxx-xxxx-xxxx'
--

Config defines information for the connector type:

`type`:: A string that takes values `'web_api'` or `'webhook'`, which depends on a chosen slack connector type.

Secrets defines sensitive information for the connector type.

`webhookUrl`:: A string that corresponds to *Webhook URL*.
`token`:: A string that corresponds to *Bot token* for respective Slack App.

[float]
[[slack-action-configuration]]
=== Test connectors

You can test connectors with the <<execute-connector-api,run connector API>> or
as you're creating or editing the connector in {kib}. For example:

[role="screenshot"]
image::management/connectors/images/slack-params-test.png[Slack params test]

Slack actions have the following properties:

Message::   The message	text, converted to the `text` field in the Webhook JSON payload. Currently only the text field is supported. Markdown, images, and other advanced formatting are not yet supported.

[float]
[[slack-connector-networking-configuration]]
=== Connector networking configuration

Use the <<action-settings,Action configuration settings>> to customize connector networking configurations, such as proxies, certificates, or TLS settings. You can set configurations that apply to all your connectors or use `xpack.actions.customHostSettings` to set per-host configurations.

[float]
[[configuring-slack-webhook]]
==== Configure a Slack account with Webhook

. Log in to http://slack.com[slack.com] as a team administrator.
. Follow first 3 paragraphs of https://api.slack.com/messaging/webhooks.
. Copy the generated Webhook URL so you can paste it into your Slack connector form.

[float]
[[configuring-slack-web-api]]
==== Configure a Slack account with Web API

. Create Slack App: https://api.slack.com/authentication/basics#creating
. Add scope: `channels:read, groups:read, chat:write and chat:write.public` as it is explained here: https://api.slack.com/authentication/basics#scopes
. Installing the app to a workspace: https://api.slack.com/authentication/basics#installing.
. If you need to send messages to a private channel you need to write `/invite @App_name` in it. 
  Putting "@" triggers Slack to start auto-suggesting, which is why it then becomes easy to find your app name in the list.
. Go to `OAuth & Permissions` in the app menu and copy `Bot User OAuth Token` so you can paste it into your Slack connector form.

