[[servicenow-action-type]]
== {sn-itsm} connector and action
++++
<titleabbrev>{sn-itsm}</titleabbrev>
++++

The {sn-itsm} connector uses the
https://developer.servicenow.com/dev.do#!/reference/api/sandiego/rest/c_ImportSetAPI[import set API]
to create {sn} incidents. You can use the connector for rule actions and cases.

[float]
[[servicenow-itsm-connector-prerequisites]]
=== Prerequisites

After upgrading from {stack} version 7.15.0 or earlier to version 7.16.0 or
later, you must complete the following steps within your {sn} instance before
creating a new {sn-itsm} connector or
<<servicenow-itsm-connector-update,updating an existing one>>:

. Install
https://store.servicenow.com/sn_appstore_store.do#!/store/application/7148dbc91bf1f450ced060a7234bcb88[Elastic for ITSM]
from the {sn} Store.
. <<servicenow-itsm-connector-prerequisites-integration-user,Create a {sn} integration user and assign it the appropriate roles>>.
. <<servicenow-itsm-connector-prerequisites-cors-rule,Create a Cross-Origin Resource Sharing (CORS) rule>>.
. If you use open authorization (OAuth), you must also:
.. <<servicenow-itsm-connector-prerequisites-rsa-key,Create an RSA keypair and add an X.509 Certificate>>.
.. <<servicenow-itsm-connector-prerequisites-endpoint,Create an OAuth JWT API endpoint for external clients with a JWT Verifiers Map>>.

[float]
[[servicenow-itsm-connector-prerequisites-integration-user]]
==== Create a {sn} integration user

To ensure authenticated communication between Elastic and {sn}, create a {sn} integration user and assign it the appropriate roles.

. In your {sn} instance, go to *System Security -> Users and Groups -> Users*.
. Click *New*.
. Complete the form, then right-click on the menu bar and click *Save*.
. Go to the *Roles* tab and click *Edit*.
. Assign the integration user the following roles:Â 
* `import_set_loader`
* `import_transformer`
* `personalize_choices`
* `x_elas2_inc_int.integration_user`
. Click *Save*.

[float]
[[servicenow-itsm-connector-prerequisites-cors-rule]]
==== Create a CORS rule

A CORS rule is required for communication between Elastic and {sn}. To create a CORS rule:

. In your {sn} instance, go to *System Web Services -> REST -> CORS Rules*.
. Click *New*.
. Configure the rule as follows:
* *Name*: Name the rule.
* *REST API*: Set the rule to use the Elastic ITSM API by choosing `Elastic ITSM API [x_elas2_inc_int/elastic_api]`.
* *Domain*: Enter the Kibana URL.
. Go to the *HTTP methods* tab and select *GET*.
. Click *Submit* to create the rule.

[float]
[[servicenow-itsm-connector-prerequisites-rsa-key]]
==== Create an RSA keypair and add an X.509 certificate

This step is required to use OAuth for authentication between Elastic and {sn}.

// tag::servicenow-rsa-key[]
*Create an RSA keypair:*

. Use https://www.openssl.org/docs/man1.0.2/man1/genrsa.html[OpenSSL] to generate an RSA private key:
+
--
[source,sh]
----
openssl genrsa -out example-private-key.pem 3072
openssl genrsa -passout pass:foobar -out example-private-key-with-password.pem 3072 <1>
----
<1> Use the `passout` option to set a password on your private key. This is optional but remember your password if you set one.
--

. Use https://www.openssl.org/docs/man1.0.2/man1/req.html[OpenSSL] to generate the matching public key:
+
--
[source,sh]
----
openssl req -new -x509 -key example-private-key.pem -out example-sn-cert.pem -days 360
----
--
// end::servicenow-rsa-key[]
// tag::servicenow-certificate[]
*Add an X.509 certificate to ServiceNow:*

. In your {sn} instance, go to *Certificates* and select *New*.
. Configure the certificate as follows:
+
--
* *Name*: Name the certificate.
* *PEM Certificate*: Copy the generated public key into this text field.

[role="screenshot"]
image::management/connectors/images/servicenow-new-certificate.png[Shows new certificate form in ServiceNow]
--

. Click *Submit* to create the certificate.
// end::servicenow-certificate[]

[float]
[[servicenow-itsm-connector-prerequisites-endpoint]]
==== Create an OAuth JWT API endpoint for external clients with a JWT Verifiers Map

// tag::servicenow-endpoint[]
This step is required to use OAuth for authentication between Elastic and {sn}.

. In your {sn} instance, go to *Application Registry* and select *New*.
. Select *Create an OAuth JWT API endpoint for external clients* from the list of options.
+
--
[role="screenshot"]
image::management/connectors/images/servicenow-jwt-endpoint.png[Shows application type selection]
--

. Configure the application as follows:
+
--
* *Name*: Name the application.
* *User field*: Select the field to use as the user identifier.

[role="screenshot"]
image::management/connectors/images/servicenow-new-application.png[Shows new application form in ServiceNow]

IMPORTANT: Remember the selected user field. You will use this as the *User Identifier Value* when creating the connector. For example, if you selected *Email* for *User field*, you will use the user's email for the *User Identifier Value*.
--

. Click *Submit* to create the application. You will be redirected to the list of applications.
. Select the application you just created.
. Find the *Jwt Verifier Maps* tab and click *New*.
. Configure the new record as follows:
+
--
* *Name*: Name the JWT Verifier Map.
* *Sys certificate*: Click the search icon and select the name of the certificate created in the previous step.

[role="screenshot"]
image::management/connectors/images/servicenow-new-jwt-verifier-map.png[Shows new JWT Verifier Map form in ServiceNow]
--

. Click *Submit* to create the verifier map.
. Note the *Client ID*, *Client Secret* and *JWT Key ID*. You will need these values to create your {sn} connector.
+
--
[role="screenshot"]
image::management/connectors/images/servicenow-oauth-values.png[Shows where to find OAuth values in ServiceNow]
--
// end::servicenow-endpoint[]

[float]
[[servicenow-itsm-connector-update]]
=== Update a deprecated {sn-itsm} connector

{sn-itsm} connectors created in {stack} version 7.15.0 or earlier are marked as deprecated after you upgrade to version 7.16.0 or later. Deprecated connectors have a yellow icon after their name and display a warning message when selected.

[role="screenshot"]
image::management/connectors/images/servicenow-sir-update-connector.png[Shows deprecated ServiceNow connectors]

IMPORTANT: Deprecated connectors will continue to function with the rules they were added to and can be assigned to new rules. However, it is strongly recommended to update deprecated connectors or <<creating-new-connector, create new ones>> to ensure you have access to connector enhancements, such as updating incidents.

To update a deprecated connector:

. Open the main menu and go to *Stack Management -> Rules and connectors -> Connectors*.
. Select the deprecated connector to open the *Edit connector* flyout.
. In the warning message, click *Update this connector*.
. Complete the guided steps in the *Edit connector* flyout.
.. Install https://store.servicenow.com/sn_appstore_store.do#!/store/application/7148dbc91bf1f450ced060a7234bcb88[Elastic for ITSM] and complete the <<servicenow-itsm-connector-prerequisites, required prerequisites>>.
.. Enter the URL of your {sn} instance.
.. Enter the username and password of your {sn} instance.
. Click *Update*.

[float]
[[servicenow-connector-configuration]]
=== Connector configuration

{sn-itsm} connectors have the following configuration properties.

Name::      The name of the connector. The name is used to identify a  connector in the **Stack Management** UI connector listing, and in the connector list when configuring an action.
Is OAuth::  The type of authentication to use.
URL::       {sn} instance URL.
Username::  Username for HTTP Basic authentication.
Password::  Password for HTTP Basic authentication.
User Identifier:: Identifier to use for OAuth type authentication. This identifier should be the *User field* you selected during setup. For example, if the selected *User field* is *Email*, the user identifier should be the user's email address.
Client ID:: The client ID assigned to your OAuth application.
Client Secret:: The client secret assigned to your OAuth application.
JWT Key ID:: The key ID assigned to the JWT Verifier Map of your OAuth application.
Private Key:: The RSA private key generated during setup.
Private Key Password:: The password for the RSA private key generated during setup, if set.

[float]
[[servicenow-connector-networking-configuration]]
=== Connector networking configuration

Use the <<action-settings, Action configuration settings>> to customize connector networking configurations, such as proxies, certificates, or TLS settings. You can set configurations that apply to all your connectors or use `xpack.actions.customHostSettings` to set per-host configurations.

[float]
[[Preconfigured-servicenow-configuration]]
=== Preconfigured connector type

Connector using Basic Authentication
[source,text]
--
 my-servicenow:
   name: preconfigured-servicenow-connector-type
   actionTypeId: .servicenow
   config:
     apiUrl: https://example.service-now.com/
     usesTableApi: false
   secrets:
     username: testuser
     password: passwordkeystorevalue
--

Connector using OAuth
[source,text]
--
 my-servicenow:
   name: preconfigured-oauth-servicenow-connector-type
   actionTypeId: .servicenow
   config:
     apiUrl: https://example.service-now.com/
     usesTableApi: false
     isOAuth: true
     userIdentifierValue: testuser@email.com
     clientId: abcdefghijklmnopqrstuvwxyzabcdef
     jwtKeyId: fedcbazyxwvutsrqponmlkjihgfedcba
   secrets:
     clientSecret: secretsecret
     privateKey: -----BEGIN RSA PRIVATE KEY-----\nprivatekeyhere\n-----END RSA PRIVATE KEY-----
--

Config defines information for the connector type.

`apiUrl`:: An address that corresponds to *URL*.
`usesTableApi`:: A boolean that indicates if the connector uses the Table API or the Import Set API.

NOTE: If `usesTableApi` is set to false, the Elastic application should be installed in {sn}.

`isOAuth`:: A boolean that corresponds to *Is OAuth* and indicates if the connector uses Basic Authentication or OAuth.
`userIdentifierValue`:: A string that corresponds to *User Identifier*. Required if `isOAuth` is set to `true`.
`clientId`:: A string that corresponds to *Client ID*, used for OAuth authentication. Required if `isOAuth` is set to `true`.
`jwtKeyId`:: A string that corresponds to *JWT Key ID*, used for OAuth authentication. Required if `isOAuth` is set to `true`.

Secrets defines sensitive information for the connector type.

`username`:: A string that corresponds to *Username*. Required if `isOAuth` is set to `false`.
`password`::  A string that corresponds to *Password*. Should be stored in the <<creating-keystore, {kib} keystore>>. Required if `isOAuth` is set to `false`.
`clientSecret`:: A string that corresponds to *Client Secret*. Required if `isOAuth` is set to `true`.
`privateKey`:: A string that corresponds to *Private Key*. Required if `isOAuth` is set to `true`.
`privateKeyPassword`:: A string that corresponds to *Private Key Password*.

[float]
[[define-servicenow-ui]]
=== Define connector in Stack Management

Define {sn-itsm} connector properties. Choose whether to use OAuth for authentication.

[role="screenshot"]
image::management/connectors/images/servicenow-connector-basic.png[ServiceNow connector using basic auth]

[role="screenshot"]
image::management/connectors/images/servicenow-connector-oauth.png[ServiceNow connector using OAuth]

Test {sn-itsm} action parameters.

[role="screenshot"]
image::management/connectors/images/servicenow-params-test.png[ServiceNow params test]

[float]
[[servicenow-action-configuration]]
=== Action configuration

{sn-itsm} actions have the following configuration properties.

Urgency::              The extent to which the incident resolution can delay.
Severity::             The severity of the incident.
Impact::               The effect an incident has on business. Can be measured by the number of affected users or by how critical it is to the business in question.
Category::             The category of the incident.
Subcategory::          The category of the incident.
Correlation ID::            Connectors using the same Correlation ID will be associated with the same {sn} incident. This value determines whether a new {sn} incident will be created or an existing one is updated. Modifying this value is optional; if not modified, the rule ID and alert ID are combined as `{{ruleID}}:{{alert ID}}` to form the Correlation ID value in {sn}. The maximum character length for this value is 100 characters.

NOTE: Using the default configuration of `{{ruleID}}:{{alert ID}}` ensures that {sn} will create a separate incident record for every generated alert that uses a unique alert ID. If the rule generates multiple alerts that use the same alert IDs, {sn} creates and continually updates a single incident record for the alert.

Correlation Display::  A descriptive label of the alert for correlation purposes in {sn}.
Short description::    A short description for the incident, used for searching the contents of the knowledge base.
Description::          The details about the incident.
Additional comments::  Additional information for the client, such as how to troubleshoot the issue.

[float]
[[configuring-servicenow]]
=== Configure {sn}

{sn} offers free https://developer.servicenow.com/dev.do#!/guides/madrid/now-platform/pdi-guide/obtaining-a-pdi[Personal Developer Instances], which you can use to test incidents.
