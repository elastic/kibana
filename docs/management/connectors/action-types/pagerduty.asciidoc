[[pagerduty-action-type]]
== PagerDuty connector and action
++++
<titleabbrev>PagerDuty</titleabbrev>
++++
:frontmatter-description: Add a connector that can manage PagerDuty alerts.
:frontmatter-tags-products: [kibana] 
:frontmatter-tags-content-type: [how-to] 
:frontmatter-tags-user-goals: [configure]

The PagerDuty connector enables you to trigger, acknowledge, and resolve PagerDuty alerts.
In particular, it uses the https://v2.developer.pagerduty.com/docs/events-api-v2[v2 Events API].

To create this connector, you must have a valid PagerDuty integration key.
For configuration tips, refer to <<configuring-opsgenie>>

[float]
[[define-pagerduty-ui]]
=== Create connectors in {kib}

You can create connectors in *{stack-manage-app} > {connectors-ui}*
or as needed when you're creating a rule. For example:

[role="screenshot"]
image::management/connectors/images/pagerduty-connector.png[PagerDuty connector]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

[float]
[[pagerduty-connector-configuration]]
==== Connector configuration

PagerDuty connectors have the following configuration properties:

Name::      The name of the connector. The name is used to identify a  connector in the management UI connector listing, or in the connector list when configuring an action.
API URL::   An optional PagerDuty event URL. Defaults to `https://events.pagerduty.com/v2/enqueue`. If you are using the <<action-settings, `xpack.actions.allowedHosts`>> setting, make sure the hostname is added to the allowed hosts.
Integration Key::   A 32 character PagerDuty Integration Key for an integration on a service, also referred to as the routing key.

[float]
[[pagerduty-action-configuration]]
=== Test connectors

After you create a connector, use the *Test* tab to test its actions:

* <<pagerduty-action-resolve,Acknowledge>>
* <<pagerduty-action-resolve,Resolve>>
* <<pagerduty-action-trigger,Trigger>>

When you create a rule that uses a PagerDuty connector, you can use any of these types of actions.
Rule recovery actions also support all types.

[float]
[[pagerduty-action-acknowledge]]
==== Acknowledge action

When you test the acknowlege action, you must provide the de-duplication key for a PagerDuty alert:

[role="screenshot"]
image::management/connectors/images/pagerduty-acknowledge-test.png[PagerDuty params test]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

[float]
[[pagerduty-action-resolve]]
==== Resolve action

Likewise when you test the resolve action, you must provide the de-duplication key:

[role="screenshot"]
image::management/connectors/images/pagerduty-resolve-test.png[PagerDuty params test]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

[float]
[[pagerduty-action-trigger]]
==== Trigger action

When you test the trigger action, you must provide a summary for the PagerDuty alert:

[role="screenshot"]
image::management/connectors/images/pagerduty-trigger-test.png[PagerDuty params test]
// NOTE: This is an autogenerated screenshot. Do not edit it directly.

This action has the following properties:

Severity::      The perceived severity of on the affected system. This can be one of `Critical`, `Error`, `Warning` or `Info`(default).
Event action::  One of `Trigger` (default), `Resolve`, or `Acknowledge`. See https://v2.developer.pagerduty.com/docs/events-api-v2#event-action[event action] for more details.
Dedup Key::     All actions sharing this key will be associated with the same PagerDuty alert. This value is used to correlate trigger and resolution. This value is optional, and if not set, defaults to `<rule ID>:<alert ID>`. The maximum length is 255 characters. See https://v2.developer.pagerduty.com/docs/events-api-v2#alert-de-duplication[alert deduplication] for details.
+
By default, when you create rules that use the PagerDuty connector, the de-duplication key is used to create a new PagerDuty incident for each alert and reuse the incident when a recovered alert reactivates.
Timestamp::     An optional https://v2.developer.pagerduty.com/v2/docs/types#datetime[ISO-8601 format date-time], indicating the time the event was detected or generated.
Component::     An optional value indicating the component of the source machine that is responsible for the event, for example `mysql` or `eth0`.
Group::         An optional value indicating the logical grouping of components of a service, for example `app-stack`.
Source::        An optional value indicating the affected system, preferably a hostname or fully qualified domain name. Defaults to the {kib} saved object id of the action.
Summary::       An optional text summary of the event, defaults to `No summary provided`. The maximum length is 1024 characters.
Class::         An optional value indicating the class/type of the event, for example `ping failure` or `cpu load`.

For more details on these properties, see https://v2.developer.pagerduty.com/v2/docs/send-an-event-events-api-v2[PagerDuty v2 event parameters].

[float]
[[pagerduty-connector-networking-configuration]]
=== Connector networking configuration

Use the <<action-settings, Action configuration settings>> to customize connector networking configurations, such as proxies, certificates, or TLS settings. You can set configurations that apply to all your connectors or use `xpack.actions.customHostSettings` to set per-host configurations.

[float]
[[pagerduty-benefits]]
=== Configure PagerDuty

By integrating PagerDuty with rules, you can:

* Route your rules to the right PagerDuty responder within your team, based on your structure, escalation policies, and workflows.
* Automatically generate incidents of different types and severity based on each rule's context.
* Tailor the incident data to match your needs by easily passing the rule context from {kib} to PagerDuty.

[[pagerduty-in-pagerduty]]
To set up PagerDuty:

. From the *Configuration* menu, select *Services*.
. Add an integration to a service:
+
* If you are adding your integration to an existing service,
click the name of the service you want to add the integration to.
Then, select the *Integrations* tab and click the *New Integration* button.
* If you are creating a new service for your integration,
go to
https://support.pagerduty.com/docs/services-and-integrations#section-configuring-services-and-integrations[Configuring Services and Integrations]
and follow the steps outlined in the *Create a New Service* section, selecting *Elastic Alerts* as the *Integration Type*.
Continue with the connector creation in {kib} after you have finished these steps.

. Enter an *Integration Name* in the format Elastic-service-name (for example, Elastic-Alerting or Kibana-APM-Alerting)
and select *Elastic Alerts* from the *Integration Type* menu.
. Click *Add Integration* to save your new integration.
+
You will be redirected to the *Integrations* tab for your service. An Integration Key is generated on this screen.
+
[role="screenshot"]
image::images/pagerduty-integration.png[PagerDuty Integrations tab]

. Save this key for use when you configure the connector in {kib}.
