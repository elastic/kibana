[chapter]
[role="xpack"]
[[osquery]]
= Osquery

Osquery enables you to to search, analyze, and visualize Osquery data ingested in {es}.

You can:

 * Run live queries with one or more agents
 * Define scheduled queries to capture changes to OS state over time
 * View a history of past queries and their results

For example, use *Osquery* to centralize security analytics and
contextualize OSquery results against other event data, anomalies, and threats,
and then use that context to improve host visibility, analytical power, and monitoring.

[role="screenshot"]
image::images/live-query-check-results.png[Results of OSquery]

[float]
== Requirements

* You must have the
https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-module-osquery.html[Osquery Manager integration].
This integration supports x86_64 bit Windows, Darwin, Arm64, and Linux platforms.
* Your system has an agent in Fleet.
* Your Osquery Manager has one or more policies. For more information, refer to the Fleet docs.
* You have the xxxx permission

[float]
== Open Osquery

Once you add the Osquery Manager integration to an agent policy, start *Osquery*
and begin your exploring your data.

. Open the main menu, and then click *Osquery*.
. View the queries that have run.
. To replay a query, click image::images/play-icon.png[Right-pointing triangle] This opens an editor with the query prepopulated.
. To view the results and <<osquery-status,status>> for a query, click image::images/play-icon.png[Table icon].

NOTE: If an agent is offline, the request status remains **pending** as {kib} retries the request.
By default, a query request times out after 5 minutes. The time out applies to the time it takes
to deliver the action request to an agent to run a query. If the action completes after the timeout period,
the results are still returned.

[float]
==  Run live queries

Run a query against one or more agents or policies
and view the results. This is useful for testing your query and
troubleshooting problems, such as a finding host that has an issue or an agent
with a security vulnerability.

. In the *Live queries* view, click **New live query**.
. Select one or more agents or groups to query. Just start typing in the search field,
and you'll get suggestions for agents by name, ID, platform, and policy.
. Enter a query or select a query from your saved queries.
+
[role="screenshot"]
image::images/enter-query.png[Select saved query dropdown name showing query name and description]
. Click **Submit**.
. Review the results in a table, or navigate to *Discover* to dive into the field data
or *Lens* to build visualizations.
. To view more info about the request, for example, if there are any failures, click the *Status* tab.
. When your query captures the data you want, click *Save for later* and define the query parameters.


[float]
== Schedule queries

Group and schedule queries to run on a specified interval, in seconds.
For example, you might have a compliance query group that checks
for IT compliance-type issues, such as which chrome extensions you have installed.
Another query group might monitor for evidence of malware.
Scheduled query groups are per integration that you added to a policy.


. Open the **Scheduled query groups** tab.
For each group, you'll see the query how frequently it will run and the
platform that it will run on.
. Select an integration to which you want to add or edit scheduled queries.
. To add individual queries, click *Add query*, and then enter the query ID and interval. Optionally set the minimum osquery version and the platform.
. To upload queries from a .conf query pack, drag the pack to drop zone under the query table. To explore the community packs that Osquery publishes, click *Example packs*.
. Click *Save query*. The queries start running once the policy receives the update.
. Monitor your data through dashboards, detection rules, and machine learning jobs.

[float]
== Manage your saved queries

Create, run, and edit your saved queries on the *Saved queries* tab.
 Each query contains the following information:

* A unique identifier for the query.
* A brief description about the query.
* The SQL query.
* The Scheduled query group configuration. These options only apply if a saved query
is added to a scheduled query group.
** The frequency at which at which to run the query
** The minimum https://github.com/osquery/osquery/releases)[version of osquery] required to run the query.
** The operating system required to run the query. For information about supported platforms, click the *OSquery schema* link on the *Edit query* flyout.

[float]
[[osquery-status]]
== Query statuses


[cols="2*<"]
|===
| *Status* | *Description*
| Successful | The query completed as expected.
| Failed | The query encountered a problem and might have failed, because there was an issue with the query or the agent was disconnected.
| Not yet responded | The query has not been sent to the agent.
| Expired | The action request timed out. The agent may be offline.
|===

[float]
=== Osquery results

When you run a live or scheduled query, the Osquery responses include the following information:

* Everything prefaced with `osquery.` is part of the query response. These fields are not mapped to ECS.
* The `host.*` and `agent.*` fields are mapped to ECS.
* The `action_data.query` has the query that was sent.
* All query results are https://osquery.readthedocs.io/en/stable/deployment/logging/#snapshot-logs[snapshot logs]
that represent a point in time with a set of results, with no differentials.
https://osquery.readthedocs.io/en/stable/deployment/logging/#differential-logs[Differential logs] are not supported.
* Osquery data is stored in the `logs-osquery_manager.result-default` datastream, and the result row data is under the `osquery` property in the document.

Here is an example of a successful osquery result.


```ts
{
  "_index": ".ds-logs-osquery_manager.result-default-2021.04.12-2021.04.12-000001",
  "_id": "R3ZwxngBKwN-X8eyQbxy",
  "_version": 1,
  "_score": null,
  "fields": {
    "osquery.seconds": [
      "7"
    ],
    "action_data.id": [
      "72d3ec71-7635-461e-a15d-f728819ae27f"
    ],
    "osquery.seconds.number": [
      7
    ],
    "osquery.hours.number": [
      6
    ],
    "host.hostname": [
      "MacBook-Pro.local"
    ],
    "type": [
      "MacBook-Pro.local"
    ],
    "host.mac": [
      "ad:de:48:00:12:22",
      "a6:83:e7:cb:91:ee"
    ],
    "osquery.total_seconds.number": [
      1060627
    ],
    "host.os.build": [
      "20D91"
    ],
    "host.ip": [
      "192.168.31.171",
      "fe80::b5b1:39ff:faa1:3b39"
    ],
    "agent.type": [
      "osquerybeat"
    ],
    "action_data.query": [
      "select * from uptime;"
    ],
    "osquery.minutes": [
      "37"
    ],
    "action_id": [
      "5099c02d-bd6d-4b88-af90-d80dcdc945df"
    ],
    "host.os.version": [
      "10.16"
    ],
    "host.os.kernel": [
      "20.3.0"
    ],
    "host.os.name": [
      "Mac OS X"
    ],
    "agent.name": [
      "MacBook-Pro.local"
    ],
    "host.name": [
      "MacBook-Pro.local"
    ],
    "osquery.total_seconds": [
      "1060627"
    ],
    "host.id": [
      "155D977D-8EA8-5BDE-94A2-D78A7B545198"
    ],
    "osquery.hours": [
      "6"
    ],
    "osquery.days": [
      "12"
    ],
    "host.os.type": [
      "macos"
    ],
    "osquery.days.number": [
      12
    ],
    "host.architecture": [
      "x86_64"
    ],
    "@timestamp": [
      "2021-04-12T14:15:45.060Z"
    ],
    "agent.id": [
      "196a0086-a612-48b1-930a-300565b3efaf"
    ],
    "host.os.platform": [
      "darwin"
    ],
    "ecs.version": [
      "1.8.0"
    ],
    "agent.ephemeral_id": [
      "5cb88e34-50fe-4c13-b81c-d2b7187505ea"
    ],
    "agent.version": [
      "7.13.0"
    ],
    "host.os.family": [
      "darwin"
    ],
    "osquery.minutes.number": [
      37
    ]
  }
}
```

This is an example of an **error response** for an undefined action query.

```ts
{
  "_index": ".ds-.fleet-actions-results-2021.04.10-000001",
  "_id": "qm7mvHgBKwN-X8eyYB1x",
  "_version": 1,
  "_score": null,
  "fields": {
    "completed_at": [
      "2021-04-10T17:48:32.268Z"
    ],
    "error.keyword": [
      "action undefined"
    ],
    "@timestamp": [
      "2021-04-10T17:48:32.000Z"
    ],
    "action_data.query": [
      "select * from uptime;"
    ],
    "action_data.id": [
      "2c95bb2c-8ab6-4e8c-ac01-a1abb693ea00"
    ],
    "agent_id": [
      "c21b4c9c-6f36-49f0-8b60-08490fc619ce"
    ],
    "action_id": [
      "53454d3b-c8cd-4a50-b5b4-f85da17b4be2"
    ],
    "started_at": [
      "2021-04-10T17:48:32.267Z"
    ],
    "error": [
      "action undefined"
    ]
  }
}
```

[float]
== Upgrade osquery versions

The https://github.com/osquery/osquery/releases[osquery version] available on an Elastic Agent
is tied to the version of Osquery Beat on the Agent.
To get the latest version of Osquery Beat,
https://www.elastic.co/guide/en/fleet/master/upgrade-elastic-agent.html[upgrade your Elastic Agent].

[float]
== Debug issues
If you encounter issues using Osquery Manager, find the relevant logs for the elastic-agent
and Osquerybeat in the installed agent directory, which will look similar to the following example paths.
Adjust the agent path as needed for your setup.

```ts
`/data/elastic-agent-054e22/logs/elastic-agent-json.log-*`
`/data/elastic-agent-054e22/logs/default/osquerybeat-json.log`
```

To get more details in the logs, change the agent logging level to debug:

. Open the main menu, and then select **Fleet**
. Select the agent that you want to debug.
. On the **Logs** tab, change the **Agent logging level** to **debug**, and then click **Apply changes**.
+
This updates `agent.logging.level` in the `fleet.yml` file and sets the logging level to `debug`.
