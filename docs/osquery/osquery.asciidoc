[chapter]
[role="xpack"]
[[osquery]]
= Osquery

The OSquery Manager integration enables you to centrally manage [Osquery](https://osquery.io/)
deployments to Elastic Agents in your Fleet and query host data through distributed SQL.

Add this integration to:

* Deploy osqueryd (the host monitoring daemon) to agents in a policy
* Schedule queries to capture OS state changes over time
* Run live queries against one or more agents or policies
* View a history of past queries and their results

Osquery results are stored in {es}, so that you can use the
Elastic Stack to search, analyze, and visualize Osquery data.

[float]
== Supported platforms

This integration supports x86_64 bit Windows, Darwin, Arm64, and Linux platforms.

[float]
== Access Osquery

After you add the Osquery Manager integration to an agent policy in Fleet,
access *Osquery* in two ways:

* Open the main menu, and then click *Osquery*


* Open the main menu, click *Fleet*, and then select the **Integrations** tab. Search for and select **Osquery Manager**.
Select a specific policy or go to the **Advanced** tab, and then select **Run live queries** or **Schedule query groups**.
The agents in that policy are pre-selected for the new query or scheduled query group.

[float]
==  Run live queries
Run a query against one or more agents or policies. View the
results in a table, or pivot to *Discover* or *Lens* to further explore the results.

. Open the main menu, and then click **Osquery**.
. In the *Live queries history* view, click the **New live query**.
. Select one or more agents or groups to query.
+
Agents with a green dot are online, based on a check that runs every 5 minutes.
. (Optional) Select a saved query.
. Click **Submit**.
. Review the results.
+
Depending on the number of agents queried, this request might take some time. Status info is updated as available.
. (Optional) Click the **Status** tab to view more info about the request, for example, if there are any failures.

NOTE:If an agent is offline, the request status remains **pending** as {kib} retries the request.
By default, a query request times out after 5 minutes. The time out applies to the time it takes
to deliver the action request to an agent to run a query. If the action completes after the timeout period,
the results are still returned.

[float]
== Schedule query groups

Scheduled query groups enable you to organize and schedule queries that run on an interval (seconds) on  Osquerybeat.
The results of the queries are returned directly to {es} and are viewable in {kib}.

You can add one or more
scheduled query groups to an Osquery Manager integration policy. Create multiple groups to
organize related queries.

The **Scheduled query groups** view
lists all Osquery Manager integrations and
shows which integrations currently have scheduled queries.

. Select an integration name
to add or edit scheduled queries for that integration.

. To create a new group of scheduled queries, return to the **Scheduled groups** tab and
click **Add scheduled query group**. Note that when you select this option,
a new integration will be added to the Agent policy you select.

After selecting a scheduled query group to edit or adding a new scheduled query group:

* *To add queries individually*: Click **Add query**. In the flyout, enter an ID for the query, the query, and the query interval (seconds). You can also optionally set the minimum osquery version required to run the query and set the platform required to run the query.
* *To load queries from a .conf query pack*: Use the **Select or drag and drop zone** under the query table. You can upload your own pack or use a community pack. To explore the community packs that Osquery publishes, click Example packs.

To save your changes, click **Save query**. Once saved, the changes are pushed out to the agents in the policy.

[float]
== Saved queries
The Saved queries page lists all queries that have been saved.
From the Live queries page, you can create and save a new live query.
From the **Scheduled query groups** page, you can add saved queries to a scheduled query group.

Each query contains the following information:
* ID: A unique identifier for the query.
* Description: A brief description about the query.
* Query: The SQL query.
* Scheduled query group configuration (optional): These options only apply if the saved query is added to a scheduled query group.
** Interval: The frequency at which this query should be run
** Minimum Osquery version: Sets the minimum [version of osquery](https://github.com/osquery/osquery/releases) required to run the query.
** Platform: Sets the operating system required to run the query.

[float]
== Query statuses


[cols="2*<"]
|===
| *Status* | *Description* |
| Successful | The query completed as expected.|
| Failed | The query encountered a problem and might have failed, because there was an issue with the query or the agent was disconnected. |
| Not yet responded | The query has not been sent to the agent. |
| Expired | The action request timed out. The agent may be offline.|
|===

[float]
=== Default Osquery configuration

The Osquery binary is executed with the standard osqueryd defaults.

[float]
=== Osquery results

When you run a live or scheduled query, note the following about Osquery responses:

- Everything prefaced with `osquery.` is part of the query response. Note that these fields are not mapped to ECS.
- The `host.*` and `agent.*` fields are mapped to ECS.
- The `action_data.query` has the query that was sent.
- All query results are [snapshot logs](https://osquery.readthedocs.io/en/stable/deployment/logging/#snapshot-logs) that represent a point in time with a set of results, with no differentials. [Differential logs](https://osquery.readthedocs.io/en/stable/deployment/logging/#differential-logs) are not supported.
- Osquery data is stored in the `logs-osquery_manager.result-default` datastream, and the result row data is under the `osquery` property in the document.


This is an example of a successful osquery result.


```ts
{
  "_index": ".ds-logs-osquery_manager.result-default-2021.04.12-2021.04.12-000001",
  "_id": "R3ZwxngBKwN-X8eyQbxy",
  "_version": 1,
  "_score": null,
  "fields": {
    "osquery.seconds": [
      "7"
    ],
    "action_data.id": [
      "72d3ec71-7635-461e-a15d-f728819ae27f"
    ],
    "osquery.seconds.number": [
      7
    ],
    "osquery.hours.number": [
      6
    ],
    "host.hostname": [
      "MacBook-Pro.local"
    ],
    "type": [
      "MacBook-Pro.local"
    ],
    "host.mac": [
      "ad:de:48:00:12:22",
      "a6:83:e7:cb:91:ee"
    ],
    "osquery.total_seconds.number": [
      1060627
    ],
    "host.os.build": [
      "20D91"
    ],
    "host.ip": [
      "192.168.31.171",
      "fe80::b5b1:39ff:faa1:3b39"
    ],
    "agent.type": [
      "osquerybeat"
    ],
    "action_data.query": [
      "select * from uptime;"
    ],
    "osquery.minutes": [
      "37"
    ],
    "action_id": [
      "5099c02d-bd6d-4b88-af90-d80dcdc945df"
    ],
    "host.os.version": [
      "10.16"
    ],
    "host.os.kernel": [
      "20.3.0"
    ],
    "host.os.name": [
      "Mac OS X"
    ],
    "agent.name": [
      "MacBook-Pro.local"
    ],
    "host.name": [
      "MacBook-Pro.local"
    ],
    "osquery.total_seconds": [
      "1060627"
    ],
    "host.id": [
      "155D977D-8EA8-5BDE-94A2-D78A7B545198"
    ],
    "osquery.hours": [
      "6"
    ],
    "osquery.days": [
      "12"
    ],
    "host.os.type": [
      "macos"
    ],
    "osquery.days.number": [
      12
    ],
    "host.architecture": [
      "x86_64"
    ],
    "@timestamp": [
      "2021-04-12T14:15:45.060Z"
    ],
    "agent.id": [
      "196a0086-a612-48b1-930a-300565b3efaf"
    ],
    "host.os.platform": [
      "darwin"
    ],
    "ecs.version": [
      "1.8.0"
    ],
    "agent.ephemeral_id": [
      "5cb88e34-50fe-4c13-b81c-d2b7187505ea"
    ],
    "agent.version": [
      "7.13.0"
    ],
    "host.os.family": [
      "darwin"
    ],
    "osquery.minutes.number": [
      37
    ]
  }
}
```

This is an example of an **error response** for an undefined action query.

```
{
  "_index": ".ds-.fleet-actions-results-2021.04.10-000001",
  "_id": "qm7mvHgBKwN-X8eyYB1x",
  "_version": 1,
  "_score": null,
  "fields": {
    "completed_at": [
      "2021-04-10T17:48:32.268Z"
    ],
    "error.keyword": [
      "action undefined"
    ],
    "@timestamp": [
      "2021-04-10T17:48:32.000Z"
    ],
    "action_data.query": [
      "select * from uptime;"
    ],
    "action_data.id": [
      "2c95bb2c-8ab6-4e8c-ac01-a1abb693ea00"
    ],
    "agent_id": [
      "c21b4c9c-6f36-49f0-8b60-08490fc619ce"
    ],
    "action_id": [
      "53454d3b-c8cd-4a50-b5b4-f85da17b4be2"
    ],
    "started_at": [
      "2021-04-10T17:48:32.267Z"
    ],
    "error": [
      "action undefined"
    ]
  }
}
```

[float]
== Upgrade osquery versions
The [osquery version](https://github.com/osquery/osquery/releases) available on an Elastic Agent
is tied to the version of Osquery Beat on the Agent. When a new osquery version is released,
we do our best to test and verify the impact of the update, then upgrade the osquery version available in Osquery Beat.
To get the latest version of Osquery Beat,
[upgrade your Elastic Agent](https://www.elastic.co/guide/en/fleet/master/upgrade-elastic-agent.html).

[float]
== Debug issues
If you encounter issues using Osquery Manager, find relevant logs for the elastic-agent
and Osquerybeat in the installed agent directory, which will look similar to the following example paths.
Adjust the agent path as needed for your setup.

```ts
`/data/elastic-agent-054e22/logs/elastic-agent-json.log-*`
`/data/elastic-agent-054e22/logs/default/osquerybeat-json.log`
```

To get more details in the logs, change the agent logging level to debug:
. Open the main menu, and then select **Fleet**
. Select the agent that you want to debug.
. On the **Logs** tab, change the **Agent logging level** to **debug**, and then click **Apply changes**.
+
This updates `agent.logging.level` in the `fleet.yml` file and sets the logging level to `debug`.
