[[plugin-api-changes]]
== Plugin API changes in 7.12
++++
<titleabbrev>Plugin API changes</titleabbrev>
++++

This page discusses the plugin API changes that you need to be aware of when migrating
your application to {kib} 7.12.

Other versions: {kibana-ref-all}/7.11/plugin-api-changes-7-11.html[7.11] |
{kibana-ref-all}/7.10/breaking-changes-7.10.html#general-plugin-API-changes-7-10[7.10] |
{kibana-ref-all}/7.9/breaking-changes-7.9.html#general-plugin-API-changes-79[7.9] |
{kibana-ref-all}/7.8/breaking-changes-7.8.html#general-plugin-API-changes-78[7.8] 

[[breaking_plugin_v7.12.0_90764]]
.{kib} and {es} logging config keys unified
[%collapsible]
====

The {kib} logging system uses a configuration schema inspired by `log4j` to
provide {es} compatible format. Several logging configuration keys were renamed
to align the naming schema with the {es} config:

* `*.kind` is renamed to ``*.type`
* `file-appender.path` to `file-appender.fileName`
* `logger.xxx.context` to `logger.xxx.name`

Refer to https://github.com/elastic/kibana/pull/90764[#90764]

====
[[breaking_plugin_v7.12.0_90752]]
.Camel case now enforced for plugin IDs
[%collapsible]
====

Plugin IDs in the `kibana.json` manifest must be camelCase.
This has always been a requirement in the {kib} Platform.
Previously, {kib} logged a deprecation warning. Now {kib} refuses to start.

Refer to https://github.com/elastic/kibana/pull/90752[#90752]

====

[[breaking_plugin_v7.12.0_90432]]
.Timeout added for "stop" lifecycle
[%collapsible]
====

The {kib} plugin system has a concept of
https://www.elastic.co/guide/en/kibana/current/kibana-platform-plugin-api.html#plugin-lifecycles[asynchronous lifecycles] for
all the {kib} plugins.
The new timeout (30 seconds by default) ensures that the `stop` lifecycle doesn't stop
the shutdown process for the {kib} server. If a plugin doesn't complete the `stop` lifecycle in 30 seconds,
{kib} moves to the next plugin.

Refer to https://github.com/elastic/kibana/pull/90432[#90432]

====

[[breaking_plugin_v7.12.0_89274]]
.`vis_type_timeseries_enhanced` plugin removed
[%collapsible]
====

All code from `x-pack/vis_type_timeseries_enhanced` was moved into `src/vis_type_timeseries`.

Refer to https://github.com/elastic/kibana/pull/89274[#89274]

====

[[breaking_plugin_v7.12.0_89259]]
.Field format editors moved from Index Pattern management
[%collapsible]
====

The `IndexPatternManagement.formatEditors` API moved to
`IndexPatternFieldEditor.formatEditors`. The functionality remains the same.

Refer to https://github.com/elastic/kibana/pull/89259[#89259]

====

[[breaking_plugin_v7.12.0_89211]]
.`fetch$` method added for partial search results
[%collapsible]
====

The data plugin search service `SearchSource` now provides a `fetch$`
method. In addition to the existing `fetch` method that returns an
`Observable`, an overall response is returned. This is useful when `_async_search`
is used, and the user needs to handle partial search responses.

Refer to https://github.com/elastic/kibana/pull/89211[#89211]

====

[[breaking_plugin_v7.12.0_88718]]
.Explicit typings for request handler context
[%collapsible]
====

Whenever {kib} needs access to data saved in {es}, it should check if
the user has access to the data.
On the server-side, APIs that require impersonation with an incoming request,
are exposed by the `context` argument of request handler:

```typescript
const router = core.http.createRouter();
router.get(
  { path: '/api/my-plugin/', validate: â€¦ },
  async (context, req, res) => {}
)
```

Starting with the current version, your plugin should declare an interface of
the `context` parameter explicitly.

**Before**

```typescript
declare module 'src/core/server' {
  interface RequestHandlerContext {
    myPlugin?: MyPluginApi;
  }
}

const router = http.createRouter();
http.registerRouteHandlerContext('my-plugin', async (context, req, res) => {...});
```

**After**

```typescript
export interface MyPluginRequestHandlerContext extends RequestHandlerContext {
  myPlugin: MyPluginApi;
}
const router = http.createRouter<MyPluginRequestHandlerContext>();
http.registerRouteHandlerContext<MyPluginRequestHandlerContext, 'my-plugin'>(
  'my-plugin',
  async (context, req, res) => {...}
);
```

Refer to https://github.com/elastic/kibana/pull/88718[#88718]

====

[[breaking_plugin_v7.12.0_88317]]
.Support changed for custom visualizations
[%collapsible]
====

You can no longer use a common `visualization expression function`
and a common `visualization renderer` to retrieve data and render your custom visualization.

To register a custom visualization:

. Register a **visualization type** using the `visualizations.createBaseVisualization(config)`
function, where `config` is a type of `VisTypeDefinition`. Refer to the
https://github.com/elastic/kibana/blob/7.12/src/plugins/visualizations/public/vis_types/types.ts[`VisTypeDefinition` documentation].
. Register an **expression function definition**  to handle your custom expression using
`expressions.registerFunction(functionDefinition)`, where `functionDefinition` describes your expression parameters.
. Register an **explicit renderer** for your visualization using `expressions.registerRenderer(rendererDefinition)`,
where the `rendererDefinition` is a type of `ExpressionRenderDefinition`.

Your visualization is ready to be rendered in {kib} applications,
such as *Lens*, *Dashboard*, *Canvas*, and more.
Refer to https://github.com/elastic/kibana/tree/7.12/test/plugin_functional/plugins/kbn_tp_custom_visualizations[custom visualizations].


Refer to https://github.com/elastic/kibana/pull/88317[#88317]

====

[[breaking_plugin_v7.12.0_88115]]
.Search response follows new hits format
[%collapsible]
====

When using the data plugin search service `search` method,
you can now provide an additional argument, `legacyHitsTotal`, in the `options`.
When set to `true` (the default), the `hits.total` is returned as a number.
When set to `false`, the `hits.total` format is returned as-is from the {es} response.

Refer to https://github.com/elastic/kibana/pull/88115[#88115]

====

[[breaking_plugin_v7.12.0_88070]]
.Ops logs added to the KP logging system
[%collapsible]
====

We are deprecating the legacy response logs, which were enabled
when `logging.verbose: true` or when using `logging.events.ops`.
The legacy response logs will be removed in 8.0, and replaced with new ops
logs that are provided under the `metrics.ops` context at the debug level.

**Before**

```yml
logging:
  events:
    ops: "*"
```

**After**

```yml
logging:
  loggers:
    - context: metrics.ops
      appenders: [console]
      level: debug
```

For more information, check out
https://github.com/elastic/kibana/blob/7.x/src/core/server/logging/README.mdx#logging-config-migration[logging config migration] in the logging README.

**How to test this:**

. Add the following logging configuration to your `kibana.yml` file:
+
```yml
**kibana.yml or kibana.dev.yml**
logging:
  events:
    log: ['debug']
    json: false
    verbose: true

  appenders:
    console:
      kind: console
      layout:
        kind: pattern
        highlight: true

  root:
    appenders: [default]
    level: warn

  loggers:
    - context: metrics.metrics
      appenders: [console]
      level: debug

```

. Start {es} and {kib}.
. Observe that the ops metrics are logged out (`std out`). For example:
+
```ts
[2021-01-20T22:30:06.974Z][DEBUG][metrics.ops]{"ecs":{"version":"1.7.0"},"kind":"metric","category":["process","host"],"process":{"uptime":640,"memory":{"heap":{"usedInBytes":232472872}},"eventLoopDelay":0.25925004482269287},"host":{"os":{"load":{"1m":8.0625,"5m":7.07470703125,"15m":13.32568359375}}}} memory: 221.7MB uptime: 0:10:40 load: [8.06,7.07,13.33] delay: 0.259
```

Refer to https://github.com/elastic/kibana/pull/88070[#88070]

====

[[breaking_plugin_v7.12.0_87939]]
.Response logs added to the KP logging system
[%collapsible]
====

We are deprecating the legacy response logs, which were enabled when
`logging.verbose: true` or when using `logging.events.request` and `logging.events.response`.
They will be removed in `8.0`, and have been replaced with new response logs,
which are provided under the `http.server.response` context at the `debug` level.

**Before**

```yaml
logging:
  events:
    request: "*"
    response: "*"
```

**After**

```yaml
logging:
  loggers:
    - context: http.server.response
      appenders: [console]
      level: debug
```

For more information, check out
https://github.com/elastic/kibana/blob/7.x/src/core/server/logging/README.mdx#logging-config-migration[logging config migration] in the logging README.

Refer to https://github.com/elastic/kibana/pull/87939[#87939]

====

[[breaking_plugin_v7.12.0_87356]]
.Telemetry plugins {es} client migrated to the new client
[%collapsible]
====

Support for the legacy {es} client was removed from the `usage collector`'s `fetch` context.

Refer to https://github.com/elastic/kibana/pull/87356[#87356]

====

[[breaking_plugin_v7.12.0_86988]]
.Dependences between `src/plugins/vis_default_editor` and `src/plugins/visualizations` removed
[%collapsible]
====

In this change:

* The `ISchemas` and `Schema` interfaces moved from `vis_default_editor` to the `visualizations` plugin.
* The `Schemas` class moved from `vis_default_editor` to  the `visualizations`
plugin. It's now a private class, and should not be used outside of the `visualizations` plugin.
* The type definition object for visualizations changed.

**Before:**

```yaml
  {
       editorConfig: {
         schemas: new Schemas([{schemaObject1, schemasObject2}])
      }
    }
```

**After:**

```yaml
  {
       editorConfig: {
         schemas: [{schemaObject1, schemasObject2}]
      }
    }
```

Refer to https://github.com/elastic/kibana/pull/86988[#86988]

====

[[breaking_plugin_v7.12.0_86474]]
.`services.callCluster` deprecated in alerts and actions executors
[%collapsible]
====

Usage of `services.callCluster` in the alert and action
type executors is deprecated. Use the new `services.scopedClusterClient` instead.

Refer to https://github.com/elastic/kibana/pull/86474[#86474]

====
