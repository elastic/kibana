[[settings]]
== Configuring Kibana

The Kibana server reads properties from the `kibana.yml` file on startup. The
location of this file differs depending on how you installed {kib}. For example,
if you installed {kib} from an archive distribution (`.tar.gz` or `.zip`), by
default it is in `$KIBANA_HOME/config`. By default, with package distributions
(Debian or RPM), it is in `/etc/kibana`.

The default host and port settings configure {kib} to run on `localhost:5601`. To change this behavior and allow remote users to connect, you'll need to update your `kibana.yml` file. You can also enable SSL and set a
variety of other options. Finally, environment variables can be injected into
configuration using `${MY_ENV_VAR}` syntax.

.Kibana configuration settings

`console.enabled:`:: *Default: true* Set to false to disable Console.  Toggling
this will cause the server to regenerate assets on the next startup, which may
cause a delay before pages start being served.

`cpu.cgroup.path.override:`:: Override for cgroup cpu path when mounted in a
manner that is inconsistent with `/proc/self/cgroup`

`cpuacct.cgroup.path.override:`:: Override for cgroup cpuacct path when mounted
in a manner that is inconsistent with `/proc/self/cgroup`

`csp.rules:`:: A template
https://w3c.github.io/webappsec-csp/[content-security-policy] that disables
certain unnecessary and potentially insecure capabilities in the browser. We
strongly recommend that you keep the default CSP rules that ship with Kibana.

`csp.strict:`:: *Default: `true`* Blocks access to Kibana to any browser that
does not enforce even rudimentary CSP rules. In practice, this will disable
support for older, less safe browsers like Internet Explorer.
See <<csp-strict-mode, Content Security Policy>> for more information.

`csp.warnLegacyBrowsers:`:: *Default: `true`* Shows a warning message after
loading Kibana to any browser that does not enforce even rudimentary CSP rules,
though Kibana is still accessible. This configuration is effectively ignored
when `csp.strict` is enabled.

`elasticsearch.customHeaders:`:: *Default: `{}`* Header names and values to send
to Elasticsearch. Any custom headers cannot be overwritten by client-side
headers, regardless of the `elasticsearch.requestHeadersWhitelist` configuration.

`elasticsearch.hosts:`:: *Default: "http://localhost:9200"* The URLs of the
Elasticsearch instances to use for all your queries. All nodes listed here must
be on the same cluster.

`elasticsearch.logQueries:`:: *Default: `false`* Logs queries sent to
Elasticsearch. Requires `logging.verbose` set to `true`. This is useful for
seeing the query DSL generated by applications that currently do not have an
inspector, for example Timelion and Monitoring.

`elasticsearch.pingTimeout:`::
*Default: the value of the `elasticsearch.requestTimeout` setting* Time in
milliseconds to wait for Elasticsearch to respond to pings.

`elasticsearch.preserveHost:`:: *Default: true* When this setting’s value is
true, Kibana uses the hostname specified in the `server.host` setting. When the
value of this setting is `false`, Kibana uses the hostname of the host that
connects to this Kibana instance.

`elasticsearch.requestHeadersWhitelist:`:: *Default: `[ 'authorization' ]`* List
of Kibana client-side headers to send to Elasticsearch. To send *no* client-side
headers, set this value to [] (an empty list).
Removing the `authorization` header from being whitelisted means that you cannot
use <<basic-authentication, basic authentication>> in Kibana.

`elasticsearch.requestTimeout:`:: *Default: 30000* Time in milliseconds to wait
for responses from the back end or Elasticsearch. This value must be a positive
integer.

`elasticsearch.shardTimeout:`:: *Default: 30000* Time in milliseconds for
Elasticsearch to wait for responses from shards. Set to 0 to disable.

`elasticsearch.sniffInterval:`:: *Default: false* Time in milliseconds between
requests to check Elasticsearch for an updated list of nodes.

`elasticsearch.sniffOnStart:`:: *Default: false* Attempt to find other
Elasticsearch nodes on startup.

`elasticsearch.sniffOnConnectionFault:`:: *Default: false* Update the list of
Elasticsearch nodes immediately following a connection fault.

`elasticsearch.ssl.alwaysPresentCertificate:`:: *Default: false* Controls whether to always present the certificate specified by
`elasticsearch.ssl.certificate` or `elasticsearch.ssl.keystore.path` when requested. This setting applies to all requests to Elasticsearch,
including requests that are proxied for end users. Setting this to `true` when Elasticsearch is using certificates to authenticate users can
lead to proxied requests for end users being executed as the identity tied to the configured certificate.

`elasticsearch.ssl.certificate:` and `elasticsearch.ssl.key:`:: Paths to a PEM-encoded X.509 certificate and its private key, respectively.
When `xpack.security.http.ssl.client_authentication` in Elasticsearch is set to `required` or `optional`, the certificate and key are used
to prove Kibana's identity when it makes an outbound request to your Elasticsearch cluster.
+
--
NOTE: These settings cannot be used in conjunction with `elasticsearch.ssl.keystore.path`.
--

`elasticsearch.ssl.certificateAuthorities:`:: Paths to one or more PEM-encoded X.509 certificates. These certificates may consist of a root
certificate authority (CA), and one or more intermediate CAs, which make up a trusted certificate chain for Kibana. This chain is used to
establish trust when Kibana creates an SSL connection with your Elasticsearch cluster. In addition to this setting, trusted certificates may
be specified via `elasticsearch.ssl.keystore.path` and/or `elasticsearch.ssl.truststore.path`.

`elasticsearch.ssl.keyPassphrase:`:: The passphrase that will be used to decrypt the private key that is specified via
`elasticsearch.ssl.key`. This value is optional, as the key may not be encrypted.

`elasticsearch.ssl.keystore.path:`:: Path to a PKCS #12 file that contains an X.509 certificate with its private key. When
`xpack.security.http.ssl.client_authentication` in Elasticsearch is set to `required` or `optional`, the certificate and key are used to
prove Kibana's identity when it makes an outbound request to your Elasticsearch cluster. If the file contains any additional certificates,
those will be used as a trusted certificate chain for your Elasticsearch cluster. This chain is used to establish trust when Kibana creates
an SSL connection with your Elasticsearch cluster. In addition to this setting, trusted certificates may be specified via
`elasticsearch.ssl.certificateAuthorities` and/or `elasticsearch.ssl.truststore.path`.
+
--
NOTE: This setting cannot be used in conjunction with `elasticsearch.ssl.certificate` or `elasticsearch.ssl.key`.
--

`elasticsearch.ssl.keystore.password:`:: The password that will be used to decrypt the key store and its private key. If your key store has
no password, leave this unset. If your key store has an empty password, set this to `""`.

`elasticsearch.ssl.truststore.path:`:: Path to a PKCS #12 trust store that contains one or more X.509 certificates. This may consist of a
root certificate authority (CA) and one or more intermediate CAs, which make up a trusted certificate chain for your Elasticsearch cluster.
This chain is used to establish trust when Kibana creates an SSL connection with your Elasticsearch cluster. In addition to this setting,
trusted certificates may be specified via `elasticsearch.ssl.certificateAuthorities` and/or `elasticsearch.ssl.keystore.path`.

`elasticsearch.ssl.truststore.password:`:: The password that will be used to decrypt the trust store. If your trust store has no password,
leave this unset. If your trust store has an empty password, set this to `""`.

`elasticsearch.ssl.verificationMode:`:: *Default: full* Controls the verification of certificates presented by Elasticsearch. Valid values
are `none`, `certificate`, and `full`. `full` performs hostname verification and `certificate` does not. This setting is used only when
traffic to Elasticsearch is encrypted, which is specified by using the HTTPS protocol in `elasticsearch.hosts`.

`elasticsearch.startupTimeout:`:: *Default: 5000* Time in milliseconds to wait
for Elasticsearch at Kibana startup before retrying.

`elasticsearch.username:` and `elasticsearch.password:`:: If your Elasticsearch
is protected with basic authentication, these settings provide the username and
password that the Kibana server uses to perform maintenance on the Kibana index
at startup. Your Kibana users still need to authenticate with Elasticsearch,
which is proxied through the Kibana server.

`interpreter.enableInVisualize`:: *Default: true* Enables use of interpreter in
Visualize.

`kibana.defaultAppId:`:: *Default: "home"* The default application to load.

`kibana.index:`:: *Default: ".kibana"* Kibana uses an index in Elasticsearch to
store saved searches, visualizations and dashboards. Kibana creates a new index
if the index doesn’t already exist. If you configure a custom index, the name must
be lowercase, and conform to {es} {ref}/indices-create-index.html[index name limitations].

`kibana.autocompleteTimeout:`:: *Default: "1000"* Time in milliseconds to wait
for autocomplete suggestions from Elasticsearch. This value must be a whole number
greater than zero.

`kibana.autocompleteTerminateAfter:`:: *Default: "100000"* Maximum number of
documents loaded by each shard to generate autocomplete suggestions. This value
must be a whole number greater than zero.

`logging.dest:`:: *Default: `stdout`* Enables you specify a file where Kibana
stores log output.

`logging.json:`:: *Default: false* Logs output as JSON. When set to `true`, the
logs will be formatted as JSON strings that include timestamp, log level, context, message
text and any other metadata that may be associated with the log message itself.
If `logging.dest.stdout` is set and there is no interactive terminal ("TTY"), this setting
will default to `true`.

`logging.quiet:`:: *Default: false* Set the value of this setting to `true` to
suppress all logging output other than error messages.

`logging.rotate:`:: [experimental] Specifies the options for the logging rotate feature.
When not defined, all the sub options defaults would be applied.
The following example shows a valid logging rotate configuration:
+
--
    logging.rotate:
      enabled: true
      everyBytes: 10485760
      keepFiles: 10
--

`logging.rotate.enabled:`:: [experimental] *Default: false* Set the value of this setting to `true` to
enable log rotation. If you do not have a `logging.dest` set that is different from `stdout`
that feature would not take any effect.

`logging.rotate.everyBytes:`:: [experimental] *Default: 10485760* The maximum size of a log file (that is `not an exact` limit). After the
limit is reached, a new log file is generated. The default size limit is 10485760 (10 MB) and
this option should be in the range of 102400 (100KB) to 1073741824 (1GB).

`logging.rotate.keepFiles:`:: [experimental] *Default: 7* The number of most recent rotated log files to keep
on disk. Older files are deleted during log rotation. The default value is 7. The `logging.rotate.keepFiles`
option has to be in the range of 2 to 1024 files.

`logging.rotate.pollingInterval:`:: [experimental] *Default: 10000* The number of milliseconds for the polling strategy in case
the `logging.rotate.usePolling` is enabled. That option has to be in the range of 5000 to 3600000 milliseconds.

`logging.rotate.usePolling:`:: [experimental] *Default: false* By default we try to understand the best way to monitoring
the log file. However, there is some systems where it could not be always accurate. In those cases, if needed,
the `polling` method could be used enabling that option.

`logging.silent:`:: *Default: false* Set the value of this setting to `true` to
suppress all logging output.

`logging.timezone`:: *Default: UTC* Set to the canonical timezone id
(for example, `America/Los_Angeles`) to log events using that timezone. A list of timezones can
be referenced at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.

[[logging-verbose]]`logging.verbose:`:: *Default: false* Set the value of this
setting to `true` to log all events, including system usage information and all
requests. Supported on Elastic Cloud Enterprise.

`map.includeElasticMapsService:`:: *Default: true*
Set to false to disable connections to Elastic Maps Service.
When `includeElasticMapsService` is turned off, only the vector layers configured by `map.regionmap`
and the tile layer configured by `map.tilemap.url` will be available in the <<maps, Maps application>>,
<<tilemap, Coordinate map visualizations>>, and <<regionmap, Region map visualizations>>.

`map.proxyElasticMapsServiceInMaps:`:: *Default: false*
Set to true to proxy all <<maps, Maps application>> Elastic Maps Service requests through the Kibana server.
This setting does not impact <<tilemap, Coordinate map visualizations>> and <<regionmap, Region map visualizations>>.

[[regionmap-settings]] `map.regionmap:`:: Specifies additional vector layers for
use in <<regionmap, Region Map>> visualizations. Supported on {ece}. Each layer
object points to an external vector file that contains a geojson
FeatureCollection. The file must use the
https://en.wikipedia.org/wiki/World_Geodetic_System[WGS84 coordinate reference system]
and only include polygons. If the file is hosted on a separate domain from
Kibana, the server needs to be CORS-enabled so Kibana can download the file.
The following example shows a valid regionmap configuration.
+
--
    map
      includeElasticMapsService: false
      regionmap:
        layers:
          - name: "Departments of France"
            url: "http://my.cors.enabled.server.org/france_departements.geojson"
            attribution: "INRAP"
            fields:
               - name: "department"
                description: "Full department name"
               - name: "INSEE"
                description: "INSEE numeric identifier"
--

[[regionmap-ES-map]]`map.includeElasticMapsService:`:: Turns on or off
whether layers from the Elastic Maps Service should be included in the vector
layer option list. Supported on Elastic Cloud Enterprise. By turning this off,
only the layers that are configured here will be included. The default is `true`. 
This also affects whether tile-service from the Elastic Maps Service will be available.

[[regionmap-attribution]]`map.regionmap.layers[].attribution:`:: Optional.
References the originating source of the geojson file. Supported on {ece}.

[[regionmap-fields]]`map.regionmap.layers[].fields[]:`:: Mandatory. Each layer
can contain multiple fields to indicate what properties from the geojson
features you wish to expose. The example above shows how to define multiple
properties. Supported on {ece}.

[[regionmap-field-description]]`map.regionmap.layers[].fields[].description:`::
Mandatory. The human readable text that is shown under the Options tab when
building the Region Map visualization. Supported on {ece}.

[[regionmap-field-name]]`map.regionmap.layers[].fields[].name:`:: Mandatory.
This value is used to do an inner-join between the document stored in
Elasticsearch and the geojson file. For example, if the field in the geojson is
called `Location` and has city names, there must be a field in Elasticsearch
that holds the same values that Kibana can then use to lookup for the geoshape
data. Supported on {ece}.

[[regionmap-name]]`map.regionmap.layers[].name:`:: Mandatory. A description of
the map being provided. Supported on {ece}.

[[regionmap-url]]`map.regionmap.layers[].url:`:: Mandatory. The location of the
geojson file as provided by a webserver. Supported on {ece}.

[[tilemap-settings]] `map.tilemap.options.attribution:`::
*Default: `"© [Elastic Maps Service](https://www.elastic.co/elastic-maps-service)"`*
The map attribution string. Supported on {ece}.

[[tilemap-max-zoom]]`map.tilemap.options.maxZoom:`:: *Default: 10* The maximum
zoom level. Supported on {ece}.

[[tilemap-min-zoom]]`map.tilemap.options.minZoom:`:: *Default: 1* The minimum
zoom level. Supported on {ece}.

[[tilemap-subdomains]]`map.tilemap.options.subdomains:`:: An array of subdomains
used by the tile service. Specify the position of the subdomain the URL with
the token `{s}`. Supported on {ece}.

[[tilemap-url]]`map.tilemap.url:`:: The URL to the tileservice that Kibana uses
to display map tiles in tilemap visualizations. Supported on {ece}. By default,
Kibana reads this url from an external metadata service, but users can still
override this parameter to use their own Tile Map Service. For example:
`"https://tiles.elastic.co/v2/default/{z}/{x}/{y}.png?elastic_tile_service_tos=agree&my_app_name=kibana"`

`newsfeed.enabled:` :: *Default: `true`* Controls whether to enable the newsfeed
system for the Kibana UI notification center. Set to `false` to disable the
newsfeed system.

`path.data:`:: *Default: `data`* The path where Kibana stores persistent data
not saved in Elasticsearch.

`pid.file:`:: Specifies the path where Kibana creates the process ID file.

`ops.interval:`:: *Default: 5000* Set the interval in milliseconds to sample
system and process performance metrics. The minimum value is 100.

`server.basePath:`:: Enables you to specify a path to mount Kibana at if you are
running behind a proxy. Use the `server.rewriteBasePath` setting to tell Kibana
if it should remove the basePath from requests it receives, and to prevent a
deprecation warning at startup. This setting cannot end in a slash (`/`).

[[server-compression]]`server.compression.enabled:`:: *Default: `true`* Set to `false` to disable HTTP compression for all responses.

`server.compression.referrerWhitelist:`:: *Default: none* Specifies an array of trusted hostnames, such as the Kibana host, or a reverse
proxy sitting in front of it. This determines whether HTTP compression may be used for responses, based on the request's `Referer` header.
This setting may not be used when `server.compression.enabled` is set to `false`.

[[server-cors]]`server.cors:`:: *Default: `false`* Set to `true` to enable CORS support. This setting is required to configure `server.cors.origin`.

`server.cors.origin:`:: *Default: none* Specifies origins. "origin" must be an array. To use this setting, you must set `server.cors` to `true`. To accept all origins, use `server.cors.origin: ["*"]`.

`server.customResponseHeaders:`:: *Default: `{}`* Header names and values to
  send on all responses to the client from the Kibana server.

`server.host:`:: *Default: "localhost"* This setting specifies the host of the
back end server. To allow remote users to connect, set the value to the IP address or DNS name of the {kib} server.

`server.keepaliveTimeout:`:: *Default: "120000"* The number of milliseconds to wait for additional data before restarting
the `server.socketTimeout` counter.

`server.maxPayloadBytes:`:: *Default: 1048576* The maximum payload size in bytes
for incoming server requests.

`server.name:`:: *Default: "your-hostname"* A human-readable display name that
identifies this Kibana instance.

`server.port:`:: *Default: 5601* Kibana is served by a back end server. This
setting specifies the port to use.

`server.rewriteBasePath:`:: *Default: deprecated* Specifies whether Kibana should
rewrite requests that are prefixed with `server.basePath` or require that they
are rewritten by your reverse proxy. In Kibana 6.3 and earlier, the default is
`false`. In Kibana 7.x, the setting is deprecated. In Kibana 8.0 and later, the
default is `true`.

`server.socketTimeout:`:: *Default: "120000"* The number of milliseconds to wait before closing an
inactive socket.

`server.ssl.certificate:` and `server.ssl.key:`:: Paths to a PEM-encoded X.509 certificate and its private key, respectively. These are used
when enabling SSL for inbound requests from web browsers to the Kibana server.
+
--
NOTE: These settings cannot be used in conjunction with `server.ssl.keystore.path`.
--

`server.ssl.certificateAuthorities:`:: Paths to one or more PEM-encoded X.509 certificates. These certificates may consist of a root
certificate authority (CA) and one or more intermediate CAs, which make up a trusted certificate chain for Kibana. This chain is used when a
web browser creates an SSL connection with the Kibana server; the certificate chain is sent to the browser along with the end-entity
certificate to establish trust. This chain is also used to determine whether client certificates should be trusted when PKI authentication
is enabled. In addition to this setting, trusted certificates may be specified via `server.ssl.keystore.path` and/or
`server.ssl.truststore.path`.

`server.ssl.cipherSuites:`:: *Default: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES256-GCM-SHA384, DHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES128-SHA256, DHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, DHE-RSA-AES256-SHA384, ECDHE-RSA-AES256-SHA256, DHE-RSA-AES256-SHA256, HIGH,!aNULL, !eNULL, !EXPORT, !DES, !RC4, !MD5, !PSK, !SRP, !CAMELLIA*.
Details on the format, and the valid options, are available via the
https://www.openssl.org/docs/man1.0.2/apps/ciphers.html#CIPHER-LIST-FORMAT[OpenSSL cipher list format documentation].

`server.ssl.clientAuthentication:`:: *Default: none* Controls the server’s behavior in regard to requesting a certificate from client
connections. Valid values are `required`, `optional`, and `none`. `required` forces a client to present a certificate, while `optional`
requests a client certificate but the client is not required to present one.

`server.ssl.enabled:`:: *Default: "false"* Enables SSL for inbound requests from the browser to the Kibana server. When set to `true`, a
certificate and private key must be provided. These can be specified via `server.ssl.keystore.path` or the combination of
`server.ssl.certificate` and `server.ssl.key`.

`server.ssl.keyPassphrase:`:: The passphrase that will be used to decrypt the private key that is specified via `server.ssl.key`. This value
is optional, as the key may not be encrypted.

`server.ssl.keystore.path:`:: Path to a PKCS #12 file that contains an X.509 certificate with its private key. These are used when enabling
SSL for inbound requests from web browsers to the Kibana server. If the file contains any additional certificates, those will be used as a
trusted certificate chain for Kibana. This chain is used when a web browser creates an SSL connection with the Kibana server; the
certificate chain is sent to the browser along with the end-entity certificate to establish trust. This chain is also used to determine
whether client certificates should be trusted when PKI authentication is enabled. In addition to this setting, trusted certificates may be
specified via `server.ssl.certificateAuthorities` and/or `server.ssl.truststore.path`.
+
--
NOTE: This setting cannot be used in conjunction with `server.ssl.certificate` or `server.ssl.key`.
--

`server.ssl.keystore.password:`:: The password that will be used to decrypt the key store and its private key. If your key store has no
password, leave this unset. If your key store has an empty password, set this to `""`.

`server.ssl.truststore.path:`:: Path to a PKCS #12 trust store that contains one or more X.509 certificates. These certificates may consist
of a root certificate authority (CA) and one or more intermediate CAs, which make up a trusted certificate chain for Kibana. This chain is
used when a web browser creates an SSL connection with the Kibana server; the certificate chain is sent to the browser along with the
end-entity certificate to establish trust. This chain is also used to determine whether client certificates should be trusted when PKI
authentication is enabled. In addition to this setting, trusted certificates may be specified via `server.ssl.certificateAuthorities` and/or
`server.ssl.keystore.path`.

`server.ssl.truststore.password:`:: The password that will be used to decrypt the trust store. If your trust store has no password, leave
this unset. If your trust store has an empty password, set this to `""`.

`server.ssl.redirectHttpFromPort:`:: Kibana will bind to this port and redirect
all http requests to https over the port configured as `server.port`.

`server.ssl.supportedProtocols:`:: *Default: TLSv1.1, TLSv1.2*  An array of
supported protocols with versions. Valid protocols: `TLSv1`, `TLSv1.1`, `TLSv1.2`

`server.xsrf.whitelist:`:: It is not recommended to disable protections for
arbitrary API endpoints. Instead, supply the `kbn-xsrf` header. There are some
scenarios where whitelisting is required, however, such as
<<kibana-authentication, SAML and OpenID Connect Single Sign-On setups>>.
The `server.xsrf.whitelist` setting requires the following format:

[source,text]

----
*Default: [ ]* An array of API endpoints which should be exempt from Cross-Site Request Forgery ("XSRF") protections.
----

`status.allowAnonymous:`:: *Default: false* If authentication is enabled,
setting this to `true` enables unauthenticated users to access the Kibana
server status API and status page.

`telemetry.allowChangingOptInStatus`:: *Default: true*. If `true`,
users are able to change the telemetry setting at a later time in
<<advanced-options, Advanced Settings>>.  If `false`,
{kib} looks at the value of `telemetry.optIn` to determine whether to send
telemetry data or not. `telemetry.allowChangingOptInStatus` and `telemetry.optIn`
cannot be `false` at the same time.

`telemetry.optIn`:: *Default: true* If `true`, telemetry data is sent to Elastic.
 If `false`, collection of telemetry data is disabled.
 To enable telemetry and prevent users from disabling it,
 set `telemetry.allowChangingOptInStatus` to `false` and `telemetry.optIn` to `true`.

`telemetry.enabled`:: *Default: true* Reporting your cluster statistics helps
us improve your user experience. Your data is never shared with anyone. Set to
`false` to disable telemetry capabilities entirely. You can alternatively opt
out through the *Advanced Settings* in {kib}.

`vega.enableExternalUrls:`:: *Default: false* Set this value to true to allow Vega to use any URL to access external data sources and images. If false, Vega can only get data from Elasticsearch.

`xpack.license_management.enabled`:: *Default: true* Set this value to false to
disable the License Management user interface.

`xpack.rollup.enabled:`:: *Default: true* Set this value to false to disable the
Rollup user interface.

`i18n.locale`:: *Default: en* Set this value to change the Kibana interface language. Valid locales are: `en`, `zh-CN`, `ja-JP`.

`xpack.actions.enabledActionTypes:`:: *Default: +[ {asterisk} ]+* Set this value
to an array of action types that are enabled.  An element of `*` indicates all
action types registered are enabled.  The action types provided by Kibana are:
`.server-log`, `.slack`, `.email`, `.index`, `.pagerduty`, `.webhook`.

`xpack.actions.whitelistedHosts:`:: *Default: +[ {asterisk} ]+* Set this value
to an array of host names which actions such as email, slack, pagerduty, and
webhook can connect to.  An element of `*` indicates any host can be connected
to.  An empty array indicates no hosts can be connected to.

include::{docdir}/settings/apm-settings.asciidoc[]
include::{docdir}/settings/dev-settings.asciidoc[]
include::{docdir}/settings/graph-settings.asciidoc[]
include::{docdir}/settings/infrastructure-ui-settings.asciidoc[]
include::{docdir}/settings/i18n-settings.asciidoc[]
include::{docdir}/settings/logs-ui-settings.asciidoc[]
include::{docdir}/settings/ml-settings.asciidoc[]
include::{docdir}/settings/monitoring-settings.asciidoc[]
include::{docdir}/settings/reporting-settings.asciidoc[]
include::secure-settings.asciidoc[]
include::{docdir}/settings/security-settings.asciidoc[]
include::{docdir}/settings/spaces-settings.asciidoc[]
