[[migrations]]
== Saved object index migrations

When Kibana starts, before it starts serving HTTP traffic, it checks to see if the `.kibana` index (or whatever the `kibana.yml` value of `kibana.index` is) contains any documents that are out of date. If there are out-of-date documents, Kibana will perform a saved object index migration-- a process by which old documents are upgraded to be compatible with the current version of Kibana.

A saved object index migration consists of backing up the current Kibana index, then creating a new Kibana index and moving documents from the old index to the new one, updating the documents prior to saving them to the new index. Upon completion, the original `.kibana` index will now be `.kibana_1` and `.kibana` will be an alias that points to the latest, up-to-date index (e.g. `.kibana_2`, if this is the first time Kibana has performed a saved object index migration).

After migrations have run, there will be multiple Kibana indices in Elasticsearch: (`.kibana_1`, `.kibana_2`, etc). Kibana only uses the index that the `.kibana` alias points to. The other Kibana indices can be safely deleted, but are left around as a matter of historical record, and to facilitate rolling Kibana back to a previous version.

NOTE: If Kibana terminates unexpectedly while migrating a saved object index, some additional work may be required in order to get Kibana to re-attempt the migration. For example, if the `.kibana` alias is pointing to `.kibana_4`, and there is a `.kibana_5` index in Elasticsearch, the `.kibana_5` index will need to be reindexed (e.g. to `.kibana_5_backup`) or deleted. Kibana will never attempt to overwrite an existing index.

[float]
[[rolling-back]]
=== Rolling back to a previous version of Kibana

When rolling Kibana back to a previous version, point the `.kibana` alias to the appropriate Kibana index. You will also want to delete or rename / reindex the more recent `.kibana` indices so that future upgrades are based on the current Kibana index.
