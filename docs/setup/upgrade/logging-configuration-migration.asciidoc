[[logging-configuration-migration]]
== Logging configuration migration

[float]
=== Prepare for logging in 8.0

The entire logging system changed to offer a more consistent logging behavior with {es}, which uses the popular https://logging.apache.org/log4j/2.x[`log4j 2`] for managing logs. The current system differs from the more simplistic, deprecated system and allows you the freedom to customize what, how, and where {kib} outputs log messages. The best place to learn about the new logging system is our logging service guide. However, there are some important considerations when you are migrating from the old to the new system:

[float]
==== Mixing deprecated and current configurations
{kib} supports mixed usage of the deprecated and current logging configuration styles, however, to reduce the risk of confusion that may arise from conflicting configurations, we recommend changing over to the new system all at once.

[float]
==== Rotating log files
If you use log rotation, be careful when mixing deprecated and current configuration styles as it could lead to unexpected behavior. For example, one system could apply the log file rotation while the other still writes to the original file. Rather, switch over to the current system completely.

[float]
==== Service scripts
If you are using the systemd service scripts (`kibana.service`), be aware that the deprecated `logging.dest` configuration might be set via CLI options in the `kibana.service` declaration. When `logging.dest` is set in the service scripts, {kib} will continue to write log messages to the "old" file. To switch over to the current logging system, remove the `logging.dest` CLI argument from `/etc/systemd/system/kibana.service` and run `systemctl daemon-reload`.

[float]
==== Compatibility
Compatibility with the legacy logging system is assured until the end of the `v7` version. 
All log messages handled by `root` context are forwarded to the legacy logging service. If you configure a custom appender for `root`, make sure to include the `default` appender in the appenders array to provide backward compatibility.

[float]
==== Duplicate log messages
When you switch to the new logging configuration, you will start seeing duplicate log entries in both legacy and current formats. The legacy format will be removed when the `default` appender is no longer required. 
To override this behavior for specific log messages, configure an appender for the logger.

[float]
==== Memory consumption
If you log large volumes to file, such as logging in `verbose` mode, be aware that by using the legacy logging system, your cluster may experience increased memory consumption. We recommend switching over to the current logging system to avoid out of memory issues.
Refer to the https://github.com/elastic/kibana/issues/134724[public issue] for more information.

[[logging-pattern-format-old-and-new-example]]
[options="header"]
|===

| Parameter | Platform log record in **pattern** format | Legacy Platform log record **text** format

| @timestamp | ISO8601_TZ `2012-01-31T23:33:22.011-05:00` | Absolute `23:33:22.011`

| logger | `parent.child` | `['parent', 'child']`

| level | `DEBUG` | `['debug']`

| meta | stringified JSON object `{"to": "v8"}`| N/A

| pid | can be configured as `%pid` | N/A

|===

[[logging-json-format-old-and-new-example]]
[options="header"]
|===

| Parameter | Platform log record in **json** format | Legacy Platform log record **json** format

| @timestamp | ISO8601_TZ `2012-01-31T23:33:22.011-05:00` | ISO8601 `2012-01-31T23:33:22.011Z`

| logger | `log.logger: parent.child` | `tags: ['parent', 'child']`

| level | `log.level: DEBUG` | `tags: ['debug']`

| meta | merged in log record  `{... "to": "v8"}` | merged in log record  `{... "to": "v8"}`

| pid | `process.pid: 12345` | `pid: 12345`

| type | N/A | `type: log`

| error | `{ message, name, stack }` | `{ message, name, stack, code, signal }`

|===

[[logging-cli-migration]]
=== Logging configuration via CLI

As is the case for any of Kibana's config settings, you can specify your logging configuration via the CLI. For convenience, the `--verbose` and `--silent` flags exist as shortcuts and will continue to be supported beyond v7.

If you wish to override these flags, you can always do so by passing your preferred logging configuration directly to the CLI. For example, if {kib} has the following configuration in the `kibana.yml`, you can override the log level with CLI arguments, provided the full logging configuration is passed:

[source,yaml]
----
logging:
  appenders:
    custom:
      type: console
      layout:
        type: pattern
        pattern: "[%date][%level] %message"
    root:
      appenders: [default, custom]
      level: warn
----

You can override the flags with:

[options="header"]
|===

| legacy logging | {kib} Platform logging | cli shortcuts

|--verbose| --logging.root.level=debug --logging.root.appenders[0]=default --logging.root.appenders[1]=custom | --verbose

|--quiet| --logging.root.level=error --logging.root.appenders[0]=default --logging.root.appenders[1]=custom | not supported

|--silent| --logging.root.level=off | --silent
|===

NOTE: To preserve backwards compatibility, you are required to pass the root `default` appender until the legacy logging system is removed in `v8.0`.
