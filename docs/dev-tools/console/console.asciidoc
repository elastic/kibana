[[console-kibana]]
== Console

Console enables interaction with the REST API of {es}. *Note:* You cannot 
interact with Kibana API endpoints via Console.

Go to *Dev Tools > Console* to get started. 

Console has two main areas: 

* The *editor* where you compose requests to send to {es} 
* The *response* pane, which displays the responses to the request

[role="screenshot"]
image::dev-tools/console/images/console.png["Console"]

[float]
=== Console commands

Console understands commands in a cURL-like syntax. 
For example, the following is a `GET` request to {es}'s `_search API`. 

[source,js]
----------------------------------
GET /_search
{
  "query": {
    "match_all": {}
  }
}
----------------------------------

Here is the equivalent command in cURL:

[source,bash]
----------------------------------
curl -XGET "http://localhost:9200/_search" -d'
{
  "query": {
    "match_all": {}
  }
}'
----------------------------------

In fact, you can paste the above command into Console and it will automatically 
be converted into the Console syntax.

When typing a command, Console will make context-sensitive suggestions. 
These suggestions can help you explore parameters for each API, or to just speed up typing. 
Console will suggest APIs, indexes and field names.

[float]
==== Submitting requests 
Once you have typed a command in to the left pane, click the green triangle to submit it to {es}.

From the action menu image:dev-tools/console/images/wrench.png[] you can also select
<<multi-requests, multiple requests>> and submit them all at once.


[float]
[[console-settings]]
=== Settings
*Settings* allows you to modify the font size, and configure preferences for
auto-complete.

[float]
[[history]]
=== History
Console maintains a list of the last 500 requests that were successfully executed by {es}. 
The history is available by clicking the clock icon on the top right side of the window. 
The icons opens the history panel where you can see the old requests. 
You can also select a request here and it will be added to the editor at
the current cursor position.



include::multi-requests.asciidoc[]

include::auto-formatting.asciidoc[]

include::keyboard-shortcuts.asciidoc[]

include::configuring-console.asciidoc[]
