[role="xpack"]
[[maps-connect-to-ems]]
== Connect to Elastic Maps Service

https://www.elastic.co/elastic-maps-service[Elastic Maps Service (EMS)] is a service that hosts
tile layers and vector shapes of administrative boundaries.
If you are using Kibana's out-of-the-box settings, Maps is already configured to use EMS.

EMS requests are made to the following domains:

* tiles.maps.elastic.co
* vector.maps.elastic.co

Maps makes requests directly from the browser to EMS.

[float]
=== Connect to Elastic Maps Service from an internal network

To connect to EMS when your Kibana server and browser are in an internal network:

. Set `map.proxyElasticMapsServiceInMaps` to `true` in your <<settings, kibana.yml>> file to proxy EMS requests through the Kibana server.
. Update your firewall rules to allow connections from your Kibana server to the EMS domains.

NOTE: Coordinate map  and region map visualizations do not support `map.proxyElasticMapsServiceInMaps` and will not proxy EMS requests through the Kibana server.


[float]
=== Disable Elastic Maps Service

You might experience EMS connection issues if your Kibana server or browser are on a private network or
behind a firewall. If this happens, you can disable the EMS connection to avoid unnecessary EMS requests.

To disable EMS, change your <<settings, kibana.yml>> file.

. Set `map.includeElasticMapsService` to `false` to turn off the EMS connection.
. Set `map.tilemap.url` to the URL of your tile server. This configures the default tile layer of Maps.
. (Optional) Set `map.regionmap` to the vector shapes of the administrative boundaries that you want to use.

[float]
[id=elastic-maps-server]
=== Elastic Maps Server

beta::[]

If you cannot connect to Elastic Maps Service from the Kibana server or browser clients, and your cluster has the appropriate license level, you can opt to host the service on your own infrastructure.

The self-managed version of Elastic Maps Service is offered as a Docker image that will provide both the EMS basemaps and EMS boundaries. You need first to download and run the image and after connecting it to your {es} cluster for license validation, it will guide you to download and configure the basemaps database that needs to be retrieved separately.

IMPORTANT: Elastic Maps Server does not serve raster tiles, needed by Vega, Coordinate, and the Region Visualizations.

Run the following command to download the image:

["source","bash",subs="attributes"]
----------------------------------
docker pull {ems-docker-image}
----------------------------------

Then for the minimal execution, just run the image exposing the default port `8080`:

["source","bash",subs="attributes"]
----------------------------------
docker run --rm --init --publish 8080:8080 \
  {ems-docker-image}
----------------------------------

Once the server is running, follow instructions from the webpage served at `localhost:8080` to define a configuration file and download the basemaps database.

// TODO: to be replaced by an screenshot from another computer ðŸ˜“
[role="screenshot"]
image::images/self-managed-instructions.png[Set-up instructions]


[float]
[[self-managed-configuration]]
==== Configuration

Elastic Maps Server reads properties from a configuration file in YAML format that will be validated on startup. The location of this file is provided by the `EMS_PATH_CONF` environment variable and defaults to `/usr/src/app/server/config/ems-server.yaml`.

General settings:

// TODO Configuration settings are still in flux
[cols="2*<"]
|===
| `hostname`:
 | This setting specifies the host of the back end server. To allow remote users to connect, set the value to the IP address or DNS name of the Kibana server. *Default: `localhost`*. <<server-host,Equivalent {kib} setting>>.
| `port`:
 | This setting specifies the port used by the backend server. Default: *`8080`*. <<server-port,Equivalent {kib} setting>>. 
| `ui:`
 | Controls the display of the status page and the layer preview. *Default: `true`*

| `logging.level:`
  | Verbosity of the server logs. Valid values are: `trace`, `debug`, `info`, `warn`, `error`, `fatal`, and `silent`. *Default: `info`*

| `path.planet:`
  | Path of the basemaps database. *Default: `/usr/src/app/data/planet.mbtiles`*
|===


{es} connection and security settings:

[cols="2*<"]
|===

| `elasticsearch.host:`
 | URL of the {es} instance to use for license validation.

| `elasticsearch.username:` and `elasticsearch.password`
  | Credentials of a user with at least the `monitor` role.

| `elasticsearch.ssl.certificateAuthorities`
 | Paths to one or more PEM-encoded X.509 certificate authority (CA) certificates which make up a trusted certificate chain for the server. This chain is used by the server to establish trust when connecting to your {es} cluster. <<elasticsearch-ssl-certificateAuthorities,Equivalent {kib} setting>>.

| `elasticsearch.ssl.certificate` and `elasticsearch.ssl.key`, and `elasticsearch.ssl.keyPassphrase`:
 | Optional settings that provide the paths to the PEM-format SSL certificate and key files and the key password. These files are used to verify the identity of Elastic Maps Service to {es} and are required when `xpack.security.http.ssl.client_authentication` in {es} is set to required. <<elasticsearch-ssl-cert-key,Equivalent {kib} setting>>.

| `elasticsearch.ssl.verificationMode`
 | Controls the verification of the server certificate that Kibana receives when making an outbound SSL/TLS connection to {es}. Valid values are "`full`", "`certificate`", and "`none`". Using "`full`" performs hostname verification, using "`certificate`" skips hostname verification, and using "`none`" skips verification entirely. *Default: `full`*. <<elasticsearch-ssl-verificationMode,Equivalent {kib} setting>>.

|===

Server security settings:

[cols="2*<"]
|===

| `ssl.enabled`
 | Enables SSL/TLS for inbound connections to the server. When set to `true`, a certificate and its corresponding private key must be provided. *Default: `false`*. <<server-ssl-enabled,Equivalent {kib} setting>>.

| `ssl.certificateAuthorities`
 | Paths to one or more PEM-encoded X.509 certificate authority (CA) certificates which make up a trusted certificate chain for the server. This chain is used by the server to establish trust when receiving inbound SSL/TLS connections from end users. <<server-ssl-certificateAuthorities,Equivalent {kib} setting>>.

| `ssl.key`, `ssl.certificate`, and `ssl.keyPassphrase`:
  | Location of yor SSL key and certificate files and the password that decrypts the private key that is specified via `ssl.key`. This password is optional, as the key may not be encrypted. <<server-ssl-cert-key,Equivalent {kib} setting>>.

| `ssl.supportedProtocols:`
 | An array of supported protocols with versions.
Valid protocols: `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`. *Default: `TLSv1.1`, `TLSv1.2`, `TLSv1.3`*. <<server-ssl-supportedProtocols,Equivalent {kib} setting>>.

| `ssl.cipherSuites:`
 | Details on the format, and the valid options, are available via the
https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT[OpenSSL cipher list format documentation].
*Default: `TLS_AES_256_GCM_SHA384 TLS_CHACHA20_POLY1305_SHA256 TLS_AES_128_GCM_SHA256 ECDHE-RSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES256-GCM-SHA384, DHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES128-SHA256, DHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, DHE-RSA-AES256-SHA384, ECDHE-RSA-AES256-SHA256, DHE-RSA-AES256-SHA256, HIGH,!aNULL, !eNULL, !EXPORT, !DES, !RC4, !MD5, !PSK, !SRP, !CAMELLIA`*. <<server-ssl-cipherSuites,Equivalent {kib} setting>>.
|===

// TODO this is still a work in progress
All configuration settings can be overridden by environment variables that are named with the following conditions: all letters are uppercase and replace YAML periods by underscores. For example `elasticsearch.ssl.certificate` could be overridden by the environment variable `ELASTICSEARCH_SSL_CERTIFICATE`. Boolean variables need to use the `true` or `false` strings.


[float]
[[self-managed-data]]
==== Data

Boundaries:: World countries, global administrative regions, and countries regions datasets are available.

Basemaps:: A minimal basemap is provided with the Docker image. This can be used for testing environments but won't be functional for normal operations. The full basemap (around 90GB file) needs to be mounted on the image for the server to run normally.

TIP: The available basemaps and boundaries can be explored from the `/maps` endpoint in a web page that is your self-managed equivalent to https://maps.elastic.co


[float]
[[self-managed-kibana]]
==== Kibana configuration

Once the Elastic Maps Server is running, you need to add the `map.emsUrl` configuration key in your `kibana.yml` file pointing to the root of the service. This setting is enough to configure Kibana to ask for EMS basemaps and boundaries from the new instance.


[float]
[[self-managed-check]]
==== Status check

The self-managed Elastic Maps Service will run a status check periodically and it will be exposed in three different forms:

* At the root of the server a web page will render the status of the different services.
* A JSON representation of the server status is available at the `/status` endpoint 
* The Docker https://docs.docker.com/engine/reference/builder/#healthcheck[`HEALTHCHECK`] instruction is run by default and will inform about the healthiness of the service, running a process equivalent to the `/status` endpoint.

IMPORTANT: The server won't respond to any data request if the license validation is not fulfilled.


[float]
[[self-managed-logging]]
==== Logging

Logs are generated in {ecs-ref}[ECS JSON format] and emitted to the standard output and to `/var/log/elastic-maps-server/elastic-maps-server.log`. The server won't rotate the logs automatically but the `logrotate` linux tool is installed in the image. Mount `/dev/null` to the default log path if you want to disable the output to that file. 
