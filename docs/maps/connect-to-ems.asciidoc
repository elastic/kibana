[role="xpack"]
[[maps-connect-to-ems]]
== Connect to Elastic Maps Service

https://www.elastic.co/elastic-maps-service[Elastic Maps Service (EMS)] is a service that hosts
tile layers and vector shapes of administrative boundaries.
If you are using Kibana's out-of-the-box settings, Maps is already configured to use EMS.

EMS requests are made to the following domains:

* tiles.maps.elastic.co
* vector.maps.elastic.co

Maps makes requests directly from the browser to EMS.

[float]
=== Connect to Elastic Maps Service from an internal network

To connect to EMS when your Kibana server and browser are in an internal network:

. Set `map.proxyElasticMapsServiceInMaps` to `true` in your <<settings, kibana.yml>> file to proxy EMS requests through the Kibana server.
. Update your firewall rules to allow connections from your Kibana server to the EMS domains.

NOTE: Coordinate map  and region map visualizations do not support `map.proxyElasticMapsServiceInMaps` and will not proxy EMS requests through the Kibana server.


[float]
=== Disable Elastic Maps Service

You might experience EMS connection issues if your Kibana server or browser are on a private network or
behind a firewall. If this happens, you can disable the EMS connection to avoid unnecessary EMS requests.

To disable EMS, change your <<settings, kibana.yml>> file.

. Set `map.includeElasticMapsService` to `false` to turn off the EMS connection.
. Set `map.tilemap.url` to the URL of your tile server. This configures the default tile layer of Maps.
. (Optional) Set `map.regionmap` to the vector shapes of the administrative boundaries that you want to use.

[float]
[[self-hosted]]
=== Self-Hosted Elastic Maps Service

beta::[]

If you cannot connect to Elastic Maps Service from the Kibana server or browser clients, and your cluster has the appropriate license level, you can opt to host the service on your own infrastructure.

The self-hosted version of Elastic Maps Service is offered as a Docker image that will provide both the EMS basemaps and EMS boundaries. You need first to download and run the image and after connecting it to your Elasticsearch cluster for license validation, it will guide you to download and configure the basemaps database that needs to be retrieved separately.

IMPORTANT: This version of Elastic Maps Service basemaps does not support Vega, Coordinate, or the Region Visualizations, as it does not offer raster tiles.

// TODO The url of the Docker image may change
The Docker image is available at `docker.elastic.co/elastic-maps-service/ems-server:ubi` and the minimal requirement to run it is just to expose the port `8080`:

[source,bash]
----------------------------------
docker run --rm --init --publish 8080:8080 \
  docker.elastic.co/elastic-maps-service/ems-server:ubi 
----------------------------------

Once the server is running, follow instructions from the webpage served at the root.

[role="screenshot"]
image::images/self-hosted-instructions.png[Set-up instructions]


[float]
==== Configuration

Self-hosted Elastic Maps Service reads properties from a configuration file in YAML format that will be validated on startup. The location of this file is provided by the `EMS_PATH_CONF` environment variable and defaults to `/usr/src/app/server/config/ems-server.yaml`.

// TODO Configuration settings are still in flux
[cols="2*<"]
|===

| `elasticsearch.host:`
 | URL of the Elasticsearch instance to use for license validation.

| `elasticsearch.username:` and `elasticsearch.password`
  | Credentials of a user with at least the `monitor` role to allow license validation

| `path.planet:`
  | Path of the basemaps database. *Default: `/usr/src/app/data/planet.mbtiles`*

| `path.logs:`
  | Path where the logs will be emitted. *Default: `/var/log/ems`*

| `logging.level:`
  | Verbosity of the server logs. Valid values are: `trace`, `debug`, `info`, `warn`, `error`, `fatal`, and `silent`. *Default: `info`*

| `ssl.key` and `ssl.certificate`:
  | Location of yor SSL key and certificate files
|===

All configuration settings can be overridden by environment variables that are named with the following conditions: prefixed with `EMS_`, uppercase, and replacing periods by underscores. For example `elasticsearch.username` could be overridden by the environment variable `EMS_ELASTICSEARCH_USERNAME`.


[float]
==== Data

Boundaries:: World countries, global administrative regions, and countries regions datasets are available.

Basemaps:: A minimal basemap is provided with the Docker image. This can be used for testing environments but won't be functional for normal operations. The full basemap (around 90GB file) needs to be mounted on the image for the server to run normally.

TIP: Basemaps and boundaries available can be explored from the `/maps` endpoint in a webpage similar to https://maps.elastic.co


[float]
==== Kibana configuration

Once the self-hosted Elastic Maps Service is running, you need to add the `map.emsUrl` configuration key in your `kibana.yml` file pointing to the root of the service. This setting is enough to configure Kibana to ask for EMS basemaps and boundaries from the new instance.


[float]
==== Status check

The self-hosted Elastic Maps Service will run a status check periodically and it will be exposed in two different forms:

* The `/status` endpoint will expose details of the different components of the service.
* The Docker https://docs.docker.com/engine/reference/builder/#healthcheck[`HEALTHCHECK`] instruction is run by default and will inform about the healthiness of the service.

IMPORTANT: The server won't respond to any data request if the license validation is not fulfilled.


[float]
==== Logging

Logs are generated in JSON format and emitted to the standard output and to the file set by `path.logs` setting. The instance won't rotate the logs but it has the `logrotate` linux tool installed in the image. If no output is desired, the logging path can be set up to `/dev/null`.
