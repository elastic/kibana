[[data-views-api-create]]
=== Create data view API
++++
<titleabbrev>Create data view</titleabbrev>
++++

experimental[] Create data views.


[[data-views-api-create-request]]
==== Request

`POST <kibana host>:<port>/api/data_views/data_view`

`POST <kibana host>:<port>/s/<space_id>/api/data_views/data_view`


[[data-views-api-create-path-params]]
==== Path parameters

`space_id`::
  (Optional, string) An identifier for the space. If `space_id` is not provided in the URL, the default space is used.


[[data-views-api-create-body-params]]
==== Request body

`override`:: (Optional, boolean) Overrides an existing data view if a
data view with the provided title already exists. The default is `false`.

`data_view`:: (Required, object) The data view object. All fields are optional.


[[data-views-api-create-request-codes]]
==== Response code

`200`::
    Indicates a successful call.


[[data-views-api-create-example]]
==== Examples

Create a data view to view data in the `logstash-*` indices:

[source,sh]
--------------------------------------------------
$ curl -X POST api/data_views/data_view
{
  "data_view": {
     "title": "logstash-*",
     "name": "My Logstash Data View"
  }
}
--------------------------------------------------
// KIBANA

Customize the creation behavior:

[source,sh]
--------------------------------------------------
$ curl -X POST api/data_views/data_view
{
  "override": false,
  "refresh_fields": true,
  "data_view": {
     "title": "logstash-*",
     "name": "My Logstash Data View"
  }
}
--------------------------------------------------
// KIBANA

At creation, all data view fields are optional:

[source,sh]
--------------------------------------------------
$ curl -X POST api/data_views/data_view
{
  "data_view": {
      "id": "...",
      "version": "...",
      "title": "...",
      "name": "...",
      "type": "...",
      "timeFieldName": "...",
      "sourceFilters": [],
      "typeMeta": {},
      "fieldAttrs": {},
      "runtimeFieldMap": {}
      "allowNoIndex": "..."
    }
}
--------------------------------------------------
// KIBANA

The API returns the data view object:

[source,sh]
--------------------------------------------------
{
    "data_view": {...}
}
--------------------------------------------------


[[data-views-api-path-parameters]]

==== Path Parameters

`title`::
(Optional, string) Comma-separated list of data streams, indices, and aliases to search. Supports wildcards
(`*`).

`name`::
(Optional, string) Human readable name to differentiate the data view.

`id`::
(Optional, string) Saved object ID.

`version`::
(Optional, string) Saved object version.

`type`::
(Optional, string) When set to `rollup`, this is used to identify rollup data views.

`typeMeta`::
(Optional, object) When using rollup indices, this contains the field list for the rollup-specific
data view API endpoints.
+
.Properties of the typeMeta objects:
[%collapsible%open]
=====
`aggs`:::
(Required, object) A map of rollup field names and the aggregation restrictions

`params`:::
(Optional, object) Parameters for retrieving rollup fields
=====

`timeFieldName`::
(Optional, string) Timestamp field name, for time-based data views.

`sourceFilters`::
(Optional, string[]) Array of filters to hide fields in Kibana.

`fieldAttrs`::
(Optional, object) Map of field attributes by field name.
+
.Properties of the fieldAttrs[fieldName] objects:
[%collapsible%open]
=====
`customLabel`:::
(Optional, string) Custom label for the field.

`count`:::
(Optional, number) Popularity count for the field.
=====
+
For more on field attributes, see {kibana-ref}/data-views-fields-api-update.html[Update data view fields API].

`runtimeFieldMap`::
(Optional, object) Map of runtime field definitions by field name.
+
.Properties of the runtimeFieldMap[fieldName] objects:
[%collapsible%open]
=====
`type`:::
(Required, string) Mapping type of the runtime field. See {ref}/mapping-types.html[Field data types].

`script`:::
(Required, string) Script block of the runtime field.
=====
+
For more on runtime field definitions, see {kibana-ref}/data-views-runtime-field-api-create.html[Create runtime field API].
+
For more on how runtime fields can be used in search, see {ref}//runtime-search-request.html[Define runtime
fields in a search request].

`fieldFormatMap`::
(Optional, object) Map field formats by field name.

`allowNoIndex`::
(Optional, boolean) Allows the data view to exist before data is present.

`namespaces`::
(Optional, string[]) Array of namespace IDs
