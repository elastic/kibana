[[saved-objects-api-import]]
=== Import Objects

experimental[This functionality is *experimental* and may be changed or removed completely in a future release.]

The import saved objects API enables you to create a set of Kibana saved objects from a file created by the export API.

Note: You cannot access this endpoint via the Console in Kibana.

==== Request

`POST /api/saved_objects/_import`

==== Query Parameters

`overwrite` (optional)::
  (boolean) Overwrite saved objects if they exist already

==== Request body

The request body must be of type multipart/form-data.

`file`::
  A file exported using the export API.

==== Response body

The response body will have a top level `success` property that indicates
if the import was successful or not as well as a `successCount` indicating how many records are successfully imported.
In the scenario the import wasn't successful a top level `errors` array will contain the objects that failed to import.

==== Examples

The following example imports an index pattern and dashboard.

[source,js]
--------------------------------------------------
POST api/saved_objects/_import
Content-Type: multipart/form-data; boundary=EXAMPLE
--EXAMPLE
Content-Disposition: form-data; name="file"; filename="export.ndjson"
Content-Type: application/ndjson

{"type":"index-pattern","id":"my-pattern","attributes":{"title":"my-pattern-*"}}
{"type":"dashboard","id":"my-dashboard","attributes":{"title":"Look at my dashboard"}}
--EXAMPLE--
--------------------------------------------------
// KIBANA

A successful call returns a response code of `200` and a response body
containing a JSON structure similar to the following example:

[source,js]
--------------------------------------------------
{
  "success": true,
  "successCount": 2
}
--------------------------------------------------

The following example imports an index pattern and dashboard but has a conflict on the index pattern.

[source,js]
--------------------------------------------------
POST api/saved_objects/_import
Content-Type: multipart/form-data; boundary=EXAMPLE
--EXAMPLE
Content-Disposition: form-data; name="file"; filename="export.ndjson"
Content-Type: application/ndjson

{"type":"index-pattern","id":"my-pattern","attributes":{"title":"my-pattern-*"}}
{"type":"dashboard","id":"my-dashboard","attributes":{"title":"Look at my dashboard"}}
--EXAMPLE--
--------------------------------------------------
// KIBANA

The call returns a response code of `200` and a response body
containing a JSON structure similar to the following example:

[source,js]
--------------------------------------------------
{
  "success": false,
  "successCount": 1,
  "errors": [
    {
      "id": "my-pattern",
      "type": "index-pattern",
      "error": {
        "statusCode": 409,
        "message": "version conflict, document already exists",
      },
    },
  ],
}
--------------------------------------------------
