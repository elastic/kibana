/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import Path from 'path';
import Fsp from 'fs/promises';

import { run } from '../../lib/spawn.mjs';
import { isFile } from '../../lib/fs.mjs';
import { dedent } from '../../lib/indent.mjs';
import { REPO_ROOT } from '../../lib/paths.mjs';

async function isElasticCommitter() {
  try {
    const email = await run('git', ['config', 'user.email']);
    return email.trim().endsWith('@elastic.co');
  } catch {
    return false;
  }
}

/**
 *
 * @param {string} settingsPath
 * @returns
 */
async function upToDate(settingsPath) {
  if (!(await isFile(settingsPath))) {
    return false;
  }

  const readSettingsFile = await Fsp.readFile(settingsPath, 'utf8');
  return readSettingsFile.startsWith('# V2 ');
}

/**
 * @param {import('@kbn/some-dev-log').SomeDevLog} log
 */
export async function setupRemoteCache(log) {
  // The remote cache is only for Elastic employees working locally (CI cache settings are handled elsewhere)
  if (
    process.env.FORCE_BOOTSTRAP_REMOTE_CACHE !== 'true' &&
    (process.env.CI || !(await isElasticCommitter()))
  ) {
    return;
  }

  log.debug(`setting up remote cache settings if necessary`);

  const settingsPath = Path.resolve(REPO_ROOT, '.bazelrc.cache');

  // Checks if we should upgrade or install the config file
  if (await upToDate(settingsPath)) {
    log.debug(`remote cache config already exists and is up-to-date, skipping`);
    return;
  }

  const contents = dedent`
    # V2 - This file is automatically generated by 'yarn kbn bootstrap'
    # To regenerate this file, delete it and run 'yarn kbn bootstrap' again.
    build --remote_cache=https://storage.googleapis.com/kibana-local-bazel-remote-cache
    build --noremote_upload_local_results
    build --incompatible_remote_results_ignore_disk
  `;

  await Fsp.writeFile(settingsPath, contents);
  log.info(`remote cache settings written to ${settingsPath}`);
}
