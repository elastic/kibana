Subject: [PATCH] more
more
more
GeneralFeature to GenerativeAIFeature
revert a few changes
rename gen ai to OpenAI
---
Index: .github/CODEOWNERS
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.github/CODEOWNERS b/.github/CODEOWNERS
--- a/.github/CODEOWNERS	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/.github/CODEOWNERS	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1202,9 +1202,9 @@
 /x-pack/plugins/security_solution/server/search_strategy/security_solution/factory/users @elastic/security-threat-hunting-explore
 
 ## Explore owner connectors
-/x-pack/plugins/stack_connectors/public/connector_types/gen_ai @elastic/security-threat-hunting-explore
-/x-pack/plugins/stack_connectors/server/connector_types/gen_ai @elastic/security-threat-hunting-explore
-/x-pack/plugins/stack_connectors/common/gen_ai @elastic/security-threat-hunting-explore
+/x-pack/plugins/stack_connectors/public/connector_types/open_ai @elastic/security-threat-hunting-explore
+/x-pack/plugins/stack_connectors/server/connector_types/open_ai @elastic/security-threat-hunting-explore
+/x-pack/plugins/stack_connectors/common/open_ai @elastic/security-threat-hunting-explore
 
 ## Defend Workflows owner connectors
 /x-pack/plugins/stack_connectors/public/connector_types/sentinelone @elastic/security-defend-workflows
Index: docs/api-generated/connectors/connector-apis-passthru.asciidoc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/api-generated/connectors/connector-apis-passthru.asciidoc b/docs/api-generated/connectors/connector-apis-passthru.asciidoc
--- a/docs/api-generated/connectors/connector-apis-passthru.asciidoc	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/docs/api-generated/connectors/connector-apis-passthru.asciidoc	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1004,7 +1004,7 @@
     <li><a href="#config_properties_cases_webhook"><code>config_properties_cases_webhook</code> - Connector request properties for Webhook - Case Management connector</a></li>
     <li><a href="#config_properties_d3security"><code>config_properties_d3security</code> - Connector request properties for a D3 Security connector</a></li>
     <li><a href="#config_properties_email"><code>config_properties_email</code> - Connector request properties for an email connector</a></li>
-    <li><a href="#config_properties_genai"><code>config_properties_genai</code> - Connector request properties for a generative AI connector</a></li>
+    <li><a href="#config_properties_genai"><code>config_properties_genai</code> - Connector request properties for an OpenAI connector</a></li>
     <li><a href="#config_properties_genai_oneOf"><code>config_properties_genai_oneOf</code> - </a></li>
     <li><a href="#config_properties_genai_oneOf_1"><code>config_properties_genai_oneOf_1</code> - </a></li>
     <li><a href="#config_properties_index"><code>config_properties_index</code> - Connector request properties for an index connector</a></li>
@@ -1043,7 +1043,7 @@
     <li><a href="#create_connector_request_cases_webhook"><code>create_connector_request_cases_webhook</code> - Create Webhook - Case Managment connector request</a></li>
     <li><a href="#create_connector_request_d3security"><code>create_connector_request_d3security</code> - Create D3 Security connector request</a></li>
     <li><a href="#create_connector_request_email"><code>create_connector_request_email</code> - Create email connector request</a></li>
-    <li><a href="#create_connector_request_genai"><code>create_connector_request_genai</code> - Create generative AI connector request</a></li>
+    <li><a href="#create_connector_request_genai"><code>create_connector_request_genai</code> - Create OpenAI connector request</a></li>
     <li><a href="#create_connector_request_index"><code>create_connector_request_index</code> - Create index connector request</a></li>
     <li><a href="#create_connector_request_jira"><code>create_connector_request_jira</code> - Create Jira connector request</a></li>
     <li><a href="#create_connector_request_opsgenie"><code>create_connector_request_opsgenie</code> - Create Opsgenie connector request</a></li>
@@ -1099,7 +1099,7 @@
     <li><a href="#secrets_properties_cases_webhook"><code>secrets_properties_cases_webhook</code> - Connector secrets properties for Webhook - Case Management connector</a></li>
     <li><a href="#secrets_properties_d3security"><code>secrets_properties_d3security</code> - Connector secrets properties for a D3 Security connector</a></li>
     <li><a href="#secrets_properties_email"><code>secrets_properties_email</code> - Connector secrets properties for an email connector</a></li>
-    <li><a href="#secrets_properties_genai"><code>secrets_properties_genai</code> - Connector secrets properties for a generative AI connector</a></li>
+    <li><a href="#secrets_properties_genai"><code>secrets_properties_genai</code> - Connector secrets properties for an OpenAI connector</a></li>
     <li><a href="#secrets_properties_jira"><code>secrets_properties_jira</code> - Connector secrets properties for a Jira connector</a></li>
     <li><a href="#secrets_properties_opsgenie"><code>secrets_properties_opsgenie</code> - Connector secrets properties for an Opsgenie connector</a></li>
     <li><a href="#secrets_properties_pagerduty"><code>secrets_properties_pagerduty</code> - Connector secrets properties for a PagerDuty connector</a></li>
@@ -1429,7 +1429,7 @@
     </div>  <!-- field-items -->
   </div>
   <div class="model">
-    <h3><a name="config_properties_genai"><code>config_properties_genai</code> - Connector request properties for a generative AI connector</a> <a class="up" href="#__Models">Up</a></h3>
+    <h3><a name="config_properties_genai"><code>config_properties_genai</code> - Connector request properties for an OpenAI connector</a> <a class="up" href="#__Models">Up</a></h3>
     <div class='model-description'>Defines properties for connectors when type is <code>.gen-ai</code>.</div>
     <div class="field-items">
       <div class="param">apiProvider </div><div class="param-desc"><span class="param-type"><a href="#string">String</a></span> The OpenAI API provider. </div>
@@ -1948,8 +1948,8 @@
     </div>  <!-- field-items -->
   </div>
   <div class="model">
-    <h3><a name="create_connector_request_genai"><code>create_connector_request_genai</code> - Create generative AI connector request</a> <a class="up" href="#__Models">Up</a></h3>
-    <div class='model-description'>The generative AI connector uses axios to send a POST request to either OpenAI or Azure OpenAPI.</div>
+    <h3><a name="create_connector_request_genai"><code>create_connector_request_genai</code> - Create OpenAI connector request</a> <a class="up" href="#__Models">Up</a></h3>
+    <div class='model-description'>The OpenAI connector uses axios to send a POST request to either OpenAI or Azure OpenAPI.</div>
     <div class="field-items">
       <div class="param">config </div><div class="param-desc"><span class="param-type"><a href="#config_properties_genai">config_properties_genai</a></span>  </div>
 <div class="param">connector_type_id </div><div class="param-desc"><span class="param-type"><a href="#string">String</a></span> The type of connector. </div>
@@ -2525,7 +2525,7 @@
     </div>  <!-- field-items -->
   </div>
   <div class="model">
-    <h3><a name="secrets_properties_genai"><code>secrets_properties_genai</code> - Connector secrets properties for a generative AI connector</a> <a class="up" href="#__Models">Up</a></h3>
+    <h3><a name="secrets_properties_genai"><code>secrets_properties_genai</code> - Connector secrets properties for an OpenAI connector</a> <a class="up" href="#__Models">Up</a></h3>
     <div class='model-description'>Defines secrets for connectors when type is <code>.gen-ai</code>.</div>
     <div class="field-items">
       <div class="param">apiKey (optional)</div><div class="param-desc"><span class="param-type"><a href="#string">String</a></span> The OpenAI API key. </div>
Index: docs/management/connectors/pre-configured-connectors.asciidoc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/management/connectors/pre-configured-connectors.asciidoc b/docs/management/connectors/pre-configured-connectors.asciidoc
--- a/docs/management/connectors/pre-configured-connectors.asciidoc	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/docs/management/connectors/pre-configured-connectors.asciidoc	(revision bc6c2a2dcb95ac781ee1ddcdb1cfeac0d882ee47)
@@ -281,15 +281,15 @@
 
 [float]
 [[preconfigured-gen-ai-configuration]]
-==== Generative AI connectors
+==== OpenAI connectors
 
-The following example creates a <<gen-ai-action-type,generative AI connector>>:
+The following example creates a <<openai-action-type,OpenAI connector>>:
 
 [source,text]
 --
 xpack.actions.preconfigured:
-  my-gen-ai:
-    name: preconfigured-gen-ai-connector-type
+  my-open-ai:
+    name: preconfigured-openai-connector-type
     actionTypeId: .gen-ai
     config:
       apiUrl: https://api.openai.com/v1/chat/completions <1>
Index: docs/settings/alert-action-settings.asciidoc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/settings/alert-action-settings.asciidoc b/docs/settings/alert-action-settings.asciidoc
--- a/docs/settings/alert-action-settings.asciidoc	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/docs/settings/alert-action-settings.asciidoc	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -261,13 +261,13 @@
 The configuration details, which are specific to the type of preconfigured connector.
 
 `xpack.actions.preconfigured.<connector-id>.config.apiProvider`::
-For a <<gen-ai-action-type,generative AI connector>>, specifies the OpenAI API provider, either `OpenAI` or `Azure OpenAI`.
+For a <<gen-ai-action-type,OpenAI connector>>, specifies the OpenAI API provider, either `OpenAI` or `Azure OpenAI`.
 
 `xpack.actions.preconfigured.<connector-id>.config.apiUrl`::
 A configuration URL that varies by connector:
 +
 --
-* For a <<gen-ai-action-type,generative AI connector>>, specifies the OpenAI request URL.
+* For a <<gen-ai-action-type,OpenAI connector>>, specifies the OpenAI request URL.
 * For a <<resilient-action-type,{ibm-r} connector>>, specifies the {ibm-r} instance URL.
 * For a <<jira-action-type,Jira connector>>, specifies the Jira instance URL.
 * For an <<opsgenie-action-type,{opsgenie} connector>>, specifies the {opsgenie} URL. For example, `https://api.opsgenie.com` or `https://api.eu.opsgenie.com`.
@@ -321,7 +321,7 @@
 For a <<cases-webhook-action-type,{webhook-cm} connector>>, specifies a string from the response body of the create case method that corresponds to the external service identifier.
 
 `xpack.actions.preconfigured.<connector-id>.config.defaultModel`::
-For a <<gen-ai-action-type,generative AI connector>>, specifies the default model to use for requests. It is optional and applicable only when `xpack.actions.preconfigured.<connector-id>.config.apiProvider` is `OpenAI`.
+For a <<gen-ai-action-type,OpenAI connector>>, specifies the default model to use for requests. It is optional and applicable only when `xpack.actions.preconfigured.<connector-id>.config.apiProvider` is `OpenAI`.
 
 `xpack.actions.preconfigured.<connector-id>.config.executionTimeField`::
 For an <<index-action-type,index connector>>, a field that indicates when the document was indexed.
@@ -447,7 +447,7 @@
 An API key secret that varies by connector:
 +
 --
-* For a <<gen-ai-action-type,generative AI connector>>, specifies the OpenAI or Azure OpenAI API key for authentication.
+* For a <<gen-ai-action-type,OpenAI connector>>, specifies the OpenAI or Azure OpenAI API key for authentication.
 * For an <<opsgenie-action-type,{opsgenie} connector>>, specifies the {opsgenie} API authentication key for HTTP basic authentication.
 --
 
Index: x-pack/examples/gen_ai_streaming_response_example/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/examples/gen_ai_streaming_response_example/README.md b/x-pack/examples/gen_ai_streaming_response_example/README.md
--- a/x-pack/examples/gen_ai_streaming_response_example/README.md	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/examples/gen_ai_streaming_response_example/README.md	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1,5 +1,5 @@
-## Generative AI Connector Streaming Response Example
+## OpenAI Connector Streaming Response Example
 
-This example plugin shows you how to stream a response from a Generative AI connector.
+This example plugin shows you how to stream a response from a OpenAI connector.
 
 To run this example, use the command `yarn start --run-examples`.
\ No newline at end of file
Index: x-pack/examples/gen_ai_streaming_response_example/public/components/list_connector.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/examples/gen_ai_streaming_response_example/public/components/list_connector.tsx b/x-pack/examples/gen_ai_streaming_response_example/public/components/list_connector.tsx
--- a/x-pack/examples/gen_ai_streaming_response_example/public/components/list_connector.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/examples/gen_ai_streaming_response_example/public/components/list_connector.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -52,7 +52,7 @@
           label={i18n.translate(
             'genAiStreamingResponseExample.app.component.selectConnectorLabel',
             {
-              defaultMessage: 'Select a Generative AI Connector',
+              defaultMessage: 'Select a OpenAI Connector',
             }
           )}
           labelAppend={
Index: x-pack/examples/gen_ai_streaming_response_example/public/components/setup_connector.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/examples/gen_ai_streaming_response_example/public/components/setup_connector.tsx b/x-pack/examples/gen_ai_streaming_response_example/public/components/setup_connector.tsx
--- a/x-pack/examples/gen_ai_streaming_response_example/public/components/setup_connector.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/examples/gen_ai_streaming_response_example/public/components/setup_connector.tsx	(revision bc6c2a2dcb95ac781ee1ddcdb1cfeac0d882ee47)
@@ -6,7 +6,7 @@
  */
 
 import React from 'react';
-import { GenAiLogo } from '@kbn/stack-connectors-plugin/public/common';
+import { OpenAILogo } from '@kbn/stack-connectors-plugin/public/common';
 import { EuiFlexGroup, EuiCard, EuiFlexItem, EuiIcon } from '@elastic/eui';
 import { i18n } from '@kbn/i18n';
 
@@ -20,11 +20,11 @@
       <EuiFlexItem grow={false}>
         <EuiCard
           layout="horizontal"
-          icon={<EuiIcon size="xl" type={GenAiLogo} />}
+          icon={<EuiIcon size="xl" type={OpenAILogo} />}
           title={i18n.translate(
             'genAiStreamingResponseExample.app.component.addConnectorCardTitle',
             {
-              defaultMessage: 'Add Generative AI Connector',
+              defaultMessage: 'Add OpenAI Connector',
             }
           )}
           description={i18n.translate(
Index: x-pack/examples/gen_ai_streaming_response_example/public/gen_ai_streaming_response_example.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/examples/gen_ai_streaming_response_example/public/gen_ai_streaming_response_example.tsx b/x-pack/examples/gen_ai_streaming_response_example/public/gen_ai_streaming_response_example.tsx
--- a/x-pack/examples/gen_ai_streaming_response_example/public/gen_ai_streaming_response_example.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/examples/gen_ai_streaming_response_example/public/gen_ai_streaming_response_example.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -65,7 +65,7 @@
     minimumLicenseRequired: 'platinum',
     supportedFeatureIds: ['general'],
     id: '.gen-ai',
-    name: 'Generative AI',
+    name: 'OpenAI',
     enabled: true,
   });
   const [loading, setLoading] = useState<boolean>(true);
Index: x-pack/examples/gen_ai_streaming_response_example/public/plugin.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/examples/gen_ai_streaming_response_example/public/plugin.tsx b/x-pack/examples/gen_ai_streaming_response_example/public/plugin.tsx
--- a/x-pack/examples/gen_ai_streaming_response_example/public/plugin.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/examples/gen_ai_streaming_response_example/public/plugin.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -37,7 +37,7 @@
   ) {
     core.application.register({
       id: 'GenAiStreamingResponseExample',
-      title: 'Generative AI Streaming Response Example',
+      title: 'OpenAI Streaming Response Example',
       navLinkStatus: AppNavLinkStatus.hidden,
       async mount(params: AppMountParameters) {
         const [coreStart, depsStart] = await core.getStartServices();
@@ -48,9 +48,8 @@
 
     developerExamples.register({
       appId: 'GenAiStreamingResponseExample',
-      title: 'Generative AI Streaming Response Example',
-      description:
-        'This example demonstrates how to stream a response from a Generative AI connector',
+      title: 'OpenAI Streaming Response Example',
+      description: 'This example demonstrates how to stream a response from an OpenAI connector',
     });
   }
 
Index: x-pack/examples/gen_ai_streaming_response_example/server/plugin.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/examples/gen_ai_streaming_response_example/server/plugin.ts b/x-pack/examples/gen_ai_streaming_response_example/server/plugin.ts
--- a/x-pack/examples/gen_ai_streaming_response_example/server/plugin.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/examples/gen_ai_streaming_response_example/server/plugin.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -87,7 +87,7 @@
           };
         } else {
           throw Boom.badRequest(
-            `Invalid generative AI connector selected - ${connector.config?.apiProvider} is not a valid provider`
+            `Invalid OpenAI connector selected - ${connector.config?.apiProvider} is not a valid provider`
           );
         }
 
Index: x-pack/packages/kbn-elastic-assistant/impl/assistant/assistant_header/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/assistant/assistant_header/index.tsx b/x-pack/packages/kbn-elastic-assistant/impl/assistant/assistant_header/index.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/assistant/assistant_header/index.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/assistant/assistant_header/index.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -17,7 +17,7 @@
 } from '@elastic/eui';
 import { css } from '@emotion/react';
 import { DocLinksStart } from '@kbn/core-doc-links-browser';
-import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/gen_ai/constants';
+import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/open_ai/constants';
 import { Conversation } from '../../..';
 import { AssistantTitle } from '../assistant_title';
 import { ConversationSelector } from '../conversations/conversation_selector';
Index: x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector/index.tsx b/x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector/index.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector/index.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector/index.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -19,7 +19,7 @@
 import useEvent from 'react-use/lib/useEvent';
 import { css } from '@emotion/react';
 
-import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/gen_ai/constants';
+import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/open_ai/constants';
 import { Conversation } from '../../../..';
 import { useAssistantContext } from '../../../assistant_context';
 import * as i18n from './translations';
Index: x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector_settings/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector_settings/index.tsx b/x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector_settings/index.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector_settings/index.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/assistant/conversations/conversation_selector_settings/index.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -18,7 +18,7 @@
 import React, { useCallback, useMemo, useState } from 'react';
 import { css } from '@emotion/react';
 
-import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/gen_ai/constants';
+import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/open_ai/constants';
 import { Conversation, Prompt } from '../../../..';
 import { UseAssistantContext } from '../../../assistant_context';
 import * as i18n from './translations';
Index: x-pack/packages/kbn-elastic-assistant/impl/assistant/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/assistant/index.tsx b/x-pack/packages/kbn-elastic-assistant/impl/assistant/index.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/assistant/index.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/assistant/index.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -29,7 +29,7 @@
 import { createPortal } from 'react-dom';
 import { css } from '@emotion/react';
 
-import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/gen_ai/constants';
+import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/open_ai/constants';
 import { ActionConnectorProps } from '@kbn/triggers-actions-ui-plugin/public/types';
 import { ChatSend } from './chat_send';
 import { BlockBotCallToAction } from './block_bot/cta';
Index: x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings.tsx b/x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -23,7 +23,7 @@
 // eslint-disable-next-line @kbn/eslint/module_migration
 import styled from 'styled-components';
 import { css } from '@emotion/react';
-import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/gen_ai/constants';
+import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/open_ai/constants';
 import { Conversation, Prompt, QuickPrompt } from '../../..';
 import * as i18n from './translations';
 import { useAssistantContext } from '../../assistant_context';
Index: x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings_button.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings_button.tsx b/x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings_button.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings_button.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/assistant/settings/assistant_settings_button.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -8,7 +8,7 @@
 import React, { useCallback } from 'react';
 import { EuiButtonIcon, EuiToolTip } from '@elastic/eui';
 
-import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/gen_ai/constants';
+import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/open_ai/constants';
 import { Conversation } from '../../..';
 import { AssistantSettings, CONVERSATIONS_TAB } from './assistant_settings';
 import * as i18n from './translations';
Index: x-pack/packages/kbn-elastic-assistant/impl/assistant_context/types.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/assistant_context/types.tsx b/x-pack/packages/kbn-elastic-assistant/impl/assistant_context/types.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/assistant_context/types.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/assistant_context/types.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -5,7 +5,7 @@
  * 2.0.
  */
 
-import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/gen_ai/constants';
+import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/open_ai/constants';
 
 export type ConversationRole = 'system' | 'user' | 'assistant';
 
Index: x-pack/packages/kbn-elastic-assistant/impl/connectorland/helpers.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/connectorland/helpers.tsx b/x-pack/packages/kbn-elastic-assistant/impl/connectorland/helpers.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/connectorland/helpers.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/connectorland/helpers.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -7,7 +7,7 @@
 
 import type { ActionConnector } from '@kbn/triggers-actions-ui-plugin/public';
 import { ActionConnectorProps } from '@kbn/triggers-actions-ui-plugin/public/types';
-import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/gen_ai/constants';
+import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/open_ai/constants';
 import { ActionTypeModel } from '@kbn/triggers-actions-ui-plugin/public';
 
 interface GenAiConfig {
@@ -20,7 +20,7 @@
  * Returns the GenAiConfig for a given ActionConnector. Note that if the connector is preconfigured,
  * the config will be undefined as the connector is neither available nor editable.
  *
- * TODO: Extract and use separate types from GenAiConfig from '@kbn/stack-connectors-plugin/common/gen_ai/types'
+ * TODO: Extract and use separate types from GenAiConfig from '@kbn/stack-connectors-plugin/common/open_ai/types'
  *
  * @param connector
  */
Index: x-pack/packages/kbn-elastic-assistant/impl/content/prompts/welcome/translations.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/content/prompts/welcome/translations.ts b/x-pack/packages/kbn-elastic-assistant/impl/content/prompts/welcome/translations.ts
--- a/x-pack/packages/kbn-elastic-assistant/impl/content/prompts/welcome/translations.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/content/prompts/welcome/translations.ts	(revision 06445caf5021c473ab79d40f7975d7090b258a6f)
@@ -19,7 +19,7 @@
   'xpack.elasticAssistant.securityAssistant.content.prompts.welcome.welcomeGeneral2Prompt',
   {
     defaultMessage:
-      "First things first, we'll need to set up a Generative AI Connector to get this chat experience going! With the Generative AI Connector, you'll be able to configure access to either an Azure OpenAI Service or OpenAI API account, but you better believe you'll be able to deploy your own models within your Elastic Cloud instance and use those here in the future... 😉",
+      "First things first, we'll need to set up a Generative AI Connector to get this chat experience going! With the Generative AI Connector, you'll be able to configure access to either an OpenAI service or an AWS Bedrock service, but you better believe you'll be able to deploy your own models within your Elastic Cloud instance and use those here in the future... 😉",
   }
 );
 
Index: x-pack/packages/kbn-elastic-assistant/impl/mock/conversation.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/mock/conversation.ts b/x-pack/packages/kbn-elastic-assistant/impl/mock/conversation.ts
--- a/x-pack/packages/kbn-elastic-assistant/impl/mock/conversation.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/mock/conversation.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -5,7 +5,7 @@
  * 2.0.
  */
 
-import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/gen_ai/constants';
+import { OpenAiProviderType } from '@kbn/stack-connectors-plugin/common/open_ai/constants';
 import { Conversation } from '../..';
 
 export const alertConvo: Conversation = {
Index: x-pack/plugins/actions/docs/openapi/bundled.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/docs/openapi/bundled.json b/x-pack/plugins/actions/docs/openapi/bundled.json
--- a/x-pack/plugins/actions/docs/openapi/bundled.json	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/actions/docs/openapi/bundled.json	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1765,7 +1765,7 @@
         }
       },
       "config_properties_genai": {
-        "title": "Connector request properties for a generative AI connector",
+        "title": "Connector request properties for an OpenAI connector",
         "description": "Defines properties for connectors when type is `.gen-ai`.",
         "oneOf": [
           {
@@ -1818,7 +1818,7 @@
         }
       },
       "secrets_properties_genai": {
-        "title": "Connector secrets properties for a generative AI connector",
+        "title": "Connector secrets properties for an OpenAI connector",
         "description": "Defines secrets for connectors when type is `.gen-ai`.",
         "type": "object",
         "properties": {
@@ -1829,8 +1829,8 @@
         }
       },
       "create_connector_request_genai": {
-        "title": "Create generative AI connector request",
-        "description": "The generative AI connector uses axios to send a POST request to either OpenAI or Azure OpenAPI.\n",
+        "title": "Create OpenAI connector request",
+        "description": "The OpenAI connector uses axios to send a POST request to either OpenAI or Azure OpenAPI.\n",
         "type": "object",
         "required": [
           "config",
@@ -5677,4 +5677,4 @@
       }
     }
   }
-}
\ No newline at end of file
+}
Index: x-pack/plugins/actions/docs/openapi/bundled.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/docs/openapi/bundled.yaml b/x-pack/plugins/actions/docs/openapi/bundled.yaml
--- a/x-pack/plugins/actions/docs/openapi/bundled.yaml	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/actions/docs/openapi/bundled.yaml	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1030,14 +1030,14 @@
           type: boolean
         host:
           description: |
-            The host name of the service provider. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored. If `service` is `other`, this property must be defined. 
+            The host name of the service provider. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored. If `service` is `other`, this property must be defined.
           type: string
         oauthTokenUrl:
           type: string
           nullable: true
         port:
           description: |
-            The port to connect to on the service provider. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored. If `service` is `other`, this property must be defined. 
+            The port to connect to on the service provider. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored. If `service` is `other`, this property must be defined.
           type: integer
         secure:
           description: |
@@ -1102,7 +1102,7 @@
         secrets:
           $ref: '#/components/schemas/secrets_properties_email'
     config_properties_genai:
-      title: Connector request properties for a generative AI connector
+      title: Connector request properties for an OpenAI connector
       description: Defines properties for connectors when type is `.gen-ai`.
       oneOf:
         - type: object
@@ -1137,7 +1137,7 @@
       discriminator:
         propertyName: apiProvider
     secrets_properties_genai:
-      title: Connector secrets properties for a generative AI connector
+      title: Connector secrets properties for an OpenAI connector
       description: Defines secrets for connectors when type is `.gen-ai`.
       type: object
       properties:
@@ -1145,9 +1145,9 @@
           type: string
           description: The OpenAI API key.
     create_connector_request_genai:
-      title: Create generative AI connector request
+      title: Create OpenAI connector request
       description: |
-        The generative AI connector uses axios to send a POST request to either OpenAI or Azure OpenAPI.
+        The OpenAI connector uses axios to send a POST request to either OpenAI or Azure OpenAPI.
       type: object
       required:
         - config
Index: x-pack/plugins/actions/docs/openapi/components/schemas/config_properties_genai.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/docs/openapi/components/schemas/config_properties_genai.yaml b/x-pack/plugins/actions/docs/openapi/components/schemas/config_properties_genai.yaml
--- a/x-pack/plugins/actions/docs/openapi/components/schemas/config_properties_genai.yaml	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/actions/docs/openapi/components/schemas/config_properties_genai.yaml	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1,4 +1,4 @@
-title: Connector request properties for a generative AI connector
+title: Connector request properties for an OpenAI connector
 description: Defines properties for connectors when type is `.gen-ai`.
 oneOf:
   - type: object
@@ -29,4 +29,4 @@
         type: string
         description: The default model to use for requests.
 discriminator:
-  propertyName: apiProvider
\ No newline at end of file
+  propertyName: apiProvider
Index: x-pack/plugins/actions/docs/openapi/components/schemas/connector_response_properties_genai.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/docs/openapi/components/schemas/connector_response_properties_genai.yaml b/x-pack/plugins/actions/docs/openapi/components/schemas/connector_response_properties_genai.yaml
--- a/x-pack/plugins/actions/docs/openapi/components/schemas/connector_response_properties_genai.yaml	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/actions/docs/openapi/components/schemas/connector_response_properties_genai.yaml	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1,4 +1,4 @@
-title: Connector response properties for a generative AI connector
+title: Connector response properties for an OpenAI connector
 type: object
 required:
   - config
Index: x-pack/plugins/actions/docs/openapi/components/schemas/create_connector_request_genai.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/docs/openapi/components/schemas/create_connector_request_genai.yaml b/x-pack/plugins/actions/docs/openapi/components/schemas/create_connector_request_genai.yaml
--- a/x-pack/plugins/actions/docs/openapi/components/schemas/create_connector_request_genai.yaml	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/actions/docs/openapi/components/schemas/create_connector_request_genai.yaml	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1,6 +1,6 @@
-title: Create generative AI connector request
+title: Create OpenAI connector request
 description: >
-  The generative AI connector uses axios to send a POST request to either
+  The OpenAI connector uses axios to send a POST request to either
   OpenAI or Azure OpenAPI.
 type: object
 required:
@@ -22,4 +22,4 @@
     description: The display name for the connector.
     example: my-connector
   secrets:
-    $ref: 'secrets_properties_genai.yaml' 
\ No newline at end of file
+    $ref: 'secrets_properties_genai.yaml'
Index: x-pack/plugins/actions/docs/openapi/components/schemas/secrets_properties_genai.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/docs/openapi/components/schemas/secrets_properties_genai.yaml b/x-pack/plugins/actions/docs/openapi/components/schemas/secrets_properties_genai.yaml
--- a/x-pack/plugins/actions/docs/openapi/components/schemas/secrets_properties_genai.yaml	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/actions/docs/openapi/components/schemas/secrets_properties_genai.yaml	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1,7 +1,7 @@
-title: Connector secrets properties for a generative AI connector
+title: Connector secrets properties for an OpenAI connector
 description: Defines secrets for connectors when type is `.gen-ai`.
 type: object
 properties:
     apiKey:
         type: string
-        description: The OpenAI API key.
\ No newline at end of file
+        description: The OpenAI API key.
Index: x-pack/plugins/actions/docs/openapi/components/schemas/update_connector_request_genai.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/docs/openapi/components/schemas/update_connector_request_genai.yaml b/x-pack/plugins/actions/docs/openapi/components/schemas/update_connector_request_genai.yaml
--- a/x-pack/plugins/actions/docs/openapi/components/schemas/update_connector_request_genai.yaml	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/actions/docs/openapi/components/schemas/update_connector_request_genai.yaml	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1,4 +1,4 @@
-title: Update generative AI connector request
+title: Update OpenAI connector request
 type: object
 required:
   - config
@@ -10,4 +10,4 @@
     type: string
     description: The display name for the connector.
   secrets:
-    $ref: 'secrets_properties_genai.yaml' 
\ No newline at end of file
+    $ref: 'secrets_properties_genai.yaml'
Index: x-pack/plugins/actions/server/lib/action_executor.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/server/lib/action_executor.test.ts b/x-pack/plugins/actions/server/lib/action_executor.test.ts
--- a/x-pack/plugins/actions/server/lib/action_executor.test.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/actions/server/lib/action_executor.test.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -1766,7 +1766,7 @@
   });
 });
 
-test('writes usage data to event log for gen ai events', async () => {
+test('writes usage data to event log for OpenAI events', async () => {
   const executorMock = setupActionExecutorMock('.gen-ai');
   const mockGenAi = {
     id: 'chatcmpl-7LztF5xsJl2z5jcNpJKvaPm4uWt8x',
Index: x-pack/plugins/actions/server/lib/action_executor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/server/lib/action_executor.ts b/x-pack/plugins/actions/server/lib/action_executor.ts
--- a/x-pack/plugins/actions/server/lib/action_executor.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/actions/server/lib/action_executor.ts	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -286,8 +286,8 @@
 
         event.event = event.event || {};
 
-        // start gen_ai extension
-        // add event.kibana.action.execution.gen_ai to event log when GenerativeAi Connector is executed
+        // start open_ai extension
+        // add event.kibana.action.execution.open_ai to event log when OpenAI Connector is executed
         if (result.status === 'ok' && actionTypeId === '.gen-ai') {
           const data = result.data as unknown as {
             usage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number };
@@ -311,7 +311,7 @@
             },
           };
         }
-        // end gen_ai extension
+        // end open_ai extension
 
         const currentUser = security?.authc.getCurrentUser(request);
 
Index: x-pack/plugins/observability_ai_assistant/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/observability_ai_assistant/README.md b/x-pack/plugins/observability_ai_assistant/README.md
--- a/x-pack/plugins/observability_ai_assistant/README.md	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/observability_ai_assistant/README.md	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -6,7 +6,7 @@
 
 #### **1.1. Configuration**
 
-Users can connect to an LLM using [connectors](https://www.elastic.co/guide/en/kibana/current/action-types.html) - specifically the [Generative AI connector](https://www.elastic.co/guide/en/kibana/current/gen-ai-action-type.html), which currently supports both OpenAI and Azure OpenAI as providers. The connector is Enterprise-only. Users can also leverage [preconfigured connectors](https://www.elastic.co/guide/en/kibana/current/pre-configured-connectors.html), in which case the following should be added to `kibana.yml`:
+Users can connect to an LLM using [connectors](https://www.elastic.co/guide/en/kibana/current/action-types.html) - specifically the [OpenAI connector](https://www.elastic.co/guide/en/kibana/current/gen-ai-action-type.html), which currently supports both OpenAI and Azure OpenAI as providers. The connector is Enterprise-only. Users can also leverage [preconfigured connectors](https://www.elastic.co/guide/en/kibana/current/pre-configured-connectors.html), in which case the following should be added to `kibana.yml`:
 
 ```yaml
 xpack.actions.preconfigured:
Index: x-pack/plugins/observability_ai_assistant/public/components/chat/initial_setup_panel.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/observability_ai_assistant/public/components/chat/initial_setup_panel.tsx b/x-pack/plugins/observability_ai_assistant/public/components/chat/initial_setup_panel.tsx
--- a/x-pack/plugins/observability_ai_assistant/public/components/chat/initial_setup_panel.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/observability_ai_assistant/public/components/chat/initial_setup_panel.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -143,7 +143,7 @@
                       {i18n.translate(
                         'xpack.observabilityAiAssistant.initialSetupPanel.setupConnector.description1',
                         {
-                          defaultMessage: 'Set up a Generative AI connector with your AI provider.',
+                          defaultMessage: 'Set up an OpenAI connector with your AI provider.',
                         }
                       )}
                     </p>
@@ -153,7 +153,7 @@
                         'xpack.observabilityAiAssistant.initialSetupPanel.setupConnector.description2',
                         {
                           defaultMessage:
-                            'The Generative AI model needs to support function calls. We strongly recommend using GPT4.',
+                            'The OpenAI model needs to support function calls. We strongly recommend using GPT4.',
                         }
                       )}
                       <EuiBetaBadge
@@ -197,7 +197,7 @@
                     {i18n.translate(
                       'xpack.observabilityAiAssistant.initialSetupPanel.setupConnector.buttonLabel',
                       {
-                        defaultMessage: 'Set up Generative AI connector',
+                        defaultMessage: 'Set up OpenAI connector',
                       }
                     )}
                   </EuiButton>
Index: x-pack/plugins/stack_connectors/common/gen_ai/constants.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/common/gen_ai/constants.ts b/x-pack/plugins/stack_connectors/common/open_ai/constants.ts
rename from x-pack/plugins/stack_connectors/common/gen_ai/constants.ts
rename to x-pack/plugins/stack_connectors/common/open_ai/constants.ts
--- a/x-pack/plugins/stack_connectors/common/gen_ai/constants.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/common/open_ai/constants.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -13,7 +13,7 @@
     defaultMessage: 'OpenAI',
   }
 );
-export const GEN_AI_CONNECTOR_ID = '.gen-ai';
+export const OPEN_AI_CONNECTOR_ID = '.gen-ai';
 export enum SUB_ACTION {
   RUN = 'run',
   INVOKE_AI = 'invokeAI',
Index: x-pack/plugins/stack_connectors/public/common/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/common/index.ts b/x-pack/plugins/stack_connectors/public/common/index.ts
--- a/x-pack/plugins/stack_connectors/public/common/index.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/common/index.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -5,7 +5,7 @@
  * 2.0.
  */
 
-import GenAiLogo from '../connector_types/gen_ai/logo';
+import OpenAILogo from '../connector_types/open_ai/logo';
 
-export { GEN_AI_CONNECTOR_ID, OpenAiProviderType } from '../../common/gen_ai/constants';
-export { GenAiLogo };
+export { OPEN_AI_CONNECTOR_ID, OpenAiProviderType } from '../../common/open_ai/constants';
+export { OpenAILogo };
Index: x-pack/plugins/stack_connectors/public/connector_types/d3security/d3security.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/d3security/d3security.tsx b/x-pack/plugins/stack_connectors/public/connector_types/d3security/d3security.tsx
--- a/x-pack/plugins/stack_connectors/public/connector_types/d3security/d3security.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/d3security/d3security.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -8,7 +8,7 @@
 import { lazy } from 'react';
 import { i18n } from '@kbn/i18n';
 import { GenericValidationResult } from '@kbn/triggers-actions-ui-plugin/public/types';
-import { SUB_ACTION } from '../../../common/gen_ai/constants';
+import { SUB_ACTION } from '../../../common/open_ai/constants';
 import { D3SecurityActionParams, D3SecurityConnector } from './types';
 import { D3_SECURITY_CONNECTOR_ID } from '../../../common/d3security/constants';
 interface ValidationErrors {
Index: x-pack/plugins/stack_connectors/public/connector_types/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/index.ts b/x-pack/plugins/stack_connectors/public/connector_types/index.ts
--- a/x-pack/plugins/stack_connectors/public/connector_types/index.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/index.ts	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -11,7 +11,7 @@
 import { getEmailConnectorType } from './email';
 import { getIndexConnectorType } from './es_index';
 import { getJiraConnectorType } from './jira';
-import { getGenerativeAiConnectorType } from './gen_ai';
+import { getOpenAIConnectorType } from './open_ai';
 import { getBedrockConnectorType } from './bedrock';
 import { getOpsgenieConnectorType } from './opsgenie';
 import { getPagerDutyConnectorType } from './pagerduty';
@@ -60,7 +60,7 @@
   connectorTypeRegistry.register(getJiraConnectorType());
   connectorTypeRegistry.register(getResilientConnectorType());
   connectorTypeRegistry.register(getOpsgenieConnectorType());
-  connectorTypeRegistry.register(getGenerativeAiConnectorType());
+  connectorTypeRegistry.register(getOpenAIConnectorType());
   connectorTypeRegistry.register(getBedrockConnectorType());
   connectorTypeRegistry.register(getTeamsConnectorType());
   connectorTypeRegistry.register(getTorqConnectorType());
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/api.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/api.test.ts b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/api.test.ts
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/api.test.ts
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/api.test.ts
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/api.test.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/api.test.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -7,7 +7,7 @@
 
 import { httpServiceMock } from '@kbn/core-http-browser-mocks';
 import { getDashboard } from './api';
-import { SUB_ACTION } from '../../../common/gen_ai/constants';
+import { SUB_ACTION } from '../../../common/open_ai/constants';
 const response = {
   available: true,
 };
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/api.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/api.ts b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/api.ts
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/api.ts
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/api.ts
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/api.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/api.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -7,7 +7,7 @@
 
 import { HttpSetup } from '@kbn/core-http-browser';
 import { ActionTypeExecutorResult, BASE_ACTION_API_PATH } from '@kbn/actions-plugin/common';
-import { SUB_ACTION } from '../../../common/gen_ai/constants';
+import { SUB_ACTION } from '../../../common/open_ai/constants';
 import { ConnectorExecutorResult, rewriteResponseToCamelCase } from '../lib/rewrite_response_body';
 
 export async function getDashboard({
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/connector.test.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/connector.test.tsx b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/connector.test.tsx
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/connector.test.tsx
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/connector.test.tsx
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/connector.test.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/connector.test.tsx	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -6,11 +6,11 @@
  */
 
 import React from 'react';
-import GenerativeAiConnectorFields from './connector';
+import ConnectorFields from './connector';
 import { ConnectorFormTestProvider } from '../lib/test_utils';
 import { act, fireEvent, render, waitFor } from '@testing-library/react';
 import userEvent from '@testing-library/user-event';
-import { DEFAULT_OPENAI_MODEL, OpenAiProviderType } from '../../../common/gen_ai/constants';
+import { DEFAULT_OPENAI_MODEL, OpenAiProviderType } from '../../../common/open_ai/constants';
 import { useKibana } from '@kbn/triggers-actions-ui-plugin/public';
 import { useGetDashboard } from './use_get_dashboard';
 
@@ -21,7 +21,7 @@
 const mockDashboard = useGetDashboard as jest.Mock;
 const openAiConnector = {
   actionTypeId: '.gen-ai',
-  name: 'genAi',
+  name: 'OpenAI',
   id: '123',
   config: {
     apiUrl: 'https://openaiurl.com',
@@ -46,7 +46,7 @@
 
 const navigateToUrl = jest.fn();
 
-describe('GenerativeAiConnectorFields renders', () => {
+describe('ConnectorFields renders', () => {
   beforeEach(() => {
     jest.clearAllMocks();
     useKibanaMock().services.application.navigateToUrl = navigateToUrl;
@@ -57,11 +57,7 @@
   test('open ai connector fields are rendered', async () => {
     const { getAllByTestId } = render(
       <ConnectorFormTestProvider connector={openAiConnector}>
-        <GenerativeAiConnectorFields
-          readOnly={false}
-          isEdit={false}
-          registerPreSubmitValidator={() => {}}
-        />
+        <ConnectorFields readOnly={false} isEdit={false} registerPreSubmitValidator={() => {}} />
       </ConnectorFormTestProvider>
     );
     expect(getAllByTestId('config.apiUrl-input')[0]).toBeInTheDocument();
@@ -77,11 +73,7 @@
   test('azure ai connector fields are rendered', async () => {
     const { getAllByTestId } = render(
       <ConnectorFormTestProvider connector={azureConnector}>
-        <GenerativeAiConnectorFields
-          readOnly={false}
-          isEdit={false}
-          registerPreSubmitValidator={() => {}}
-        />
+        <ConnectorFields readOnly={false} isEdit={false} registerPreSubmitValidator={() => {}} />
       </ConnectorFormTestProvider>
     );
     expect(getAllByTestId('config.apiUrl-input')[0]).toBeInTheDocument();
@@ -98,11 +90,7 @@
     it('Does not render if isEdit is false and dashboardUrl is defined', async () => {
       const { queryByTestId } = render(
         <ConnectorFormTestProvider connector={openAiConnector}>
-          <GenerativeAiConnectorFields
-            readOnly={false}
-            isEdit={false}
-            registerPreSubmitValidator={() => {}}
-          />
+          <ConnectorFields readOnly={false} isEdit={false} registerPreSubmitValidator={() => {}} />
         </ConnectorFormTestProvider>
       );
       expect(queryByTestId('link-gen-ai-token-dashboard')).not.toBeInTheDocument();
@@ -113,11 +101,7 @@
       }));
       const { queryByTestId } = render(
         <ConnectorFormTestProvider connector={openAiConnector}>
-          <GenerativeAiConnectorFields
-            readOnly={false}
-            isEdit={false}
-            registerPreSubmitValidator={() => {}}
-          />
+          <ConnectorFields readOnly={false} isEdit={false} registerPreSubmitValidator={() => {}} />
         </ConnectorFormTestProvider>
       );
       expect(queryByTestId('link-gen-ai-token-dashboard')).not.toBeInTheDocument();
@@ -125,11 +109,7 @@
     it('Renders if isEdit is true and dashboardUrl is defined', async () => {
       const { getByTestId } = render(
         <ConnectorFormTestProvider connector={openAiConnector}>
-          <GenerativeAiConnectorFields
-            readOnly={false}
-            isEdit={true}
-            registerPreSubmitValidator={() => {}}
-          />
+          <ConnectorFields readOnly={false} isEdit={true} registerPreSubmitValidator={() => {}} />
         </ConnectorFormTestProvider>
       );
       expect(getByTestId('link-gen-ai-token-dashboard')).toBeInTheDocument();
@@ -137,11 +117,7 @@
     it('On click triggers redirect with correct saved object id', async () => {
       const { getByTestId } = render(
         <ConnectorFormTestProvider connector={openAiConnector}>
-          <GenerativeAiConnectorFields
-            readOnly={false}
-            isEdit={true}
-            registerPreSubmitValidator={() => {}}
-          />
+          <ConnectorFields readOnly={false} isEdit={true} registerPreSubmitValidator={() => {}} />
         </ConnectorFormTestProvider>
       );
       fireEvent.click(getByTestId('link-gen-ai-token-dashboard'));
@@ -158,11 +134,7 @@
     it('connector validation succeeds when connector config is valid', async () => {
       const { getByTestId } = render(
         <ConnectorFormTestProvider connector={openAiConnector} onSubmit={onSubmit}>
-          <GenerativeAiConnectorFields
-            readOnly={false}
-            isEdit={false}
-            registerPreSubmitValidator={() => {}}
-          />
+          <ConnectorFields readOnly={false} isEdit={false} registerPreSubmitValidator={() => {}} />
         </ConnectorFormTestProvider>
       );
 
@@ -191,11 +163,7 @@
 
       const res = render(
         <ConnectorFormTestProvider connector={connector} onSubmit={onSubmit}>
-          <GenerativeAiConnectorFields
-            readOnly={false}
-            isEdit={false}
-            registerPreSubmitValidator={() => {}}
-          />
+          <ConnectorFields readOnly={false} isEdit={false} registerPreSubmitValidator={() => {}} />
         </ConnectorFormTestProvider>
       );
 
@@ -224,11 +192,7 @@
 
       const res = render(
         <ConnectorFormTestProvider connector={connector} onSubmit={onSubmit}>
-          <GenerativeAiConnectorFields
-            readOnly={false}
-            isEdit={false}
-            registerPreSubmitValidator={() => {}}
-          />
+          <ConnectorFields readOnly={false} isEdit={false} registerPreSubmitValidator={() => {}} />
         </ConnectorFormTestProvider>
       );
 
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/connector.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/connector.tsx b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/connector.tsx
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/connector.tsx
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/connector.tsx
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/connector.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/connector.tsx	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -19,8 +19,8 @@
 } from '@kbn/es-ui-shared-plugin/static/forms/hook_form_lib';
 import { useKibana } from '@kbn/triggers-actions-ui-plugin/public';
 import { fieldValidators } from '@kbn/es-ui-shared-plugin/static/forms/helpers';
+import { OpenAiProviderType } from '../../../common/open_ai/constants';
 import { useGetDashboard } from './use_get_dashboard';
-import { OpenAiProviderType } from '../../../common/gen_ai/constants';
 import * as i18n from './translations';
 import {
   azureAiConfig,
@@ -31,10 +31,7 @@
 } from './constants';
 const { emptyField } = fieldValidators;
 
-const GenerativeAiConnectorFields: React.FC<ActionConnectorFieldsProps> = ({
-  readOnly,
-  isEdit,
-}) => {
+const ConnectorFields: React.FC<ActionConnectorFieldsProps> = ({ readOnly, isEdit }) => {
   const { getFieldDefaultValue } = useFormContext();
   const [{ config, id, name }] = useFormData({
     watch: ['config.apiProvider'],
@@ -117,4 +114,4 @@
 };
 
 // eslint-disable-next-line import/no-default-export
-export { GenerativeAiConnectorFields as default };
+export { ConnectorFields as default };
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/constants.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/constants.tsx b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/constants.tsx
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/constants.tsx
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/constants.tsx
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/constants.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/constants.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -9,7 +9,7 @@
 import { ConfigFieldSchema, SecretsFieldSchema } from '@kbn/triggers-actions-ui-plugin/public';
 import { FormattedMessage } from '@kbn/i18n-react';
 import { EuiLink } from '@elastic/eui';
-import { DEFAULT_OPENAI_MODEL, OpenAiProviderType } from '../../../common/gen_ai/constants';
+import { DEFAULT_OPENAI_MODEL, OpenAiProviderType } from '../../../common/open_ai/constants';
 import * as i18n from './translations';
 
 export const DEFAULT_URL = 'https://api.openai.com/v1/chat/completions' as const;
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/index.ts b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/index.ts
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/index.ts
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/index.ts
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/index.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/index.ts	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -5,4 +5,4 @@
  * 2.0.
  */
 
-export { getConnectorType as getGenerativeAiConnectorType } from './gen_ai';
+export { getConnectorType as getOpenAIConnectorType } from './open_ai';
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/gen_ai.test.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/gen_ai.test.tsx b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/open_ai.test.tsx
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/gen_ai.test.tsx
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/open_ai.test.tsx
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/gen_ai.test.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/open_ai.test.tsx	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -9,7 +9,7 @@
 import { registerConnectorTypes } from '..';
 import type { ActionTypeModel } from '@kbn/triggers-actions-ui-plugin/public/types';
 import { registrationServicesMock } from '../../mocks';
-import { SUB_ACTION } from '../../../common/gen_ai/constants';
+import { SUB_ACTION } from '../../../common/open_ai/constants';
 
 const ACTION_TYPE_ID = '.gen-ai';
 let actionTypeModel: ActionTypeModel;
@@ -26,12 +26,12 @@
 describe('actionTypeRegistry.get() works', () => {
   test('connector type static data is as expected', () => {
     expect(actionTypeModel.id).toEqual(ACTION_TYPE_ID);
-    expect(actionTypeModel.selectMessage).toBe('Send a request to generative AI systems.');
+    expect(actionTypeModel.selectMessage).toBe('Send a request to OpenAI systems.');
     expect(actionTypeModel.actionTypeTitle).toBe('OpenAI');
   });
 });
 
-describe('gen ai action params validation', () => {
+describe('OpenAI action params validation', () => {
   test('action params validation succeeds when action params is valid', async () => {
     const actionParams = {
       subAction: SUB_ACTION.RUN,
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/gen_ai.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/gen_ai.tsx b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/open_ai.tsx
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/gen_ai.tsx
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/open_ai.tsx
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/gen_ai.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/open_ai.tsx	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -8,24 +8,24 @@
 import { lazy } from 'react';
 import { i18n } from '@kbn/i18n';
 import type { GenericValidationResult } from '@kbn/triggers-actions-ui-plugin/public/types';
-import { SUB_ACTION } from '../../../common/gen_ai/constants';
-import { GEN_AI_CONNECTOR_ID, OPEN_AI_TITLE } from '../../../common/gen_ai/constants';
-import { GenerativeAiActionParams, GenerativeAiConnector } from './types';
+import { SUB_ACTION } from '../../../common/open_ai/constants';
+import { OPEN_AI_CONNECTOR_ID, OPEN_AI_TITLE } from '../../../common/open_ai/constants';
+import { ActionParams, OpenAIConnector } from './types';
 
 interface ValidationErrors {
   subAction: string[];
   body: string[];
 }
-export function getConnectorType(): GenerativeAiConnector {
+export function getConnectorType(): OpenAIConnector {
   return {
-    id: GEN_AI_CONNECTOR_ID,
+    id: OPEN_AI_CONNECTOR_ID,
     iconClass: lazy(() => import('./logo')),
     selectMessage: i18n.translate('xpack.stackConnectors.components.genAi.selectMessageText', {
-      defaultMessage: 'Send a request to generative AI systems.',
+      defaultMessage: 'Send a request to OpenAI systems.',
     }),
     actionTypeTitle: OPEN_AI_TITLE,
     validateParams: async (
-      actionParams: GenerativeAiActionParams
+      actionParams: ActionParams
     ): Promise<GenericValidationResult<ValidationErrors>> => {
       const { subAction, subActionParams } = actionParams;
       const translations = await import('./translations');
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/params.test.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/params.test.tsx b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/params.test.tsx
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/params.test.tsx
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/params.test.tsx
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/params.test.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/params.test.tsx	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -7,9 +7,9 @@
 
 import React from 'react';
 import { fireEvent, render } from '@testing-library/react';
-import GenerativeAiParamsFields from './params';
+import ParamsFields from './params';
 import { MockCodeEditor } from '@kbn/triggers-actions-ui-plugin/public/application/code_editor.mock';
-import { OpenAiProviderType, SUB_ACTION } from '../../../common/gen_ai/constants';
+import { OpenAiProviderType, SUB_ACTION } from '../../../common/open_ai/constants';
 import { DEFAULT_BODY, DEFAULT_BODY_AZURE, DEFAULT_URL } from './constants';
 
 const kibanaReactPath = '../../../../../../src/plugins/kibana_react/public';
@@ -34,7 +34,7 @@
 describe('Gen AI Params Fields renders', () => {
   test('all params fields are rendered', () => {
     const { getByTestId } = render(
-      <GenerativeAiParamsFields
+      <ParamsFields
         actionParams={{
           subAction: SUB_ACTION.RUN,
           subActionParams: { body: '{"message": "test"}' },
@@ -67,14 +67,14 @@
         isPreconfigured: false,
         isSystemAction: false as const,
         isDeprecated: false,
-        name: 'My GenAI Connector',
+        name: 'My OpenAI Connector',
         config: {
           apiProvider,
           apiUrl: DEFAULT_URL,
         },
       };
       render(
-        <GenerativeAiParamsFields
+        <ParamsFields
           actionParams={actionParams}
           actionConnector={actionConnector}
           editAction={editAction}
@@ -104,7 +104,7 @@
     const editAction = jest.fn();
     const errors = {};
     render(
-      <GenerativeAiParamsFields
+      <ParamsFields
         actionParams={actionParams}
         editAction={editAction}
         index={0}
@@ -120,7 +120,7 @@
     const editAction = jest.fn();
     const errors = {};
     const { getByTestId } = render(
-      <GenerativeAiParamsFields
+      <ParamsFields
         actionParams={{
           subAction: SUB_ACTION.RUN,
           subActionParams: {
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/params.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/params.tsx b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/params.tsx
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/params.tsx
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/params.tsx
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/params.tsx	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/params.tsx	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -12,13 +12,11 @@
   ActionConnectorMode,
   JsonEditorWithMessageVariables,
 } from '@kbn/triggers-actions-ui-plugin/public';
+import { OpenAiProviderType, SUB_ACTION } from '../../../common/open_ai/constants';
 import { DEFAULT_BODY, DEFAULT_BODY_AZURE } from './constants';
-import { OpenAiProviderType, SUB_ACTION } from '../../../common/gen_ai/constants';
-import { GenerativeAiActionConnector, GenerativeAiActionParams } from './types';
+import { GenerativeAiActionConnector, ActionParams } from './types';
 
-const GenerativeAiParamsFields: React.FunctionComponent<
-  ActionParamsProps<GenerativeAiActionParams>
-> = ({
+const ParamsFields: React.FunctionComponent<ActionParamsProps<ActionParams>> = ({
   actionConnector,
   actionParams,
   editAction,
@@ -55,7 +53,7 @@
   }, [typedActionConnector?.config?.apiProvider, editAction, index, subActionParams]);
 
   const editSubActionParams = useCallback(
-    (params: GenerativeAiActionParams['subActionParams']) => {
+    (params: ActionParams['subActionParams']) => {
       editAction('subActionParams', { ...subActionParams, ...params }, index);
     },
     [editAction, index, subActionParams]
@@ -87,4 +85,4 @@
 };
 
 // eslint-disable-next-line import/no-default-export
-export { GenerativeAiParamsFields as default };
+export { ParamsFields as default };
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/translations.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/translations.ts b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/translations.ts
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/translations.ts
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/translations.ts
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/translations.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/translations.ts	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -25,14 +25,6 @@
   }
 );
 
-export const DEFAULT_MODEL_TOOLTIP_CONTENT = i18n.translate(
-  'xpack.stackConnectors.components.genAi.defaultModelTooltipContent',
-  {
-    defaultMessage:
-      'The model can be set on a per request basis by including a "model" parameter in the request body. If no model is provided, the fallback will be the default model.',
-  }
-);
-
 export const API_PROVIDER_LABEL = i18n.translate(
   'xpack.stackConnectors.components.genAi.apiProviderLabel',
   {
@@ -105,6 +97,6 @@
 export const GET_DASHBOARD_API_ERROR = i18n.translate(
   'xpack.stackConnectors.components.genAi.error.dashboardApiError',
   {
-    defaultMessage: 'Error finding Generative AI Token Usage Dashboard.',
+    defaultMessage: 'Error finding OpenAI Token Usage Dashboard.',
   }
 );
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/types.ts b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/types.ts
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/types.ts
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/types.ts
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/types.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/types.ts	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -7,29 +7,22 @@
 
 import { ActionTypeModel as ConnectorTypeModel } from '@kbn/triggers-actions-ui-plugin/public';
 import { UserConfiguredActionConnector } from '@kbn/triggers-actions-ui-plugin/public/types';
-import { OpenAiProviderType, SUB_ACTION } from '../../../common/gen_ai/constants';
-import { RunActionParams } from '../../../common/gen_ai/types';
+import { OpenAiProviderType, SUB_ACTION } from '../../../common/open_ai/constants';
+import { RunActionParams } from '../../../common/open_ai/types';
 
-export interface GenerativeAiActionParams {
+export interface ActionParams {
   subAction: SUB_ACTION.RUN | SUB_ACTION.TEST;
   subActionParams: RunActionParams;
 }
 
-export interface GenerativeAiConfig {
+export interface Config {
   apiProvider: OpenAiProviderType;
   apiUrl: string;
 }
 
-export interface GenerativeAiSecrets {
+export interface Secrets {
   apiKey: string;
 }
 
-export type GenerativeAiConnector = ConnectorTypeModel<
-  GenerativeAiConfig,
-  GenerativeAiSecrets,
-  GenerativeAiActionParams
->;
-export type GenerativeAiActionConnector = UserConfiguredActionConnector<
-  GenerativeAiConfig,
-  GenerativeAiSecrets
->;
+export type OpenAIConnector = ConnectorTypeModel<Config, Secrets, ActionParams>;
+export type GenerativeAiActionConnector = UserConfiguredActionConnector<Config, Secrets>;
Index: x-pack/plugins/stack_connectors/public/connector_types/gen_ai/use_get_dashboard.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/use_get_dashboard.test.ts b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/use_get_dashboard.test.ts
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/use_get_dashboard.test.ts
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/use_get_dashboard.test.ts
--- a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/use_get_dashboard.test.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/use_get_dashboard.test.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -123,7 +123,7 @@
     await waitForNextUpdate();
     expect(result.current.isLoading).toBe(false);
     expect(mockToasts.addDanger).toHaveBeenCalledWith({
-      title: 'Error finding Generative AI Token Usage Dashboard.',
+      title: 'Error finding OpenAI Token Usage Dashboard.',
       text: 'Error fetching dashboard',
     });
   });
Index: x-pack/plugins/stack_connectors/server/connector_types/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/index.ts b/x-pack/plugins/stack_connectors/server/connector_types/index.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/index.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/index.ts	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
@@ -17,7 +17,7 @@
 import { getActionType as getTorqConnectorType } from './torq';
 import { getConnectorType as getEmailConnectorType } from './email';
 import { getConnectorType as getIndexConnectorType } from './es_index';
-import { getConnectorType as getGenerativeAiConnectorType } from './gen_ai';
+import { getConnectorType as getOpenAIConnectorType } from './open_ai';
 import { getConnectorType as getBedrockConnectorType } from './bedrock';
 import { getConnectorType as getPagerDutyConnectorType } from './pagerduty';
 import { getConnectorType as getSwimlaneConnectorType } from './swimlane';
@@ -101,7 +101,7 @@
 
   actions.registerSubActionConnectorType(getOpsgenieConnectorType());
   actions.registerSubActionConnectorType(getTinesConnectorType());
-  actions.registerSubActionConnectorType(getGenerativeAiConnectorType());
+  actions.registerSubActionConnectorType(getOpenAIConnectorType());
   actions.registerSubActionConnectorType(getBedrockConnectorType());
   actions.registerSubActionConnectorType(getD3SecurityConnectorType());
 }
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/dashboard.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/dashboard.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/dashboard.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/dashboard.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/dashboard.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/dashboard.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/dashboard.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -9,7 +9,7 @@
 import { v4 as uuidv4 } from 'uuid';
 import { SavedObject } from '@kbn/core-saved-objects-common/src/server_types';
 
-export const dashboardTitle = `Generative AI Token Usage`;
+export const dashboardTitle = `OpenAI Token Usage`;
 
 export const getDashboard = (dashboardId: string): SavedObject<DashboardAttributes> => {
   const ids: Record<string, string> = {
@@ -125,7 +125,7 @@
                     yLeft: 0,
                     yRight: 0,
                   },
-                  yTitle: 'Sum of GenAi Completion + Prompt Tokens',
+                  yTitle: 'Sum of OpenAI Completion + Prompt Tokens',
                   axisTitlesVisibilitySettings: {
                     x: true,
                     yLeft: true,
@@ -143,7 +143,7 @@
                       '475e8ca0-e78e-454a-8597-a5492f70dce3': {
                         columns: {
                           '0f9814ec-0964-4efa-93a3-c7f173df2483': {
-                            label: 'GenAI Completion Tokens',
+                            label: 'OpenAI Completion Tokens',
                             dataType: 'number',
                             operationType: 'sum',
                             sourceField: 'kibana.action.execution.gen_ai.usage.completion_tokens',
@@ -177,7 +177,7 @@
                               includeIsRegex: false,
                               excludeIsRegex: false,
                               orderAgg: {
-                                label: 'Sum of kibana.action.execution.gen_ai.usage.total_tokens',
+                                label: 'Sum of kibana.action.execution.open_ai.usage.total_tokens',
                                 dataType: 'number',
                                 operationType: 'sum',
                                 sourceField: 'kibana.action.execution.gen_ai.usage.total_tokens',
@@ -192,7 +192,7 @@
                             customLabel: true,
                           },
                           'b0e390e4-d754-4eb4-9fcc-4347dadda394': {
-                            label: 'GenAi Prompt Tokens',
+                            label: 'OpenAI Prompt Tokens',
                             dataType: 'number',
                             operationType: 'sum',
                             sourceField: 'kibana.action.execution.gen_ai.usage.prompt_tokens',
@@ -334,7 +334,7 @@
                             customLabel: true,
                           },
                           'b0e390e4-d754-4eb4-9fcc-4347dadda394': {
-                            label: 'Sum of GenAI Total Tokens',
+                            label: 'Sum of OpenAI Total Tokens',
                             dataType: 'number',
                             operationType: 'sum',
                             sourceField: 'kibana.action.execution.gen_ai.usage.total_tokens',
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/index.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/index.test.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/index.test.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/index.test.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/index.test.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/index.test.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/index.test.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -9,9 +9,9 @@
 import { ActionsConfigurationUtilities } from '@kbn/actions-plugin/server/actions_config';
 import axios from 'axios';
 import { configValidator, getConnectorType } from '.';
-import { Config, Secrets } from '../../../common/gen_ai/types';
+import { Config, Secrets } from '../../../common/open_ai/types';
 import { SubActionConnectorType } from '@kbn/actions-plugin/server/sub_action_framework/types';
-import { DEFAULT_OPENAI_MODEL, OpenAiProviderType } from '../../../common/gen_ai/constants';
+import { DEFAULT_OPENAI_MODEL, OpenAiProviderType } from '../../../common/open_ai/constants';
 
 jest.mock('axios');
 jest.mock('@kbn/actions-plugin/server/lib/axios_utils', () => {
@@ -30,12 +30,12 @@
 let connectorType: SubActionConnectorType<Config, Secrets>;
 let configurationUtilities: jest.Mocked<ActionsConfigurationUtilities>;
 
-describe('Generative AI Connector', () => {
+describe('OpenAI Connector', () => {
   beforeEach(() => {
     configurationUtilities = actionsConfigMock.create();
     connectorType = getConnectorType();
   });
-  test('exposes the connector as `Generative AI` with id `.gen-ai`', () => {
+  test('exposes the connector as `OpenAI` with id `.gen-ai`', () => {
     expect(connectorType.id).toEqual('.gen-ai');
     expect(connectorType.name).toEqual('OpenAI');
   });
@@ -59,7 +59,7 @@
       expect(() => {
         configValidator(config, { configurationUtilities });
       }).toThrowErrorMatchingInlineSnapshot(
-        '"Error configuring Generative AI action: Error: URL Error: Invalid URL: example.com/do-something"'
+        '"Error configuring OpenAI action: Error: URL Error: Invalid URL: example.com/do-something"'
       );
     });
 
@@ -72,7 +72,7 @@
       expect(() => {
         configValidator(config, { configurationUtilities });
       }).toThrowErrorMatchingInlineSnapshot(
-        '"Error configuring Generative AI action: Error: API Provider is not supported"'
+        '"Error configuring OpenAI action: Error: API Provider is not supported"'
       );
     });
 
@@ -85,7 +85,7 @@
       expect(() => {
         configValidator(config, { configurationUtilities });
       }).toThrowErrorMatchingInlineSnapshot(
-        '"Error configuring Generative AI action: Error: API Provider is not supported: bad-one"'
+        '"Error configuring OpenAI action: Error: API Provider is not supported: bad-one"'
       );
     });
 
@@ -106,7 +106,7 @@
       expect(() => {
         configValidator(config, { configurationUtilities: configUtils });
       }).toThrowErrorMatchingInlineSnapshot(
-        `"Error configuring Generative AI action: Error: error validating url: target url is not present in allowedHosts"`
+        `"Error configuring OpenAI action: Error: error validating url: target url is not present in allowedHosts"`
       );
     });
   });
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/index.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/index.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/index.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/index.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/index.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/index.ts	(revision 71d2b0ceabdf7a6dbcfec328c0d4c6b29a2624dd)
@@ -10,30 +10,30 @@
   SubActionConnectorType,
   ValidatorType,
 } from '@kbn/actions-plugin/server/sub_action_framework/types';
-import { GeneralConnectorFeatureId } from '@kbn/actions-plugin/common';
+import { GenerativeAIConnectorFeatureId } from '@kbn/actions-plugin/common';
 import { urlAllowListValidator } from '@kbn/actions-plugin/server';
 import { ValidatorServices } from '@kbn/actions-plugin/server/types';
 import { assertURL } from '@kbn/actions-plugin/server/sub_action_framework/helpers/validators';
 import {
-  GEN_AI_CONNECTOR_ID,
+  OPEN_AI_CONNECTOR_ID,
   OPEN_AI_TITLE,
   OpenAiProviderType,
-} from '../../../common/gen_ai/constants';
-import { ConfigSchema, SecretsSchema } from '../../../common/gen_ai/schema';
-import { Config, Secrets } from '../../../common/gen_ai/types';
-import { GenAiConnector } from './gen_ai';
+} from '../../../common/open_ai/constants';
+import { ConfigSchema, SecretsSchema } from '../../../common/open_ai/schema';
+import { Config, Secrets } from '../../../common/open_ai/types';
+import { OpenAIConnector } from './open_ai';
 import { renderParameterTemplates } from './render';
 
 export const getConnectorType = (): SubActionConnectorType<Config, Secrets> => ({
-  id: GEN_AI_CONNECTOR_ID,
+  id: OPEN_AI_CONNECTOR_ID,
   name: OPEN_AI_TITLE,
-  Service: GenAiConnector,
+  Service: OpenAIConnector,
   schema: {
     config: ConfigSchema,
     secrets: SecretsSchema,
   },
   validators: [{ type: ValidatorType.CONFIG, validator: configValidator }],
-  supportedFeatureIds: [GeneralConnectorFeatureId],
+  supportedFeatureIds: [GenerativeAIConnectorFeatureId],
   minimumLicenseRequired: 'enterprise' as const,
   renderParameterTemplates,
 });
@@ -57,7 +57,7 @@
   } catch (err) {
     throw new Error(
       i18n.translate('xpack.stackConnectors.genAi.configurationErrorApiProvider', {
-        defaultMessage: 'Error configuring Generative AI action: {err}',
+        defaultMessage: 'Error configuring OpenAI action: {err}',
         values: {
           err,
         },
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/azure_openai_utils.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/azure_openai_utils.test.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/azure_openai_utils.test.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/azure_openai_utils.test.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/azure_openai_utils.test.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/azure_openai_utils.test.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/azure_openai_utils.test.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -14,7 +14,7 @@
   AZURE_OPENAI_CHAT_URL,
   AZURE_OPENAI_COMPLETIONS_URL,
   AZURE_OPENAI_COMPLETIONS_EXTENSIONS_URL,
-} from '../../../../common/gen_ai/constants';
+} from '../../../../common/open_ai/constants';
 
 describe('Azure Open AI Utils', () => {
   const chatUrl =
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/azure_openai_utils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/azure_openai_utils.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/azure_openai_utils.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/azure_openai_utils.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/azure_openai_utils.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/azure_openai_utils.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/azure_openai_utils.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -9,7 +9,7 @@
   AZURE_OPENAI_CHAT_URL,
   AZURE_OPENAI_COMPLETIONS_URL,
   AZURE_OPENAI_COMPLETIONS_EXTENSIONS_URL,
-} from '../../../../common/gen_ai/constants';
+} from '../../../../common/open_ai/constants';
 
 const APIS_ALLOWING_STREAMING = new Set<string>([
   AZURE_OPENAI_CHAT_URL,
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/openai_utils.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/openai_utils.test.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/openai_utils.test.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/openai_utils.test.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/openai_utils.test.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/openai_utils.test.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/openai_utils.test.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -10,7 +10,7 @@
   DEFAULT_OPENAI_MODEL,
   OPENAI_CHAT_URL,
   OPENAI_LEGACY_COMPLETION_URL,
-} from '../../../../common/gen_ai/constants';
+} from '../../../../common/open_ai/constants';
 
 describe('Open AI Utils', () => {
   describe('sanitizeRequest', () => {
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/openai_utils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/openai_utils.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/openai_utils.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/openai_utils.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/openai_utils.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/openai_utils.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/openai_utils.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -5,7 +5,10 @@
  * 2.0.
  */
 
-import { OPENAI_CHAT_URL, OPENAI_LEGACY_COMPLETION_URL } from '../../../../common/gen_ai/constants';
+import {
+  OPENAI_CHAT_URL,
+  OPENAI_LEGACY_COMPLETION_URL,
+} from '../../../../common/open_ai/constants';
 
 const APIS_ALLOWING_STREAMING = new Set<string>([OPENAI_CHAT_URL, OPENAI_LEGACY_COMPLETION_URL]);
 
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/utils.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/utils.test.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/utils.test.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/utils.test.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/utils.test.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/utils.test.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/utils.test.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -10,7 +10,7 @@
   DEFAULT_OPENAI_MODEL,
   OpenAiProviderType,
   OPENAI_CHAT_URL,
-} from '../../../../common/gen_ai/constants';
+} from '../../../../common/open_ai/constants';
 import {
   sanitizeRequest as openAiSanitizeRequest,
   getRequestWithStreamOption as openAiGetRequestWithStreamOption,
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/utils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/utils.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/utils.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/utils.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/utils.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/lib/utils.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/lib/utils.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -7,7 +7,7 @@
 
 import { AxiosResponse, ResponseType } from 'axios';
 import { IncomingMessage } from 'http';
-import { OpenAiProviderType } from '../../../../common/gen_ai/constants';
+import { OpenAiProviderType } from '../../../../common/open_ai/constants';
 import {
   sanitizeRequest as openAiSanitizeRequest,
   getRequestWithStreamOption as openAiGetRequestWithStreamOption,
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/gen_ai.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/gen_ai.test.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/open_ai.test.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/gen_ai.test.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/open_ai.test.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/gen_ai.test.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/open_ai.test.ts	(revision 71d2b0ceabdf7a6dbcfec328c0d4c6b29a2624dd)
@@ -5,20 +5,20 @@
  * 2.0.
  */
 
-import { GenAiConnector } from './gen_ai';
+import { OpenAIConnector } from './open_ai';
 import { actionsConfigMock } from '@kbn/actions-plugin/server/actions_config.mock';
 import {
   DEFAULT_OPENAI_MODEL,
-  GEN_AI_CONNECTOR_ID,
+  OPEN_AI_CONNECTOR_ID,
   OpenAiProviderType,
-} from '../../../common/gen_ai/constants';
+} from '../../../common/open_ai/constants';
 import { loggingSystemMock } from '@kbn/core-logging-server-mocks';
 import { actionsMock } from '@kbn/actions-plugin/server/mocks';
-import { RunActionResponseSchema, StreamingResponseSchema } from '../../../common/gen_ai/schema';
+import { RunActionResponseSchema, StreamingResponseSchema } from '../../../common/open_ai/schema';
 import { initDashboard } from './create_dashboard';
 jest.mock('./create_dashboard');
 
-describe('GenAiConnector', () => {
+describe('OpenAIConnector', () => {
   let mockRequest: jest.Mock;
   let mockError: jest.Mock;
   const mockResponseString = 'Hello! How can I assist you today?';
@@ -46,9 +46,9 @@
   });
 
   describe('OpenAI', () => {
-    const connector = new GenAiConnector({
+    const connector = new OpenAIConnector({
       configurationUtilities: actionsConfigMock.create(),
-      connector: { id: '1', type: GEN_AI_CONNECTOR_ID },
+      connector: { id: '1', type: OPEN_AI_CONNECTOR_ID },
       config: {
         apiUrl: 'https://api.openai.com/v1/chat/completions',
         apiProvider: OpenAiProviderType.OpenAi,
@@ -285,9 +285,9 @@
   });
 
   describe('AzureAI', () => {
-    const connector = new GenAiConnector({
+    const connector = new OpenAIConnector({
       configurationUtilities: actionsConfigMock.create(),
-      connector: { id: '1', type: GEN_AI_CONNECTOR_ID },
+      connector: { id: '1', type: OPEN_AI_CONNECTOR_ID },
       config: {
         apiUrl:
           'https://My-test-resource-123.openai.azure.com/openai/deployments/NEW-DEPLOYMENT-321/chat/completions?api-version=2023-05-15',
@@ -455,9 +455,9 @@
   });
 
   describe('Token dashboard', () => {
-    const connector = new GenAiConnector({
+    const connector = new OpenAIConnector({
       configurationUtilities: actionsConfigMock.create(),
-      connector: { id: '1', type: GEN_AI_CONNECTOR_ID },
+      connector: { id: '1', type: OPEN_AI_CONNECTOR_ID },
       config: { apiUrl: 'https://example.com/api', apiProvider: OpenAiProviderType.AzureAi },
       secrets: { apiKey: '123' },
       logger: loggingSystemMock.createLogger(),
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/gen_ai.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/gen_ai.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/open_ai.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/gen_ai.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/open_ai.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/gen_ai.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/open_ai.ts	(revision 71d2b0ceabdf7a6dbcfec328c0d4c6b29a2624dd)
@@ -7,7 +7,6 @@
 
 import { ServiceParams, SubActionConnector } from '@kbn/actions-plugin/server';
 import type { AxiosError } from 'axios';
-import { initDashboard } from './create_dashboard';
 import {
   RunActionParamsSchema,
   RunActionResponseSchema,
@@ -15,21 +14,22 @@
   StreamActionParamsSchema,
   StreamingResponseSchema,
   InvokeAIActionParamsSchema,
-} from '../../../common/gen_ai/schema';
+} from '../../../common/open_ai/schema';
 import type {
   Config,
   Secrets,
   RunActionParams,
   RunActionResponse,
   StreamActionParams,
-} from '../../../common/gen_ai/types';
-import { SUB_ACTION } from '../../../common/gen_ai/constants';
+} from '../../../common/open_ai/types';
+import { SUB_ACTION } from '../../../common/open_ai/constants';
 import {
   DashboardActionParams,
   DashboardActionResponse,
   InvokeAIActionParams,
   InvokeAIActionResponse,
-} from '../../../common/gen_ai/types';
+} from '../../../common/open_ai/types';
+import { initDashboard } from './create_dashboard';
 import {
   getAxiosOptions,
   getRequestWithStreamOption,
@@ -37,7 +37,7 @@
   sanitizeRequest,
 } from './lib/utils';
 
-export class GenAiConnector extends SubActionConnector<Config, Secrets> {
+export class OpenAIConnector extends SubActionConnector<Config, Secrets> {
   private url;
   private provider;
   private key;
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/render.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/render.test.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/render.test.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/render.test.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/render.test.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/render.test.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/render.test.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -17,7 +17,7 @@
 
 const variables = { domain: 'm0zepcuuu2' };
 
-describe('GenAI - renderParameterTemplates', () => {
+describe('OpenAI - renderParameterTemplates', () => {
   it('should not render body on test action', () => {
     const testParams = { subAction: 'test', subActionParams: { body: 'test_json' } };
     const result = renderParameterTemplates(testParams, variables);
Index: x-pack/plugins/stack_connectors/server/connector_types/gen_ai/render.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/render.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/render.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/render.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/render.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/render.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/render.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -8,7 +8,7 @@
 import { ExecutorParams } from '@kbn/actions-plugin/server/sub_action_framework/types';
 import { renderMustacheString } from '@kbn/actions-plugin/server/lib/mustache_renderer';
 import { RenderParameterTemplates } from '@kbn/actions-plugin/server/types';
-import { SUB_ACTION } from '../../../common/gen_ai/constants';
+import { SUB_ACTION } from '../../../common/open_ai/constants';
 
 export const renderParameterTemplates: RenderParameterTemplates<ExecutorParams> = (
   params,
Index: x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/index.ts b/x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/index.ts
--- a/x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/index.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/index.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -39,7 +39,7 @@
     loadTestFile(require.resolve('./connector_types/xmatters'));
     loadTestFile(require.resolve('./connector_types/tines'));
     loadTestFile(require.resolve('./connector_types/torq'));
-    loadTestFile(require.resolve('./connector_types/gen_ai'));
+    loadTestFile(require.resolve('./connector_types/open_ai'));
     loadTestFile(require.resolve('./connector_types/d3security'));
     loadTestFile(require.resolve('./connector_types/bedrock'));
     loadTestFile(require.resolve('./create'));
Index: x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/generative_ai_connector.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/generative_ai_connector.ts b/x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/generative_ai_connector.ts
--- a/x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/generative_ai_connector.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/generative_ai_connector.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -21,13 +21,13 @@
     `"content": "You are a cyber security analyst using Elastic Security. I would like you to evaluate the event below and format your output neatly in markdown syntax. Add your description, an accuracy rating, and a threat rating."\n` +
     `}]`;
 
-  describe('generative ai connector', function () {
+  describe('OpenAI connector', function () {
     beforeEach(async () => {
       await pageObjects.common.navigateToApp('connectors');
       await pageObjects.header.waitUntilLoadingHasFinished();
     });
 
-    it('generative ai connector screenshots', async () => {
+    it('OpenAI connector screenshots', async () => {
       await pageObjects.common.navigateToApp('connectors');
       await pageObjects.header.waitUntilLoadingHasFinished();
       await actions.common.openNewConnectorForm('gen-ai');
Index: x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/xmatters_connector.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/xmatters_connector.ts b/x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/xmatters_connector.ts
--- a/x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/xmatters_connector.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/test/screenshot_creation/apps/response_ops_docs/stack_connectors/xmatters_connector.ts	(revision f26c1b78fba7b88efe9f13c938daf875d8512498)
@@ -20,7 +20,7 @@
       await pageObjects.header.waitUntilLoadingHasFinished();
     });
 
-    it('generative ai connector screenshots', async () => {
+    it('xmatters connector screenshots', async () => {
       await pageObjects.common.navigateToApp('connectors');
       await pageObjects.header.waitUntilLoadingHasFinished();
       await actions.common.openNewConnectorForm('xmatters');
Index: api_docs/actions.devdocs.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api_docs/actions.devdocs.json b/api_docs/actions.devdocs.json
--- a/api_docs/actions.devdocs.json	(revision 06445caf5021c473ab79d40f7975d7090b258a6f)
+++ b/api_docs/actions.devdocs.json	(revision e3e527832a3a049f165d93e018dfb58d86900674)
@@ -5273,10 +5273,10 @@
       },
       {
         "parentPluginId": "actions",
-        "id": "def-common.GeneralConnectorFeatureId",
+        "id": "def-common.GenerativeAIConnectorFeatureId",
         "type": "string",
         "tags": [],
-        "label": "GeneralConnectorFeatureId",
+        "label": "GenerativeAIConnectorFeatureId",
         "description": [],
         "signature": [
           "\"general\""
@@ -5613,10 +5613,10 @@
       },
       {
         "parentPluginId": "actions",
-        "id": "def-common.GeneralFeature",
+        "id": "def-common.GenerativeAIFeature",
         "type": "Object",
         "tags": [],
-        "label": "GeneralFeature",
+        "label": "GenerativeAIFeature",
         "description": [],
         "path": "x-pack/plugins/actions/common/connector_feature_config.ts",
         "deprecated": false,
@@ -5624,7 +5624,7 @@
         "children": [
           {
             "parentPluginId": "actions",
-            "id": "def-common.GeneralFeature.id",
+            "id": "def-common.GenerativeAIFeature.id",
             "type": "string",
             "tags": [],
             "label": "id",
@@ -5635,7 +5635,7 @@
           },
           {
             "parentPluginId": "actions",
-            "id": "def-common.GeneralFeature.name",
+            "id": "def-common.GenerativeAIFeature.name",
             "type": "string",
             "tags": [],
             "label": "name",
@@ -5646,7 +5646,7 @@
           },
           {
             "parentPluginId": "actions",
-            "id": "def-common.GeneralFeature.compatibility",
+            "id": "def-common.GenerativeAIFeature.compatibility",
             "type": "string",
             "tags": [],
             "label": "compatibility",
@@ -5769,4 +5769,4 @@
       }
     ]
   }
-}
\ No newline at end of file
+}
Index: x-pack/packages/kbn-elastic-assistant/impl/connectorland/use_load_action_types/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/connectorland/use_load_action_types/index.tsx b/x-pack/packages/kbn-elastic-assistant/impl/connectorland/use_load_action_types/index.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/connectorland/use_load_action_types/index.tsx	(revision 06445caf5021c473ab79d40f7975d7090b258a6f)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/connectorland/use_load_action_types/index.tsx	(revision e3e527832a3a049f165d93e018dfb58d86900674)
@@ -15,7 +15,7 @@
 import type { ActionType } from '@kbn/actions-plugin/common';
 import { HttpSetup } from '@kbn/core-http-browser';
 import { IToasts } from '@kbn/core-notifications-browser';
-import { GeneralConnectorFeatureId } from '@kbn/actions-plugin/common';
+import { GenerativeAIConnectorFeatureId } from '@kbn/actions-plugin/common';
 import * as i18n from '../translations';
 
 /**
@@ -37,7 +37,10 @@
     QUERY_KEY,
 
     async () => {
-      const queryResult = await loadActionTypes({ http, featureId: GeneralConnectorFeatureId });
+      const queryResult = await loadActionTypes({
+        http,
+        featureId: GenerativeAIConnectorFeatureId,
+      });
       const sortedData = queryResult.sort((a, b) => a.name.localeCompare(b.name));
 
       return sortedData;
Index: x-pack/plugins/actions/common/connector_feature_config.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/common/connector_feature_config.ts b/x-pack/plugins/actions/common/connector_feature_config.ts
--- a/x-pack/plugins/actions/common/connector_feature_config.ts	(revision 06445caf5021c473ab79d40f7975d7090b258a6f)
+++ b/x-pack/plugins/actions/common/connector_feature_config.ts	(revision e3e527832a3a049f165d93e018dfb58d86900674)
@@ -25,12 +25,12 @@
 export const CasesConnectorFeatureId = 'cases';
 export const UptimeConnectorFeatureId = 'uptime';
 export const SecurityConnectorFeatureId = 'siem';
-export const GeneralConnectorFeatureId = 'general';
+export const GenerativeAIConnectorFeatureId = 'generativeAI';
 
-const compatibilityGeneral = i18n.translate(
-  'xpack.actions.availableConnectorFeatures.compatibility.general',
+const compatibilityGenerativeAI = i18n.translate(
+  'xpack.actions.availableConnectorFeatures.compatibility.generativeAI',
   {
-    defaultMessage: 'General',
+    defaultMessage: 'Generative AI',
   }
 );
 
@@ -80,10 +80,10 @@
   compatibility: compatibilityAlertingRules,
 };
 
-export const GeneralFeature: ConnectorFeatureConfig = {
-  id: GeneralConnectorFeatureId,
-  name: compatibilityGeneral,
-  compatibility: compatibilityGeneral,
+export const GenerativeAIFeature: ConnectorFeatureConfig = {
+  id: GenerativeAIConnectorFeatureId,
+  name: compatibilityGenerativeAI,
+  compatibility: compatibilityGenerativeAI,
 };
 
 const AllAvailableConnectorFeatures = {
@@ -91,7 +91,7 @@
   [CasesConnectorFeature.id]: CasesConnectorFeature,
   [UptimeConnectorFeature.id]: UptimeConnectorFeature,
   [SecuritySolutionFeature.id]: SecuritySolutionFeature,
-  [GeneralFeature.id]: GeneralFeature,
+  [GenerativeAIFeature.id]: GenerativeAIFeature,
 };
 
 export function areValidFeatures(ids: string[]) {
Index: x-pack/plugins/actions/common/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/actions/common/types.ts b/x-pack/plugins/actions/common/types.ts
--- a/x-pack/plugins/actions/common/types.ts	(revision 06445caf5021c473ab79d40f7975d7090b258a6f)
+++ b/x-pack/plugins/actions/common/types.ts	(revision e3e527832a3a049f165d93e018dfb58d86900674)
@@ -12,7 +12,7 @@
   CasesConnectorFeatureId,
   UptimeConnectorFeatureId,
   SecurityConnectorFeatureId,
-  GeneralConnectorFeatureId,
+  GenerativeAIConnectorFeatureId,
 } from './connector_feature_config';
 export interface ActionType {
   id: string;
Index: x-pack/plugins/stack_connectors/server/connector_types/bedrock/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/bedrock/index.ts b/x-pack/plugins/stack_connectors/server/connector_types/bedrock/index.ts
--- a/x-pack/plugins/stack_connectors/server/connector_types/bedrock/index.ts	(revision 06445caf5021c473ab79d40f7975d7090b258a6f)
+++ b/x-pack/plugins/stack_connectors/server/connector_types/bedrock/index.ts	(revision e3e527832a3a049f165d93e018dfb58d86900674)
@@ -10,7 +10,7 @@
   SubActionConnectorType,
   ValidatorType,
 } from '@kbn/actions-plugin/server/sub_action_framework/types';
-import { GeneralConnectorFeatureId } from '@kbn/actions-plugin/common';
+import { GenerativeAIConnectorFeatureId } from '@kbn/actions-plugin/common';
 import { urlAllowListValidator } from '@kbn/actions-plugin/server';
 import { ValidatorServices } from '@kbn/actions-plugin/server/types';
 import { assertURL } from '@kbn/actions-plugin/server/sub_action_framework/helpers/validators';
@@ -29,7 +29,7 @@
     secrets: SecretsSchema,
   },
   validators: [{ type: ValidatorType.CONFIG, validator: configValidator }],
-  supportedFeatureIds: [GeneralConnectorFeatureId],
+  supportedFeatureIds: [GenerativeAIConnectorFeatureId],
   minimumLicenseRequired: 'enterprise' as const,
   renderParameterTemplates,
 });
Index: docs/management/action-types.asciidoc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/management/action-types.asciidoc b/docs/management/action-types.asciidoc
--- a/docs/management/action-types.asciidoc	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
+++ b/docs/management/action-types.asciidoc	(revision bc6c2a2dcb95ac781ee1ddcdb1cfeac0d882ee47)
@@ -35,7 +35,7 @@
 
 | Send a message to a Microsoft Teams channel.
 
-a| <<gen-ai-action-type,OpenAI>>
+a| <<openai-action-type,OpenAI>>
 
 | Send a request to OpenAI.
 
Index: docs/management/connectors/action-types/gen-ai.asciidoc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/management/connectors/action-types/gen-ai.asciidoc b/docs/management/connectors/action-types/openai.asciidoc
rename from docs/management/connectors/action-types/gen-ai.asciidoc
rename to docs/management/connectors/action-types/openai.asciidoc
--- a/docs/management/connectors/action-types/gen-ai.asciidoc	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/docs/management/connectors/action-types/openai.asciidoc	(revision bc6c2a2dcb95ac781ee1ddcdb1cfeac0d882ee47)
@@ -1,7 +1,7 @@
-[[gen-ai-action-type]]
-== Generative AI connector and action
+[[openai-action-type]]
+== OpenAI connector and action
 ++++
-<titleabbrev>Generative AI</titleabbrev>
+<titleabbrev>OpenAI</titleabbrev>
 ++++
 :frontmatter-description: Add a connector that can send requests to an OpenAI provider.
 :frontmatter-tags-products: [kibana] 
@@ -9,7 +9,7 @@
 :frontmatter-tags-user-goals: [configure]
 
 
-The Generative AI connector uses https://github.com/axios/axios[axios] to send a POST request to an OpenAI provider, either OpenAI or Azure OpenAI. The connector uses the <<execute-connector-api,run connector API>> to send the request.
+The OpenAI connector uses https://github.com/axios/axios[axios] to send a POST request to an OpenAI provider, either OpenAI or Azure OpenAI. The connector uses the <<execute-connector-api,run connector API>> to send the request.
 
 [float]
 [[define-gen-ai-ui]]
@@ -18,14 +18,14 @@
 You can create connectors in *{stack-manage-app} > {connectors-ui}*.  For example:
 
 [role="screenshot"]
-image::management/connectors/images/gen-ai-connector.png[Generative AI connector]
+image::management/connectors/images/gen-ai-connector.png[OpenAI connector]
 // NOTE: This is an autogenerated screenshot. Do not edit it directly.
 
 [float]
-[[gen-ai-connector-configuration]]
+[[openai-connector-configuration]]
 ==== Connector configuration
 
-Generative AI connectors have the following configuration properties:
+OpenAI connectors have the following configuration properties:
 
 Name::      The name of the connector.
 API Provider::   The OpenAI API provider, either OpenAI or Azure OpenAI.
@@ -40,10 +40,10 @@
 as you're creating or editing the connector in {kib}. For example:
 
 [role="screenshot"]
-image::management/connectors/images/gen-ai-params-test.png[Generative AI params test]
+image::management/connectors/images/gen-ai-params-test.png[OpenAI params test]
 // NOTE: This is an autogenerated screenshot. Do not edit it directly.
 
-The Generative AI actions have the following configuration properties.
+The OpenAI actions have the following configuration properties.
 
 Body::      A JSON payload sent to the OpenAI API URL. For example: 
 +
@@ -60,15 +60,15 @@
 }
 --
 [float]
-[[gen-ai-connector-networking-configuration]]
+[[openai-connector-networking-configuration]]
 === Connector networking configuration
 
 Use the <<action-settings, Action configuration settings>> to customize connector networking configurations, such as proxies, certificates, or TLS settings. You can set configurations that apply to all your connectors or use `xpack.actions.customHostSettings` to set per-host configurations.
 
 [float]
-[[gen-ai-connector-token-dashboard]]
+[[openai-connector-token-dashboard]]
 === Token usage dashboard
 
-Once you've created a Generative AI connector, you can monitor its token usage using the *Generative AI Token Usage* dashboard. Select the connector in *{stack-manage-app}* > *{connectors-ui}* to view its details, then click the *View OpenAI Usage Dashboard for "_<Name>_" Connector* link to open the dashboard.
+Once you've created a OpenAI connector, you can monitor its token usage using the *OpenAI Token Usage* dashboard. Select the connector in *{stack-manage-app}* > *{connectors-ui}* to view its details, then click the *View OpenAI Usage Dashboard for "_<Name>_" Connector* link to open the dashboard.
 
 NOTE: To view the dashboard, you need at least `read` and `view_index_metadata` privileges for the `.kibana-event-log-*` index and the `Read` feature privilege for {kib}. You can set up a role with these minimum privileges and assign it to non-admin users who need to view this dashboard.
Index: docs/management/connectors/index.asciidoc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/management/connectors/index.asciidoc b/docs/management/connectors/index.asciidoc
--- a/docs/management/connectors/index.asciidoc	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
+++ b/docs/management/connectors/index.asciidoc	(revision bc6c2a2dcb95ac781ee1ddcdb1cfeac0d882ee47)
@@ -1,7 +1,7 @@
 include::action-types/bedrock.asciidoc[leveloffset=+1]
 include::action-types/d3security.asciidoc[leveloffset=+1]
 include::action-types/email.asciidoc[leveloffset=+1]
-include::action-types/gen-ai.asciidoc[leveloffset=+1]
+include::action-types/openai.asciidoc[leveloffset=+1]
 include::action-types/resilient.asciidoc[leveloffset=+1]
 include::action-types/index.asciidoc[leveloffset=+1]
 include::action-types/jira.asciidoc[leveloffset=+1]
Index: x-pack/packages/kbn-elastic-assistant/impl/connectorland/connector_button/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/packages/kbn-elastic-assistant/impl/connectorland/connector_button/index.tsx b/x-pack/packages/kbn-elastic-assistant/impl/connectorland/connector_button/index.tsx
--- a/x-pack/packages/kbn-elastic-assistant/impl/connectorland/connector_button/index.tsx	(revision 9a59bf47d9b8beb788fe724dff7302514251ea7c)
+++ b/x-pack/packages/kbn-elastic-assistant/impl/connectorland/connector_button/index.tsx	(revision bc6c2a2dcb95ac781ee1ddcdb1cfeac0d882ee47)
@@ -8,7 +8,7 @@
 import React, { useCallback } from 'react';
 import { EuiCard, EuiFlexGroup, EuiFlexItem, EuiIcon } from '@elastic/eui';
 
-import { GenAiLogo } from '@kbn/stack-connectors-plugin/public/common';
+import { OpenAILogo } from '@kbn/stack-connectors-plugin/public/common';
 import * as i18n from '../translations';
 import { useAssistantContext } from '../../assistant_context';
 
@@ -41,7 +41,7 @@
           <EuiCard
             data-test-subj="connectorButton"
             layout="horizontal"
-            icon={<EuiIcon size="xl" type={GenAiLogo} />}
+            icon={<EuiIcon size="xl" type={OpenAILogo} />}
             title={title}
             description={description}
             onClick={assistantAvailability.hasConnectorsAllPrivilege ? onClick : undefined}
Index: x-pack/test/alerting_api_integration/common/plugins/actions_simulators/server/gen_ai_simulation.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/test/alerting_api_integration/common/plugins/actions_simulators/server/gen_ai_simulation.ts b/x-pack/test/alerting_api_integration/common/plugins/actions_simulators/server/open_ai_simulation.ts
rename from x-pack/test/alerting_api_integration/common/plugins/actions_simulators/server/gen_ai_simulation.ts
rename to x-pack/test/alerting_api_integration/common/plugins/actions_simulators/server/open_ai_simulation.ts
--- a/x-pack/test/alerting_api_integration/common/plugins/actions_simulators/server/gen_ai_simulation.ts	(revision bc6c2a2dcb95ac781ee1ddcdb1cfeac0d882ee47)
+++ b/x-pack/test/alerting_api_integration/common/plugins/actions_simulators/server/open_ai_simulation.ts	(revision 71d2b0ceabdf7a6dbcfec328c0d4c6b29a2624dd)
@@ -9,7 +9,7 @@
 
 import { ProxyArgs, Simulator } from './simulator';
 
-export class GenAiSimulator extends Simulator {
+export class OpenAISimulator extends Simulator {
   private readonly returnError: boolean;
 
   constructor({ returnError = false, proxy }: { returnError?: boolean; proxy?: ProxyArgs }) {
@@ -24,10 +24,10 @@
     data: Record<string, unknown>
   ) {
     if (this.returnError) {
-      return GenAiSimulator.sendErrorResponse(response);
+      return OpenAISimulator.sendErrorResponse(response);
     }
 
-    return GenAiSimulator.sendResponse(response);
+    return OpenAISimulator.sendResponse(response);
   }
 
   private static sendResponse(response: http.ServerResponse) {
Index: x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/connector_types/gen_ai.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/connector_types/gen_ai.ts b/x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/connector_types/open_ai.ts
rename from x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/connector_types/gen_ai.ts
rename to x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/connector_types/open_ai.ts
--- a/x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/connector_types/gen_ai.ts	(revision c6d7e9422865c74b79e11dd9f763f720b9b0cea8)
+++ b/x-pack/test/alerting_api_integration/security_and_spaces/group2/tests/actions/connector_types/open_ai.ts	(revision 71d2b0ceabdf7a6dbcfec328c0d4c6b29a2624dd)
@@ -8,9 +8,9 @@
 import expect from '@kbn/expect';
 
 import {
-  GenAiSimulator,
+  OpenAISimulator,
   genAiSuccessResponse,
-} from '@kbn/actions-simulators-plugin/server/gen_ai_simulation';
+} from '@kbn/actions-simulators-plugin/server/open_ai_simulation';
 import { FtrProviderContext } from '../../../../../common/ftr_provider_context';
 import { getUrlPrefix, ObjectRemover } from '../../../../../common/lib';
 
@@ -51,7 +51,7 @@
       objectRemover.removeAll();
     });
     describe('action creation', () => {
-      const simulator = new GenAiSimulator({
+      const simulator = new OpenAISimulator({
         returnError: false,
         proxy: {
           config: configService.get('kbnTestServer.serverArgs'),
@@ -189,7 +189,7 @@
               statusCode: 400,
               error: 'Bad Request',
               message:
-                'error validating action type config: Error configuring Generative AI action: Error: error validating url: target url "http://genAi.mynonexistent.com" is not added to the Kibana config xpack.actions.allowedHosts',
+                'error validating action type config: Error configuring OpenAI action: Error: error validating url: target url "http://genAi.mynonexistent.com" is not added to the Kibana config xpack.actions.allowedHosts',
             });
           });
       });
@@ -217,7 +217,7 @@
 
     describe('executor', () => {
       describe('validation', () => {
-        const simulator = new GenAiSimulator({
+        const simulator = new OpenAISimulator({
           proxy: {
             config: configService.get('kbnTestServer.serverArgs'),
           },
@@ -272,7 +272,7 @@
 
       describe('execution', () => {
         describe('successful response simulator', () => {
-          const simulator = new GenAiSimulator({
+          const simulator = new OpenAISimulator({
             proxy: {
               config: configService.get('kbnTestServer.serverArgs'),
             },
@@ -313,7 +313,7 @@
               data: genAiSuccessResponse,
             });
           });
-          describe('gen ai dashboard', () => {
+          describe('OpenAI dashboard', () => {
             const dashboardId = 'specific-dashboard-id-default';
 
             it('should not create a dashboard when user does not have kibana event log permissions', async () => {
@@ -377,7 +377,7 @@
           });
         });
         describe('non-default space simulator', () => {
-          const simulator = new GenAiSimulator({
+          const simulator = new OpenAISimulator({
             proxy: {
               config: configService.get('kbnTestServer.serverArgs'),
             },
@@ -428,7 +428,7 @@
         });
 
         describe('error response simulator', () => {
-          const simulator = new GenAiSimulator({
+          const simulator = new OpenAISimulator({
             returnError: true,
             proxy: {
               config: configService.get('kbnTestServer.serverArgs'),
diff --git a/x-pack/plugins/stack_connectors/common/gen_ai/schema.ts b/x-pack/plugins/stack_connectors/common/open_ai/schema.ts
rename from x-pack/plugins/stack_connectors/common/gen_ai/schema.ts
rename to x-pack/plugins/stack_connectors/common/open_ai/schema.ts
diff --git a/x-pack/plugins/stack_connectors/common/gen_ai/types.ts b/x-pack/plugins/stack_connectors/common/open_ai/types.ts
rename from x-pack/plugins/stack_connectors/common/gen_ai/types.ts
rename to x-pack/plugins/stack_connectors/common/open_ai/types.ts
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/logo.tsx b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/logo.tsx
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/logo.tsx
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/logo.tsx
diff --git a/x-pack/plugins/stack_connectors/public/connector_types/gen_ai/use_get_dashboard.ts b/x-pack/plugins/stack_connectors/public/connector_types/open_ai/use_get_dashboard.ts
rename from x-pack/plugins/stack_connectors/public/connector_types/gen_ai/use_get_dashboard.ts
rename to x-pack/plugins/stack_connectors/public/connector_types/open_ai/use_get_dashboard.ts
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/create_dashboard.test.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/create_dashboard.test.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/create_dashboard.test.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/create_dashboard.test.ts
diff --git a/x-pack/plugins/stack_connectors/server/connector_types/gen_ai/create_dashboard.ts b/x-pack/plugins/stack_connectors/server/connector_types/open_ai/create_dashboard.ts
rename from x-pack/plugins/stack_connectors/server/connector_types/gen_ai/create_dashboard.ts
rename to x-pack/plugins/stack_connectors/server/connector_types/open_ai/create_dashboard.ts
